/*
 *Copyright (c) 2009, Soar Technology, Inc.
 *All rights reserved.
 *
 *Redistribution and use in source and binary forms, with or without modification,   *are permitted provided that the following conditions are met:
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *  * Neither the name of Soar Technology, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY  *EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED   *WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.   *IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,   *INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT   *NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR   *PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    *WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)   *ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE    *POSSIBILITY OF SUCH *DAMAGE. 
 *
 * 
 */

/* Generated By:JavaCC: Do not edit this line. SoarParserConstants.java */
package com.soartech.soar.ide.core.model.ast;

public interface SoarParserConstants {

  int EOF = 0;
  int RARROW = 7;
  int SAME_TYPE = 8;
  int GEQUAL = 9;
  int LDISJUNCT = 10;
  int LEQUAL = 11;
  int NEQUAL = 12;
  int RDISJUNCT = 13;
  int AMPERSAND = 14;
  int ATSIGN = 15;
  int CARET = 16;
  int COMMA = 17;
  int EMARK = 18;
  int EQUAL = 19;
  int GREATER = 20;
  int HYPHEN = 21;
  int LBRACE = 22;
  int LESS = 23;
  int LPAREN = 24;
  int PERIOD = 25;
  int PLUS = 26;
  int QMARK = 27;
  int RBRACE = 28;
  int RPAREN = 29;
  int TILDE = 30;
  int LSQBRACET = 31;
  int RSQBRACET = 32;
  int QUOTE = 33;
  int PRODTYPE = 34;
  int VARIABLE = 35;
  int INTEGER_CONST = 36;
  int SYMBOLIC_CONST = 37;
  int FLOATING_POINT_CONST = 38;
  int EXPONENT = 39;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"-->\"",
    "\"<=>\"",
    "\">=\"",
    "\"<<\"",
    "\"<=\"",
    "\"<>\"",
    "\">>\"",
    "\"&\"",
    "\"@\"",
    "\"^\"",
    "\",\"",
    "\"!\"",
    "\"=\"",
    "\">\"",
    "\"-\"",
    "\"{\"",
    "\"<\"",
    "\"(\"",
    "\".\"",
    "\"+\"",
    "\"?\"",
    "\"}\"",
    "\")\"",
    "\"~\"",
    "\"[\"",
    "\"]\"",
    "\"\\\"\"",
    "<PRODTYPE>",
    "<VARIABLE>",
    "<INTEGER_CONST>",
    "<SYMBOLIC_CONST>",
    "<FLOATING_POINT_CONST>",
    "<EXPONENT>",
  };

}
