<manpages>
<manpage cat="fun" id="Access" title="Tcl_Access" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Access.3,v 1.9 2004/10/07 14:44:31 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Access" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Access</name>
<name>Tcl_Stat</name>
<desc>check file permissions and other attributes</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_Access</fun>(<m>path</m>, <m>mode</m>)

int
<fun>Tcl_Stat</fun>(<m>path</m>, <m>statPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>char</argtype>
<name name="path">*path</name>
<argmode>in</argmode>
<desc>Native name of the file to check the attributes of.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mode</name>
<argmode>in</argmode>
<desc>Mask consisting of one or more of R_OK, W_OK, X_OK and F_OK.  R_OK,
W_OK and X_OK request checking whether the file exists and  has  read,
write and  execute  permissions, respectively.  F_OK just requests
checking for the existence of the file.
</desc>
</argdef>
<argdef>
<argtype>struct stat</argtype>
<name name="statPtr">*statPtr</name>
<argmode>out</argmode>
<desc>The structure that contains the result.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>As of Tcl 8.4, the object-based APIs <fun>Tcl_FSAccess</fun> and
<fun>Tcl_FSStat</fun> should be used in preference to <fun>Tcl_Access</fun> and
<fun>Tcl_Stat</fun>, wherever possible.
</p>
<p>There are two reasons for calling <fun>Tcl_Access</fun> and <fun>Tcl_Stat</fun>
rather than calling system level functions <b>access</b> and <b>stat</b>
directly.  First, the Windows implementation of both functions fixes
some bugs in the system level calls.  Second, both <fun>Tcl_Access</fun>
and <fun>Tcl_Stat</fun> (as well as <b>Tcl_OpenFileChannelProc</b>) hook
into a linked list of functions.  This allows the possibility to reroute
file access to alternative media or access methods.
</p>
<p><fun>Tcl_Access</fun> checks whether the process would be allowed to read,
write or test for existence of the file (or other file system object)
whose name is pathname.   If pathname is a symbolic link on Unix,
then permissions of the file referred by this symbolic link are
tested.
</p>
<p>On success (all requested permissions granted), zero is returned.  On
error (at least one bit in mode asked for a permission that is denied,
or some other  error occurred), -1 is returned.
</p>
<p><fun>Tcl_Stat</fun> fills the stat structure <i>statPtr</i> with information
about the specified file.  You do not need any access rights to the
file to get this information but you need search rights to all
directories named in the path leading to the file.  The stat structure
includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
</p>
<p>If <i>path</i> exists, <fun>Tcl_Stat</fun> returns 0 and the stat structure
is filled with data.  Otherwise, -1 is returned, and no stat info is
given.

</p>
</section>
<keywords>
<keyword>stat</keyword>
<keyword>access</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="AddErrInfo" version="8.5" title="Tcl_AddErrorInfo">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: AddErrInfo.3,v 1.15 2005/09/13 21:23:51 dgp Exp $
 -->
<?TROFF.TH title="Tcl_AddErrorInfo" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetReturnOptions</name>
<name>Tcl_SetReturnOptions</name>
<name>Tcl_AddErrorInfo</name>
<name>Tcl_AddObjErrorInfo</name>
<name>Tcl_SetObjErrorCode</name>
<name>Tcl_SetErrorCode</name>
<name>Tcl_SetErrorCodeVA</name>
<name>Tcl_PosixError</name>
<name>Tcl_LogCommandInfo</name>
<desc>retrieve or record information about errors and other return options</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>
<new version="8.5">
Tcl_Obj *
<b>Tcl_GetReturnOptions</b>(<m>interp</m>, <m>code</m>)

int 
<b>Tcl_SetReturnOptions</b>(<m>interp</m>, <m>options</m>)
</new>
<fun>Tcl_AddErrorInfo</fun>(<m>interp</m>, <m>message</m>)

<fun>Tcl_AddObjErrorInfo</fun>(<m>interp</m>, <m>message</m>, <m>length</m>)

<fun>Tcl_SetObjErrorCode</fun>(<m>interp</m>, <m>errorObjPtr</m>)

<fun>Tcl_SetErrorCode</fun>(<m>interp</m>, <m>element</m>, <m>element</m>, <m>...</m><b>(char *) NULL</b>)

<fun>Tcl_SetErrorCodeVA</fun>(<m>interp</m>, <m>argList</m>)

const char *
<fun>Tcl_PosixError</fun>(<m>interp</m>)

void
<fun>Tcl_LogCommandInfo</fun>(<m>interp</m>, <m>script</m>, <m>command</m>, <m>commandLength</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to record information.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>code</name>
<argmode/>
<desc>The code returned from script evaluation.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="options">*options</name>
<argmode/>
<desc>A dictionary of return options.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="message">*message</name>
<argmode>in</argmode>
<desc>For <fun>Tcl_AddErrorInfo</fun>,
this is a conventional C string to append to the <b>-errorinfo</b> return option.
For <fun>Tcl_AddObjErrorInfo</fun>,
this points to the first byte of an array of <i>length</i> bytes
containing a string to append to the <b>-errorinfo</b> return option.
This byte array may contain embedded null bytes
unless <i>length</i> is negative.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>The number of bytes to copy from <i>message</i> when
appending to the <b>-errorinfo</b> return option.
If negative, all bytes up to the first null byte are used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="errorObjPtr">*errorObjPtr</name>
<argmode>in</argmode>
<desc>The <b>-errorcode</b> return option will be set to this value.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="element">*element</name>
<argmode>in</argmode>
<desc>String to record as one element of the <b>-errorcode</b> return option.
Last <i>element</i> argument must be NULL.
</desc>
</argdef>
<argdef>
<argtype>va_list</argtype>
<name>argList</name>
<argmode>in</argmode>
<desc>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="script">*script</name>
<argmode>in</argmode>
<desc>Pointer to first character in script containing command (must be &lt;= command)
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="command">*command</name>
<argmode>in</argmode>
<desc>Pointer to first character in command that generated the error
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>commandLength</name>
<argmode>in</argmode>
<desc>Number of bytes in command; -1 means use all bytes up to first null byte
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><?NEW 8.5?>The <b>Tcl_SetReturnOptions</b> and <b>Tcl_GetReturnOptions</b>
routines expose the same capabilities as the <cmd>return</cmd> and
<cmd>catch</cmd> commands, respectively, in the form of a C interface.
</p>
<p><b>Tcl_GetReturnOptions</b> retrieves the dictionary of return options
from an interpreter following a script evaluation.
Routines such as <fun>Tcl_Eval</fun> are called to evaluate a
script in an interpreter.  These routines return an integer
completion code.  These routines also leave in the interpreter
both a result and a dictionary of return options generated
by script evaluation.  Just as <fun>Tcl_GetObjResult</fun> retrieves
the result, <b>Tcl_GetReturnOptions</b> retrieves the dictionary
of return options.  The integer completion code should be
passed as the <i>code</i> argument to <b>Tcl_GetReturnOptions</b>
so that all required options will be present in the dictionary.
Specifically, a <i>code</i> value of <b>TCL_ERROR</b> will
ensure that entries for the keys <b>-errorinfo</b>,
<b>-errorcode</b>, and <b>-errorline</b> will appear in the
dictionary.  Also, the entries for the keys <b>-code</b>
and <b>-level</b> will be adjusted if necessary to agree
with the value of <i>code</i>.  The <b>(Tcl_Obj *)</b> returned
by <b>Tcl_GetReturnOptions</b> points to an unshared
<type>Tcl_Obj</type> with reference count of zero.  The dictionary
may be written to, either adding, removing, or overwriting
any entries in it, with the need to check for a shared object.
</p>
<p>A typical usage for <b>Tcl_GetReturnOptions</b> is to
retrieve the stack trace when script evaluation returns
<b>TCL_ERROR</b>, like so:
</p>
<example>
int code = Tcl_Eval(interp, script);
if (code == TCL_ERROR) {
    Tcl_Obj *options = Tcl_GetReturnOptions(interp, code);  
    Tcl_Obj *key = Tcl_NewStringObj("-errorinfo", -1);
    Tcl_Obj *stackTrace;
    Tcl_IncrRefCount(key);
    Tcl_DictObjGet(NULL, options, key, &amp;stackTrace);
    Tcl_DecrRefCount(key);
    /* Do something with stackTrace */
}
</example>
<p><b>Tcl_SetReturnOptions</b> sets the return options
of <i>interp</i> to be <i>options</i>.  If <i>options</i>
contains any invalid value for any key, TCL_ERROR will
be returned, and the interp result will be set to an
appropriate error message.  Otherwise, a completion code
in agreement with the <b>-code</b> and <b>-level</b>
keys in <i>options</i> will be returned.
</p>
<p>As an example, Tcl's <cmd>return</cmd> command itself could
be implemented in terms of <b>Tcl_SetReturnOptions</b>
like so:
</p>
<example>
if ((objc % 2) == 0) { /* explicit result argument */
    objc--;
    Tcl_SetObjResult(interp, objv[objc]);
}
return Tcl_SetReturnOptions(interp, Tcl_NewListObj(objc-1, objv+1));
</example>
<p>(It's not really implemented that way.  Internal access
privileges allow for a more efficient alternative that meshes
better with the bytecode compiler.)
</p>
<p>Note that a newly created <type>Tcl_Obj</type> may be passed
in as the <i>options</i> argument without the need to tend
to any reference counting.  This is analogous to
<fun>Tcl_SetObjResult</fun>.
</p>
<p>While <b>Tcl_SetReturnOptions</b> provides a general interface
to set any collection of return options, there are a handful
of return options that are very frequently used.  Most 
notably the <b>-errorinfo</b> and <b>-errorcode</b> return
options should be set properly when the command procedure
of a command returns <b>TCL_ERROR</b>.  Tcl provides several
simpler interfaces to more directly set these return options.
</p>
<?ENDNEW CONFUSED 8.5?>
<p>The <b>-errorinfo</b> option holds a stack trace of the
operations that were in progress when an error occurred,
and is intended to be human-readable.
The <b>-errorcode</b> option holds a list of items that
are intended to be machine-readable.
The first item in the <b>-errocode</b> value identifies the class of
error that occurred
(e.g. POSIX means an error occurred in a POSIX system call)
and additional elements hold additional pieces
of information that depend on the class.
See the tclvars manual entry for details on the various
formats for the <b>-errorcode</b> option used by
Tcl's built-in commands.
</p>
<p>The <b>-errorinfo</b> option value is gradually built up as an
error unwinds through the nested operations.
Each time an error code is returned to <fun>Tcl_Eval</fun>, or
any of the routines that performs script evaluation,
the procedure <fun>Tcl_AddErrorInfo</fun> is called to add
additional text to the <b>-errorinfo</b> value describing the
command that was being executed when the error occurred.
By the time the error has been passed all the way back
to the application, it will contain a complete trace
of the activity in progress when the error occurred.
</p>
<p>It is sometimes useful to add additional information to
the <b>-errorinfo</b> value beyond what can be supplied automatically
by the script evaluation routines.
<fun>Tcl_AddErrorInfo</fun> may be used for this purpose:
its <i>message</i> argument is an additional
string to be appended to the <b>-errorinfo</b> option.
For example, when an error arises during the <b cat="AMBIGUOUS ambiguous cmd">source</b> command,
the procedure <fun>Tcl_AddErrorInfo</fun> is called to
record the name of the file being processed and the
line number on which the error occurred.
Likewise, when an error arises during evaluation of a
Tcl procedures, the procedure name and line number
within the procedure are recorded, and so on.
The best time to call <fun>Tcl_AddErrorInfo</fun> is just after
a script evaluation routine has returned <b>TCL_ERROR</b>.
The value of the <b>-errorline</b> return option (retrieved
via a call to <b>Tcl_GetReturnOptions</b>) often makes up
a useful part of the <i>message</i> passed to <fun>Tcl_AddErrorInfo</fun>.
</p>
<p><fun>Tcl_AddObjErrorInfo</fun> is nearly identical
to <fun>Tcl_AddErrorInfo</fun>, except that it has an additional <i>length</i>
argument.  This allows the <i>message</i> string to contain 
embedded null bytes.  This is essentially never a good idea.
If the <i>message</i> needs to contain the null character <b>U+0000</b>,
Tcl's usual internal encoding rules should be used to avoid
the need for a null byte.  If the <fun>Tcl_AddObjErrorInfo</fun>
interface is used at all, it should be with a negative <i>length</i> value.
</p>
<p>The procedure <fun>Tcl_SetObjErrorCode</fun> is used to set the
<b>-errorcode</b> return option to the list object <i>errorObjPtr</i> 
built up by the caller. 
<fun>Tcl_SetObjErrorCode</fun> is typically invoked just 
before returning an error. If an error is
returned without calling <fun>Tcl_SetObjErrorCode</fun> or
<fun>Tcl_SetErrorCode</fun> the Tcl interpreter automatically sets
the <b>-errorcode</b> return option to <b>NONE</b>.
</p>
<p>The procedure <fun>Tcl_SetErrorCode</fun> is also used to set the
<b>-errorcode</b> return option. However, it takes one or more strings to
record instead of an object. Otherwise, it is similar to
<fun>Tcl_SetObjErrorCode</fun> in behavior.
</p>
<p><fun>Tcl_SetErrorCodeVA</fun> is the same as <fun>Tcl_SetErrorCode</fun> except that
instead of taking a variable number of arguments it takes an argument list.
</p>
<p><fun>Tcl_PosixError</fun>
sets the <b>-errorcode</b> variable after an error in a POSIX kernel call.
It reads the value of the <b>errno</b> C variable and calls
<fun>Tcl_SetErrorCode</fun> to set the <b>-errorcode</b> return
option in the <b>POSIX</b> format.
The caller must previously have called <fun>Tcl_SetErrno</fun> to set
<b>errno</b>; this is necessary on some platforms (e.g. Windows) where Tcl
is linked into an application as a shared library, or when the error
occurs in a dynamically loaded extension. See the manual entry for
<fun>Tcl_SetErrno</fun> for more information.
</p>
<p><fun>Tcl_PosixError</fun> returns a human-readable diagnostic message
for the error
(this is the same value that will appear as the third element
in the <b>-errorcode</b> value).
It may be convenient to include this string as part of the
error message returned to the application in
the interpreter's result.
</p>
<p><fun>Tcl_LogCommandInfo</fun> is invoked after an error occurs in an
interpreter.  It adds information about the command that was being
executed when the error occurred to the <b>-errorinfo</b> value, and
the line number stored internally in the interpreter is set.  
</p>
<p>In older releases of Tcl, there was no <b>Tcl_GetReturnOptions</b>
routine.  In its place, the global Tcl variables <b cat="variable">errorInfo</b>
and <b cat="variable">errorCode</b> were the only place to retrieve the error
information.  Much existing code written for older Tcl releases
still access this information via those global variables.
</p>
<p>It is important to realize that while reading from those
global variables remains a supported way to access these
return option values, it is important not to assume that
writing to those global variables will properly set the
corresponding return options.  It has long been emphasized
in this manual page that it is important to 
call the procedures described here rather than
setting <b cat="variable">errorInfo</b> or <b cat="variable">errorCode</b> directly with
<fun>Tcl_ObjSetVar2</fun>.
</p>
<p>If the procedure <fun>Tcl_ResetResult</fun> is called,
it clears all of the state of the interpreter associated with
script evaluation, including the entire return options dictionary.
In particular, the <b>-errorinfo</b> and <b>-errorcode</b> options
are reset.  
If an error had occurred, the <fun>Tcl_ResetResult</fun> call will
clear the error state to make it appear as if no error had
occurred after all.
The global variables <b cat="variable">errorInfo</b> and
<b cat="variable">errorCode</b> are not modified by <fun>Tcl_ResetResult</fun>
so they continue to hold a record of information about the
most recent error seen in an interpreter.

</p>
</section>
<seealso>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_Interp</ref>
<ref>Tcl_ResetResult</ref>
<ref>Tcl_SetErrno</ref>
</seealso>
<keywords>
<keyword>error</keyword>
<keyword>object</keyword>
<keyword>object result</keyword>
<keyword>stack</keyword>
<keyword>trace</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="AddOption" title="Tk_AddOption">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: AddOption.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_AddOption" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_AddOption</name>
<desc>Add an option to the option database</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

void
<fun>Tk_AddOption</fun>(<m>tkwin</m>, <m>name</m>, <m>value</m>, <m>priority</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Multi-element name of option.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="value">*value</name>
<argmode>in</argmode>
<desc>Value of option.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>priority</name>
<argmode>in</argmode>
<desc>Overall priority level to use for option.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is invoked to add an option to the database
associated with <i>tkwin</i>'s main window.  <i>Name</i>
contains the option being specified and consists of names and/or
classes separated by asterisks or dots, in the usual X format.
<i>Value</i> contains the text string to associate with <i>name</i>;
this value will be returned in calls to <fun>Tk_GetOption</fun>.
<i>Priority</i> specifies the priority of the value; when options are
queried using <fun>Tk_GetOption</fun>, the value with the highest priority
is returned.  <i>Priority</i> must be between 0 and <b>TK_MAX_PRIO</b>.  Some
common priority values are:
</p>
<dl>
<dle>
<dt>20</dt>
<dd>Used for default values hard-coded into widgets.
</dd>
</dle>
<dle>
<dt>40</dt>
<dd>Used for options specified in application-specific startup files.
</dd>
</dle>
<dle>
<dt>60</dt>
<dd>Used for options specified in user-specific defaults files, such as
<b>.Xdefaults</b>, resource databases loaded into the X server, or
user-specific startup files.
</dd>
</dle>
<dle>
<dt>80</dt>
<dd>Used for options specified interactively after the application starts
running.
</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>class</keyword>
<keyword>name</keyword>
<keyword>option</keyword>
<keyword>add</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="after" title="after" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: after.n,v 1.7 2004/11/20 00:17:31 dgp Exp $
 -->
<?TROFF.TH title="after" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>after</name>
<desc>Execute a command after a time delay</desc>
</namesection>
<synopsis>
<syntax>
<cmd>after</cmd> <m>ms</m>

<cmd>after</cmd> <m>ms</m> ?<m>script script script ...</m>?

<b>after cancel</b> <m>id</m>

<b>after cancel</b> <m>script script script ...</m>

<b>after idle</b> ?<m>script script script ...</m>?

<b>after info</b> ?<m>id</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is used to delay execution of the program or to execute
a command in background sometime in the future.  It has several forms,
depending on the first argument to the command:
</p>
<commandlist>
<commanddef>
<command><b>after</b> <m>ms</m></command>
<desc><i>Ms</i> must be an integer giving a time in milliseconds.
The command sleeps for <i>ms</i> milliseconds and then returns.
While the command is sleeping the application does not respond to
events.
</desc>
</commanddef>
<commanddef>
<command><b>after</b> <m>ms</m> ?<m>script script script ...</m>?</command>
<desc>In this form the command returns immediately, but it arranges
for a Tcl command to be executed <i>ms</i> milliseconds later as an
event handler.
The command will be executed exactly once, at the given time.
The delayed command is formed by concatenating all the <i>script</i>
arguments in the same fashion as the <cmd>concat</cmd> command.
The command will be executed at global level (outside the context
of any Tcl procedure).
If an error occurs while executing the delayed command then 
the background error will be reported by the command
registered with  <b>interp bgerror</b>.
The <cmd>after</cmd> command returns an identifier that can be used
to cancel the delayed command using <b>after cancel</b>.
</desc>
</commanddef>
<commanddef>
<command><b>after cancel</b> <m>id</m></command>
<desc>Cancels the execution of a delayed command that
was previously scheduled.
<i>Id</i> indicates which command should be canceled;  it must have
been the return value from a previous <cmd>after</cmd> command.
If the command given by <i>id</i> has already been executed then
the <b>after cancel</b> command has no effect.
</desc>
</commanddef>
<commanddef>
<command><b>after cancel</b> <m>script script ...</m></command>
<desc>This command also cancels the execution of a delayed command.
The <i>script</i> arguments are concatenated together with space
separators (just as in the <cmd>concat</cmd> command).
If there is a pending command that matches the string, it is
cancelled and will never be executed;  if no such command is
currently pending then the <b>after cancel</b> command has no effect.
</desc>
</commanddef>
<commanddef>
<command><b>after idle</b> <m>script</m> ?<m>script script ...</m>?</command>
<desc>Concatenates the <i>script</i> arguments together with space
separators (just as in the <cmd>concat</cmd> command), and arranges
for the resulting script to be evaluated later as an idle callback.
The script will be run exactly once, the next time the event
loop is entered and there are no events to process.
The command returns an identifier that can be used
to cancel the delayed command using <b>after cancel</b>.
If an error occurs while executing the script then the
background error will be reported by the command
registered with  <b>interp bgerror</b>.
</desc>
</commanddef>
<commanddef>
<command><b>after info</b> ?<m>id</m>?</command>
<desc>This command returns information about existing event handlers.
If no <i>id</i> argument is supplied, the command returns
a list of the identifiers for all existing
event handlers created by the <cmd>after</cmd> command for this
interpreter.
If <i>id</i> is supplied, it specifies an existing handler;
<i>id</i> must have been the return value from some previous call
to <cmd>after</cmd> and it must not have triggered yet or been cancelled.
In this case the command returns a list with two elements.
The first element of the list is the script associated
with <i>id</i>, and the second element is either
<b>idle</b> or <b>timer</b> to indicate what kind of event
handler it is.
</desc>
</commanddef>
</commandlist>
<p>The <cmd>after</cmd> <i>ms</i> and <b>after idle</b> forms of the command
assume that the application is event driven:  the delayed commands
will not be executed unless the application enters the event loop.
In applications that are not normally event-driven, such as
<b>tclsh</b>, the event loop can be entered with the <cmd>vwait</cmd>
and <cmd>update</cmd> commands.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>This defines a command to make Tcl do nothing at all for <i>N</i>
seconds:
</p>
<example>
proc sleep {N} {
   <cmd>after</cmd> [expr {int($N * 1000)}]
}
</example>
<p>This arranges for the command <i>wake_up</i> to be run in eight hours
(providing the event loop is active at that time):
</p>
<example>
<cmd>after</cmd> [expr {1000 * 60 * 60 * 8}] wake_up
</example>
<p>The following command can be used to do long-running calculations (as
represented here by <i>::my_calc::one_step</i>, which is assumed to
return a boolean indicating whether another step should be performed)
in a step-by-step fashion, though the calculation itself needs to be
arranged so it can work step-wise.  This technique is extra careful to
ensure that the event loop is not starved by the rescheduling of
processing steps (arranging for the next step to be done using an
already-triggered timer event only when the event queue has been
drained) and is useful when you want to ensure that a Tk GUI remains
responsive during a slow task.
</p>
<example>
proc doOneStep {} {
   if {[::my_calc::one_step]} {
      <b>after idle</b> [list <cmd>after</cmd> 0 doOneStep]
   }
}
doOneStep
</example>


</section>
<seealso>
<ref>concat(n)</ref>
<ref>interp(n)</ref>
<ref>update(n)</ref>
<ref>vwait(n)</ref>
</seealso>
<keywords>
<keyword>cancel</keyword>
<keyword>delay</keyword>
<keyword>idle callback</keyword>
<keyword>sleep</keyword>
<keyword>time</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Alloc" version="7.5" title="Tcl_Alloc">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Alloc.3,v 1.10 2006/06/05 10:04:33 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Alloc" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Alloc</name>
<name>Tcl_Free</name>
<name>Tcl_Realloc</name>
<name>Tcl_AttemptAlloc</name>
<name>Tcl_AttemptRealloc</name>
<name>ckalloc</name>
<name>ckfree</name>
<name>ckrealloc</name>
<name>attemptckalloc</name>
<name>attemptckrealloc</name>
<desc>allocate or free heap memory</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

char *
<fun>Tcl_Alloc</fun>(<m>size</m>)

void
<fun>Tcl_Free</fun>(<m>ptr</m>)

char *
<fun>Tcl_Realloc</fun>(<m>ptr</m>, <m>size</m>)

char *
<fun>Tcl_AttemptAlloc</fun>(<m>size</m>)

char *
<fun>Tcl_AttemptRealloc</fun>(<m>ptr</m>, <m>size</m>)

char *
<fun>ckalloc</fun>(<m>size</m>)

void
<fun>ckfree</fun>(<m>ptr</m>)

char *
<fun>ckrealloc</fun>(<m>ptr</m>, <m>size</m>)

char *
<fun>attemptckalloc</fun>(<m>size</m>)

char *
<fun>attemptckrealloc</fun>(<m>ptr</m>, <m>size</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>size</name>
<argmode>in</argmode>
<desc>Size in bytes of the memory block to allocate.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="ptr">*ptr</name>
<argmode>in</argmode>
<desc>Pointer to memory block to free or realloc.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures provide a platform and compiler independent interface
for memory allocation.  Programs that need to transfer ownership of
memory blocks between Tcl and other modules should use these routines
rather than the native <b>malloc()</b> and <b>free()</b> routines
provided by the C run-time library.
</p>
<p><fun>Tcl_Alloc</fun> returns a pointer to a block of at least <i>size</i>
bytes suitably aligned for any use.
</p>
<p><fun>Tcl_Free</fun> makes the space referred to by <i>ptr</i> available for
further allocation.
</p>
<p><fun>Tcl_Realloc</fun> changes the size of the block pointed to by
<i>ptr</i> to <i>size</i> bytes and returns a pointer to the new block.
The contents will be unchanged up to the lesser of the new and old
sizes.  The returned location may be different from <i>ptr</i>.  If
<i>ptr</i> is NULL, this is equivalent to calling <fun>Tcl_Alloc</fun> with
just the <i>size</i> argument.
</p>
<p><fun>Tcl_AttemptAlloc</fun> and <fun>Tcl_AttemptRealloc</fun> are identical in
function to <fun>Tcl_Alloc</fun> and <fun>Tcl_Realloc</fun>, except that
<fun>Tcl_AttemptAlloc</fun> and <fun>Tcl_AttemptRealloc</fun> will not cause the Tcl
interpreter to <b>panic</b> if the memory allocation fails.  If the
allocation fails, these functions will return NULL.  Note that on some
platforms, but not all, attempting to allocate a zero-sized block of
memory will also cause these functions to return NULL.
</p>
<p>The procedures <fun>ckalloc</fun>, <fun>ckfree</fun>, <fun>ckrealloc</fun>,
<fun>attemptckalloc</fun>, and <fun>attemptckrealloc</fun> are implemented
as macros.  Normally, they are synonyms for the corresponding
procedures documented on this page.  When Tcl and all modules
calling Tcl are compiled with <b>TCL_MEM_DEBUG</b> defined, however,
these macros are redefined to be special debugging versions
of these procedures.  To support Tcl's memory debugging within a
module, use the macros rather than direct calls to <fun>Tcl_Alloc</fun>, etc.

</p>
</section>
<keywords>
<keyword>alloc</keyword>
<keyword>allocation</keyword>
<keyword>free</keyword>
<keyword>malloc</keyword>
<keyword>memory</keyword>
<keyword>realloc</keyword>
<keyword>TCL_MEM_DEBUG</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="AllowExc" title="Tcl_AllowExceptions" version="7.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: AllowExc.3,v 1.5 2004/10/07 14:44:31 dkf Exp $
 -->
<?TROFF.TH title="Tcl_AllowExceptions" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_AllowExceptions</name>
<desc>allow all exceptions in next script evaluation</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_AllowExceptions</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which script will be evaluated.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>If a script is evaluated at top-level (i.e. no other scripts are
pending evaluation when the script is invoked), and if the script
terminates with a completion code other than <b>TCL_OK</b>, <b>TCL_ERROR</b>
or <b>TCL_RETURN</b>, then Tcl normally converts this into a <b>TCL_ERROR</b>
return with an appropriate message.  The particular script
evaluation procedures of Tcl that act in the manner are
<fun>Tcl_EvalObjEx</fun>, <fun>Tcl_EvalObjv</fun>, <fun>Tcl_Eval</fun>, <fun>Tcl_EvalEx</fun>,
<fun>Tcl_GlobalEval</fun>, <fun>Tcl_GlobalEvalObj</fun>, <fun>Tcl_VarEval</fun> and
<fun>Tcl_VarEvalVA</fun>. 
</p>
<p>However, if <fun>Tcl_AllowExceptions</fun> is invoked immediately before
calling one of those a procedures, then arbitrary completion
codes are permitted from the script, and they are returned without
modification.
This is useful in cases where the caller can deal with exceptions
such as <b>TCL_BREAK</b> or <b>TCL_CONTINUE</b> in a meaningful way.

</p>
</section>
<keywords>
<keyword>continue</keyword>
<keyword>break</keyword>
<keyword>exception</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="append" title="append">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: append.n,v 1.6 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="append" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>append</name>
<desc>Append to variable</desc>
</namesection>
<synopsis>
<syntax>
<cmd>append</cmd> <m>varName</m> ?<m>value value value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Append all of the <i>value</i> arguments to the current value
of variable <i>varName</i>.  If <i>varName</i> doesn't exist,
it is given a value equal to the concatenation of all the
<i>value</i> arguments.
The result of this command is the new value stored in variable
<i>varName</i>.
This command provides an efficient way to build up long
variables incrementally.
For example, ``<b>append a $b</b>'' is much more efficient than
``<b>set a $a$b</b>'' if <b>$a</b> is long.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Building a string of comma-separated numbers piecemeal using a loop.
</p>
<example>
set var 0
for {set i 1} {$i&lt;=10} {incr i} {
   <cmd>append</cmd> var "," $i
}
puts $var
# Prints 0,1,2,3,4,5,6,7,8,9,10
</example>


</section>
<seealso>
<ref>concat(n)</ref>
<ref>lappend(n)</ref>
</seealso>
<keywords>
<keyword>append</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="AppInit" version="7.0" title="Tcl_AppInit">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: AppInit.3,v 1.5 2006/07/30 16:18:59 jenglish Exp $
 -->
<?TROFF.TH title="Tcl_AppInit" section="3" date="7.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_AppInit</name>
<desc>perform application-specific initialization</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_AppInit</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter for the application.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_AppInit</fun> is a ``hook'' procedure that is invoked by
the main programs for Tcl applications such as <b>tclsh</b> and <b>wish</b>.
Its purpose is to allow new Tcl applications to be created without
modifying the main programs provided as part of Tcl and Tk.
To create a new application you write a new version of
<fun>Tcl_AppInit</fun> to replace the default version provided by Tcl,
then link your new <fun>Tcl_AppInit</fun> with the Tcl library.
</p>
<p><fun>Tcl_AppInit</fun> is invoked by <fun>Tcl_Main</fun> and <fun>Tk_Main</fun>
after their own initialization and before entering the main loop
to process commands.
Here are some examples of things that <fun>Tcl_AppInit</fun> might do:
</p>
<ol>
<li>Call initialization procedures for various packages used by
the application.
Each initialization procedure adds new commands to <i>interp</i>
for its package and performs other package-specific initialization.
</li>
<li>Process command-line arguments, which can be accessed from the
Tcl variables <b cat="variable">argv</b> and <b cat="variable">argv0</b> in <i>interp</i>.
</li>
<li>Invoke a startup script to initialize the application.
</li>
</ol>
<p><fun>Tcl_AppInit</fun> returns <b>TCL_OK</b> or <b>TCL_ERROR</b>.
If it returns <b>TCL_ERROR</b> then it must leave an error message in
for the interpreter's result;  otherwise the result is ignored.
</p>
<p>In addition to <fun>Tcl_AppInit</fun>, your application should also contain
a procedure <b>main</b> that calls <fun>Tcl_Main</fun> as follows:
</p>
<example>
Tcl_Main(argc, argv, Tcl_AppInit);
</example>
<p>The third argument to <fun>Tcl_Main</fun> gives the address of the
application-specific initialization procedure to invoke.
This means that you don't have to use the name <fun>Tcl_AppInit</fun>
for the procedure, but in practice the name is nearly always
<fun>Tcl_AppInit</fun> (in versions before Tcl 7.4 the name <fun>Tcl_AppInit</fun>
was implicit;  there was no way to specify the procedure explicitly).
The best way to get started is to make a copy of the file
<b>tclAppInit.c</b> from the Tcl library or source directory.
It already contains a <b>main</b> procedure and a template for
<fun>Tcl_AppInit</fun> that you can modify for your application.

</p>
</section>
<keywords>
<keyword>application</keyword>
<keyword>argument</keyword>
<keyword>command</keyword>
<keyword>initialization</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="apply" title="apply">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2006 Miguel Sofer
     Copyright (c) 2006 Donal K. Fellows
 -->
<?TROFF.TH title="apply" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>apply</name>
<desc>Apply an anonymous function</desc>
</namesection>
<synopsis>
<syntax>
<b>apply</b> <m>func</m> ?<m>arg1 arg2 ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The command <b>apply</b> applies the function <i>func</i> to the arguments
<i>arg1 arg2 ...</i> and returns the result. 
</p>
<p>The function <i>func</i> is a two element list <i>{args body}</i> or a three
element list <i>{args body namespace}</i> (as if the
<b cat="AMBIGUOUS ambiguous cmd">list</b> command had been used). 
The first element <i>args</i> specifies the formal arguments to
<i>func</i>. The specification of the formal arguments <i>args</i>
is shared with the <cmd>proc</cmd> command, and is described in detail in the
corresponding manual page.
</p>
<p>The contents of <i>body</i> are executed by the Tcl interpreter
after the local variables corresponding to the formal arguments are given
the values of the actual parameters <i>arg1 arg2 ...</i>.
When <i>body</i> is being executed, variable names normally refer to
local variables, which are created automatically when referenced and
deleted when <b>apply</b> returns.  One local variable is automatically
created for each of the function's arguments.
Global variables can only be accessed by invoking
the <b cat="AMBIGUOUS ambiguous cmd">global</b> command or the <cmd>upvar</cmd> command.
Namespace variables can only be accessed by invoking
the <b cat="AMBIGUOUS ambiguous cmd">variable</b> command or the <cmd>upvar</cmd> command.
</p>
<p>The invocation of <b>apply</b> adds a call frame to Tcl's evaluation stack
(the stack of frames accessed via <cmd>uplevel</cmd>). The execution of <i>body</i>
proceeds in this call frame, in the namespace given by <i>namespace</i> or
in the global namespace if none was specified. If given, <i>namespace</i> is
interpreted relative to the global namespace even if its name does not start
with '::'. 
</p>
<p>The semantics of <b>apply</b> can also be described by:
</p>
<example>
proc apply {fun args} {
   set len [llength $fun]
   if {($len &lt; 2) || ($len &gt; 3)} {
      error "can't interpret \"$fun\" as anonymous function"
   }
   lassign $fun argList body ns
   set name ::$ns::[getGloballyUniqueName]
   set body0 {
      rename [lindex [info level 0] 0] {}
   }
   proc $name $argList ${body0}$body
   set code [catch {uplevel 1 $name $args} res opt]
   return -options $opt $res
}
</example>
</section>
<section>
<title>EXAMPLES</title>
<p>This shows how to make a simple general command that applies a transformation
to each element of a list.
</p>
<example>
proc map {lambda list} {
   set result {}
   foreach $item $list {
      lappend result [<b>apply</b> $lambda $item]
   }
   return $result
}
map {x {return [string length $x]:$x}} {a bb ccc dddd}
      <i>=&gt; 1:a 2:bb 3:ccc 4:dddd</i>
map {x {expr {$x**2 + 3*$x - 2}}} {-4 -3 -2 -1 0 1 2 3 4}
      <i>=&gt; 2 -2 -4 -4 -2 2 8 16 26</i>
</example>
<p>The <b>apply</b> command is also useful for defining callbacks for use in the
<cmd>trace</cmd> command:
</p>
<example>
set vbl "123abc"
trace add variable vbl write {<b>apply</b> {v1 v2 op} {
   upvar 1 $v1 v
   puts "updated variable to \"$v\""
}}
set vbl 123
set vbl abc
</example>
</section>
<seealso>
<ref>proc(n)</ref>
<ref>uplevel(n)</ref>
</seealso>
<keywords>
<keyword>argument</keyword>
<keyword>procedure</keyword>
<keyword>anonymous function</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="array" version="8.3" title="array">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: array.n,v 1.15 2005/05/10 18:33:59 kennykb Exp $
 -->
<?TROFF.TH title="array" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>array</name>
<desc>Manipulate array variables</desc>
</namesection>
<synopsis>
<syntax>
<cmd>array</cmd> <m>option arrayName</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command performs one of several operations on the
variable given by <i>arrayName</i>.
Unless otherwise specified for individual commands below,
<i>arrayName</i> must be the name of an existing array variable.
The <i>option</i> argument determines what action is carried
out by the command.
The legal <i>options</i> (which may be abbreviated) are:
</p>
<commandlist>
<commanddef>
<command><b>array anymore</b> <m>arrayName searchId</m></command>
<desc>Returns 1 if there are any more elements left to be processed
in an array search, 0 if all elements have already been
returned.
<i>SearchId</i> indicates which search on <i>arrayName</i> to
check, and must have been the return value from a previous
invocation of <b>array startsearch</b>.
This option is particularly useful if an array has an element
with an empty name, since the return value from
<b>array nextelement</b> won't indicate whether the search
has been completed.
</desc>
</commanddef>
<commanddef>
<command><b>array donesearch</b> <m>arrayName searchId</m></command>
<desc>This command terminates an array search and destroys all the
state associated with that search.  <i>SearchId</i> indicates
which search on <i>arrayName</i> to destroy, and must have
been the return value from a previous invocation of
<b>array startsearch</b>.  Returns an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>array exists</b> <m>arrayName</m></command>
<desc>Returns 1 if <i>arrayName</i> is an array variable, 0 if there
is no variable by that name or if it is a scalar variable.
</desc>
</commanddef>
<commanddef>
<command><b>array get</b> <m>arrayName</m> ?<m>pattern</m>?</command>
<desc>Returns a list containing pairs of elements.  The first
element in each pair is the name of an element in <i>arrayName</i>
and the second element of each pair is the value of the
array element.  The order of the pairs is undefined.
If <i>pattern</i> is not specified, then all of the elements of the
array are included in the result.
If <i>pattern</i> is specified, then only those elements whose names
match <i>pattern</i> (using the matching rules of
<b>string match</b>) are included.
If <i>arrayName</i> isn't the name of an array variable, or if
the array contains no elements, then an empty list is returned.
If traces on the array modify the list of elements, the elements 
returned are those that exist both before and after the call to 
<b>array get</b>.
</desc>
</commanddef>
<commanddef>
<command><b>array names</b> <m>arrayName</m> ?<m>mode</m>? ?<m>pattern</m>?</command>
<desc>Returns a list containing the names of all of the elements in
the array that match <i>pattern</i>.  <i>Mode</i> may be one of
<b>-exact</b>, <b>-glob</b>, or <b>-regexp</b>.  If specified, <i>mode</i>
designates which matching rules to use to match <i>pattern</i> against
the names of the elements in the array.  If not specified, <i>mode</i>
defaults to <b>-glob</b>.  See the documentation for <b>string match</b>
for information on glob style matching, and the documentation for
<cmd>regexp</cmd> for information on regexp matching.
If <i>pattern</i> is omitted then the command returns all of
the element names in the array.  If there are no (matching) elements
in the array, or if <i>arrayName</i> isn't the name of an array
variable, then an empty string is returned.
</desc>
</commanddef>
<commanddef>
<command><b>array nextelement</b> <m>arrayName searchId</m></command>
<desc>Returns the name of the next element in <i>arrayName</i>, or
an empty string if all elements of <i>arrayName</i> have
already been returned in this search.  The <i>searchId</i>
argument identifies the search, and must have
been the return value of an <b>array startsearch</b> command.
Warning:  if elements are added to or deleted from the array,
then all searches are automatically terminated just as if
<b>array donesearch</b> had been invoked; this will cause
<b>array nextelement</b> operations to fail for those searches.
</desc>
</commanddef>
<commanddef>
<command><b>array set</b> <m>arrayName list</m></command>
<desc>Sets the values of one or more elements in <i>arrayName</i>.
<i>list</i> must have a form like that returned by <b>array get</b>,
consisting of an even number of elements.
Each odd-numbered element in <i>list</i> is treated as an element
name within <i>arrayName</i>, and the following element in <i>list</i>
is used as a new value for that array element.
If the variable <i>arrayName</i> does not already exist
and <i>list</i> is empty,
<i>arrayName</i> is created with an empty array value.
</desc>
</commanddef>
<commanddef>
<command><b>array size</b> <m>arrayName</m></command>
<desc>Returns a decimal string giving the number of elements in the
array.
If <i>arrayName</i> isn't the name of an array then 0 is returned.
</desc>
</commanddef>
<commanddef>
<command><b>array startsearch</b> <m>arrayName</m></command>
<desc>This command initializes an element-by-element search through the
array given by <i>arrayName</i>, such that invocations of the
<b>array nextelement</b> command will return the names of the
individual elements in the array.
When the search has been completed, the <b>array donesearch</b>
command should be invoked.
The return value is a
search identifier that must be used in <b>array nextelement</b>
and <b>array donesearch</b> commands; it allows multiple
searches to be underway simultaneously for the same array.
It is currently more efficient and easier to use either the <b>array
get</b> or <b>array names</b>, together with <cmd>foreach</cmd>, to iterate
over all but very large arrays.  See the examples below for how to do
this.
</desc>
</commanddef>
<commanddef>
<command><b>array statistics</b> <m>arrayName</m></command>
<desc>Returns statistics about the distribution of data within the hashtable
that represents the array.  This information includes the number of
entries in the table, the number of buckets, and the utilization of
the buckets.
</desc>
</commanddef>
<commanddef>
<command><b>array unset</b> <m>arrayName</m> ?<m>pattern</m>?</command>
<desc>Unsets all of the elements in the array that match <i>pattern</i> (using the
matching rules of <b>string match</b>).  If <i>arrayName</i> isn't the name
of an array variable or there are no matching elements in the array, no
error will be raised.  If <i>pattern</i> is omitted and <i>arrayName</i> is
an array variable, then the command unsets the entire array.
The command always returns an empty string.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLES</title>
<example>
<b>array set</b> colorcount {
   red   1
   green 5
   blue  4
   white 9
}

foreach {color count} [<b>array get</b> colorcount] {
   puts "Color: $color Count: $count"
}
 =&gt; Color: blue Count: 4
    Color: white Count: 9
    Color: green Count: 5
    Color: red Count: 1

foreach color [<b>array names</b> colorcount] {
   puts "Color: $color Count: $colorcount($color)"
}
 =&gt; Color: blue Count: 4
    Color: white Count: 9
    Color: green Count: 5
    Color: red Count: 1

foreach color [lsort [<b>array names</b> colorcount]] {
   puts "Color: $color Count: $colorcount($color)"
}
 =&gt; Color: blue Count: 4
    Color: green Count: 5
    Color: red Count: 1
    Color: white Count: 9

<b>array statistics</b> colorcount
 =&gt; 4 entries in table, 4 buckets
    number of buckets with 0 entries: 1
    number of buckets with 1 entries: 2
    number of buckets with 2 entries: 1
    number of buckets with 3 entries: 0
    number of buckets with 4 entries: 0
    number of buckets with 5 entries: 0
    number of buckets with 6 entries: 0
    number of buckets with 7 entries: 0
    number of buckets with 8 entries: 0
    number of buckets with 9 entries: 0
    number of buckets with 10 or more entries: 0
    average search distance for entry: 1.2
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>string(n)</ref>
<ref>variable(n)</ref>
<ref>trace(n)</ref>
<ref>foreach(n)</ref>
<ref>parray</ref>
</seealso>
<keywords>
<keyword>array</keyword>
<keyword>element names</keyword>
<keyword>search</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="AssocData" title="Tcl_SetAssocData" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     
     RCS: @(#) $Id: AssocData.3,v 1.7 2004/10/07 15:15:35 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SetAssocData" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetAssocData</name>
<name>Tcl_SetAssocData</name>
<name>Tcl_DeleteAssocData</name>
<desc>manage associations of string keys and user specified data with Tcl interpreters</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

ClientData
<fun>Tcl_GetAssocData</fun>(<m>interp</m>, <m>key</m>, <m>delProcPtr</m>)

<fun>Tcl_SetAssocData</fun>(<m>interp</m>, <m>key</m>, <m>delProc</m>, <m>clientData</m>)

<fun>Tcl_DeleteAssocData</fun>(<m>interp</m>, <m>key</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to execute the specified command.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="key">*key</name>
<argmode>in</argmode>
<desc>Key for association with which to store data or from which to delete or
retrieve data.  Typically the module prefix for a package.
</desc>
</argdef>
<argdef>
<argtype>Tcl_InterpDeleteProc</argtype>
<name name="delProc">*delProc</name>
<argmode>in</argmode>
<desc>Procedure to call when <i>interp</i> is deleted.
</desc>
</argdef>
<argdef>
<argtype>Tcl_InterpDeleteProc</argtype>
<name name="delProcPtr">**delProcPtr</name>
<argmode>in</argmode>
<desc>Pointer to location in which to store address of current deletion procedure
for association.  Ignored if NULL.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value associated with the given key in this
interpreter.  This data is owned by the caller.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures allow extensions to associate their own data with
a Tcl interpreter.
An association consists of a string key, typically the name of
the extension, and a one-word value, which is typically a pointer
to a data structure holding data specific to the extension.
Tcl makes no interpretation of either the key or the value for
an association.
</p>
<p>Storage management is facilitated by storing with each association a
procedure to call when the interpreter is deleted. This
procedure can dispose of the storage occupied by the client's data in any
way it sees fit.
</p>
<p><fun>Tcl_SetAssocData</fun> creates an association between a string
key and a user specified datum in the given interpreter.
If there is already an association with the given <i>key</i>,
<fun>Tcl_SetAssocData</fun> overwrites it with the new information.
It is up to callers to organize their use of names to avoid conflicts,
for example, by using package names as the keys.
If the <i>deleteProc</i> argument is non-NULL it specifies the address of a
procedure to invoke if the interpreter is deleted before the association
is deleted.  <i>DeleteProc</i> should have arguments and result that match
the type <type>Tcl_InterpDeleteProc</type>:
</p>
<syntax cat="type" name="Tcl_InterpDeleteProc" scope="global">
typedef void Tcl_InterpDeleteProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>);
</syntax>
<p>When <i>deleteProc</i> is invoked the <i>clientData</i> and <i>interp</i>
arguments will be the same as the corresponding arguments passed to
<fun>Tcl_SetAssocData</fun>.
The deletion procedure will <i>not</i> be invoked if the association
is deleted before the interpreter is deleted.
</p>
<p><fun>Tcl_GetAssocData</fun> returns the datum stored in the association with the
specified key in the given interpreter, and if the <i>delProcPtr</i> field
is non-<b>NULL</b>, the address indicated by it gets the address of the
delete procedure stored with this association. If no association with the
specified key exists in the given interpreter <fun>Tcl_GetAssocData</fun>
returns <b>NULL</b>.
</p>
<p><fun>Tcl_DeleteAssocData</fun> deletes an association with a specified key in
the given interpreter.  Then it calls the deletion procedure.
</p>
</section>
<keywords>
<keyword>association</keyword>
<keyword>data</keyword>
<keyword>deletion procedure</keyword>
<keyword>interpreter</keyword>
<keyword>key</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Async" version="7.0" title="Tcl_AsyncCreate">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Async.3,v 1.9 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_AsyncCreate" section="3" date="7.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_AsyncCreate</name>
<name>Tcl_AsyncMark</name>
<name>Tcl_AsyncInvoke</name>
<name>Tcl_AsyncDelete</name>
<name>Tcl_AsyncReady</name>
<desc>handle asynchronous events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_AsyncHandler
<fun>Tcl_AsyncCreate</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tcl_AsyncMark</fun>(<m>async</m>)

int
<fun>Tcl_AsyncInvoke</fun>(<m>interp</m>, <m>code</m>)

<fun>Tcl_AsyncDelete</fun>(<m>async</m>)

int
<fun>Tcl_AsyncReady</fun>()
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_AsyncProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke to handle an asynchronous event.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>One-word value to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_AsyncHandler</argtype>
<name>async</name>
<argmode>in</argmode>
<desc>Token for asynchronous event handler.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter in which command was being evaluated when handler was
invoked, or NULL if handler was invoked when there was no interpreter
active.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>code</name>
<argmode>in</argmode>
<desc>Completion code from command that just completed in <i>interp</i>,
or 0 if <i>interp</i> is NULL.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures provide a safe mechanism for dealing with
asynchronous events such as signals.
If an event such as a signal occurs while a Tcl script is being
evaluated then it isn't safe to take any substantive action to
process the event.
For example, it isn't safe to evaluate a Tcl script since the
interpreter may already be in the middle of evaluating a script;
it may not even be safe to allocate memory, since a memory
allocation could have been in progress when the event occurred.
The only safe approach is to set a flag indicating that the event
occurred, then handle the event later when the world has returned
to a clean state, such as after the current Tcl command completes.
</p>
<p><fun>Tcl_AsyncCreate</fun>, <fun>Tcl_AsyncDelete</fun>, and <fun>Tcl_AsyncReady</fun>
are thread sensitive.  They access and/or set a thread-specific data
structure in the event of a core built with <i>--enable-threads</i>.  The token
created by <fun>Tcl_AsyncCreate</fun> contains the needed thread information it
was called from so that calling <fun>Tcl_AsyncMark</fun>(<i>token</i>) will only yield
the origin thread into the asynchronous handler.
</p>
<p><fun>Tcl_AsyncCreate</fun> creates an asynchronous handler and returns
a token for it.
The asynchronous handler must be created before
any occurrences of the asynchronous event that it is intended
to handle (it is not safe to create a handler at the time of
an event).
When an asynchronous event occurs the code that detects the event
(such as a signal handler) should call <fun>Tcl_AsyncMark</fun> with the
token for the handler.
<fun>Tcl_AsyncMark</fun> will mark the handler as ready to execute, but it
will not invoke the handler immediately.
Tcl will call the <i>proc</i> associated with the handler later, when
the world is in a safe state, and <i>proc</i> can then carry out
the actions associated with the asynchronous event.
<i>Proc</i> should have arguments and result that match the
type <type>Tcl_AsyncProc</type>:
</p>
<syntax cat="type" name="Tcl_AsyncProc" scope="global">
typedef int Tcl_AsyncProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        int <i>code</i>);
</syntax>
<p>The <i>clientData</i> will be the same as the <i>clientData</i>
argument passed to <fun>Tcl_AsyncCreate</fun> when the handler was
created.
If <i>proc</i> is invoked just after a command has completed
execution in an interpreter, then <i>interp</i> will identify
the interpreter in which the command was evaluated and
<i>code</i> will be the completion code returned by that
command.
The command's result will be present in the interpreter's result.
When <i>proc</i> returns, whatever it leaves in the interpreter's result
will be returned as the result of the command and the integer
value returned by <i>proc</i> will be used as the new completion
code for the command.
</p>
<p>It is also possible for <i>proc</i> to be invoked when no interpreter
is active.
This can happen, for example, if an asynchronous event occurs while
the application is waiting for interactive input or an X event.
In this case <i>interp</i> will be NULL and <i>code</i> will be
0, and the return value from <i>proc</i> will be ignored.
</p>
<p>The procedure <fun>Tcl_AsyncInvoke</fun> is called to invoke all of the
handlers that are ready.
The procedure <fun>Tcl_AsyncReady</fun> will return non-zero whenever any
asynchronous handlers are ready;  it can be checked to avoid calls
to <fun>Tcl_AsyncInvoke</fun> when there are no ready handlers.
Tcl calls <fun>Tcl_AsyncReady</fun> after each command is evaluated
and calls <fun>Tcl_AsyncInvoke</fun> if needed.
Applications may also call <fun>Tcl_AsyncInvoke</fun> at interesting
times for that application.
For example, Tcl's event handler calls <fun>Tcl_AsyncReady</fun>
after each event and calls <fun>Tcl_AsyncInvoke</fun> if needed.
The <i>interp</i> and <i>code</i> arguments to <fun>Tcl_AsyncInvoke</fun>
have the same meaning as for <i>proc</i>:  they identify the active
interpreter, if any, and the completion code from the command
that just completed.
</p>
<p><fun>Tcl_AsyncDelete</fun> removes an asynchronous handler so that
its <i>proc</i> will never be invoked again.
A handler can be deleted even when ready, and it will still
not be invoked.
</p>
<p>If multiple handlers become active at the same time, the
handlers are invoked in the order they were created (oldest
handler first).
The <i>code</i> and the interpreter's result for later handlers
reflect the values returned by earlier handlers, so that
the most recently created handler has last say about
the interpreter's result and completion code.
If new handlers become ready while handlers are executing,
<fun>Tcl_AsyncInvoke</fun> will invoke them all;  at each point it
invokes the highest-priority (oldest) ready handler, repeating
this over and over until there are no longer any ready handlers.

</p>
</section>
<section>
<title>WARNING</title>
<p>It is almost always a bad idea for an asynchronous event
handler to modify the interpreter's result or return a code different
from its <i>code</i> argument.
This sort of behavior can disrupt the execution of scripts in
subtle ways and result in bugs that are extremely difficult
to track down.
If an asynchronous event handler needs to evaluate Tcl scripts
then it should first save the interpreter's state by calling
<b>Tcl_SaveInterpState</b>, passing in the <i>code</i> argument.
When the asynchronous handler is finished it should restore
the interpreter's state by calling <b>Tcl_RestoreInterpState</b>,
and then returning the <i>code</i> argument.

</p>
</section>
<keywords>
<keyword>asynchronous event</keyword>
<keyword>handler</keyword>
<keyword>signal</keyword>
<keyword>Tcl_SaveInterpState</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="BackgdErr" title="Tcl_BackgroundError" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: BackgdErr.3,v 1.4 2004/11/20 00:17:31 dgp Exp $
 -->
<?TROFF.TH title="Tcl_BackgroundError" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_BackgroundError</name>
<desc>report Tcl error that occurred in background processing</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_BackgroundError</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which the error occurred.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is typically invoked when a Tcl error occurs during
``background processing'' such as executing an event handler.
When such an error occurs, the error condition is reported to Tcl
or to a widget or some other C code, and there is not usually any
obvious way for that code to report the error to the user.
In these cases the code calls <fun>Tcl_BackgroundError</fun> with an
<i>interp</i> argument identifying the interpreter in which the
error occurred.  At the time <fun>Tcl_BackgroundError</fun> is invoked,
the interpreter's result is expected to contain an error message.
<fun>Tcl_BackgroundError</fun> will invoke the command registered
in that interpreter to handle background errors by the
<b>interp bgerror</b> command.
The registered handler command is meant to report the error
in an application-specific fashion.  The handler command
receives two arguments, the result of the interp, and the
return options of the interp at the time the error occurred.
If the application registers no handler command, the default
handler command will attempt to call <b>bgerror</b> to report
the error.  If an error condition arises while invoking the
handler command, then <fun>Tcl_BackgroundError</fun> reports the
error itself by printing a message on the standard error file.
</p>
<p><fun>Tcl_BackgroundError</fun> does not invoke the handler command immediately
because this could potentially interfere with scripts that are in process
at the time the error occurred.
Instead, it invokes the handler command later as an idle callback.
</p>
<p>It is possible for many background errors to accumulate before
the handler command is invoked.  When this happens, each of the errors
is processed in order.  However, if the handle command returns a
break exception, then all remaining error reports for the
interpreter are skipped.

</p>
</section>
<keywords>
<keyword>background</keyword>
<keyword>bgerror</keyword>
<keyword>error</keyword>
<keyword>interp</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Backslash" version="8.1" title="Tcl_Backslash">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Backslash.3,v 1.7 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_Backslash" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Backslash</name>
<desc>parse a backslash sequence</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

char
<fun>Tcl_Backslash</fun>(<m>src</m>, <m>countPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>char</argtype>
<name name="src">*src</name>
<argmode>in</argmode>
<desc>Pointer to a string starting with a backslash.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="countPtr">*countPtr</name>
<argmode>out</argmode>
<desc>If <i>countPtr</i> isn't NULL, <i>*countPtr</i> gets filled
in with number of characters in the backslash sequence, including
the backslash character.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The use of <fun>Tcl_Backslash</fun> is deprecated in favor of
<fun>Tcl_UtfBackslash</fun>.
</p>
<p>This is a utility procedure provided for backwards compatibility with
non-internationalized Tcl extensions.  It parses a backslash sequence and
returns the low byte of the Unicode character corresponding to the sequence. 
<fun>Tcl_Backslash</fun> modifies <i>*countPtr</i> to contain the number of
characters in the backslash sequence.
</p>
<p>See the Tcl manual entry for information on the valid backslash sequences.
All of the sequences described in the Tcl manual entry are supported by
<fun>Tcl_Backslash</fun>.
</p>
</section>
<seealso>
<ref>Tcl(n)</ref>
<ref>Tcl_UtfBackslash(3)</ref>
</seealso>
<keywords>
<keyword>backslash</keyword>
<keyword>parse</keyword>
</keywords>
</manpage>
<manpage version="8.4" cat="cmd" title="bell" id="bell">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: bell.n,v 1.4 2000/09/07 17:38:16 hobbs Exp $
 -->
<?TROFF.TH title="bell" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>bell</name>
<desc>Ring a display's bell</desc>
</namesection>
<synopsis>
<syntax>
<cmd>bell</cmd> ?<b>-displayof</b> <m>window</m>? ?<b>-nice</b>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command rings the bell on the display for <i>window</i> and
returns an empty string.
If the <b>-displayof</b> option is omitted, the display of the
application's main window is used by default.
The command uses the current bell-related settings for the display, which
may be modified with programs such as <b>xset</b>.
</p>
<p>If <b>-nice</b> is not specified, this command also resets the screen saver
for the screen.  Some screen savers will ignore this, but others will reset
so that the screen becomes visible again.

</p>
</section>
<keywords>
<keyword>beep</keyword>
<keyword>bell</keyword>
<keyword>ring</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="bgerror" title="bgerror" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: bgerror.n,v 1.9 2004/11/20 00:17:31 dgp Exp $
 -->
<?TROFF.TH title="bgerror" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>bgerror</name>
<desc>Command invoked to process background errors</desc>
</namesection>
<synopsis>
<syntax>
<b>bgerror</b> <m>message</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p version="8.5">Release 8.5 of Tcl supports the <b>interp bgerror</b> command,
which allows applications to register in an interpreter the command
that will handle background errors in that interpreter.  In older
releases of Tcl, this level of control was not available, and applications
could control the handling of background errors only by creating
a command with the particular command name <b>bgerror</b> in the
global namespace of an interpreter.  The following documentation
describes the interface requirements of the <b>bgerror</b> command
an application might define to retain compatibility with pre-8.5
releases of Tcl.  Applications intending to support only
Tcl releases 8.5 and later should simply make use of <b>interp bgerror</b>.
</p>
<p>The <b>bgerror</b> command doesn't exist as built-in part of Tcl.  Instead,
individual applications or users can define a <b>bgerror</b>
command (e.g. as a Tcl procedure) if they wish to handle background
errors.
</p>
<p>A background error is one that occurs in an event handler or some
other command that didn't originate with the application.
For example, if an error occurs while executing a command specified
with the <cmd>after</cmd> command, then it is a background error.
For a non-background error, the error can simply be returned up
through nested Tcl command evaluations until it reaches the top-level
code in the application; then the application can report the error
in whatever way it wishes.  When a background error occurs, the
unwinding ends in the Tcl library and there is no obvious way for Tcl
to report the error.
</p>
<p>When Tcl detects a background error, it saves information about the
error and invokes a handler command registered by <b>interp bgerror</b>
later as an idle event handler.  The default handler command in turn
calls the <b>bgerror</b> command .
Before invoking <b>bgerror</b>, Tcl restores the
<b cat="variable">errorInfo</b> and <b cat="variable">errorCode</b> variables to their values at the
time the error occurred, then it invokes <b>bgerror</b> with the error
message as its only argument.  Tcl assumes that the application has
implemented the <b>bgerror</b> command, and that the command will
report the error in a way that makes sense for the application.  Tcl
will ignore any result returned by the <b>bgerror</b> command as long
as no error is generated.
</p>
<p>If another Tcl error occurs within the <b>bgerror</b> command (for
example, because no <b>bgerror</b> command has been defined) then Tcl
reports the error itself by writing a message to stderr.
</p>
<p>If several background errors accumulate before <b>bgerror</b> is
invoked to process them, <b>bgerror</b> will be invoked once for each
error, in the order they occurred.  However, if <b>bgerror</b> returns
with a break exception, then any remaining errors are skipped without
calling <b>bgerror</b>.
</p>
<p>If you are writing code that will be used by others as part of a
package or other kind of library, consider avoiding <b>bgerror</b>.
The reason for this is that the application programmer may also want
to define a <b>bgerror</b>, or use other code that does and thus will
have trouble integrating your code.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This <b>bgerror</b> procedure appends errors to a file, with a timestamp.
</p>
<example>
proc bgerror {message} {
    set timestamp [clock format [clock seconds]]
    set fl [open mylog.txt {WRONLY CREAT APPEND}]
    puts $fl "$timestamp: bgerror in $::argv '$message'"
    close $fl
}
</example>


</section>
<seealso>
<ref>after(n)</ref>
<ref>interp(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>background error</keyword>
<keyword>reporting</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="binary" version="8.0" title="binary">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 by Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: binary.n,v 1.29 2006/10/06 13:37:20 patthoyts Exp $
 -->
<?TROFF.TH title="binary" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>binary</name>
<desc>Insert and extract fields from binary strings</desc>
</namesection>
<synopsis>
<syntax>
<b>binary format</b> <m>formatString</m> ?<m>arg arg ...</m>?

<b>binary scan</b> <m>string formatString</m> ?<m>varName varName ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command provides facilities for manipulating binary data.  The
first form, <b>binary format</b>, creates a binary string from normal
Tcl values.  For example, given the values 16 and 22, on a 32-bit
architecture, it might produce an 8-byte binary string consisting of
two 4-byte integers, one for each of the numbers.  The second form of
the command, <b>binary scan</b>, does the opposite: it extracts data
from a binary string and returns it as ordinary Tcl string values.
</p>
</section>
<section>
<title>BINARY FORMAT</title>
<p>The <b>binary format</b> command generates a binary string whose layout
is specified by the <i>formatString</i> and whose contents come from
the additional arguments.  The resulting binary value is returned.
</p>
<p>The <i>formatString</i> consists of a sequence of zero or more field
specifiers separated by zero or more spaces.  Each field specifier is
a single type character followed by an optional flag character followed
by an optional numeric <i>count</i>.
Most field specifiers consume one argument to obtain the value to be
formatted.  The type character specifies how the value is to be
formatted.  The <i>count</i> typically indicates how many items of the
specified type are taken from the value.  If present, the <i>count</i>
is a non-negative decimal integer or <b>*</b>, which normally indicates
that all of the items in the value are to be used.  If the number of
arguments does not match the number of fields in the format string
that consume arguments, then an error is generated. The flag character
is ignored for for <b>binary format</b>.
</p>
<p>Here is a small example to clarify the relation between the field
specifiers and the arguments:
</p>
<example>
<b>binary format</b> d3d {1.0 2.0 3.0 4.0} 0.1
</example>
<p>The first argument is a list of four numbers, but because of the count
of 3 for the associated field specifier, only the first three will be
used. The second argument is associated with the second field
specifier. The resulting binary string contains the four numbers 1.0,
2.0, 3.0 and 0.1.
</p>
<p>Each type-count pair moves an imaginary cursor through the binary
data, storing bytes at the current position and advancing the cursor
to just after the last byte stored.  The cursor is initially at
position 0 at the beginning of the data.  The type may be any one of
the following characters:
</p>
<dl>
<dle>
<dt><b>a</b></dt>
<dd>Stores a byte string of length <i>count</i> in the output string.
Every character is taken as modulo 256 (i.e. the low byte of every
character is used, and the high byte discarded) so when storing
character strings not wholly expressible using the characters \u0000-\u00ff,
the <b>encoding convertto</b> command should be used
first if this truncation is not desired (i.e. if the characters are
not part of the ISO 8859-1 character set.)
If <i>arg</i> has fewer than <i>count</i> bytes, then additional zero
bytes are used to pad out the field.  If <i>arg</i> is longer than the
specified length, the extra characters will be ignored.  If
<i>count</i> is <b>*</b>, then all of the bytes in <i>arg</i> will be
formatted.  If <i>count</i> is omitted, then one character will be
formatted.  For example,
<example>
<b>binary format</b> a7a*a alpha bravo charlie
</example><p>will return a string equivalent to <b>alpha\000\000bravoc</b> and
</p><example>
<b>binary format</b> a* [encoding convertto utf-8 \u20ac]
</example><p>will return a string equivalent to <b>\342\202\254</b> (which is the
UTF-8 byte sequence for a Euro-currency character).
</p></dd>
</dle>
<dle>
<dt><b>A</b></dt>
<dd>This form is the same as <b>a</b> except that spaces are used for
padding instead of nulls.  For example,
<example>
<b>binary format</b> A6A*A alpha bravo charlie
</example><p>will return <b>alpha bravoc</b>.
</p></dd>
</dle>
<dle>
<dt><b>b</b></dt>
<dd>Stores a string of <i>count</i> binary digits in low-to-high order
within each byte in the output string.  <i>Arg</i> must contain a
sequence of <b>1</b> and <b>0</b> characters.  The resulting bytes are
emitted in first to last order with the bits being formatted in
low-to-high order within each byte.  If <i>arg</i> has fewer than
<i>count</i> digits, then zeros will be used for the remaining bits.
If <i>arg</i> has more than the specified number of digits, the extra
digits will be ignored.  If <i>count</i> is <b>*</b>, then all of the
digits in <i>arg</i> will be formatted.  If <i>count</i> is omitted,
then one digit will be formatted.  If the number of bits formatted
does not end at a byte boundary, the remaining bits of the last byte
will be zeros.  For example,
<example>
<b>binary format</b> b5b* 11100 111000011010
</example><p>will return a string equivalent to <b>\x07\x87\x05</b>.
</p></dd>
</dle>
<dle>
<dt><b>B</b></dt>
<dd>This form is the same as <b>b</b> except that the bits are stored in
high-to-low order within each byte.  For example,
<example>
<b>binary format</b> B5B* 11100 111000011010
</example><p>will return a string equivalent to <b>\xe0\xe1\xa0</b>.
</p></dd>
</dle>
<dle>
<dt><b>h</b></dt>
<dd>Stores a string of <i>count</i> hexadecimal digits in low-to-high
within each byte in the output string.  <i>Arg</i> must contain a
sequence of characters in the set ``0123456789abcdefABCDEF''.  The
resulting bytes are emitted in first to last order with the hex digits
being formatted in low-to-high order within each byte.  If <i>arg</i>
has fewer than <i>count</i> digits, then zeros will be used for the
remaining digits.  If <i>arg</i> has more than the specified number of
digits, the extra digits will be ignored.  If <i>count</i> is
<b>*</b>, then all of the digits in <i>arg</i> will be formatted.  If
<i>count</i> is omitted, then one digit will be formatted.  If the
number of digits formatted does not end at a byte boundary, the
remaining bits of the last byte will be zeros.  For example,
<example>
<b>binary format</b> h3h* AB def
</example><p>will return a string equivalent to <b>\xba\x00\xed\x0f</b>.
</p></dd>
</dle>
<dle>
<dt><b>H</b></dt>
<dd>This form is the same as <b>h</b> except that the digits are stored in
high-to-low order within each byte.  For example,
<example>
<b>binary format</b> H3H* ab DEF
</example><p>will return a string equivalent to <b>\xab\x00\xde\xf0</b>.
</p></dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>Stores one or more 8-bit integer values in the output string.  If no
<i>count</i> is specified, then <i>arg</i> must consist of an integer
value; otherwise <i>arg</i> must consist of a list containing at least
<i>count</i> integer elements.  The low-order 8 bits of each integer
are stored as a one-byte value at the cursor position.  If <i>count</i>
is <b>*</b>, then all of the integers in the list are formatted.  If
the number of elements in the list is fewer than <i>count</i>, then an
error is generated.  If the number of elements in the list is greater
than <i>count</i>, then the extra elements are ignored.  For example,
<example>
<b>binary format</b> c3cc* {3 -3 128 1} 260 {2 5}
</example><p>will return a string equivalent to
<b>\x03\xfd\x80\x04\x02\x05</b>, whereas
</p><example>
<b>binary format</b> c {2 5}
</example><p>will generate an error.
</p></dd>
</dle>
<dle>
<dt><b>s</b></dt>
<dd>This form is the same as <b>c</b> except that it stores one or more
16-bit integers in little-endian byte order in the output string.  The
low-order 16-bits of each integer are stored as a two-byte value at
the cursor position with the least significant byte stored first.  For
example,
<example>
<b>binary format</b> s3 {3 -3 258 1}
</example><p>will return a string equivalent to 
<b>\x03\x00\xfd\xff\x02\x01</b>.
</p></dd>
</dle>
<dle>
<dt><b>S</b></dt>
<dd>This form is the same as <b>s</b> except that it stores one or more
16-bit integers in big-endian byte order in the output string.  For
example,
<example>
<b>binary format</b> S3 {3 -3 258 1}
</example><p>will return a string equivalent to 
<b>\x00\x03\xff\xfd\x01\x02</b>.
</p></dd>
</dle>
<dle>
<dt><b>t</b></dt>
<dd><new version="8.5">This form (mnemonically <i>tiny</i>) is the same as <b>s</b> and <b>S</b>
except that it stores the 16-bit integers in the output string in the
native byte order of the machine where the Tcl script is running.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>i</b></dt>
<dd>This form is the same as <b>c</b> except that it stores one or more
32-bit integers in little-endian byte order in the output string.  The
low-order 32-bits of each integer are stored as a four-byte value at
the cursor position with the least significant byte stored first.  For
example,
<example>
<b>binary format</b> i3 {3 -3 65536 1}
</example><p>will return a string equivalent to 
<b>\x03\x00\x00\x00\xfd\xff\xff\xff\x00\x00\x01\x00</b>
</p></dd>
</dle>
<dle>
<dt><b>I</b></dt>
<dd>This form is the same as <b>i</b> except that it stores one or more one
or more 32-bit integers in big-endian byte order in the output string.
For example,
<example>
<b>binary format</b> I3 {3 -3 65536 1}
</example><p>will return a string equivalent to 
<b>\x00\x00\x00\x03\xff\xff\xff\xfd\x00\x01\x00\x00</b>
</p></dd>
</dle>
<dle>
<dt><b>n</b></dt>
<dd><new version="8.5">This form (mnemonically <i>number</i> or <i>normal</i>) is the same as
<b>i</b> and <b>I</b> except that it stores the 32-bit integers in the
output string in the native byte order of the machine where the Tcl
script is running.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>w</b></dt>
<dd>This form is the same as <b>c</b> except that it stores one or more
64-bit integers in little-endian byte order in the output string.  The
low-order 64-bits of each integer are stored as an eight-byte value at
the cursor position with the least significant byte stored first.  For
example,
<example>
<b>binary format</b> w 7810179016327718216
</example><p>will return the string <b>HelloTcl</b>
</p></dd>
</dle>
<dle>
<dt><b>W</b></dt>
<dd>This form is the same as <b>w</b> except that it stores one or more one
or more 64-bit integers in big-endian byte order in the output string.
For example,
<example>
<b>binary format</b> Wc 4785469626960341345 110
</example><p>will return the string <b>BigEndian</b>
</p></dd>
</dle>
<dle>
<dt><b>m</b></dt>
<dd><new version="8.5">This form (mnemonically the mirror of <b>w</b>) is the same as <b>w</b>
and <b>W</b> except that it stores the 64-bit integers in the output
string in the native byte order of the machine where the Tcl script is
running.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>f</b></dt>
<dd>This form is the same as <b>c</b> except that it stores one or more one
or more single-precision floating point numbers in the machine's native
representation in the output string.  This representation is not
portable across architectures, so it should not be used to communicate
floating point numbers across the network.  The size of a floating
point number may vary across architectures, so the number of bytes
that are generated may vary.  If the value overflows the
machine's native representation, then the value of FLT_MAX
as defined by the system will be used instead.  Because Tcl uses
double-precision floating point numbers internally, there may be some
loss of precision in the conversion to single-precision.  For example,
on a Windows system running on an Intel Pentium processor,
<example>
<b>binary format</b> f2 {1.6 3.4}
</example><p>will return a string equivalent to 
<b>\xcd\xcc\xcc\x3f\x9a\x99\x59\x40</b>.
</p></dd>
</dle>
<dle>
<dt><b>r</b></dt>
<dd><new version="8.5">This form (mnemonically <i>real</i>) is the same as <b>f</b> except that
it stores the single-precision floating point numbers in little-endian
order.  This conversion only produces meaningful output when used on
machines which use the IEEE floating point representation (very
common, but not universal.)
</new></dd>
</dle>
<dle>
<dt><b>R</b></dt>
<dd><new version="8.5">This form is the same as <b>r</b> except that it stores the
single-precision floating point numbers in big-endian order.
</new></dd>
</dle>
<dle>
<dt><b>d</b></dt>
<dd>This form is the same as <b>f</b> except that it stores one or more one
or more double-precision floating point numbers in the machine's native
representation in the output string.  For example, on a
Windows system running on an Intel Pentium processor,
<example>
<b>binary format</b> d1 {1.6}
</example><p>will return a string equivalent to 
<b>\x9a\x99\x99\x99\x99\x99\xf9\x3f</b>.
</p></dd>
</dle>
<dle>
<dt><b>q</b></dt>
<dd><new version="8.5">This form (mnemonically the mirror of <b>d</b>) is the same as <b>d</b>
except that it stores the double-precision floating point numbers in
little-endian order.  This conversion only produces meaningful output
when used on machines which use the IEEE floating point representation
(very common, but not universal.)
</new></dd>
</dle>
<dle>
<dt><b>Q</b></dt>
<dd><new version="8.5">This form is the same as <b>q</b> except that it stores the
double-precision floating point numbers in big-endian order.
</new></dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>Stores <i>count</i> null bytes in the output string.  If <i>count</i> is
not specified, stores one null byte.  If <i>count</i> is <b>*</b>,
generates an error.  This type does not consume an argument.  For
example,
<example>
<b>binary format</b> a3xa3x2a3 abc def ghi
</example><p>will return a string equivalent to <b>abc\000def\000\000ghi</b>.
</p></dd>
</dle>
<dle>
<dt><b>X</b></dt>
<dd>Moves the cursor back <i>count</i> bytes in the output string.  If
<i>count</i> is <b>*</b> or is larger than the current cursor position,
then the cursor is positioned at location 0 so that the next byte
stored will be the first byte in the result string.  If <i>count</i> is
omitted then the cursor is moved back one byte.  This type does not
consume an argument.  For example,
<example>
<b>binary format</b> a3X*a3X2a3 abc def ghi
</example><p>will return <b>dghi</b>.
</p></dd>
</dle>
<dle>
<dt><b>@</b></dt>
<dd>Moves the cursor to the absolute location in the output string
specified by <i>count</i>.  Position 0 refers to the first byte in the
output string.  If <i>count</i> refers to a position beyond the last
byte stored so far, then null bytes will be placed in the uninitialized
locations and the cursor will be placed at the specified location.  If
<i>count</i> is <b>*</b>, then the cursor is moved to the current end of
the output string.  If <i>count</i> is omitted, then an error will be
generated.  This type does not consume an argument. For example,
<example>
<b>binary format</b> a5@2a1@*a3@10a1 abcde f ghi j
</example><p>will return <b>abfdeghi\000\000j</b>.
</p></dd>
</dle>
</dl>
</section>
<section>
<title>BINARY SCAN</title>
<p>The <b>binary scan</b> command parses fields from a binary string,
returning the number of conversions performed.  <i>String</i> gives the
input bytes to be parsed (one byte per character, and characters not
representable as a byte have their high bits chopped)
and <i>formatString</i> indicates how to parse it.
Each <i>varName</i> gives the name of a variable; when a field is
scanned from <i>string</i> the result is assigned to the corresponding
variable.
</p>
<p>As with <b>binary format</b>, the <i>formatString</i> consists of a
sequence of zero or more field specifiers separated by zero or more
spaces.  Each field specifier is a single type character followed by
an optional flag character followed by an optional numeric <i>count</i>.
Most field specifiers consume one
argument to obtain the variable into which the scanned values should
be placed.  The type character specifies how the binary data is to be
interpreted.  The <i>count</i> typically indicates how many items of
the specified type are taken from the data.  If present, the
<i>count</i> is a non-negative decimal integer or <b>*</b>, which
normally indicates that all of the remaining items in the data are to
be used.  If there are not enough bytes left after the current cursor
position to satisfy the current field specifier, then the
corresponding variable is left untouched and <b>binary scan</b> returns
immediately with the number of variables that were set.  If there are
not enough arguments for all of the fields in the format string that
consume arguments, then an error is generated. The flag character 'u'
may be given to cause some types to be read as unsigned values. The flag
is accepted for all field types but is ignored for non-integer fields.
</p>
<p>A similar example as with <b>binary format</b> should explain the
relation between field specifiers and arguments in case of the binary
scan subcommand:
</p>
<example>
<b>binary scan</b> $bytes s3s first second
</example>
<p>This command (provided the binary string in the variable <i>bytes</i>
is long enough) assigns a list of three integers to the variable
<i>first</i> and assigns a single value to the variable <i>second</i>.
If <i>bytes</i> contains fewer than 8 bytes (i.e. four 2-byte
integers), no assignment to <i>second</i> will be made, and if
<i>bytes</i> contains fewer than 6 bytes (i.e. three 2-byte integers),
no assignment to <i>first</i> will be made.  Hence:
</p>
<example>
puts [<b>binary scan</b> abcdefg s3s first second]
puts $first
puts $second
</example>
<p>will print (assuming neither variable is set previously):
</p>
<example>
1
25185 25699 26213
can't read "second": no such variable
</example>
<p>It is <i>important</i> to note that the <b>c</b>, <b>s</b>, and <b>S</b>
(and <b>i</b> and <b>I</b> on 64bit systems) will be scanned into
long data size values.  In doing this, values that have their high
bit set (0x80 for chars, 0x8000 for shorts, 0x80000000 for ints),
will be sign extended.  Thus the following will occur:
</p>
<example>
set signShort [<b>binary format</b> s1 0x8000]
<b>binary scan</b> $signShort s1 val; <i># val == 0xFFFF8000</i>
</example>
<p>If you require unsigned values you can include the 'u' flag character following
the field type. For example, to read an unsigned short value:
</p>
<example>
set signShort [<b>binary format</b> s1 0x8000]
<b>binary scan</b> $signShort su1 val; <i># val == 0x00008000</i>
</example>
<p>Each type-count pair moves an imaginary cursor through the binary data,
reading bytes from the current position.  The cursor is initially
at position 0 at the beginning of the data.  The type may be any one of
the following characters:
</p>
<dl>
<dle>
<dt><b>a</b></dt>
<dd>The data is a byte string of length <i>count</i>.  If <i>count</i>
is <b>*</b>, then all of the remaining bytes in <i>string</i> will be
scanned into the variable.  If <i>count</i> is omitted, then one
byte will be scanned.
All bytes scanned will be interpreted as being characters in the
range \u0000-\u00ff so the <b>encoding convertfrom</b> command might be
needed if the string is not an ISO 8859-1 string.
For example,
<example>
<b>binary scan</b> abcde\000fghi a6a10 var1 var2
</example><p>will return <b>1</b> with the string equivalent to <b>abcde\000</b>
stored in <i>var1</i> and <i>var2</i> left unmodified.
</p></dd>
</dle>
<dle>
<dt><b>A</b></dt>
<dd>This form is the same as <b>a</b>, except trailing blanks and nulls are stripped from
the scanned value before it is stored in the variable.  For example,
<example>
<b>binary scan</b> "abc efghi  \000" A* var1
</example><p>will return <b>1</b> with <b>abc efghi</b> stored in <i>var1</i>.
</p></dd>
</dle>
<dle>
<dt><b>b</b></dt>
<dd>The data is turned into a string of <i>count</i> binary digits in
low-to-high order represented as a sequence of ``1'' and ``0''
characters.  The data bytes are scanned in first to last order with
the bits being taken in low-to-high order within each byte.  Any extra
bits in the last byte are ignored.  If <i>count</i> is <b>*</b>, then
all of the remaining bits in <i>string</i> will be scanned.  If
<i>count</i> is omitted, then one bit will be scanned.  For example,
<example>
<b>binary scan</b> \x07\x87\x05 b5b* var1 var2
</example><p>will return <b>2</b> with <b>11100</b> stored in <i>var1</i> and
<b>1110000110100000</b> stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>B</b></dt>
<dd>This form is the same as <b>b</b>, except the bits are taken in
high-to-low order within each byte.  For example,
<example>
<b>binary scan</b> \x70\x87\x05 B5B* var1 var2
</example><p>will return <b>2</b> with <b>01110</b> stored in <i>var1</i> and
<b>1000011100000101</b> stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>H</b></dt>
<dd>The data is turned into a string of <i>count</i> hexadecimal digits in
high-to-low order represented as a sequence of characters in the set
``0123456789abcdef''. The data bytes are scanned in first to last
order with the hex digits being taken in high-to-low order within each
byte. Any extra bits in the last byte are ignored. If <i>count</i> is
<b>*</b>, then all of the remaining hex digits in <i>string</i> will be
scanned. If <i>count</i> is omitted, then one hex digit will be
scanned. For example,
<example>
<b>binary scan</b> \x07\x86\x05\x12\x34 H3H* var1 var2
</example><p>will return <b>2</b> with <b>078</b> stored in <i>var1</i> and
<b>051234</b> stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>h</b></dt>
<dd>This form is the same as <b>H</b>, except the digits are taken in
reverse (low-to-high) order within each byte. For example,
<example>
<b>binary scan</b> \x07\x86\x05\x12\x34 h3h* var1 var2
</example><p>will return <b>2</b> with <b>706</b> stored in <i>var1</i> and
<b>502143</b> stored in <i>var2</i>.
</p>Note that most code that wishes to parse the hexadecimal digits from
multiple bytes in order should use the <b>H</b> format.
</dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>The data is turned into <i>count</i> 8-bit signed integers and stored
in the corresponding variable as a list. If <i>count</i> is <b>*</b>,
then all of the remaining bytes in <i>string</i> will be scanned.  If
<i>count</i> is omitted, then one 8-bit integer will be scanned.  For
example,
<example>
<b>binary scan</b> \x07\x86\x05 c2c* var1 var2
</example><p>will return <b>2</b> with <b>7 -122</b> stored in <i>var1</i> and <b>5</b>
stored in <i>var2</i>.  Note that the integers returned are signed, but
they can be converted to unsigned 8-bit quantities using an expression
like:
</p><example>
set num [expr { $num &amp; 0xff }]
</example></dd>
</dle>
<dle>
<dt><b>s</b></dt>
<dd>The data is interpreted as <i>count</i> 16-bit signed integers
represented in little-endian byte order.  The integers are stored in
the corresponding variable as a list.  If <i>count</i> is <b>*</b>, then
all of the remaining bytes in <i>string</i> will be scanned.  If
<i>count</i> is omitted, then one 16-bit integer will be scanned.  For
example,
<example>
<b>binary scan</b> \x05\x00\x07\x00\xf0\xff s2s* var1 var2
</example><p>will return <b>2</b> with <b>5 7</b> stored in <i>var1</i> and <b>-16</b>
stored in <i>var2</i>.  Note that the integers returned are signed, but
they can be converted to unsigned 16-bit quantities using an expression
like:
</p><example>
set num [expr { $num &amp; 0xffff }]
</example></dd>
</dle>
<dle>
<dt><b>S</b></dt>
<dd>This form is the same as <b>s</b> except that the data is interpreted
as <i>count</i> 16-bit signed integers represented in big-endian byte
order.  For example,
<example>
<b>binary scan</b> \x00\x05\x00\x07\xff\xf0 S2S* var1 var2
</example><p>will return <b>2</b> with <b>5 7</b> stored in <i>var1</i> and <b>-16</b>
stored in <i>var2</i>. 
</p></dd>
</dle>
<dle>
<dt><b>t</b></dt>
<dd><new version="8.5">The data is interpreted as <i>count</i> 16-bit signed integers
represented in the native byte order of the machine running the Tcl
script.  It is otherwise identical to <b>s</b> and <b>S</b>.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>i</b></dt>
<dd>The data is interpreted as <i>count</i> 32-bit signed integers
represented in little-endian byte order.  The integers are stored in
the corresponding variable as a list.  If <i>count</i> is <b>*</b>, then
all of the remaining bytes in <i>string</i> will be scanned.  If
<i>count</i> is omitted, then one 32-bit integer will be scanned.  For
example,
<example>
set str \x05\x00\x00\x00\x07\x00\x00\x00\xf0\xff\xff\xff
<b>binary scan</b> $str i2i* var1 var2
</example><p>will return <b>2</b> with <b>5 7</b> stored in <i>var1</i> and <b>-16</b>
stored in <i>var2</i>.  Note that the integers returned are signed, but
they can be converted to unsigned 32-bit quantities using an expression
like:
</p><example>
set num [expr { $num &amp; 0xffffffff }]
</example></dd>
</dle>
<dle>
<dt><b>I</b></dt>
<dd>This form is the same as <b>I</b> except that the data is interpreted
as <i>count</i> 32-bit signed integers represented in big-endian byte
order.  For example,
<example>
set str \x00\x00\x00\x05\x00\x00\x00\x07\xff\xff\xff\xf0
<b>binary scan</b> $str I2I* var1 var2
</example><p>will return <b>2</b> with <b>5 7</b> stored in <i>var1</i> and <b>-16</b>
stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>n</b></dt>
<dd><new version="8.5">The data is interpreted as <i>count</i> 32-bit signed integers
represented in the native byte order of the machine running the Tcl
script.  It is otherwise identical to <b>i</b> and <b>I</b>.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>w</b></dt>
<dd>The data is interpreted as <i>count</i> 64-bit signed integers
represented in little-endian byte order.  The integers are stored in
the corresponding variable as a list.  If <i>count</i> is <b>*</b>, then
all of the remaining bytes in <i>string</i> will be scanned.  If
<i>count</i> is omitted, then one 64-bit integer will be scanned.  For
example,
<example>
set str \x05\x00\x00\x00\x07\x00\x00\x00\xf0\xff\xff\xff
<b>binary scan</b> $str wi* var1 var2
</example><p>will return <b>2</b> with <b>30064771077</b> stored in <i>var1</i> and
<b>-16</b> stored in <i>var2</i>.  Note that the integers returned are
signed and cannot be represented by Tcl as unsigned values.
</p></dd>
</dle>
<dle>
<dt><b>W</b></dt>
<dd>This form is the same as <b>w</b> except that the data is interpreted
as <i>count</i> 64-bit signed integers represented in big-endian byte
order.  For example,
<example>
set str \x00\x00\x00\x05\x00\x00\x00\x07\xff\xff\xff\xf0
<b>binary scan</b> $str WI* var1 var2
</example><p>will return <b>2</b> with <b>21474836487</b> stored in <i>var1</i> and <b>-16</b>
stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>m</b></dt>
<dd><new version="8.5">The data is interpreted as <i>count</i> 64-bit signed integers
represented in the native byte order of the machine running the Tcl
script.  It is otherwise identical to <b>w</b> and <b>W</b>.
To determine what the native byte order of the machine is, refer to
the <b>byteOrder</b> element of the <b cat="variable">tcl_platform</b> array.
</new></dd>
</dle>
<dle>
<dt><b>f</b></dt>
<dd>The data is interpreted as <i>count</i> single-precision floating point
numbers in the machine's native representation.  The floating point
numbers are stored in the corresponding variable as a list.  If
<i>count</i> is <b>*</b>, then all of the remaining bytes in
<i>string</i> will be scanned.  If <i>count</i> is omitted, then one
single-precision floating point number will be scanned.  The size of a
floating point number may vary across architectures, so the number of
bytes that are scanned may vary.  If the data does not represent a
valid floating point number, the resulting value is undefined and
compiler dependent.  For example, on a Windows system running on an
Intel Pentium processor,
<example>
<b>binary scan</b> \x3f\xcc\xcc\xcd f var1
</example><p>will return <b>1</b> with <b>1.6000000238418579</b> stored in
<i>var1</i>.
</p></dd>
</dle>
<dle>
<dt><b>r</b></dt>
<dd><new version="8.5">This form is the same as <b>f</b> except that the data is interpreted
as <i>count</i> single-precision floating point number in little-endian
order.  This conversion is not portable to systems not using IEEE
floating point representations.
</new></dd>
</dle>
<dle>
<dt><b>R</b></dt>
<dd><new version="8.5">This form is the same as <b>f</b> except that the data is interpreted
as <i>count</i> single-precision floating point number in big-endian
order.  This conversion is not portable to systems not using IEEE
floating point representations.
</new></dd>
</dle>
<dle>
<dt><b>d</b></dt>
<dd>This form is the same as <b>f</b> except that the data is interpreted
as <i>count</i> double-precision floating point numbers in the
machine's native representation. For example, on a Windows system
running on an Intel Pentium processor,
<example>
<b>binary scan</b> \x9a\x99\x99\x99\x99\x99\xf9\x3f d var1
</example><p>will return <b>1</b> with <b>1.6000000000000001</b>
stored in <i>var1</i>.
</p></dd>
</dle>
<dle>
<dt><b>q</b></dt>
<dd><new version="8.5">This form is the same as <b>d</b> except that the data is interpreted
as <i>count</i> double-precision floating point number in little-endian
order.  This conversion is not portable to systems not using IEEE
floating point representations.
</new></dd>
</dle>
<dle>
<dt><b>Q</b></dt>
<dd><new version="8.5">This form is the same as <b>d</b> except that the data is interpreted
as <i>count</i> double-precision floating point number in big-endian
order.  This conversion is not portable to systems not using IEEE
floating point representations.
</new></dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>Moves the cursor forward <i>count</i> bytes in <i>string</i>.  If
<i>count</i> is <b>*</b> or is larger than the number of bytes after the
current cursor position, then the cursor is positioned after
the last byte in <i>string</i>.  If <i>count</i> is omitted, then the
cursor is moved forward one byte.  Note that this type does not
consume an argument.  For example,
<example>
<b>binary scan</b> \x01\x02\x03\x04 x2H* var1
</example><p>will return <b>1</b> with <b>0304</b> stored in <i>var1</i>.
</p></dd>
</dle>
<dle>
<dt><b>X</b></dt>
<dd>Moves the cursor back <i>count</i> bytes in <i>string</i>.  If
<i>count</i> is <b>*</b> or is larger than the current cursor position,
then the cursor is positioned at location 0 so that the next byte
scanned will be the first byte in <i>string</i>.  If <i>count</i>
is omitted then the cursor is moved back one byte.  Note that this
type does not consume an argument.  For example,
<example>
<b>binary scan</b> \x01\x02\x03\x04 c2XH* var1 var2
</example><p>will return <b>2</b> with <b>1 2</b> stored in <i>var1</i> and <b>020304</b>
stored in <i>var2</i>.
</p></dd>
</dle>
<dle>
<dt><b>@</b></dt>
<dd>Moves the cursor to the absolute location in the data string specified
by <i>count</i>.  Note that position 0 refers to the first byte in
<i>string</i>.  If <i>count</i> refers to a position beyond the end of
<i>string</i>, then the cursor is positioned after the last byte.  If
<i>count</i> is omitted, then an error will be generated.  For example,
<example>
<b>binary scan</b> \x01\x02\x03\x04 c2@1H* var1 var2
</example><p>will return <b>2</b> with <b>1 2</b> stored in <i>var1</i> and <b>020304</b>
stored in <i>var2</i>.
</p></dd>
</dle>
</dl>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<p>The <b>r</b>, <b>R</b>, <b>q</b> and <b>Q</b> conversions will only work
reliably for transferring data between computers which are all using
IEEE floating point representations.  This is very common, but not
universal.  To transfer floating-point numbers portably between all
architectures, use their textual representation (as produced by
<b cat="AMBIGUOUS ambiguous cmd">format</b>) instead.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>This is a procedure to write a Tcl string to a binary-encoded channel as
UTF-8 data preceded by a length word:
</p>
<example>
proc <i>writeString</i> {channel string} {
    set data [encoding convertto utf-8 $string]
    puts -nonewline [<b>binary format</b> Ia* \
            [string length $data] $data]
}
</example>
<p>This procedure reads a string from a channel that was written by the
previously presented <i>writeString</i> procedure:
</p>
<example>
proc <i>readString</i> {channel} {
    if {![<b>binary scan</b> [read $channel 4] I length]} {
        error "missing length"
    }
    set data [read $channel $length]
    return [encoding convertfrom utf-8 $data]
}
</example>


</section>
<seealso>
<ref>format(n)</ref>
<ref>scan(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>binary</keyword>
<keyword>format</keyword>
<keyword>scan</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="bind" version="8.0" title="bind">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1998 by Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: bind.n,v 1.20 2006/11/15 13:29:17 dkf Exp $
 -->
<?TROFF.TH title="bind" section="n" date="8.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>bind</name>
<desc>Arrange for X events to invoke Tcl scripts</desc>
</namesection>
<synopsis>
<syntax>
<cmd>bind</cmd> <m>tag</m> ?<m>sequence</m>? ?<b>+</b>??<m>script</m>?
</syntax>
</synopsis>


<section>
<title>INTRODUCTION</title>
<p>The <cmd>bind</cmd> command associates Tcl scripts with X events.
If all three arguments are specified, <cmd>bind</cmd> will
arrange for <i>script</i> (a Tcl script) to be evaluated whenever
the event(s) given by <i>sequence</i> occur in the window(s)
identified by <i>tag</i>.
If <i>script</i> is prefixed with a ``+'', then it is appended to
any existing binding for <i>sequence</i>;  otherwise <i>script</i> replaces
any existing binding.
If <i>script</i> is an empty string then the current binding for
<i>sequence</i> is destroyed, leaving <i>sequence</i> unbound.
In all of the cases where a <i>script</i> argument is provided,
<cmd>bind</cmd> returns an empty string.
</p>
<p>If <i>sequence</i> is specified without a <i>script</i>, then the
script currently bound to <i>sequence</i> is returned, or
an empty string is returned if there is no binding for <i>sequence</i>.
If neither <i>sequence</i> nor <i>script</i> is specified, then the
return value is a list whose elements are all the sequences
for which there exist bindings for <i>tag</i>.
</p>
<p>The <i>tag</i> argument determines which window(s) the binding applies to.
If <i>tag</i> begins with a dot, as in <b>.a.b.c</b>, then it must
be the path name for a window; otherwise it may be an arbitrary
string.
Each window has an associated list of tags, and a binding applies
to a particular window if its tag is among those specified for
the window.
Although the <cmd>bindtags</cmd> command may be used to assign an
arbitrary set of binding tags to a window, the default binding
tags provide the following behavior:
</p>
<ul>
<li>If a tag is the name of an internal window the binding applies
to that window.
</li>
<li>If the tag is the name of a toplevel window the binding applies
to the toplevel window and all its internal windows.
</li>
<li>If the tag is the name of a class of widgets, such as <b cat="event">Button</b>,
the binding applies to all widgets in that class;
</li>
<li>If <i>tag</i> has the value <b>all</b>,
the binding applies to all windows in the application.
</li>
</ul>
</section>
<section>
<title>EVENT PATTERNS</title>
<p>The <i>sequence</i> argument specifies a sequence of one or more
event patterns, with optional white space between the patterns.  Each
event pattern may
take one of three forms.  In the simplest case it is a single
printing ASCII character, such as <b>a</b> or <b>[</b>.  The character
may not be a space character or the character <b>&lt;</b>.  This form of
pattern matches a <b>KeyPress</b> event for the particular
character.  The second form of pattern is longer but more general.
It has the following syntax:
</p>
<example>
<b>&lt;</b><i>modifier-modifier-type-detail</i><b>&gt;</b>
</example>
<p>The entire event pattern is surrounded by angle brackets.
Inside the angle brackets are zero or more modifiers, an event
type, and an extra piece of information (<i>detail</i>) identifying
a particular button or keysym.  Any of the fields may be omitted,
as long as at least one of <i>type</i> and <i>detail</i> is present.
The fields must be separated by white space or dashes.
</p>
<p>The third form of pattern is used to specify a user-defined, named virtual
event.  It has the following syntax:
</p>
<example>
<b>&lt;&lt;</b><i>name</i><b>&gt;&gt;</b>
</example>
<p>The entire virtual event pattern is surrounded by double angle brackets.
Inside the angle brackets is the user-defined name of the virtual event.
Modifiers, such as <b>Shift</b> or <b>Control</b>, may not be combined with a
virtual event to modify it.  Bindings on a virtual event may be created
before the virtual event is defined, and if the definition of a virtual
event changes dynamically, all windows bound to that virtual event will
respond immediately to the new definition.  
</p>
<p>Some widgets (e.g. <b cat="AMBIGUOUS widget cmd">menu</b> and <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b>) issue virtual events
when their internal state is updated in some ways.  Please see the
manual page for each widget for details.
</p>
<subsection>
<title>MODIFIERS</title>
<p>Modifiers consist of any of the following values:
</p>
<?TABSTOPS 6c?>
<sl cols="2">
<li>Alt</li>
<li>Button1, B1</li>
<li>Button2, B2</li>
<li>Button3, B3</li>
<li>Button4, B4</li>
<li>Button5, B5</li>
<li>Control</li>
<li>Double</li>
<li>Extended</li>
<li>Lock</li>
<li>Meta, M</li>
<li>Mod1, M1</li>
<li>Mod2, M2</li>
<li>Mod3, M3</li>
<li>Mod4, M4</li>
<li>Mod5, M5</li>
<li>Quadruple</li>
<li>Shift</li>
<li>Triple</li>
</sl>
<p>Where more than one value is listed, separated by commas, the values
are equivalent.
Most of the modifiers have the obvious X meanings.
For example, <b>Button1</b> requires that
button 1 be depressed when the event occurs.
For a binding to match a given event, the modifiers in the event
must include all of those specified in the event pattern.
An event may also contain additional modifiers not specified in
the binding.
For example, if button 1 is pressed while the shift and control keys
are down, the pattern <b>&lt;Control-Button-1&gt;</b> will match
the event, but <b>&lt;Mod1-Button-1&gt;</b> will not.
If no modifiers are specified, then any combination of modifiers may
be present in the event.
</p>
<p><b>Meta</b> and <b>M</b> refer to whichever of the
<b>M1</b> through <b>M5</b> modifiers is associated with the Meta
key(s) on the keyboard (keysyms <b>Meta_R</b> and <b>Meta_L</b>).
If there are no Meta keys, or if they are not associated with any
modifiers, then <b>Meta</b> and <b>M</b> will not match any events.
Similarly, the <b>Alt</b> modifier refers to whichever modifier
is associated with the alt key(s) on the keyboard (keysyms
<b>Alt_L</b> and <b>Alt_R</b>).
</p>
<p>The <b>Double</b>, <b>Triple</b> and <b>Quadruple</b> modifiers are a
convenience for specifying double mouse clicks and other repeated
events. They cause a particular event pattern to be repeated 2, 3 or 4
times, and also place a time and space requirement on the sequence: for a
sequence of events to match a <b>Double</b>, <b>Triple</b> or <b>Quadruple</b>
pattern, all of the events must occur close together in time and without
substantial mouse motion in between.  For example, <b>&lt;Double-Button-1&gt;</b>
is equivalent to <b>&lt;Button-1&gt;&lt;Button-1&gt;</b> with the extra time and space
requirement.
</p>
<p><new version="8.5">The <b>Extended</b> modifier is, at present, specific to Windows.  It
appears on events that are associated with the keys on the "extended
keyboard."  On a US keyboard, the extended keys include the <b>Alt</b>
and <b>Control</b> keys at the right of the keyboard, the cursor keys
in the cluster to the left of the numeric pad, the <b>NumLock</b> key,
the <b>Break</b> key, the <b>PrintScreen</b> key, and the <b>/</b> and
<b cat="event">Enter</b> keys in the numeric keypad.
</new></p>
</subsection>
<subsection>
<title>EVENT TYPES</title>
<p>The <i>type</i> field may be any of the standard X event types, with a
few extra abbreviations.  The <i>type</i> field will also accept a
couple non-standard X event types that were added to better support
the Macintosh and Windows platforms.  Below is a list of all the valid
types; where two names appear together, they are synonyms.
</p>
<?TABSTOPS {\w'ButtonPress,} {Button\0\0\0'u} {+\w'KeyPress,} {Key\0\0\0'u}?>
<sl cat="event" cols="5">
<li>Activate</li>
<li>ButtonPress, Button</li>
<li>ButtonRelease</li>
<li>Circulate</li>
<li>CirculateRequest</li>
<li>Colormap</li>
<li>Configure</li>
<li>ConfigureRequest</li>
<li>Create</li>
<li>Deactivate</li>
<li>Destroy</li>
<li>Enter</li>
<li>Expose</li>
<li>FocusIn</li>
<li>FocusOut</li>
<li>Gravity</li>
<li>KeyPress, Key</li>
<li>KeyRelease</li>
<li>Leave</li>
<li>Map</li>
<li>MapRequest</li>
<li>Motion</li>
<li>MouseWheel</li>
<li>Property</li>
<li>Reparent</li>
<li>ResizeRequest</li>
<li>Unmap</li>
<li>Visibility</li>
</sl>
<p>Most of the above events have the same fields and behaviors as events
in the X Windowing system.  You can find more detailed descriptions of
these events in any X window programming book.  A couple of the events
are extensions to the X event system to support features unique to the
Macintosh and Windows platforms.  We provide a little more detail on
these events here.  These include:
</p>
<dl>
<dle>
<dt><b>Activate</b>, <b>Deactivate</b></dt>
<dd>These two events are sent to every sub-window of a toplevel when they
change state.  In addition to the focus Window, the Macintosh platform
and Windows platforms have a notion of an active window (which often
has but is not required to have the focus).  On the Macintosh, widgets
in the active window have a different appearance than widgets in
deactive windows.  The <b cat="event">Activate</b> event is sent to all the
sub-windows in a toplevel when it changes from being deactive to
active.  Likewise, the <b>Deactive</b> event is sent when the window's
state changes from active to deactive.  There are no useful percent
substitutions you would make when binding to these events.
</dd>
</dle>
<dle>
<dt><b>MouseWheel</b></dt>
<dd>Many contemporary mice support a mouse wheel, which is used
for scrolling documents without using the scrollbars.  By rolling the
wheel, the system will generate <b cat="event">MouseWheel</b> events that the
application can use to scroll.  Like <b cat="event">Key</b> events the event is
always routed to the window that currently has focus. When the event
is received you can use the <b>%D</b> substitution to get the
<i>delta</i> field for the event, which is a integer value describing how
the mouse wheel has moved.  The smallest value for which the
system will report is defined by the OS.  On Windows 95 &amp; 98 machines
this value is at least 120 before it is reported.  However, higher
resolution devices may be available in the future.  The sign of the
value determines which direction your widget should scroll.  Positive
values should scroll up and negative values should scroll down.
</dd>
</dle>
<dle>
<dt><b>KeyPress</b>, <b>KeyRelease</b></dt>
<dd>The <b>KeyPress</b> and <b cat="event">KeyRelease</b> events are generated
whenever a key is pressed or released.  <b>KeyPress</b> and <b cat="event">KeyRelease</b>
events are sent to the window which currently has the keyboard focus.
</dd>
</dle>
<dle>
<dt><b>ButtonPress</b>, <b>ButtonRelease</b>, <b>Motion</b></dt>
<dd>The <b cat="event">ButtonPress</b> and <b cat="event">ButtonRelease</b> events
are generated when the user presses or releases a mouse button.
<b cat="event">Motion</b> events are generated whenever the pointer is moved.
<b cat="event">ButtonPress</b>, <b cat="event">ButtonRelease</b>, and <b cat="event">Motion</b> events are 
normally sent to the window containing the pointer.
<p>When a mouse button is pressed, the window containing the pointer
automatically obtains a temporary pointer grab.
Subsequent <b cat="event">ButtonPress</b>, <b cat="event">ButtonRelease</b>, and <b cat="event">Motion</b> 
events will be sent to that window,
regardless of which window contains the pointer,
until all buttons have been released.
</p></dd>
</dle>
<dle>
<dt><b>Configure</b></dt>
<dd>A <b cat="event">Configure</b> event is sent to a window whenever its
size, position, or border width changes, and sometimes
when it has changed position in the stacking order.
</dd>
</dle>
<dle>
<dt><b>Map</b>, <b>Unmap</b></dt>
<dd>The <b cat="event">Map</b> and <b cat="event">Unmap</b> events are generated whenever the mapping
state of a window changes.
<p>Windows are created in the unmapped state.
Top-level windows become mapped when they transition to the
<b>normal</b> state, and are unmapped in the <b>withdrawn</b>
and <b>iconic</b> states.
Other windows become mapped when they are placed under control
of a geometry manager (for example <cmd>pack</cmd> or <cmd>grid</cmd>).
</p><p>A window is <i>viewable</i> only if it and all of its ancestors are mapped.
Note that geometry managers typically do not map their children until 
they have been mapped themselves, and unmap all children
when they become unmapped; hence in Tk <b cat="event">Map</b> and <b cat="event">Unmap</b>
events indicate whether or not a window is viewable.
</p></dd>
</dle>
<dle>
<dt><b>Visibility</b></dt>
<dd>A window is said to be <i>obscured</i> when another window
above it in the stacking order fully or partially overlaps it.
<b cat="event">Visibility</b> events are generated whenever a window's
obscurity state changes; the <i>state</i> field (<b>%s</b>)
specifies the new state.
</dd>
</dle>
<dle>
<dt><b>Expose</b></dt>
<dd>An <b cat="event">Expose</b> event is generated whenever all or part of a
window should be redrawn (for example, when a window is
first mapped or if it becomes unobscured).
It is normally not necessary for client applications to 
handle <b cat="event">Expose</b> events, since Tk handles them internally.
</dd>
</dle>
<dle>
<dt><b>Destroy</b></dt>
<dd>A <b cat="event">Destroy</b> event is delivered to a window when 
it is destroyed.
<p>When the <b cat="event">Destroy</b> event is delivered
to a widget, it is in a ``half-dead'' state: the widget still exists,
but most operations on it will fail.
</p></dd>
</dle>
<dle>
<dt><b>FocusIn</b>, <b>FocusOut</b></dt>
<dd>The <b cat="event">FocusIn</b> and <b cat="event">FocusOut</b> events are generated
whenever the keyboard focus changes.
A <b cat="event">FocusOut</b> event is sent to the old focus window,
and a <b cat="event">FocusIn</b> event is sent to the new one.
<p>In addition,
if the old and new focus windows do not share a common parent,
``virtual crossing'' focus events are sent to the intermediate
windows in the hierarchy.
Thus a <b cat="event">FocusIn</b> event indicates
that the target window or one of its descendants has acquired the focus,
and a <b cat="event">FocusOut</b> event indicates that the focus 
has been changed to a window outside the target window's hierarchy.
</p><p>The keyboard focus may be changed explicitly by a call to <cmd>focus</cmd>,
or implicitly by the window manager.  
</p></dd>
</dle>
<dle>
<dt><b>Enter</b>, <b>Leave</b></dt>
<dd>An <b cat="event">Enter</b> event is sent to a window when the pointer
enters that window, and a <b cat="event">Leave</b> event is sent when
the pointer leaves it.  
<p>If there is a pointer grab in effect, <b cat="event">Enter</b> and <b cat="event">Leave</b>
events are only delivered to the window owning the grab.
</p><p>In addition, when the pointer moves
between two windows, <b cat="event">Enter</b> and <b cat="event">Leave</b>
``virtual crossing'' events are sent to intermediate windows
in the hierarchy in the same manner as for <b cat="event">FocusIn</b> and
<b cat="event">FocusOut</b> events.
</p></dd>
</dle>
<dle>
<dt><b>Property</b></dt>
<dd>A <b cat="event">Property</b> event is sent to a window whenever an X property
belonging to that window is changed or deleted.
<b cat="event">Property</b> events are not normally delivered to Tk applications as
they are handled by the Tk core.
</dd>
</dle>
<dle>
<dt><b>Colormap</b></dt>
<dd>A <b cat="event">Colormap</b> event is generated whenever the colormap
associated with a window has been changed, installed, or uninstalled.
<p>Widgets may be assigned a private colormap by
specifying a <b>-colormap</b> option; the window manager
is responsible for installing and uninstalling colormaps
as necessary.
</p><p>Note that Tk provides no useful details for this event type.
</p></dd>
</dle>
<dle>
<dt><b>MapRequest</b>, <b>CirculateRequest</b>, <b>ResizeRequest</b>, <b>ConfigureRequest</b>, <b>Create</b></dt>
<dd>These events are not normally delivered to Tk applications.
They are included for completeness, to make it possible to
write X11 window managers in Tk.
(These events are only delivered when a client has
selected <b>SubstructureRedirectMask</b> on a window;
the Tk core does not use this mask.)
</dd>
</dle>
<dle>
<dt><b>Gravity</b>, <b>Reparent</b>, <b>Circulate</b></dt>
<dd>The events <b cat="event">Gravity</b> and <b cat="event">Reparent</b>
are not normally delivered to Tk applications.
They are included for completeness.
<p>A <b cat="event">Circulate</b> event indicates that the window has moved
to the top or to the bottom of the stacking order as
a result of an <b>XCirculateSubwindows</b> protocol request.
Note that the stacking order may be changed for other reasons
which do not generate a <b cat="event">Circulate</b> event, and that
Tk does not use <b>XCirculateSubwindows()</b> internally.
This event type is included only for completeness;
there is no reliable way to track changes to a window's
position in the stacking order.
</p></dd>
</dle>
</dl>
</subsection>
<subsection>
<title>EVENT DETAILS</title>
<p>The last part of a long event specification is <i>detail</i>.  In the
case of a <b cat="event">ButtonPress</b> or <b cat="event">ButtonRelease</b> event, it is the
number of a button (1-5).  If a button number is given, then only an
event on that particular button will match;  if no button number is
given, then an event on any button will match.  Note:  giving a
specific button number is different than specifying a button modifier;
in the first case, it refers to a button being pressed or released,
while in the second it refers to some other button that is already
depressed when the matching event occurs.  If a button
number is given then <i>type</i> may be omitted:  if will default
to <b cat="event">ButtonPress</b>.  For example, the specifier <b>&lt;1&gt;</b>
is equivalent to <b>&lt;ButtonPress-1&gt;</b>.
</p>
<p>If the event type is <b>KeyPress</b> or <b cat="event">KeyRelease</b>, then
<i>detail</i> may be specified in the form of an X keysym.  Keysyms
are textual specifications for particular keys on the keyboard;
they include all the alphanumeric ASCII characters (e.g. ``a'' is
the keysym for the ASCII character ``a''), plus descriptions for
non-alphanumeric characters (``comma'' is the keysym for the comma
character), plus descriptions for all the non-ASCII keys on the
keyboard (``Shift_L'' is the keysym for the left shift key, and
``F1'' is the keysym for the F1 function key, if it exists).  The
complete list of keysyms is not presented here;  it is
available in other X documentation and may vary from system to
system.
If necessary, you can use the <b>%K</b> notation described below
to print out the keysym name for a particular key.
If a keysym <i>detail</i> is given, then the
<i>type</i> field may be omitted;  it will default to <b>KeyPress</b>.
For example, <b>&lt;Control-comma&gt;</b> is equivalent to
<b>&lt;Control-KeyPress-comma&gt;</b>.
</p>
</subsection>
</section>
<section>
<title>BINDING SCRIPTS AND SUBSTITUTIONS</title>
<p>The <i>script</i> argument to <cmd>bind</cmd> is a Tcl script,
which will be executed whenever the given event sequence occurs.
<i>Command</i> will be executed in the same interpreter that the
<cmd>bind</cmd> command was executed in, and it will run at global
level (only global variables will be accessible).
If <i>script</i> contains
any <b>%</b> characters, then the script will not be
executed directly.  Instead, a new script will be
generated by replacing each <b>%</b>, and the character following
it, with information from the current event.  The replacement
depends on the character following the <b>%</b>, as defined in the
list below.  Unless otherwise indicated, the
replacement string is the decimal value of the given field from
the current event.
Some of the substitutions are only valid for
certain types of events;  if they are used for other types of events
the value substituted is undefined.
</p>
<dl>
<dle>
<dt><b>%%</b></dt>
<dd>Replaced with a single percent.
</dd>
</dle>
<dle>
<dt><b>%#</b></dt>
<dd>The number of the last client request processed by the server
(the <i>serial</i> field from the event).  Valid for all event
types.
</dd>
</dle>
<dle>
<dt><b>%a</b></dt>
<dd>The <i>above</i> field from the event,
formatted as a hexadecimal number.
Valid only for <b cat="event">Configure</b> events.
Indicates the sibling window immediately below the receiving window
in the stacking order, or <b>0</b> if the receiving window is at the
bottom.
</dd>
</dle>
<dle>
<dt><b>%b</b></dt>
<dd>The number of the button that was pressed or released.  Valid only
for <b cat="event">ButtonPress</b> and <b cat="event">ButtonRelease</b> events.
</dd>
</dle>
<dle>
<dt><b>%c</b></dt>
<dd>The <i>count</i> field from the event.  Valid only for <b cat="event">Expose</b> events.
Indicates that there are <i>count</i> pending <b cat="event">Expose</b> events which have not
yet been delivered to the window.
</dd>
</dle>
<dle>
<dt><b>%d</b></dt>
<dd>The <i>detail</i>
<new version="8.5">or <i>user_data</i>
</new>field from the event.  The <b>%d</b> is replaced by
a string identifying the detail.  For <b cat="event">Enter</b>,
<b cat="event">Leave</b>, <b cat="event">FocusIn</b>, and <b cat="event">FocusOut</b> events,
the string will be one of the following:
<?TROFF.RS?><?TABSTOPS 6c?><sl cols="2">
<li>NotifyAncestor</li>
<li>NotifyDetailNone</li>
<li>NotifyInferior</li>
<li>NotifyNonlinear</li>
<li>NotifyNonlinearVirtual</li>
<li>NotifyPointer</li>
<li>NotifyPointerRoot</li>
<li>NotifyVirtual</li>
</sl><p>For <b cat="event">ConfigureRequest</b> events, the string will be one of:
</p><?TABSTOPS 6c?><sl cols="2">
<li>Above</li>
<li>Below</li>
<li>BottomIf</li>
<li>None</li>
<li>Opposite</li>
<li>TopIf</li>
</sl><?NEW 8.5?><p>For virtual events, the string will be whatever value is stored in the
<i>user_data</i> field when the event was created (typically with
<b>event generate</b>), or the empty string if the field is NULL.
Virtual events corresponding to key sequence presses (see <b>event
add</b> for details) set the <i>user_data</i> to NULL.
<?ENDNEW CONFUSED 8.5?>For events other than these, the substituted string is undefined.
</p><?TROFF.RE?></dd>
</dle>
<dle>
<dt><b>%f</b></dt>
<dd>The <i>focus</i> field from the event (<b>0</b> or <b>1</b>).  Valid only
for <b cat="event">Enter</b> and <b cat="event">Leave</b> events.  <b>1</b> if the receiving 
window is the focus window or a descendant of the focus window, 
<b>0</b> otherwise.
</dd>
</dle>
<dle>
<dt><b>%h</b></dt>
<dd>The <i>height</i> field from the event.  Valid for the <b cat="event">Configure</b>,
<b cat="event">ConfigureRequest</b>, <b cat="event">Create</b>, <b cat="event">ResizeRequest</b>, and
<b cat="event">Expose</b> events.
Indicates the new or requested height of the window.
</dd>
</dle>
<dle>
<dt><b>%i</b></dt>
<dd>The <i>window</i> field from the event, represented as a hexadecimal
integer.  Valid for all event types.
</dd>
</dle>
<dle>
<dt><b>%k</b></dt>
<dd>The <i>keycode</i> field from the event.  Valid only for <b>KeyPress</b>
and <b cat="event">KeyRelease</b> events.
</dd>
</dle>
<dle>
<dt><b>%m</b></dt>
<dd>The <i>mode</i> field from the event.  The substituted string is one of
<b>NotifyNormal</b>, <b>NotifyGrab</b>, <b>NotifyUngrab</b>, or
<b>NotifyWhileGrabbed</b>.  Valid only for <b cat="event">Enter</b>,
<b cat="event">FocusIn</b>, <b cat="event">FocusOut</b>, and <b cat="event">Leave</b> events.
</dd>
</dle>
<dle>
<dt><b>%o</b></dt>
<dd>The <i>override_redirect</i> field from the event.  Valid only for
<b cat="event">Map</b>, <b cat="event">Reparent</b>, and <b cat="event">Configure</b> events.
</dd>
</dle>
<dle>
<dt><b>%p</b></dt>
<dd>The <i>place</i> field from the event, substituted as one of the
strings <b>PlaceOnTop</b> or <b>PlaceOnBottom</b>.  Valid only
for <b cat="event">Circulate</b> and <b cat="event">CirculateRequest</b> events.
</dd>
</dle>
<dle>
<dt><b>%s</b></dt>
<dd>The <i>state</i> field from the event.  For <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b>KeyPress</b>, <b cat="event">KeyRelease</b>,
<b cat="event">Leave</b>, and <b cat="event">Motion</b> events, a decimal string
is substituted.  For <b cat="event">Visibility</b>, one of the strings
<b>VisibilityUnobscured</b>, <b>VisibilityPartiallyObscured</b>,
and <b>VisibilityFullyObscured</b> is substituted.
For <b cat="event">Property</b> events, substituted with
either the string <b>NewValue</b> (indicating that the property
has been created or modified) or <b>Delete</b> (indicating that
the property has been removed).
</dd>
</dle>
<dle>
<dt><b>%t</b></dt>
<dd>The <i>time</i> field from the event.
This is the X server timestamp (typically the time since
the last server reset) in milliseconds, when the event occurred.
Valid for most events.  
</dd>
</dle>
<dle>
<dt><b>%w</b></dt>
<dd>The <i>width</i> field from the event.
Indicates the new or requested width of the window.
Valid only for
<b cat="event">Configure</b>, <b cat="event">ConfigureRequest</b>, <b cat="event">Create</b>,
<b cat="event">ResizeRequest</b>, and <b cat="event">Expose</b> events.
</dd>
</dle>
<dle>
<dt><b>%x</b>, <b>%y</b></dt>
<dd>The <i>x</i> and <i>y</i> fields from the event.
For <b cat="event">ButtonPress</b>, <b cat="event">ButtonRelease</b>, <b cat="event">Motion</b>, 
<b>KeyPress</b>, <b cat="event">KeyRelease</b>, and <b cat="event">MouseWheel</b> events,
<b>%x</b> and <b>%y</b> indicate the position of the mouse pointer
relative to the receiving window.
For <b cat="event">Enter</b> and <b cat="event">Leave</b> events, the position where the 
mouse pointer crossed the window, relative to the receiving window.
For <b cat="event">Configure</b> and <b cat="event">Create</b> requests, the <i>x</i> and <i>y</i>
coordinates of the window relative to its parent window.
</dd>
</dle>
<dle>
<dt><b>%A</b></dt>
<dd>Substitutes the UNICODE character corresponding to the event, or
the empty string if the event doesn't correspond to a UNICODE character
(e.g. the shift key was pressed). <b>XmbLookupString</b> (or
<b>XLookupString</b> when input method support is turned off) does all
the work of translating from the event to a UNICODE character.
Valid only for <b>KeyPress</b> and <b cat="event">KeyRelease</b> events.
</dd>
</dle>
<dle>
<dt><b>%B</b></dt>
<dd>The <i>border_width</i> field from the event.  Valid only for
<b cat="event">Configure</b>, <b cat="event">ConfigureRequest</b>, and <b cat="event">Create</b> events.
</dd>
</dle>
<dle>
<dt><b>%D</b></dt>
<dd>This reports the <i>delta</i> value of a <b cat="event">MouseWheel</b> event.  The
<i>delta</i> value represents the rotation units the mouse wheel has
been moved.  On Windows 95 &amp; 98 systems the smallest value for the
delta is 120.  Future systems may support higher resolution values for
the delta.  The sign of the value represents the direction the mouse
wheel was scrolled.
</dd>
</dle>
<dle>
<dt><b>%E</b></dt>
<dd>The <i>send_event</i> field from the event.  Valid for all event types.
<b>0</b> indicates that this is a ``normal'' event, <b>1</b> indicates
that it is a ``synthetic'' event generated by <b>SendEvent</b>.
</dd>
</dle>
<dle>
<dt><b>%K</b></dt>
<dd>The keysym corresponding to the event, substituted as a textual
string.  Valid only for <b>KeyPress</b> and <b cat="event">KeyRelease</b> events.
</dd>
</dle>
<dle>
<dt><b>%N</b></dt>
<dd>The keysym corresponding to the event, substituted as a decimal
number.  Valid only for <b>KeyPress</b> and <b cat="event">KeyRelease</b> events.
</dd>
</dle>
<dle>
<dt><b>%P</b></dt>
<dd>The name of the property being updated or deleted (which
may be converted to an XAtom using <b>winfo atom</b>.) Valid
only for <b cat="event">Property</b> events.
</dd>
</dle>
<dle>
<dt><b>%R</b></dt>
<dd>The <i>root</i> window identifier from the event.  Valid only for
events containing a <i>root</i> field.
</dd>
</dle>
<dle>
<dt><b>%S</b></dt>
<dd>The <i>subwindow</i> window identifier from the event,
formatted as a hexadecimal number.
Valid only for events containing a <i>subwindow</i> field.
</dd>
</dle>
<dle>
<dt><b>%T</b></dt>
<dd>The <i>type</i> field from the event.  Valid for all event types.
</dd>
</dle>
<dle>
<dt><b>%W</b></dt>
<dd>The path name of the window to which the event was reported (the
<i>window</i> field from the event).  Valid for all event types.
</dd>
</dle>
<dle>
<dt><b>%X</b></dt>
<dd>The <i>x_root</i> field from the event.
If a virtual-root window manager is being used then the substituted
value is the corresponding x-coordinate in the virtual root.
Valid only for
<b cat="event">ButtonPress</b>, <b cat="event">ButtonRelease</b>, <b>KeyPress</b>, <b cat="event">KeyRelease</b>,
and <b cat="event">Motion</b> events.
Same meaning as <b>%x</b>, except relative to the (virtual) root window.
</dd>
</dle>
<dle>
<dt><b>%Y</b></dt>
<dd>The <i>y_root</i> field from the event.
If a virtual-root window manager is being used then the substituted
value is the corresponding y-coordinate in the virtual root.
Valid only for
<b cat="event">ButtonPress</b>, <b cat="event">ButtonRelease</b>, <b>KeyPress</b>, <b cat="event">KeyRelease</b>,
and <b cat="event">Motion</b> events.
Same meaning as <b>%y</b>, except relative to the (virtual) root window.
</dd>
</dle>
</dl>
<p>The replacement string for a %-replacement is formatted as a proper
Tcl list element.
This means that it will be surrounded with braces
if it contains spaces, or special characters such as <b>$</b> and
<b>{</b> may be preceded by backslashes.
This guarantees that the string will be passed through the Tcl
parser when the binding script is evaluated.
Most replacements are numbers or well-defined strings such
as <b>Above</b>;  for these replacements no special formatting
is ever necessary.
The most common case where reformatting occurs is for the <b>%A</b>
substitution.  For example, if <i>script</i> is
</p>
<example>
<b>insert %A</b>
</example>
<p>and the character typed is an open square bracket, then the script
actually executed will be
</p>
<example>
<b>insert \[</b>
</example>
<p>This will cause the <b>insert</b> to receive the original replacement
string (open square bracket) as its first argument.
If the extra backslash hadn't been added, Tcl would not have been
able to parse the script correctly.
</p>
</section>
<section>
<title>MULTIPLE MATCHES</title>
<p>It is possible for several bindings to match a given X event.
If the bindings are associated with different <i>tag</i>'s,
then each of the bindings will be executed, in order.
By default, a binding for the widget will be executed first, followed
by a class binding, a binding for its toplevel, and
an <b>all</b> binding.
The <cmd>bindtags</cmd> command may be used to change this order for
a particular window or to associate additional binding tags with
the window.
</p>
<p>The <cmd>continue</cmd> and <cmd>break</cmd> commands may be used inside a
binding script to control the processing of matching scripts.
If <cmd>continue</cmd> is invoked, then the current binding script
is terminated but Tk will continue processing binding scripts
associated with other <i>tag</i>'s.
If the <cmd>break</cmd> command is invoked within a binding script,
then that script terminates and no other scripts will be invoked
for the event.
</p>
<p>If more than one binding matches a particular event and they
have the same <i>tag</i>, then the most specific binding
is chosen and its script is evaluated.
The following tests are applied, in order, to determine which of
several matching sequences is more specific:
(a) an event pattern that specifies a specific button or key is more specific
than one that doesn't;
(b) a longer sequence (in terms of number
of events matched) is more specific than a shorter sequence;
(c) if the modifiers specified in one pattern are a subset of the
modifiers in another pattern, then the pattern with more modifiers
is more specific.
(d) a virtual event whose physical pattern matches the sequence is less
specific than the same physical pattern that is not associated with a 
virtual event.
(e) given a sequence that matches two or more virtual events, one 
of the virtual events will be chosen, but the order is undefined.
</p>
<p>If the matching sequences contain more than one event, then tests
(c)-(e) are applied in order from the most recent event to the least recent
event in the sequences.  If these tests fail to determine a winner, then the
most recently registered sequence is the winner.
</p>
<p>If there are two (or more) virtual events that are both triggered by the
same sequence, and both of those virtual events are bound to the same window
tag, then only one of the virtual events will be triggered, and it will
be picked at random:  
</p>
<example>
event add &lt;&lt;Paste&gt;&gt; &lt;Control-y&gt;
event add &lt;&lt;Paste&gt;&gt; &lt;Button-2&gt;
event add &lt;&lt;Scroll&gt;&gt; &lt;Button-2&gt;
<cmd>bind</cmd> Entry &lt;&lt;Paste&gt;&gt; {puts Paste}
<cmd>bind</cmd> Entry &lt;&lt;Scroll&gt;&gt; {puts Scroll}
</example>
<p>If the user types Control-y, the <b>&lt;&lt;Paste&gt;&gt;</b> binding
will be invoked, but if the user presses button 2 then one of
either the <b>&lt;&lt;Paste&gt;&gt;</b> or the <b>&lt;&lt;Scroll&gt;&gt;</b> bindings will
be invoked, but exactly which one gets invoked is undefined.
</p>
<p>If an X event does not match any of the existing bindings, then the
event is ignored.
An unbound event is not considered to be an error.
</p>
</section>
<section>
<title>MULTI-EVENT SEQUENCES AND IGNORED EVENTS</title>
<p>When a <i>sequence</i> specified in a <cmd>bind</cmd> command contains
more than one event pattern, then its script is executed whenever
the recent events (leading up to and including the current event)
match the given sequence.  This means, for example, that if button 1 is
clicked repeatedly the sequence <b>&lt;Double-ButtonPress-1&gt;</b> will match
each button press but the first.
If extraneous events that would prevent a match occur in the middle
of an event sequence then the extraneous events are
ignored unless they are <b>KeyPress</b> or <b cat="event">ButtonPress</b> events.
For example, <b>&lt;Double-ButtonPress-1&gt;</b> will match a sequence of
presses of button 1, even though there will be <b cat="event">ButtonRelease</b>
events (and possibly <b cat="event">Motion</b> events) between the
<b cat="event">ButtonPress</b> events.
Furthermore, a <b>KeyPress</b> event may be preceded by any number
of other <b>KeyPress</b> events for modifier keys without the
modifier keys preventing a match.
For example, the event sequence <b>aB</b> will match a press of the
<b>a</b> key, a release of the <b>a</b> key, a press of the <b>Shift</b>
key, and a press of the <b>b</b> key:  the press of <b>Shift</b> is
ignored because it is a modifier key.
Finally, if several <b cat="event">Motion</b> events occur in a row, only
the last one is used for purposes of matching binding sequences.
</p>
</section>
<section>
<title>ERRORS</title>
<p>If an error occurs in executing the script for a binding then the
<b>bgerror</b> mechanism is used to report the error.
The <b>bgerror</b> command will be executed at global level
(outside the context of any Tcl procedure).
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Arrange for a string describing the motion of the mouse to be printed
out when the mouse is double-clicked:
</p>
<example>
<cmd>bind</cmd> . &lt;Double-1&gt; {
    puts "hi from (%x,%y)"
}
</example>
<p>A little GUI that displays what the keysym name of the last key
pressed is:
</p>
<example>
set keysym "Press any key"
pack [label .l -textvariable keysym -padx 2m -pady 1m]
<cmd>bind</cmd> . &lt;Key&gt; {
    set keysym "You pressed %K"
}
</example>


</section>
<seealso>
<ref>bgerror(n)</ref>
<ref>bindtags(n)</ref>
<ref>event(n)</ref>
<ref>focus(n)</ref>
<ref>grab(n)</ref>
<ref>keysyms(n)</ref>
</seealso>
<keywords>
<keyword>binding</keyword>
<keyword>event</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="BindTable" version="4.0" title="Tk_CreateBindingTable">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: BindTable.3,v 1.5 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CreateBindingTable" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateBindingTable</name>
<name>Tk_DeleteBindingTable</name>
<name>Tk_CreateBinding</name>
<name>Tk_DeleteBinding</name>
<name>Tk_GetBinding</name>
<name>Tk_GetAllBindings</name>
<name>Tk_DeleteAllBindings</name>
<name>Tk_BindEvent</name>
<desc>invoke scripts in response to X events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_BindingTable
<b>Tk_CreateBindingTable(</b><m>interp</m><b>)</b>

<b>Tk_DeleteBindingTable(</b><m>bindingTable</m><b>)</b>

unsigned long
<b>Tk_CreateBinding(</b><m>interp</m>, <m>bindingTable</m>, <m>object</m>, <m>eventString</m>, <m>script</m>, <m>append</m><b>)</b>

int
<b>Tk_DeleteBinding(</b><m>interp</m>, <m>bindingTable</m>, <m>object</m>, <m>eventString</m><b>)</b>

const char *
<b>Tk_GetBinding(</b><m>interp</m>, <m>bindingTable</m>, <m>object</m>, <m>eventString</m><b>)</b>

<b>Tk_GetAllBindings(</b><m>interp</m>, <m>bindingTable</m>, <m>object</m><b>)</b>

<b>Tk_DeleteAllBindings(</b><m>bindingTable</m>, <m>object</m><b>)</b>

<b>Tk_BindEvent(</b><m>bindingTable</m>, <m>eventPtr</m>, <m>tkwin</m>, <m>numObjects</m>, <m>objectPtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use when invoking bindings in binding table.  Also
used for returning results and errors from binding procedures.
</desc>
</argdef>
<argdef>
<argtype>Tk_BindingTable</argtype>
<name>bindingTable</name>
<argmode>in</argmode>
<desc>Token for binding table;  must have been returned by some previous
call to <fun>Tk_CreateBindingTable</fun>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>object</name>
<argmode>in</argmode>
<desc>Identifies object with which binding is associated.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="eventString">*eventString</name>
<argmode>in</argmode>
<desc>String describing event sequence.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="script">*script</name>
<argmode>in</argmode>
<desc>Tcl script to invoke when binding triggers.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>append</name>
<argmode>in</argmode>
<desc>Non-zero means append <i>script</i> to existing script for binding,
if any; zero means replace existing script with new one.
</desc>
</argdef>
<argdef>
<argtype>XEvent</argtype>
<name name="eventPtr">*eventPtr</name>
<argmode>in</argmode>
<desc>X event to match against bindings in <i>bindingTable</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Identifier for any window on the display where the event occurred.
Used to find display-related information such as key maps.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numObjects</name>
<argmode>in</argmode>
<desc>Number of object identifiers pointed to by <i>objectPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="objectPtr">*objectPtr</name>
<argmode>in</argmode>
<desc>Points to an array of object identifiers:  bindings will be considered
for each of these objects in order from first to last.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures provide a general-purpose mechanism for creating
and invoking bindings.
Bindings are organized in terms of <i>binding tables</i>.
A binding table consists of a collection of bindings plus a history
of recent events.
Within a binding table, bindings are associated with <i>objects</i>.
The meaning of an object is defined by clients of the binding package.
For example, Tk keeps uses one binding table to hold all of the bindings
created by the <cmd>bind</cmd> command.
For this table, objects are pointers to strings such as window names, class
names, or other binding tags such as <b>all</b>.
Tk also keeps a separate binding table for each canvas widget, which manages
bindings created by the canvas's <cmd>bind</cmd> widget command;  within
this table, an object is either a pointer to the internal structure for a
canvas item or a Tk_Uid identifying a tag.
</p>
<p>The procedure <fun>Tk_CreateBindingTable</fun> creates a new binding
table and associates <i>interp</i> with it (when bindings in the
table are invoked, the scripts will be evaluated in <i>interp</i>).
<fun>Tk_CreateBindingTable</fun> returns a token for the table, which
must be used in calls to other procedures such as <fun>Tk_CreateBinding</fun>
or <fun>Tk_BindEvent</fun>.
</p>
<p><fun>Tk_DeleteBindingTable</fun> frees all of the state associated
with a binding table.
Once it returns the caller should not use the <i>bindingTable</i>
token again.
</p>
<p><fun>Tk_CreateBinding</fun> adds a new binding to an existing table.
The <i>object</i> argument identifies the object with which the
binding is to be associated, and it may be any one-word value.
Typically it is a pointer to a string or data structure.
The <i>eventString</i> argument identifies the event or sequence
of events for the binding;  see the documentation for the
<cmd>bind</cmd> command for a description of its format.
<i>script</i> is the Tcl script to be evaluated when the binding
triggers.
<i>append</i> indicates what to do if there already
exists a binding for <i>object</i> and <i>eventString</i>:  if <i>append</i>
is zero then <i>script</i> replaces the old script;  if <i>append</i>
is non-zero then the new script is appended to the old one.
<fun>Tk_CreateBinding</fun> returns an X event mask for all the events
associated with the bindings.
This information may be useful to invoke <b>XSelectInput</b> to
select relevant events, or to disallow the use of certain events
in bindings.
If an error occurred while creating the binding (e.g., <i>eventString</i>
refers to a non-existent event), then 0 is returned and an error
message is left in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_DeleteBinding</fun> removes from <i>bindingTable</i> the
binding given by <i>object</i> and <i>eventString</i>, if
such a binding exists.
<fun>Tk_DeleteBinding</fun> always returns <b>TCL_OK</b>.
In some cases it may reset <i>interp-&gt;result</i> to the default
empty value.
</p>
<p><fun>Tk_GetBinding</fun> returns a pointer to the script associated
with <i>eventString</i> and <i>object</i> in <i>bindingTable</i>.
If no such binding exists then NULL is returned and an error
message is left in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_GetAllBindings</fun> returns in <i>interp-&gt;result</i> a list
of all the event strings for which there are bindings in
<i>bindingTable</i> associated with <i>object</i>.
If there are no bindings for <i>object</i> then an empty
string is returned in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_DeleteAllBindings</fun> deletes all of the bindings in
<i>bindingTable</i> that are associated with <i>object</i>.
</p>
<p><fun>Tk_BindEvent</fun> is called to process an event.
It makes a copy of the event in an internal history list associated
with the binding table, then it checks for bindings that match
the event.
<fun>Tk_BindEvent</fun> processes each of the objects pointed to
by <i>objectPtr</i> in turn.
For each object, it finds all the bindings that match the current
event history, selects the most specific binding using the priority
mechanism described in the documentation for <cmd>bind</cmd>,
and invokes the script for that binding.
If there are no matching bindings for a particular object, then
the object is skipped.
<fun>Tk_BindEvent</fun> continues through all of the objects, handling
exceptions such as errors, <cmd>break</cmd>, and <cmd>continue</cmd> as
described in the documentation for <cmd>bind</cmd>.

</p>
</section>
<keywords>
<keyword>binding</keyword>
<keyword>event</keyword>
<keyword>object</keyword>
<keyword>script</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="bindtags" title="bindtags" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: bindtags.n,v 1.4 2004/10/28 10:22:51 dkf Exp $
 -->
<?TROFF.TH title="bindtags" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>bindtags</name>
<desc>Determine which bindings apply to a window, and order of evaluation</desc>
</namesection>
<synopsis>
<syntax>
<cmd>bindtags</cmd> <m>window</m> ?<m>tagList</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>When a binding is created with the <cmd>bind</cmd> command, it is
associated either with a particular window such as <b>.a.b.c</b>,
a class name such as <b cat="event">Button</b>, the keyword <b>all</b>, or any
other string.
All of these forms are called <i>binding tags</i>.
Each window contains a list of binding tags that determine how
events are processed for the window.
When an event occurs in a window, it is applied to each of the
window's tags in order:  for each tag, the most specific binding
that matches the given tag and event is executed.
See the <cmd>bind</cmd> command for more information on the matching
process.
</p>
<p>By default, each window has four binding tags consisting of the
name of the window, the window's class name, the name of the window's
nearest toplevel ancestor, and <b>all</b>, in that order.
Toplevel windows have only three tags by default, since the toplevel
name is the same as that of the window.
The <cmd>bindtags</cmd> command allows the binding tags for a window to be
read and modified.
</p>
<p>If <cmd>bindtags</cmd> is invoked with only one argument, then the
current set of binding tags for <i>window</i> is returned as a list.
If the <i>tagList</i> argument is specified to <cmd>bindtags</cmd>,
then it must be a proper list; the tags for <i>window</i> are changed
to the elements of the list.
The elements of <i>tagList</i> may be arbitrary strings;  however,
any tag starting with a dot is treated as the name of a window;  if
no window by that name exists at the time an event is processed,
then the tag is ignored for that event.
The order of the elements in <i>tagList</i> determines the order in
which binding scripts are executed in response to events.
For example, the command
</p>
<example>
<b>bindtags .b {all . Button .b}</b>
</example>
<p>reverses the order in which binding scripts will be evaluated for
a button named <b>.b</b> so that <b>all</b> bindings are invoked
first, following by bindings for <b>.b</b>'s toplevel (``.''), followed by
class bindings, followed by bindings for <b>.b</b>.
If <i>tagList</i> is an empty list then the binding tags for <i>window</i>
are returned to the default state described above.
</p>
<p>The <cmd>bindtags</cmd> command may be used to introduce arbitrary
additional binding tags for a window, or to remove standard tags.
For example, the command
</p>
<example>
<b>bindtags .b {.b TrickyButton . all}</b>
</example>
<p>replaces the <b cat="event">Button</b> tag for <b>.b</b> with <b>TrickyButton</b>.
This means that the default widget bindings for buttons, which are
associated with the <b cat="event">Button</b> tag, will no longer apply to <b>.b</b>,
but any bindings associated with <b>TrickyButton</b> (perhaps some
new button behavior) will apply.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>If you have a set of nested <b cat="AMBIGUOUS widget cmd">frame</b> widgets and you want events
sent to a <b cat="AMBIGUOUS widget cmd">button</b> widget to also be delivered to all the widgets
up to the current <b cat="AMBIGUOUS widget cmd">toplevel</b> (in contrast to Tk's default
behavior, where events are not delivered to those intermediate
windows) to make it easier to have accelerators that are only active
for part of a window, you could use a helper procedure like this to
help set things up:
</p>
<example>
proc setupBindtagsForTreeDelivery {widget} {
    set tags [list $widget [winfo class $widget]]
    set w $widget
    set t [winfo toplevel $w]
    while {$w ne $t} {
        set w [winfo parent $w]
        lappend tags $w
    }
    lappend tags all
    <cmd>bindtags</cmd> $widget $tags
}
</example>


</section>
<seealso>
<ref>bind(n)</ref>
</seealso>
<keywords>
<keyword>binding</keyword>
<keyword>event</keyword>
<keyword>tag</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="bitmap" version="4.0" title="bitmap">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: bitmap.n,v 1.2 1998/09/14 18:22:54 stanton Exp $
 -->
<?TROFF.TH title="bitmap" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>bitmap</name>
<desc>Images that display two colors</desc>
</namesection>
<synopsis>
<syntax>
<b>image create bitmap</b> ?<m>name</m>? ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A bitmap is an image whose pixels can display either of two colors
or be transparent.
A bitmap image is defined by four things:  a background color,
a foreground color, and two bitmaps, called the <i>source</i>
and the <i>mask</i>.
Each of the bitmaps specifies 0/1 values for a rectangular
array of pixels, and the two bitmaps must have the same
dimensions.
For pixels where the mask is zero, the image displays nothing,
producing a transparent effect.
For other pixels, the image displays the foreground color if
the source data is one and the background color if the source
data is zero.

</p>
</section>
<section>
<title>CREATING BITMAPS</title>
<p>Like all images, bitmaps are created using the <b>image create</b>
command.
Bitmaps support the following <i>options</i>:
</p>
<dl>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd>Specifies a background color for the image in any of the standard
ways accepted by Tk.  If this option is set to an empty string
then the background pixels will be transparent.  This effect
is achieved by using the source bitmap as the mask bitmap, ignoring
any <b>-maskdata</b> or <b>-maskfile</b> options.
</dd>
</dle>
<dle>
<dt><b>-data</b> <m>string</m></dt>
<dd>Specifies the contents of the source bitmap as a string.
The string must adhere to X11 bitmap format (e.g., as generated
by the <b cat="canvasitemtype">bitmap</b> program).
If both the <b>-data</b> and <b>-file</b> options are specified,
the <b>-data</b> option takes precedence.
</dd>
</dle>
<dle>
<dt><b>-file</b> <m>name</m></dt>
<dd><i>name</i> gives the name of a file whose contents define the
source bitmap.
The file must adhere to X11 bitmap format (e.g., as generated
by the <b cat="canvasitemtype">bitmap</b> program).
</dd>
</dle>
<dle>
<dt><b>-foreground</b> <m>color</m></dt>
<dd>Specifies a foreground color for the image in any of the standard
ways accepted by Tk.
</dd>
</dle>
<dle>
<dt><b>-maskdata</b> <m>string</m></dt>
<dd>Specifies the contents of the mask as a string.
The string must adhere to X11 bitmap format (e.g., as generated
by the <b cat="canvasitemtype">bitmap</b> program).
If both the <b>-maskdata</b> and <b>-maskfile</b> options are specified,
the <b>-maskdata</b> option takes precedence.
</dd>
</dle>
<dle>
<dt><b>-maskfile</b> <m>name</m></dt>
<dd><i>name</i> gives the name of a file whose contents define the
mask.
The file must adhere to X11 bitmap format (e.g., as generated
by the <b cat="canvasitemtype">bitmap</b> program).

</dd>
</dle>
</dl>
</section>
<section>
<title>IMAGE COMMAND</title>
<p>When a bitmap image is created, Tk also creates a new command
whose name is the same as the image.
This command may be used to invoke various operations
on the image.
It has the following general form:
</p>
<example>
<i>imageName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for bitmap images:
</p>
<dl>
<dle>
<dt><m>imageName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the
<b>image create bitmap</b> command.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options for the image.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>imageName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the
<b>image create bitmap</b> command.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>image(n)</ref>
<ref>photo(n)</ref>
</seealso>
<keywords>
<keyword>bitmap</keyword>
<keyword>image</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="BoolObj" version="8.5" title="Tcl_BooleanObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
     Contributions from Don Porter, NIST, 2005.  (not subject to US copyright)
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: BoolObj.3,v 1.9 2005/05/18 19:09:07 dgp Exp $
 -->
<?TROFF.TH title="Tcl_BooleanObj" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewBooleanObj</name>
<name>Tcl_SetBooleanObj</name>
<name>Tcl_GetBooleanFromObj</name>
<desc>store/retrieve boolean value in a Tcl_Obj</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewBooleanObj</fun>(<m>boolValue</m>)

<fun>Tcl_SetBooleanObj</fun>(<m>objPtr</m>, <m>boolValue</m>)

int
<fun>Tcl_GetBooleanFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>boolPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>boolValue</name>
<argmode>in</argmode>
<desc>Integer value to be stored as a boolean value in a Tcl_Obj.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>Points to the Tcl_Obj in which to store, or from which to
retrieve a boolean value.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>If a boolean value cannot be retrieved,
an error message is left in the interpreter's result object
unless <i>interp</i> is NULL.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="boolPtr">*boolPtr</name>
<argmode>out</argmode>
<desc>Points to place where <fun>Tcl_GetBooleanFromObj</fun>
stores the boolean value (0 or 1) obtained from <i>objPtr</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are used to pass boolean values to and from
Tcl as Tcl_Obj's.  When storing a boolean value into a Tcl_Obj,
any non-zero integer value in <i>boolValue</i> is taken to be
the boolean value <b>1</b>, and the integer value <b>0</b> is
taken to be the boolean value <b>0</b>.
</p>
<p><fun>Tcl_NewBooleanObj</fun> creates a new Tcl_Obj, stores the boolean
value <i>boolValue</i> in it, and returns a pointer to the new Tcl_Obj.
The new Tcl_Obj has reference count of zero.
</p>
<p><fun>Tcl_SetBooleanObj</fun> accepts <i>objPtr</i>, a pointer to
an existing Tcl_Obj, and stores in the Tcl_Obj <i>*objPtr</i> 
the boolean value <i>boolValue</i>.  This is a write operation
on <i>*objPtr</i>, so <i>objPtr</i> must be unshared.  Attempts to
write to a shared Tcl_Obj will panic.  A successful write
of <i>boolValue</i> into <i>*objPtr</i> implies the freeing of
any former value stored in <i>*objPtr</i>.
</p>
<p><fun>Tcl_GetBooleanFromObj</fun> attempts to retrive a boolean value
from the value stored in <i>*objPtr</i>.
If <i>objPtr</i> holds a string value recognized by <fun>Tcl_GetBoolean</fun>,
then the recognized boolean value is written at the address given
by <i>boolPtr</i>.  
If <i>objPtr</i> holds any value recognized as
a number by Tcl, then if that value is zero a 0 is written at
the address given by <i>boolPtr</i> and if that
value is non-zero a 1 is written at the address given by <i>boolPtr</i>.
In all cases where a value is written at the address given
by <i>boolPtr</i>, <fun>Tcl_GetBooleanFromObj</fun> returns <b>TCL_OK</b>.
If the value of <i>objPtr</i> does not meet any of the conditions
above, then <b>TCL_ERROR</b> is returned and an error message is 
left in the interpreter's result unless <i>interp</i> is NULL.
<fun>Tcl_GetBooleanFromObj</fun> may also make changes to the internal
fields of <i>*objPtr</i> so that future calls to 
<fun>Tcl_GetBooleanFromObj</fun> on the same <i>objPtr</i> can be
performed more efficiently.
</p>
<p>Note that the routines <fun>Tcl_GetBooleanFromObj</fun> and
<fun>Tcl_GetBoolean</fun> are not functional equivalents.
The set of values for which <fun>Tcl_GetBooleanFromObj</fun>
will return <b>TCL_OK</b> is strictly larger than
the set of values for which <fun>Tcl_GetBoolean</fun> will do the same.
For example, the value "5" passed to <fun>Tcl_GetBooleanFromObj</fun>
will lead to a <b>TCL_OK</b> return (and the boolean value 1),
while the same value passed to <fun>Tcl_GetBoolean</fun> will lead to
a <b>TCL_ERROR</b> return.

</p>
</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_IsShared</ref>
<ref>Tcl_GetBoolean</ref>
</seealso>
<keywords>
<keyword>boolean</keyword>
<keyword>object</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Border" version="8.1" title="Tk_Alloc3DBorderFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1993 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: 3DBorder.3,v 1.7 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_Alloc3DBorderFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_Alloc3DBorderFromObj</name>
<name>Tk_Get3DBorder</name>
<name>Tk_Get3DBorderFromObj</name>
<name>Tk_Draw3DRectangle</name>
<name>Tk_Fill3DRectangle</name>
<name>Tk_Draw3DPolygon</name>
<name>Tk_Fill3DPolygon</name>
<name>Tk_3DVerticalBevel</name>
<name>Tk_3DHorizontalBevel</name>
<name>Tk_SetBackgroundFromBorder</name>
<name>Tk_NameOf3DBorder</name>
<name>Tk_3DBorderColor</name>
<name>Tk_3DBorderGC</name>
<name>Tk_Free3DBorderFromObj</name>
<name>Tk_Free3DBorder</name>
<desc>draw borders with three-dimensional appearance</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_3DBorder
<b>Tk_Alloc3DBorderFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m><b>)</b>

Tk_3DBorder
<b>Tk_Get3DBorder(</b><m>interp</m>, <m>tkwin</m>, <m>colorName</m><b>)</b>

Tk_3DBorder
<b>Tk_Get3DBorderFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

void
<b>Tk_Draw3DRectangle(</b><m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>borderWidth</m>, <m>relief</m><b>)</b>

void
<b>Tk_Fill3DRectangle(</b><m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>borderWidth</m>, <m>relief</m><b>)</b>

void
<b>Tk_Draw3DPolygon(</b><m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>pointPtr</m>, <m>numPoints</m>, <m>polyBorderWidth</m>, <m>leftRelief</m><b>)</b>

void
<b>Tk_Fill3DPolygon(</b><m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>pointPtr</m>, <m>numPoints</m>, <m>polyBorderWidth</m>, <m>leftRelief</m><b>)</b>

void
<fun>Tk_3DVerticalBevel</fun>(<m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>leftBevel</m>, <m>relief</m><b>)</b>

void
<fun>Tk_3DHorizontalBevel</fun>(<m>tkwin</m>, <m>drawable</m>, <m>border</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>leftIn</m>, <m>rightIn</m>, <m>topBevel</m>, <m>relief</m><b>)</b>

void
<b>Tk_SetBackgroundFromBorder(</b><m>tkwin</m>, <m>border</m><b>)</b>

const char *
<b>Tk_NameOf3DBorder(</b><m>border</m><b>)</b>

XColor *
<b>Tk_3DBorderColor(</b><m>border</m><b>)</b>

GC *
<b>Tk_3DBorderGC(</b><m>tkwin</m>, <m>border</m>, <m>which</m><b>)</b>

<b>Tk_Free3DBorderFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

<b>Tk_Free3DBorder(</b><m>border</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window (for all procedures except <fun>Tk_Get3DBorder</fun>,
must be the window for which the border was allocated).
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Pointer to object whose value describes color corresponding to
background (flat areas).  Illuminated edges will be brighter than
this and shadowed edges will be darker than this.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="colorName">*colorName</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except value is supplied as a string rather
than an object.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>X token for window or pixmap;  indicates where graphics are to be drawn.
Must either be the X window for <i>tkwin</i> or a pixmap with the
same screen and depth as <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_3DBorder</argtype>
<name>border</name>
<argmode>in</argmode>
<desc>Token for border previously allocated in call to <fun>Tk_Get3DBorder</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>X-coordinate of upper-left corner of rectangle describing border
or bevel, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Y-coordinate of upper-left corner of rectangle describing border or
bevel, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of rectangle describing border or bevel, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of rectangle describing border or bevel, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>borderWidth</name>
<argmode>in</argmode>
<desc>Width of border in pixels. Positive means border is inside rectangle
given by <i>x</i>, <i>y</i>, <i>width</i>, <i>height</i>, negative means
border is outside rectangle.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>relief</name>
<argmode>in</argmode>
<desc>Indicates 3-D position of interior of object relative to exterior;
should be <b>TK_RELIEF_RAISED</b>, <b>TK_RELIEF_SUNKEN</b>, <b>TK_RELIEF_GROOVE</b>,
<b>TK_RELIEF_SOLID</b>, or <b>TK_RELIEF_RIDGE</b> (may also be <b>TK_RELIEF_FLAT</b>
for <fun>Tk_Fill3DRectangle</fun>).
</desc>
</argdef>
<argdef>
<argtype>XPoint</argtype>
<name name="pointPtr">*pointPtr</name>
<argmode>in</argmode>
<desc>Pointer to array of points describing the set of vertices in a polygon.
The polygon need not be closed (it will be closed automatically if it
isn't).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numPoints</name>
<argmode>in</argmode>
<desc>Number of points at <i>*pointPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>polyBorderWidth</name>
<argmode>in</argmode>
<desc>Width of border in pixels.  If positive, border is drawn to left of
trajectory given by <i>pointPtr</i>;  if negative, border is drawn to
right of trajectory.  If <i>leftRelief</i> is <b>TK_RELIEF_GROOVE</b> or
<b>TK_RELIEF_RIDGE</b> then the border is centered on the trajectory.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>leftRelief</name>
<argmode>in</argmode>
<desc>Height of left side of polygon's path relative to right.  <b>TK_RELIEF_RAISED</b>
means left side should appear higher and <b>TK_RELIEF_SUNKEN</b> means right side
should appear higher;
<b>TK_RELIEF_GROOVE</b> and <b>TK_RELIEF_RIDGE</b> mean the obvious things.
For <fun>Tk_Fill3DPolygon</fun>, <b>TK_RELIEF_FLAT</b> may also be specified to
indicate no difference in height.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>leftBevel</name>
<argmode>in</argmode>
<desc>Non-zero means this bevel forms the left side of the object;  zero means
it forms the right side.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>leftIn</name>
<argmode>in</argmode>
<desc>Non-zero means that the left edge of the horizontal bevel angles in,
so that the bottom of the edge is farther to the right than
the top.
Zero means the edge angles out, so that the bottom is farther to the
left than the top.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>rightIn</name>
<argmode>in</argmode>
<desc>Non-zero means that the right edge of the horizontal bevel angles in,
so that the bottom of the edge is farther to the left than the top.
Zero means the edge angles out, so that the bottom is farther to the
right than the top.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>topBevel</name>
<argmode>in</argmode>
<desc>Non-zero means this bevel forms the top side of the object;  zero means
it forms the bottom side.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>which</name>
<argmode>in</argmode>
<desc>Specifies which of the border's graphics contexts is desired.
Must be <b>TK_3D_FLAT_GC</b>, <b>TK_3D_LIGHT_GC</b>, or <b>TK_3D_DARK_GC</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures provide facilities for drawing window borders in a
way that produces a three-dimensional appearance.
<fun>Tk_Alloc3DBorderFromObj</fun>
allocates colors and Pixmaps needed to draw a border in the window
given by the <i>tkwin</i> argument.  The value of <i>objPtr</i>
is a standard Tk color name that determines the border colors.
The color indicated by <i>objPtr</i> will not actually be used in
the border;  it indicates the background color for the window
(i.e. a color for flat surfaces).
The illuminated portions of the border will appear brighter than indicated
by <i>objPtr</i>, and the shadowed portions of the border will appear
darker than <i>objPtr</i>.
</p>
<p><fun>Tk_Alloc3DBorderFromObj</fun> returns a token that may be used in later calls
to <fun>Tk_Draw3DRectangle</fun>.  If an error occurs in allocating information
for the border (e.g. a bogus color name was given)
then NULL is returned and an error message is left in <i>interp-&gt;result</i>.
If it returns successfully, <fun>Tk_Alloc3DBorderFromObj</fun> caches
information about the return value in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_Alloc3DBorderFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p><fun>Tk_Get3DBorder</fun> is identical to <fun>Tk_Alloc3DBorderFromObj</fun> except
that the color is specified with a string instead of an object.  This
prevents <fun>Tk_Get3DBorder</fun> from caching the return value, so
<fun>Tk_Get3DBorder</fun> is less efficient than <fun>Tk_Alloc3DBorderFromObj</fun>.
</p>
<p><fun>Tk_Get3DBorderFromObj</fun> returns the token for an existing border, given
the window and color name used to create the border.
<fun>Tk_Get3DBorderFromObj</fun> doesn't actually create the border; it must
already have been created with a previous call to
<fun>Tk_Alloc3DBorderFromObj</fun> or <fun>Tk_Get3DBorder</fun>.  The return
value is cached in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_Get3DBorderFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p>Once a border structure has been created, <fun>Tk_Draw3DRectangle</fun> may be
invoked to draw the border.
The <i>tkwin</i> argument specifies the
window for which the border was allocated, and <i>drawable</i>
specifies a window or pixmap in which the border is to be drawn.
<i>Drawable</i> need not refer to the same window as <i>tkwin</i>, but it
must refer to a compatible
pixmap or window:  one associated with the same screen and with the
same depth as <i>tkwin</i>.
The <i>x</i>, <i>y</i>, <i>width</i>, and
<i>height</i> arguments define the bounding box of the border region
within <i>drawable</i> (usually <i>x</i> and <i>y</i> are zero and
<i>width</i> and <i>height</i> are the dimensions of the window), and
<i>borderWidth</i> specifies the number of pixels actually
occupied by the border.  The <i>relief</i> argument indicates
which of several three-dimensional effects is desired:
<b>TK_RELIEF_RAISED</b> means that the interior of the rectangle should
appear raised relative to the exterior of the rectangle, and
<b>TK_RELIEF_SUNKEN</b> means that the interior should appear depressed.
<b>TK_RELIEF_GROOVE</b> and <b>TK_RELIEF_RIDGE</b> mean that there should appear to be
a groove or ridge around the exterior of the rectangle.
</p>
<p><fun>Tk_Fill3DRectangle</fun> is somewhat like <fun>Tk_Draw3DRectangle</fun> except
that it first fills the rectangular area with the background color
(one corresponding
to the color used to create <i>border</i>).  Then it calls
<fun>Tk_Draw3DRectangle</fun> to draw a border just inside the outer edge of
the rectangular area.  The argument <i>relief</i> indicates the desired
effect (<b>TK_RELIEF_FLAT</b> means no border should be drawn; all that
happens is to fill the rectangle with the background color).
</p>
<p>The procedure <fun>Tk_Draw3DPolygon</fun> may be used to draw more complex
shapes with a three-dimensional appearance.  The <i>pointPtr</i> and
<i>numPoints</i> arguments define a trajectory, <i>polyBorderWidth</i>
indicates how wide the border should be (and on which side of the
trajectory to draw it), and <i>leftRelief</i> indicates which side
of the trajectory should appear raised.  <fun>Tk_Draw3DPolygon</fun>
draws a border around the given trajectory using the colors from
<i>border</i> to produce a three-dimensional appearance.  If the trajectory is
non-self-intersecting, the appearance will be a raised or sunken
polygon shape.  The trajectory may be self-intersecting, although
it's not clear how useful this is.
</p>
<p><fun>Tk_Fill3DPolygon</fun> is to <fun>Tk_Draw3DPolygon</fun> what
<fun>Tk_Fill3DRectangle</fun> is to <fun>Tk_Draw3DRectangle</fun>:  it fills
the polygonal area with the background color from <i>border</i>,
then calls <fun>Tk_Draw3DPolygon</fun> to draw a border around the
area (unless <i>leftRelief</i> is <b>TK_RELIEF_FLAT</b>; in this case no
border is drawn).
</p>
<p>The procedures <fun>Tk_3DVerticalBevel</fun> and <fun>Tk_3DHorizontalBevel</fun>
provide lower-level drawing primitives that are used by
procedures such as <fun>Tk_Draw3DRectangle</fun>.
These procedures are also useful in their own right for drawing
rectilinear border shapes.
<fun>Tk_3DVerticalBevel</fun> draws a vertical beveled edge, such as the
left or right side of a rectangle, and <fun>Tk_3DHorizontalBevel</fun>
draws a horizontal beveled edge, such as the top or bottom of a
rectangle.
Each procedure takes <i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i>
arguments that describe the rectangular area of the beveled edge
(e.g., <i>width</i> is the border width for <fun>Tk_3DVerticalBevel</fun>).
The <i>leftBorder</i> and <i>topBorder</i> arguments indicate the
position of the border relative to the ``inside'' of the object, and
<i>relief</i> indicates the relief of the inside of the object relative
to the outside.
<fun>Tk_3DVerticalBevel</fun> just draws a rectangular region.
<fun>Tk_3DHorizontalBevel</fun> draws a trapezoidal region to generate
mitered corners;  it should be called after <fun>Tk_3DVerticalBevel</fun>
(otherwise <fun>Tk_3DVerticalBevel</fun> will overwrite the mitering in
the corner).
The <i>leftIn</i> and <i>rightIn</i> arguments to <fun>Tk_3DHorizontalBevel</fun>
describe the mitering at the corners;  a value of 1 means that the bottom
edge of the trapezoid will be shorter than the top, 0 means it will
be longer.
For example, to draw a rectangular border the top bevel should be
drawn with 1 for both <i>leftIn</i> and <i>rightIn</i>, and the
bottom bevel should be drawn with 0 for both arguments.
</p>
<p>The procedure <fun>Tk_SetBackgroundFromBorder</fun> will modify the background
pixel and/or pixmap of <i>tkwin</i> to produce a result compatible
with <i>border</i>.  For color displays, the resulting background will
just be the color specified when <i>border</i> was created;  for monochrome
displays, the resulting background
will be a light stipple pattern, in order to distinguish the background from
the illuminated portion of the border.
</p>
<p>Given a token for a border, the procedure <fun>Tk_NameOf3DBorder</fun>
will return the color name that was used to create the border.
</p>
<p>The procedure <fun>Tk_3DBorderColor</fun> returns the XColor structure
that will be used for flat surfaces drawn for its <i>border</i>
argument by procedures like <fun>Tk_Fill3DRectangle</fun>.
The return value corresponds to the color name that was used to
create the border.
The XColor, and its associated pixel value, will remain allocated
as long as <i>border</i> exists.
</p>
<p>The procedure <fun>Tk_3DBorderGC</fun> returns one of the X graphics contexts
that are used to draw the border.
The argument <i>which</i> selects which one of the three possible GC's:
<b>TK_3D_FLAT_GC</b> returns the context used for flat surfaces,
<b>TK_3D_LIGHT_GC</b> returns the context for light shadows,
and <b>TK_3D_DARK_GC</b> returns the context for dark shadows.
</p>
<p>When a border is no longer needed, <fun>Tk_Free3DBorderFromObj</fun>
or <fun>Tk_Free3DBorder</fun> should
be called to release the resources associated with it.
For <fun>Tk_Free3DBorderFromObj</fun> the border to release is specified
with the window and color name used to create the
border; for <fun>Tk_Free3DBorder</fun> the border to release is specified
with the Tk_3DBorder token for the border.
There should be exactly one call to <fun>Tk_Free3DBorderFromObj</fun> or
<fun>Tk_Free3DBorder</fun> for each call to <fun>Tk_Alloc3DBorderFromObj</fun>
or <fun>Tk_Get3DBorder</fun>.

</p>
</section>
<keywords>
<keyword>3D</keyword>
<keyword>background</keyword>
<keyword>border</keyword>
<keyword>color</keyword>
<keyword>depressed</keyword>
<keyword>illumination</keyword>
<keyword>object</keyword>
<keyword>polygon</keyword>
<keyword>raised</keyword>
<keyword>shadow</keyword>
<keyword>three-dimensional effect</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="break" title="break">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: break.n,v 1.7 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="break" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>break</name>
<desc>Abort looping command</desc>
</namesection>
<synopsis>
<syntax>
<cmd>break</cmd>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is typically invoked inside the body of a looping command
such as <cmd>for</cmd> or <cmd>foreach</cmd> or <cmd>while</cmd>.
It returns a <b>TCL_BREAK</b> code, which causes a break exception
to occur.
The exception causes the current script to be aborted
out to the innermost containing loop command, which then
aborts its execution and returns normally.
Break exceptions are also handled in a few other situations, such
as the <cmd>catch</cmd> command, Tk event bindings, and the outermost
scripts of procedure bodies.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Print a line for each of the integers from 0 to 5:
</p>
<example>
for {set x 0} {$x&lt;10} {incr x} {
   if {$x &gt; 5} {
      <cmd>break</cmd>
   }
   puts "x is $x"
}
</example>


</section>
<seealso>
<ref>catch(n)</ref>
<ref>continue(n)</ref>
<ref>for(n)</ref>
<ref>foreach(n)</ref>
<ref>return(n)</ref>
<ref>while(n)</ref>
</seealso>
<keywords>
<keyword>abort</keyword>
<keyword>break</keyword>
<keyword>loop</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="button" version="4.4" title="button">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: button.n,v 1.11 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="button" section="n" date="4.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>button</name>
<desc>Create and manipulate button widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">button</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeforeground</li>
<li>-anchor</li>
<li>-background</li>
<li>-bitmap</li>
<li>-borderwidth</li>
<li>-compound</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-image</li>
<li>-justify</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-repeatdelay</li>
<li>-repeatinterval</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-wraplength</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies a Tcl command to associate with the button.  This command
is typically invoked when mouse button 1 is released over the button
window.
</desc>
</optiondef>
<optiondef>
<name>-default</name>
<dbname>default</dbname>
<dbclass>Default</dbclass>
<desc>Specifies one of three states for the default ring: <b>normal</b>,
<b>active</b>, or <b>disabled</b>.  In active state, the button is drawn
with the platform specific appearance for a default button.  In normal
state, the button is drawn with the platform specific appearance for a
non-default button, leaving enough space to draw the default button
appearance.  The normal and active states will result in buttons of
the same size.  In disabled state, the button is drawn with the
non-default button appearance without leaving space for the default
appearance.  The disabled state may result in a smaller button than
the active state.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired height for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in lines of text.
If this option isn't specified, the button's desired height is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
<optiondef>
<name>-overrelief</name>
<dbname>overRelief</dbname>
<dbclass>OverRelief</dbclass>
<desc>Specifies an alternative relief for the button, to be used when the
mouse cursor is over the widget.  This option can be used to make
toolbar buttons, by configuring <b>-relief flat -overrelief
raised</b>.  If the value of this option is the empty string, then no
alternative relief is used when the mouse cursor is over the button.
The empty string is the default value.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the button:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the button is displayed using the
<b>foreground</b> and <b>background</b> options.  The active state is
typically used when the pointer is over the button.  In active state
the button is displayed using the <b>activeForeground</b> and
<b>activeBackground</b> options.  Disabled state means that the button
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the <b>disabledForeground</b> and
<b>background</b> options determine how the button is displayed.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies a desired width for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in characters.
If this option isn't specified, the button's desired width is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">button</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a button widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the button such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">button</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A button is a widget that displays a textual string, bitmap or image.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the <b>wrapLength</b> option) and
one of the characters may optionally be underlined using the
<b>underline</b> option.
It can display itself in either of three different ways, according
to
the <b>state</b> option; 
it can be made to appear raised, sunken, or flat;
and it can be made to flash.  When a user invokes the
button (by pressing mouse button 1 with the cursor over the
button), then the Tcl command specified in the <b>-command</b>
option is invoked.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">button</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for button widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">button</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">button</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>flash</b></dt>
<dd>Flash the button.  This is accomplished by redisplaying the button
several times, alternating between active and normal colors.  At
the end of the flash the button is left in the same normal/active
state as when the command was invoked.
This command is ignored if the button's state is <b>disabled</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>invoke</b></dt>
<dd>Invoke the Tcl command associated with the button, if there is one.
The return value is the return value from the Tcl command, or an
empty string if there is no command associated with the button.
This command is ignored if the button's state is <b>disabled</b>.

</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for buttons that give them
default behavior:
</p>
<ol>
<li>A button activates whenever the mouse passes over it and deactivates
whenever the mouse leaves the button.
Under Windows, this binding is only active when mouse button 1 has
been pressed over the button.
</li>
<li>A button's relief is changed to sunken whenever mouse button 1 is
pressed over the button, and the relief is restored to its original
value when button 1 is later released.
</li>
<li>If mouse button 1 is pressed over a button and later released over
the button, the button is invoked.  However, if the mouse is not
over the button when button 1 is released, then no invocation occurs.
</li>
<li>When a button has the input focus, the space key causes the button
to be invoked.
</li>
</ol>
<p>If the button's state is <b>disabled</b> then none of the above
actions occur:  the button is completely non-responsive.
</p>
<p>The behavior of buttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<seealso>
<ref>ttk_button(n)</ref>
</seealso>
<keywords>
<keyword>button</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ByteArrObj" title="Tcl_ByteArrayObj" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ByteArrObj.3,v 1.6 2004/10/07 15:15:35 dkf Exp $
 -->
<?TROFF.TH title="Tcl_ByteArrayObj" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewByteArrayObj</name>
<name>Tcl_SetByteArrayObj</name>
<name>Tcl_GetByteArrayFromObj</name>
<name>Tcl_SetByteArrayLength</name>
<desc>manipulate Tcl objects as a arrays of bytes</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewByteArrayObj</fun>(<m>bytes</m>, <m>length</m>)

void 
<fun>Tcl_SetByteArrayObj</fun>(<m>objPtr</m>, <m>bytes</m>, <m>length</m>)

unsigned char *
<fun>Tcl_GetByteArrayFromObj</fun>(<m>objPtr</m>, <m>lengthPtr</m>)

unsigned char *
<fun>Tcl_SetByteArrayLength</fun>(<m>objPtr</m>, <m>length</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const unsigned char</argtype>
<name name="bytes">*bytes</name>
<argmode>in</argmode>
<desc>The array of bytes used to initialize or set a byte-array object.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>The length of the array of bytes.  It must be &gt;= 0.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>For <fun>Tcl_SetByteArrayObj</fun>, this points to the object to be converted to
byte-array type.  For <fun>Tcl_GetByteArrayFromObj</fun> and
<fun>Tcl_SetByteArrayLength</fun>, this points to the object from which to get
the byte-array value; if <i>objPtr</i> does not already point to a byte-array
object, it will be converted to one.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="lengthPtr">*lengthPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, filled with the length of the array of bytes in the object.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are used to create, modify, and read Tcl byte-array objects
from C code.  Byte-array objects are typically used to hold the
results of binary IO operations or data structures created with the
<b cat="AMBIGUOUS ambiguous cmd">binary</b> command.  In Tcl, an array of bytes is not equivalent to a
string.  Conceptually, a string is an array of Unicode characters, while a
byte-array is an array of 8-bit quantities with no implicit meaning.
Accessor functions are provided to get the string representation of a
byte-array or to convert an arbitrary object to a byte-array.  Obtaining the
string representation of a byte-array object (by calling
<fun>Tcl_GetStringFromObj</fun>) produces a properly formed UTF-8 sequence with a
one-to-one mapping between the bytes in the internal representation and the
UTF-8 characters in the string representation.  
</p>
<p><fun>Tcl_NewByteArrayObj</fun> and <fun>Tcl_SetByteArrayObj</fun> will
create a new object of byte-array type or modify an existing object to have a
byte-array type.  Both of these procedures set the object's type to be
byte-array and set the object's internal representation to a copy of the
array of bytes given by <i>bytes</i>. <fun>Tcl_NewByteArrayObj</fun> returns a
pointer to a newly allocated object with a reference count of zero.
<fun>Tcl_SetByteArrayObj</fun> invalidates any old string representation and, if
the object is not already a byte-array object, frees any old internal
representation.
</p>
<p><fun>Tcl_GetByteArrayFromObj</fun> converts a Tcl object to byte-array type and
returns a pointer to the object's new internal representation as an array of
bytes.  The length of this array is stored in <i>lengthPtr</i> if
<i>lengthPtr</i> is non-NULL.  The storage for the array of bytes is owned by
the object and should not be freed.  The contents of the array may be
modified by the caller only if the object is not shared and the caller
invalidates the string representation.  
</p>
<p><fun>Tcl_SetByteArrayLength</fun> converts the Tcl object to byte-array type
and changes the length of the object's internal representation as an
array of bytes.  If <i>length</i> is greater than the space currently
allocated for the array, the array is reallocated to the new length; the
newly allocated bytes at the end of the array have arbitrary values.  If
<i>length</i> is less than the space currently allocated for the array,
the length of array is reduced to the new length.  The return value is a
pointer to the object's new array of bytes.  

</p>
</section>
<seealso>
<ref>Tcl_GetStringFromObj</ref>
<ref>Tcl_NewObj</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_DecrRefCount</ref>
</seealso>
<keywords>
<keyword>object</keyword>
<keyword>byte array</keyword>
<keyword>utf</keyword>
<keyword>unicode</keyword>
<keyword>internationalization</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CallDel" title="Tcl_CallWhenDeleted" version="7.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CallDel.3,v 1.3 2004/10/07 14:44:31 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CallWhenDeleted" section="3" date="7.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CallWhenDeleted</name>
<name>Tcl_DontCallWhenDeleted</name>
<desc>Arrange for callback when interpreter is deleted</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_CallWhenDeleted</fun>(<m>interp</m>, <m>proc</m>, <m>clientData</m>)

<fun>Tcl_DontCallWhenDeleted</fun>(<m>interp</m>, <m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter with which to associated callback.
</desc>
</argdef>
<argdef>
<argtype>Tcl_InterpDeleteProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to call when <i>interp</i> is deleted.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CallWhenDeleted</fun> arranges for <i>proc</i> to be called by
<fun>Tcl_DeleteInterp</fun> if/when <i>interp</i> is deleted at some future
time.  <i>Proc</i> will be invoked just before the interpreter
is deleted, but the interpreter will still be valid at the
time of the call.
<i>Proc</i> should have arguments and result that match the
type <type>Tcl_InterpDeleteProc</type>:
</p>
<syntax cat="type" name="Tcl_InterpDeleteProc" scope="global">
typedef void Tcl_InterpDeleteProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>clientData</i> and <i>interp</i> parameters are
copies of the <i>clientData</i> and <i>interp</i> arguments given
to <fun>Tcl_CallWhenDeleted</fun>.
Typically, <i>clientData</i> points to an application-specific
data structure that <i>proc</i> uses to perform cleanup when an
interpreter is about to go away.
<i>Proc</i> does not return a value.
</p>
<p><fun>Tcl_DontCallWhenDeleted</fun> cancels a previous call to
<fun>Tcl_CallWhenDeleted</fun> with the same arguments, so that
<i>proc</i> won't be called after all when <i>interp</i> is
deleted.
If there is no deletion callback that matches <i>interp</i>,
<i>proc</i>, and <i>clientData</i> then the call to
<fun>Tcl_DontCallWhenDeleted</fun> has no effect.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>delete</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="canvas" version="8.3" title="canvas">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1997-1999 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: canvas.n,v 1.22 2006/03/07 22:30:55 dkf Exp $
 -->
<?TROFF.TH title="canvas" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>canvas</name>
<desc>Create and manipulate canvas widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">canvas</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-insertbackground</li>
<li>-insertborderwidth</li>
<li>-insertofftime</li>
<li>-insertontime</li>
<li>-insertwidth</li>
<li>-relief</li>
<li>-selectbackground</li>
<li>-selectborderwidth</li>
<li>-selectforeground</li>
<li>-state</li>
<li>-takefocus</li>
<li>-xscrollcommand</li>
<li>-yscrollcommand</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-closeenough</name>
<dbname>closeEnough</dbname>
<dbclass>CloseEnough</dbclass>
<desc>Specifies a floating-point value indicating how close the mouse cursor
must be to an item before it is considered to be ``inside'' the item.
Defaults to 1.0.
</desc>
</optiondef>
<optiondef>
<name>-confine</name>
<dbname>confine</dbname>
<dbclass>Confine</dbclass>
<desc>Specifies a boolean value that indicates whether or not it should be
allowable to set the canvas's view outside the region defined by the
<b>scrollRegion</b> argument.
Defaults to true, which means that the view will
be constrained within the scroll region.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired window height that the canvas widget should request from
its geometry manager.  The value may be specified in any
of the forms described in the <ref refid="coordinates">COORDINATES</ref> section below.
</desc>
</optiondef>
<optiondef>
<name>-scrollregion</name>
<dbname>scrollRegion</dbname>
<dbclass>ScrollRegion</dbclass>
<desc>Specifies a list with four coordinates describing the left, top, right, and
bottom coordinates of a rectangular region.
This region is used for scrolling purposes and is considered to be
the boundary of the information in the canvas.
Each of the coordinates may be specified
in any of the forms given in the <ref refid="coordinates">COORDINATES</ref> section below.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Modifies the default state of the canvas where <i>state</i> may be set to
one of: <b>normal</b>, <b>disabled</b>, or <b>hidden</b>. Individual canvas
objects all have their own state option which may override the default
state.  Many options can take separate specifications such that the
appearance of the item can be different in different situations. The
options that start with <b>active</b> control the appearence when the mouse
pointer is over it, while the option starting with <b>disabled</b> controls
the appearence when the state is disabled.  Canvas items which are
<b>disabled</b> will not react to canvas bindings.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>width</dbclass>
<desc>Specifies a desired window width that the canvas widget should request from
its geometry manager.  The value may be specified in any
of the forms described in the <ref refid="coordinates">COORDINATES</ref> section below.
</desc>
</optiondef>
<optiondef>
<name>-xscrollincrement</name>
<dbname>xScrollIncrement</dbname>
<dbclass>ScrollIncrement</dbclass>
<desc>Specifies an increment for horizontal scrolling, in any of the usual forms
permitted for screen distances.  If the value of this option is greater
than zero, the horizontal view in the window will be constrained so that
the canvas x coordinate at the left edge of the window is always an even
multiple of <b>xScrollIncrement</b>;  furthermore, the units for scrolling
(e.g., the change in view when the left and right arrows of a scrollbar
are selected) will also be <b>xScrollIncrement</b>.  If the value of
this option is less than or equal to zero, then horizontal scrolling
is unconstrained.
</desc>
</optiondef>
<optiondef>
<name>-yscrollincrement</name>
<dbname>yScrollIncrement</dbname>
<dbclass>ScrollIncrement</dbclass>
<desc>Specifies an increment for vertical scrolling, in any of the usual forms
permitted for screen distances.  If the value of this option is greater
than zero, the vertical view in the window will be constrained so that
the canvas y coordinate at the top edge of the window is always an even
multiple of <b>yScrollIncrement</b>;  furthermore, the units for scrolling
(e.g., the change in view when the top and bottom arrows of a scrollbar
are selected) will also be <b>yScrollIncrement</b>.  If the value of
this option is less than or equal to zero, then vertical scrolling
is unconstrained.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>INTRODUCTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">canvas</b> command creates a new window (given
by the <i>pathName</i> argument) and makes it into a canvas widget.
Additional options, described above, may be specified on the
command line or in the option database
to configure aspects of the canvas such as its colors and 3-D relief.
The <b cat="AMBIGUOUS widget cmd">canvas</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>Canvas widgets implement structured graphics.
A canvas displays any number of <i>items</i>, which may be things like
rectangles, circles, lines, and text.
Items may be manipulated (e.g. moved or re-colored) and commands may
be associated with items in much the same way that the <cmd>bind</cmd>
command allows commands to be bound to widgets.  For example,
a particular command may be associated with the &lt;Button-1&gt; event
so that the command is invoked whenever button 1 is pressed with
the mouse cursor over an item.
This means that items in a canvas can have behaviors defined by
the Tcl scripts bound to them.
</p>
</section>
<section>
<title>DISPLAY LIST</title>
<p>The items in a canvas are ordered for purposes of display,
with the first item in the display list being displayed
first, followed by the next item in the list, and so on.
Items later in the display list obscure those that are
earlier in the display list and are sometimes referred to
as being ``on top'' of earlier items.
When a new item is created it is placed at the end of the
display list, on top of everything else.
Widget commands may be used to re-arrange the order of the
display list.
</p>
<p>Window items are an exception to the above rules.  The underlying
window systems require them always to be drawn on top of other items.
In addition, the stacking order of window items
is not affected by any of the canvas widget commands; you must use
the <cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> Tk commands instead.
</p>
</section>
<section>
<title>ITEM IDS AND TAGS</title>
<p>Items in a canvas widget may be named in either of two ways:
by id or by tag.
Each item has a unique identifying number, which is assigned to
that item when it is created.  The id of an item never changes
and id numbers are never re-used within the lifetime of a
canvas widget.
</p>
<p>Each item may also have any number of <i>tags</i> associated
with it.  A tag is just a string of characters, and it may
take any form except that of an integer.
For example, ``x123'' is OK but ``123'' isn't.
The same tag may be associated with many different items.
This is commonly done to group items in various interesting
ways;  for example, all selected items might be given the
tag ``selected''.
</p>
<p>The tag <b>all</b> is implicitly associated with every item
in the canvas;  it may be used to invoke operations on
all the items in the canvas.
</p>
<p>The tag <b>current</b> is managed automatically by Tk;
it applies to the <i>current item</i>, which is the
topmost item whose drawn area covers the position of
the mouse cursor.
If the mouse is not in the canvas widget or is not over
an item, then no item has the <b>current</b> tag.
</p>
<p>When specifying items in canvas widget commands, if the
specifier is an integer then it is assumed to refer to
the single item with that id.
If the specifier is not an integer, then it is assumed to
refer to all of the items in the canvas that have a tag
matching the specifier.
The symbol <i>tagOrId</i> is used below to indicate that
an argument specifies either an id that selects a single
item or a tag that selects zero or more items.
</p>
<p><i>tagOrId</i> may contain a logical expressions of
tags by using operators: '&amp;&amp;', '||', '^' '!', and parenthesized
subexpressions.  For example:
</p>
<example>
      .c find withtag {(a&amp;&amp;!b)||(!a&amp;&amp;b)}
</example>
<p>or equivalently:
</p>
<example>
      .c find withtag {a^b}
</example>
<p>will find only those items with either "a" or "b" tags, but not both.
</p>
<p>Some widget commands only operate on a single item at a
time;  if <i>tagOrId</i> is specified in a way that
names multiple items, then the normal behavior is for
the command to use the first (lowest) of these items in
the display list that is suitable for the command.
Exceptions are noted in the widget command descriptions
below.
</p>
</section>
<section id="coordinates">
<title>COORDINATES</title>
<p>All coordinates related to canvases are stored as floating-point
numbers.
Coordinates and distances are specified in screen units,
which are floating-point numbers optionally followed
by one of several letters.
If no letter is supplied then the distance is in pixels.
If the letter is <b>m</b> then the distance is in millimeters on
the screen;  if it is <b>c</b> then the distance is in centimeters;
<b>i</b> means inches, and <b>p</b> means printers points (1/72 inch).
Larger y-coordinates refer to points lower on the screen;  larger
x-coordinates refer to points farther to the right.
Coordinates can be specified either as an even number of parameters,
or as a single list parameter containing an even number of x and y
coordinate values.
</p>
<subsection>
<title>TRANSFORMATIONS</title>
<p>Normally the origin of the canvas coordinate system is at the
upper-left corner of the window containing the canvas.
It is possible to adjust the origin of the canvas
coordinate system relative to the origin of the window using the
<b>xview</b> and <b>yview</b> widget commands;  this is typically used
for scrolling.
Canvases do not support scaling or rotation of the canvas coordinate
system relative to the window coordinate system.
</p>
<p>Individual items may be moved or scaled using widget commands
described below, but they may not be rotated.
</p>
<p>Note that the default origin of the canvas's visible area is
coincident with the origin for the whole window as that makes bindings
using the mouse position easier to work with; you only need to use the
<b>canvasx</b> and <b>canvasy</b> widget commands if you adjust the
origin of the visible area.  However, this also means that any focus
ring (as controlled by the <b>-highlightthickness</b> option) and
window border (as controlled by the <b>-borderwidth</b> option) must
be taken into account before you get to the visible area of the
canvas.
</p>
</subsection>
</section>
<section id="indices">
<title>INDICES</title>
<p>Text items support the notion of an <i>index</i> for identifying
particular positions within the item.
In a similar fashion, line and polygon items support <i>index</i> for
identifying, inserting and deleting subsets of their coordinates.
Indices are used for commands such as inserting or deleting
a range of characters or coordinates, and setting the insertion
cursor position. An index may be specified in any of a number
of ways, and different types of items may support different forms
for specifying indices.
Text items support the following forms for an index;  if you
define new types of text-like items, it would be advisable to
support as many of these forms as practical.
Note that it is possible to refer to the character just after
the last one in the text item;  this is necessary for such
tasks as inserting new text at the end of the item.
Lines and Polygons don't support the insertion cursor
and the selection. Their indices are supposed to be even
always, because coordinates always appear in pairs.
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>A decimal number giving the position of the desired character
within the text item.
0 refers to the first character, 1 to the next character, and
so on. If indexes are odd for lines and polygons, they will be
automatically decremented by one.
A number less than 0 is treated as if it were zero, and a
number greater than the length of the text item is treated
as if it were equal to the length of the text item. For
polygons, numbers less than 0 or greater then the length
of the coordinate list will be adjusted by adding or subtracting
the length until the result is between zero and the length,
inclusive.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Refers to the character or coordinate just after the last one
in the item (same as the number of characters or coordinates
in the item).
</dd>
</dle>
<dle>
<dt><b>insert</b></dt>
<dd>Refers to the character just before which the insertion cursor
is drawn in this item. Not valid for lines and polygons.
</dd>
</dle>
<dle>
<dt><b>sel.first</b></dt>
<dd>Refers to the first selected character in the item.
If the selection isn't in this item then this form is illegal.
</dd>
</dle>
<dle>
<dt><b>sel.last</b></dt>
<dd>Refers to the last selected character in the item.
If the selection isn't in this item then this form is illegal.
</dd>
</dle>
<dle>
<dt><b>@</b><m>x,y</m></dt>
<dd>Refers to the character or coordinate at the point given by <i>x</i> and
<i>y</i>, where <i>x</i> and <i>y</i> are specified in the coordinate
system of the canvas.
If <i>x</i> and <i>y</i> lie outside the coordinates covered by the
text item, then they refer to the first or last character in the
line that is closest to the given point.
</dd>
</dle>
</dl>
</section>
<section id="dash-patterns">
<title>DASH PATTERNS</title>
<p>Many items support the notion of a dash pattern for outlines.
</p>
<p>The first possible syntax is a list of integers. Each element
represents the number of pixels of a line segment. Only the odd
segments are drawn using the "outline" color. The other segments
are drawn transparent.
</p>
<p>The second possible syntax is a character list containing only
5 possible characters <b>[.,-_ ]</b>. The space can be used
to enlarge the space between other line elements, and can not
occur as the first position in the string. Some examples:
    -dash .	= -dash {2 4}
    -dash -     = -dash {6 4}
    -dash -.    = -dash {6 4 2 4}
    -dash -..   = -dash {6 4 2 4 2 4}
    -dash {. }  = -dash {2 8}
    -dash ,	= -dash {4 4}
</p>
<p>The main difference of this syntax with the previous is that it
is shape-conserving. This means that all values in the dash
list will be multiplied by the line width before display. This
assures that "." will always be displayed as a dot and "-"
always as a dash regardless of the line width.
</p>
<p>On systems which support only a limited set of dash patterns, the dash
pattern will be displayed as the closest dash pattern that is available.
For example, on Windows only the first 4 of the above examples are
available.  The last 2 examples will be displayed identically to the first
one.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">canvas</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.
The following widget commands are possible for canvas widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>addtag</b> <m>tag searchSpec</m> ?<m>arg arg ...</m>?</dt>
<dd>For each item that meets the constraints specified by
<i>searchSpec</i> and the <i>arg</i>s, add
<i>tag</i> to the list of tags associated with the item if it
isn't already present on that list.
It is possible that no items will satisfy the constraints
given by <i>searchSpec</i> and <i>arg</i>s, in which case the
command has no effect.
This command returns an empty string as result.
<i>SearchSpec</i> and <i>arg</i>'s may take any of the following
forms:
<dl>
<dle>
<dt><b>above</b> <m>tagOrId</m></dt>
<dd>Selects the item just after (above) the one given by <i>tagOrId</i>
in the display list.
If <i>tagOrId</i> denotes more than one item, then the last (topmost)
of these items in the display list is used.
</dd>
</dle>
<dle>
<dt><b>all</b></dt>
<dd>Selects all the items in the canvas.
</dd>
</dle>
<dle>
<dt><b>below</b> <m>tagOrId</m></dt>
<dd>Selects the item just before (below) the one given by <i>tagOrId</i>
in the display list.
If <i>tagOrId</i> denotes more than one item, then the first (lowest)
of these items in the display list is used.
</dd>
</dle>
<dle>
<dt><b>closest</b> <m>x y</m> ?<m>halo</m>? ?<m>start</m>?</dt>
<dd>Selects the item closest to the point given by <i>x</i> and <i>y</i>.
If more than one item is at the same closest distance (e.g. two
items overlap the point), then the top-most of these items (the
last one in the display list) is used.
If <i>halo</i> is specified, then it must be a non-negative
value.
Any item closer than <i>halo</i> to the point is considered to
overlap it.
The <i>start</i> argument may be used to step circularly through
all the closest items.
If <i>start</i> is specified, it names an item using a tag or id
(if by tag, it selects the first item in the display list with
the given tag).
Instead of selecting the topmost closest item, this form will
select the topmost closest item that is below <i>start</i> in
the display list;  if no such item exists, then the selection
behaves as if the <i>start</i> argument had not been specified.
</dd>
</dle>
<dle>
<dt><b>enclosed</b> <m>x1</m> <m>y1</m> <m>x2</m> <m>y2</m></dt>
<dd>Selects all the items completely enclosed within the rectangular
region given by <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i>.
<i>X1</i> must be no greater then <i>x2</i> and <i>y1</i> must be
no greater than <i>y2</i>.
</dd>
</dle>
<dle>
<dt><b>overlapping</b> <m>x1</m> <m>y1</m> <m>x2</m> <m>y2</m></dt>
<dd>Selects all the items that overlap or are enclosed within the
rectangular region given by <i>x1</i>, <i>y1</i>, <i>x2</i>,
and <i>y2</i>.
<i>X1</i> must be no greater then <i>x2</i> and <i>y1</i> must be
no greater than <i>y2</i>.
</dd>
</dle>
<dle>
<dt><b>withtag</b> <m>tagOrId</m></dt>
<dd>Selects all the items given by <i>tagOrId</i>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>tagOrId</m> ?<m>tagOrId tagOrId ...</m>?</dt>
<dd>Returns a list with four elements giving an approximate bounding box
for all the items named by the <i>tagOrId</i> arguments.
The list has the form ``<i>x1 y1 x2 y2</i>'' such that the drawn
areas of all the named elements are within the region bounded by
<i>x1</i> on the left, <i>x2</i> on the right, <i>y1</i> on the top,
and <i>y2</i> on the bottom.
The return value may overestimate the actual bounding box by
a few pixels.
If no items match any of the <i>tagOrId</i> arguments or if the
matching items have empty bounding boxes (i.e. they have nothing
to display)
then an empty string is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>bind</b> <m>tagOrId</m> ?<m>sequence</m>? ?<m>command</m>?</dt>
<dd>This command associates <i>command</i> with all the items given by
<i>tagOrId</i> such that whenever the event sequence given by
<i>sequence</i> occurs for one of the items the command will
be invoked.
This widget command is similar to the <cmd>bind</cmd> command except that
it operates on items in a canvas rather than entire widgets.
See the <cmd>bind</cmd> manual entry for complete details
on the syntax of <i>sequence</i> and the substitutions performed
on <i>command</i> before invoking it.
If all arguments are specified then a new binding is created, replacing
any existing binding for the same <i>sequence</i> and <i>tagOrId</i>
(if the first character of <i>command</i> is ``+'' then <i>command</i>
augments an existing binding rather than replacing it).
In this case the return value is an empty string.
If <i>command</i> is omitted then the command returns the <i>command</i>
associated with <i>tagOrId</i> and <i>sequence</i> (an error occurs
if there is no such binding).
If both <i>command</i> and <i>sequence</i> are omitted then the command
returns a list of all the sequences for which bindings have been
defined for <i>tagOrId</i>.
<p>The only events for which bindings may be specified are those related to
the mouse and keyboard (such as <b cat="event">Enter</b>, <b cat="event">Leave</b>,
<b cat="event">ButtonPress</b>, <b cat="event">Motion</b>, and <b>KeyPress</b>) or virtual events.
The handling of events in canvases uses the current item defined in ITEM
IDS AND TAGS above.  <b cat="event">Enter</b> and <b cat="event">Leave</b> events trigger for an
item when it becomes the current item or ceases to be the current item;
note that these events are different than <b cat="event">Enter</b> and <b cat="event">Leave</b>
events for windows.  Mouse-related events are directed to the current
item, if any.  Keyboard-related events are directed to the focus item, if
any (see the <cmd>focus</cmd> widget command below for more on this).  If a
virtual event is used in a binding, that binding can trigger only if the
virtual event is defined by an underlying mouse-related or
keyboard-related event.
</p><p>It is possible for multiple bindings to match a particular event.
This could occur, for example, if one binding is associated with the
item's id and another is associated with one of the item's tags.
When this occurs, all of the matching bindings are invoked.
A binding associated with the <b>all</b> tag is invoked first,
followed by one binding for each of the item's tags (in order),
followed by a binding associated with the item's id.
If there are multiple matching bindings for a single tag,
then only the most specific binding is invoked.
A <cmd>continue</cmd> command in a binding script terminates that
script, and a <cmd>break</cmd> command terminates that script
and skips any remaining scripts for the event, just as for the
<cmd>bind</cmd> command.
</p><p>If bindings have been created for a canvas window using the <cmd>bind</cmd>
command, then they are invoked in addition to bindings created for
the canvas's items using the <cmd>bind</cmd> widget command.
The bindings for items will be invoked before any of the bindings
for the window as a whole.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>canvasx</b> <m>screenx</m> ?<m>gridspacing</m>?</dt>
<dd>Given a window x-coordinate in the canvas <i>screenx</i>, this command returns
the canvas x-coordinate that is displayed at that location.
If <i>gridspacing</i> is specified, then the canvas coordinate is
rounded to the nearest multiple of <i>gridspacing</i> units.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>canvasy</b> <m>screeny</m> ?<m>gridspacing</m>?</dt>
<dd>Given a window y-coordinate in the canvas <i>screeny</i> this command returns
the canvas y-coordinate that is displayed at that location.
If <i>gridspacing</i> is specified, then the canvas coordinate is
rounded to the nearest multiple of <i>gridspacing</i> units.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">canvas</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure ?</b><m>option</m>? ?<m>value</m>? ?<m>option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">canvas</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>coords</b> <m>tagOrId</m> ?<m>x0 y0 ...</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>coords</b> <m>tagOrId</m> ?<m>coordList</m>?</dt>
<dd>Query or modify the coordinates that define an item.
If no coordinates are specified, this command returns a list
whose elements are the coordinates of the item named by
<i>tagOrId</i>.
If coordinates are specified, then they replace the current
coordinates for the named item.
If <i>tagOrId</i> refers to multiple items, then
the first one in the display list is used.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>create</b> <m>type x y</m> ?<m>x y ...</m>? ?<m>option value ...</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>create</b> <m>type coordList</m> ?<m>option value ...</m>?</dt>
<dd>Create a new item in <i>pathName</i> of type <i>type</i>.
The exact format of the arguments after <b>type</b> depends
on <b>type</b>, but usually they consist of the coordinates for
one or more points, followed by specifications for zero or
more item options.
See the subsections on individual item types below for more
on the syntax of this command.
This command returns the id for the new item.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>dchars</b> <m>tagOrId first</m> ?<m>last</m>?</dt>
<dd>For each item given by <i>tagOrId</i>, delete the characters, or coordinates,
in the range given by <i>first</i> and <i>last</i>, inclusive.
If some of the items given by <i>tagOrId</i> don't support
indexing operations then they ignore dchars.
Text items interpret <i>first</i> and <i>last</i> as indices to a character,
line and polygon items interpret them indices to a coordinate (an x,y pair).
Indices are described in INDICES above.
If <i>last</i> is omitted, it defaults to <i>first</i>.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> ?<m>tagOrId tagOrId ...</m>?</dt>
<dd>Delete each of the items given by each <i>tagOrId</i>, and return
an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>dtag</b> <m>tagOrId</m> ?<m>tagToDelete</m>?</dt>
<dd>For each of the items given by <i>tagOrId</i>, delete the
tag given by <i>tagToDelete</i> from the list of those
associated with the item.
If an item doesn't have the tag <i>tagToDelete</i> then
the item is unaffected by the command.
If <i>tagToDelete</i> is omitted then it defaults to <i>tagOrId</i>.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>find</b> <m>searchCommand</m> ?<m>arg arg ...</m>?</dt>
<dd>This command returns a list consisting of all the items that
meet the constraints specified by <i>searchCommand</i> and
<i>arg</i>'s.
<i>SearchCommand</i> and <i>args</i> have any of the forms
accepted by the <b>addtag</b> command.
The items are returned in stacking order, with the lowest item first.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>focus</b> ?<m>tagOrId</m>?</dt>
<dd>Set the keyboard focus for the canvas widget to the item given by
<i>tagOrId</i>.
If <i>tagOrId</i> refers to several items, then the focus is set
to the first such item in the display list that supports the
insertion cursor.
If <i>tagOrId</i> doesn't refer to any items, or if none of them
support the insertion cursor, then the focus isn't changed.
If <i>tagOrId</i> is an empty
string, then the focus item is reset so that no item has the focus.
If <i>tagOrId</i> is not specified then the command returns the
id for the item that currently has the focus, or an empty string
if no item has the focus.
<p>Once the focus has been set to an item, the item will display
the insertion cursor and all keyboard events will be directed
to that item.
The focus item within a canvas and the focus window on the
screen (set with the <cmd>focus</cmd> command) are totally independent:
a given item doesn't actually have the input focus unless (a)
its canvas is the focus window and (b) the item is the focus item
within the canvas.
In most cases it is advisable to follow the <cmd>focus</cmd> widget
command with the <cmd>focus</cmd> command to set the focus window to
the canvas (if it wasn't there already).
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>gettags</b> <m>tagOrId</m></dt>
<dd>Return a list whose elements are the tags associated with the
item given by <i>tagOrId</i>.
If <i>tagOrId</i> refers to more than one item, then the tags
are returned from the first such item in the display list.
If <i>tagOrId</i> doesn't refer to any items, or if the item
contains no tags, then an empty string is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>icursor</b> <m>tagOrId index</m></dt>
<dd>Set the position of the insertion cursor for the item(s) given by <i>tagOrId</i>
to just before the character whose position is given by <i>index</i>.
If some or all of the items given by <i>tagOrId</i> don't support
an insertion cursor then this command has no effect on them.
See <ref refid="indices">INDICES</ref> above for a description of the
legal forms for <i>index</i>.
Note:  the insertion cursor is only displayed in an item if
that item currently has the keyboard focus (see the widget
command <cmd>focus</cmd>, below), but the cursor position may
be set even when the item doesn't have the focus.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>tagOrId index</m></dt>
<dd>This command returns a decimal string giving the numerical index
within <i>tagOrId</i> corresponding to <i>index</i>.
<i>Index</i> gives a textual description of the desired position
as described in INDICES above.
Text items interpret <i>index</i> as an index to a  character,
line and polygon items interpret it as an index to a coordinate (an x,y pair).
The return value is guaranteed to lie between 0 and the number
of characters, or coordinates, within the item, inclusive.
If <i>tagOrId</i> refers to multiple items, then the index
is processed in the first of these items that supports indexing
operations (in display list order).
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>tagOrId beforeThis string</m></dt>
<dd>For each of the items given by <i>tagOrId</i>, if the item supports
text or coordinate, insertion then <i>string</i> is inserted into the item's
text just before the character, or coordinate, whose index is <i>beforeThis</i>.
Text items interpret <i>beforeThis</i> as an index to a  character,
line and polygon items interpret it as an index to a coordinate (an x,y pair).
For lines and polygons the <i>string</i> must be a valid coordinate
sequence.
See <ref refid="indices">INDICES</ref> above for information about the forms allowed
for <i>beforeThis</i>.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>itemcget</b> <m>tagOrId</m> <m>option</m></dt>
<dd>Returns the current value of the configuration option for the
item given by <i>tagOrId</i> whose name is <i>option</i>.
This command is similar to the <b>cget</b> widget command except that
it applies to a particular item rather than the widget as a whole.
<i>Option</i> may have any of the values accepted by the <b>create</b>
widget command when the item was created.
If <i>tagOrId</i> is a tag that refers to more than one item,
the first (lowest) such item is used.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>itemconfigure</b> <m>tagOrId</m> ?<m>option</m>? ?<m>value</m>? ?<m>option value ...</m>?</dt>
<dd>This command is similar to the <b>configure</b> widget command except
that it modifies item-specific options for the items given by
<i>tagOrId</i> instead of modifying options for the overall
canvas widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for the first item given by <i>tagOrId</i>
(see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s) in
each of the items given by <i>tagOrId</i>;  in
this case the command returns an empty string.
The <i>option</i>s and <i>value</i>s are the same as those permissible
in the <b>create</b> widget command when the item(s) were created;
see the sections describing individual item types below for details
on the legal options.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>lower</b> <m>tagOrId</m> ?<m>belowThis</m>?</dt>
<dd>Move all of the items given by <i>tagOrId</i> to a new position
in the display list just before the item given by <i>belowThis</i>.
If <i>tagOrId</i> refers to more than one item then all are moved
but the relative order of the moved items will not be changed.
<i>BelowThis</i> is a tag or id;  if it refers to more than one
item then the first (lowest) of these items in the display list is used
as the destination location for the moved items.
Note: this command has no effect on window items.  Window items always
obscure other item types, and the stacking order of window items is
determined by the <cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> commands, not the
<cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> widget commands for canvases.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>move</b> <m>tagOrId xAmount yAmount</m></dt>
<dd>Move each of the items given by <i>tagOrId</i> in the canvas coordinate
space by adding <i>xAmount</i> to the x-coordinate of each point
associated with the item and <i>yAmount</i> to the y-coordinate of
each point associated with the item.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>postscript</b> ?<m>option value option value ...</m>?</dt>
<dd>Generate a Postscript representation for part or all of the canvas.
If the <b>-file</b> option is specified then the Postscript is written
to a file and an empty string is returned;  otherwise the Postscript
is returned as the result of the command.
If the interpreter that owns the canvas is marked as safe, the operation
will fail because safe interpreters are not allowed to write files.
If the <b>-channel</b> option is specified, the argument denotes the name
of a channel already opened for writing. The Postscript is written to
that channel, and the channel is left open for further writing at the end
of the operation.
The Postscript is created in Encapsulated Postscript form using
version 3.0 of the Document Structuring Conventions.
Note: by default Postscript is only generated for information that
appears in the canvas's window on the screen.  If the canvas is
freshly created it may still have its initial size of 1x1 pixel
so nothing will appear in the Postscript.  To get around this problem
either invoke the "update" command to wait for the canvas window
to reach its final size, or else use the <b>-width</b> and <b>-height</b>
options to specify the area of the canvas to print.
The <i>option</i>-<i>value</i> argument pairs provide additional
information to control the generation of Postscript.  The following
options are supported:
<dl>
<dle>
<dt><b>-colormap</b> <m>varName</m></dt>
<dd><i>VarName</i> must be the name of an array variable
that specifies a color mapping to use in the Postscript.
Each element of <i>varName</i> must consist of Postscript
code to set a particular color value (e.g. ``<b>1.0 1.0 0.0 setrgbcolor</b>'').
When outputting color information in the Postscript, Tk checks
to see if there is an element of <i>varName</i> with the same
name as the color.
If so, Tk uses the value of the element as the Postscript command
to set the color.
If this option hasn't been specified, or if there isn't an entry
in <i>varName</i> for a given color, then Tk uses the red, green,
and blue intensities from the X color.
</dd>
</dle>
<dle>
<dt><b>-colormode</b> <m>mode</m></dt>
<dd>Specifies how to output color information.  <i>Mode</i> must be either
<b>color</b> (for full color output), <b>gray</b> (convert all colors
to their gray-scale equivalents) or <b>mono</b> (convert all colors
to black or white).
</dd>
</dle>
<dle>
<dt><b>-file</b> <m>fileName</m></dt>
<dd>Specifies the name of the file in which to write the Postscript.
If this option isn't specified then the Postscript is returned as the
result of the command instead of being written to a file.
</dd>
</dle>
<dle>
<dt><b>-fontmap</b> <m>varName</m></dt>
<dd><i>VarName</i> must be the name of an array variable
that specifies a font mapping to use in the Postscript.
Each element of <i>varName</i> must consist of a Tcl list with
two elements, which are the name and point size of a Postscript font.
When outputting Postscript commands for a particular font, Tk
checks to see if <i>varName</i> contains an element with the same
name as the font.
If there is such an element, then the font information contained in
that element is used in the Postscript.
Otherwise Tk attempts to guess what Postscript font to use.
Tk's guesses generally only work for well-known fonts such as
Times and Helvetica and Courier, and only if the X font name does not
omit any dashes up through the point size.
For example, <b>-*-Courier-Bold-R-Normal--*-120-*</b> will work but
<b>*Courier-Bold-R-Normal*120*</b> will not;  Tk needs the dashes to
parse the font name).
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>size</m></dt>
<dd>Specifies the height of the area of the canvas to print.
Defaults to the height of the canvas window.
</dd>
</dle>
<dle>
<dt><b>-pageanchor</b> <m>anchor</m></dt>
<dd>Specifies which point of the printed area of the canvas should appear over
the positioning point on the page (which is given by the <b>-pagex</b>
and <b>-pagey</b> options).
For example, <b>-pageanchor n</b> means that the top center of the
area of the canvas being printed (as it appears in the canvas window)
should be over the positioning point. Defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-pageheight</b> <m>size</m></dt>
<dd>Specifies that the Postscript should be scaled in both x and y so
that the printed area is <i>size</i> high on the Postscript page.
<i>Size</i> consists of a floating-point number followed by
<b>c</b> for centimeters, <b>i</b> for inches, <b>m</b> for millimeters,
or <b>p</b> or nothing for printer's points (1/72 inch).
Defaults to the height of the printed area on the screen.
If both <b>-pageheight</b> and <b>-pagewidth</b> are specified then
the scale factor from <b>-pagewidth</b> is used (non-uniform scaling
is not implemented).
</dd>
</dle>
<dle>
<dt><b>-pagewidth</b> <m>size</m></dt>
<dd>Specifies that the Postscript should be scaled in both x and y so
that the printed area is <i>size</i> wide on the Postscript page.
<i>Size</i> has the same form as for <b>-pageheight</b>.
Defaults to the width of the printed area on the screen.
If both <b>-pageheight</b> and <b>-pagewidth</b> are specified then
the scale factor from <b>-pagewidth</b>  is used (non-uniform scaling
is not implemented).
</dd>
</dle>
<dle>
<dt><b>-pagex</b> <m>position</m></dt>
<dd><i>Position</i> gives the x-coordinate of the positioning point on
the Postscript page, using any of the forms allowed for <b>-pageheight</b>.
Used in conjunction with the <b>-pagey</b> and <b>-pageanchor</b> options
to determine where the printed area appears on the Postscript page.
Defaults to the center of the page.
</dd>
</dle>
<dle>
<dt><b>-pagey</b> <m>position</m></dt>
<dd><i>Position</i> gives the y-coordinate of the positioning point on
the Postscript page, using any of the forms allowed for <b>-pageheight</b>.
Used in conjunction with the <b>-pagex</b> and <b>-pageanchor</b> options
to determine where the printed area appears on the Postscript page.
Defaults to the center of the page.
</dd>
</dle>
<dle>
<dt><b>-rotate</b> <m>boolean</m></dt>
<dd><i>Boolean</i> specifies whether the printed area is to be rotated 90
degrees.
In non-rotated output the x-axis of the printed area runs along
the short dimension of the page (``portrait'' orientation);
in rotated output the x-axis runs along the long dimension of the
page (``landscape'' orientation).
Defaults to non-rotated.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>size</m></dt>
<dd>Specifies the width of the area of the canvas to print.
Defaults to the width of the canvas window.
</dd>
</dle>
<dle>
<dt><b>-x</b> <m>position</m></dt>
<dd>Specifies the x-coordinate of the left edge of the area of the
canvas that is to be printed, in canvas coordinates, not window
coordinates.
Defaults to the coordinate of the left edge of the window.
</dd>
</dle>
<dle>
<dt><b>-y</b> <m>position</m></dt>
<dd>Specifies the y-coordinate of the top edge of the area of the
canvas that is to be printed, in canvas coordinates, not window
coordinates.
Defaults to the coordinate of the top edge of the window.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>raise</b> <m>tagOrId</m> ?<m>aboveThis</m>?</dt>
<dd>Move all of the items given by <i>tagOrId</i> to a new position
in the display list just after the item given by <i>aboveThis</i>.
If <i>tagOrId</i> refers to more than one item then all are moved
but the relative order of the moved items will not be changed.
<i>AboveThis</i> is a tag or id;  if it refers to more than one
item then the last (topmost) of these items in the display list is used
as the destination location for the moved items.
Note: this command has no effect on window items.  Window items always
obscure other item types, and the stacking order of window items is
determined by the <cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> commands, not the
<cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> widget commands for canvases.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scale</b> <m>tagOrId xOrigin yOrigin xScale yScale</m></dt>
<dd>Rescale all of the items given by <i>tagOrId</i> in canvas coordinate
space.
<i>XOrigin</i> and <i>yOrigin</i> identify the origin for the scaling
operation and <i>xScale</i> and <i>yScale</i> identify the scale
factors for x- and y-coordinates, respectively (a scale factor of
1.0 implies no change to that coordinate).
For each of the points defining each item, the x-coordinate is
adjusted to change the distance from <i>xOrigin</i> by a factor
of <i>xScale</i>.
Similarly, each y-coordinate is adjusted to change the distance
from <i>yOrigin</i> by a factor of <i>yScale</i>.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan</b> <m>option args</m></dt>
<dd>This command is used to implement scanning on canvases.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>scan mark</b> <m>x y</m></dt>
<dd>Records <i>x</i> and <i>y</i> and the canvas's current view;  used
in conjunction with later <b>scan dragto</b> commands.
Typically this command is associated with a mouse button press in
the widget and <i>x</i> and <i>y</i> are the coordinates of the
mouse.  It returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan dragto</b> <m>x y ?gain?</m>.</dt>
<dd>This command computes the difference between its <i>x</i> and <i>y</i>
arguments (which are typically mouse coordinates) and the <i>x</i> and
<i>y</i> arguments to the last <b>scan mark</b> command for the widget.
It then adjusts the view by <i>gain</i> times the
difference in coordinates, where <i>gain</i> defaults to 10.
This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the canvas at high speed through its window.  The return
value is an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select</b> <m>option</m> ?<m>tagOrId arg</m>?</dt>
<dd>Manipulates the selection in one of several ways, depending on
<i>option</i>.
The command may take any of the forms described below.
In all of the descriptions below, <i>tagOrId</i> must refer to
an item that supports indexing and selection;  if it refers to
multiple items then the first of
these that supports indexing and the selection is used.
<i>Index</i> gives a textual description of a position
within <i>tagOrId</i>, as described in INDICES above.
<dl>
<dle>
<dt><m>pathName</m> <b>select adjust</b> <m>tagOrId index</m></dt>
<dd>Locate the end of the selection in <i>tagOrId</i> nearest
to the character given by <i>index</i>, and adjust that
end of the selection to be at <i>index</i> (i.e. including
but not going beyond <i>index</i>).
The other end of the selection is made the anchor point
for future <b>select to</b> commands.
If the selection isn't currently in <i>tagOrId</i> then
this command behaves the same as the <b>select to</b> widget
command.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select clear</b></dt>
<dd>Clear the selection if it is in this widget.
If the selection isn't in this widget then the command
has no effect.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select from</b> <m>tagOrId index</m></dt>
<dd>Set the selection anchor point for the widget to be just
before the character
given by <i>index</i> in the item given by <i>tagOrId</i>.
This command doesn't change the selection;  it just sets
the fixed end of the selection for future <b>select to</b>
commands.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select item</b></dt>
<dd>Returns the id of the selected item, if the selection is in an
item in this canvas.
If the selection is not in this canvas then an empty string
is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select to</b> <m>tagOrId index</m></dt>
<dd>Set the selection to consist of those characters of <i>tagOrId</i>
between the selection anchor point and
<i>index</i>.
The new selection will include the character given by <i>index</i>;
it will include the character given by the anchor point only if
<i>index</i> is greater than or equal to the anchor point.
The anchor point is determined by the most recent <b>select adjust</b>
or <b>select from</b> command for this widget.
If the selection anchor point for the widget isn't currently in
<i>tagOrId</i>, then it is set to the same character given
by <i>index</i>.
Returns an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>type</b> <m>tagOrId</m></dt>
<dd>Returns the type of the item given by <i>tagOrId</i>, such as
<b cat="canvasitemtype">rectangle</b> or <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b>.
If <i>tagOrId</i> refers to more than one item, then the type
of the first item in the display list is returned.
If <i>tagOrId</i> doesn't refer to any items at all then
an empty string is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b>  ?<m>args</m>?</dt>
<dd>This command is used to query and change the horizontal position of the
information displayed in the canvas's window.
It can take any of the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the canvas's area (as defined by the <b>-scrollregion</b> option)
is off-screen to the left, the middle 40% is visible
in the window, and 40% of the canvas is off-screen to the right.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that <i>fraction</i> of the
total width of the canvas is off-screen to the left.
<i>Fraction</i> must be a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b> or an abbreviation
of one of these.
If <i>what</i> is <b>units</b>, the view adjusts left or right in units
of the <b>xScrollIncrement</b> option, if it is greater than zero,
or in units of one-tenth the window's width otherwise.
If <i>what is</i> <b>pages</b> then the view
adjusts in units of nine-tenths the window's width.
If <i>number</i> is negative then information farther to the left
becomes visible;  if it is positive then information farther to the right
becomes visible.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>?args</m>?</dt>
<dd>This command is used to query and change the vertical position of the
information displayed in the canvas's window.
It can take any of the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>yview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the vertical span that is visible in the window.
For example, if the first element is .6 and the second element is 1.0,
the lowest 40% of the canvas's area (as defined by the <b>-scrollregion</b>
option) is visible in the window.
These are the same values passed to scrollbars via the <b>-yscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that <i>fraction</i> of the canvas's
area is off-screen to the top.
<i>Fraction</i> is a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview scroll</b> <m>number what</m></dt>
<dd>This command adjusts the view in the window up or down according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b>.
If <i>what</i> is <b>units</b>, the view adjusts up or down in units
of the <b>yScrollIncrement</b> option, if it is greater than zero,
or in units of one-tenth the window's height otherwise.
If <i>what</i> is <b>pages</b> then
the view adjusts in units of nine-tenths the window's height.
If <i>number</i> is negative then higher information becomes
visible;  if it is positive then lower information
becomes visible.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>OVERVIEW OF ITEM TYPES</title>
<p>The sections below describe the various types of items supported
by canvas widgets.  Each item type is characterized by two things:
first, the form of the <b>create</b> command used to create
instances of the type;  and second, a set of configuration options
for items of that type, which may be used in the
<b>create</b> and <b>itemconfigure</b> widget commands.
Most items don't support indexing or selection or the commands
related to them, such as <b>index</b> and <b>insert</b>.
Where items do support these facilities, it is noted explicitly
in the descriptions below.
At present, text, line and polygon items provide this support.
For lines and polygons the indexing facility is used to manipulate
the coordinates of the item.
</p>
<subsection>
<title>COMMON ITEM OPTIONS</title>
<p>Many items share a common set of options.  These options are
explained here, and then referred to be each widget type for brevity.
</p>
<dl>
<dle>
<dt><b>-dash</b> <m>pattern</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activedash</b> <m>pattern</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disableddash</b> <m>pattern</m></dt>
<dd>This option specifies dash patterns for the normal, active
state, and disabled state of an item.
<i>pattern</i> may have any of the forms accepted by <fun>Tk_GetDash</fun>.
If the dash options are omitted then the default is a solid outline.
See "<ref refid="dash-patterns">DASH PATTERNS</ref>" for more information.
</dd>
</dle>
<dle>
<dt><b>-dashoffset</b> <m>offset</m></dt>
<dd>The starting <i>offset</i> in pixels into the pattern provided by the
<b>-dash</b> option.  <b>-dashoffset</b> is ignored if there is no
<b>-dash</b> pattern.  The <i>offset</i> may have any of the forms described
in the <ref refid="coordinates">COORDINATES</ref> section above.
</dd>
</dle>
<dle>
<dt><b>-fill</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activefill</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledfill</b> <m>color</m></dt>
<dd>Specifies the color to be used to fill item's area.
in its normal, active, and disabled states,
<i>Color</i> may have any of the forms accepted by <fun>Tk_GetColor</fun>.
If <i>color</i> is an empty string (the default),
then the item will not be filled.
For the line item, it specifies the color of the line drawn.
For the text item, it specifies the foreground color of the text.
</dd>
</dle>
<dle>
<dt><b>-outline</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activeoutline</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledoutline</b> <m>color</m></dt>
<dd>This option specifies the color that should be used to draw the
outline of the item in its normal, active and disabled states.
<i>Color</i> may have any of the forms accepted by <fun>Tk_GetColor</fun>.
This option defaults to <b>black</b>.  If <i>color</i> is specified
as an empty string then no outline is drawn for the item.
</dd>
</dle>
<dle>
<dt><b>-offset</b> <m>offset</m></dt>
<dd>Specifies the offset of stipples.  The offset value can be of the form
<b>x,y</b> or <b>side</b>, where side can be <b>n</b>, <b>ne</b>, <b>e</b>,
<b>se</b>, <b>s</b>, <b>sw</b>, <b>w</b>, <b>nw</b>, or <b>center</b>. In the
first case the origin is the origin of the toplevel of the current window.
For the canvas itself and canvas objects the origin is the canvas origin,
but putting <b>#</b> in front of the coordinate pair indicates using the
toplevel origin instead. For canvas objects, the <b>-offset</b> option is
used for stippling as well.  For the line and polygon canvas items you can
also specify an index as argument, which connects the stipple origin to one
of the coordinate points of the line/polygon.
</dd>
</dle>
<dle>
<dt><b>-outlinestipple</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activeoutlinestipple</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledoutlinestipple</b> <m>bitmap</m></dt>
<dd>This option specifies stipple patterns that should be used to draw the
outline of the item in its normal, active and disabled states.
Indicates that the outline for the item should be drawn with a stipple pattern;
<i>bitmap</i> specifies the stipple pattern to use, in any of the
forms accepted by <fun>Tk_GetBitmap</fun>.
If the <b>-outline</b> option hasn't been specified then this option
has no effect.
If <i>bitmap</i> is an empty string (the default), then the outline is drawn
in a solid fashion.
<i>Note that stipples are not well supported on platforms that do not
use X11 as their drawing API.</i>
</dd>
</dle>
<dle>
<dt><b>-stipple</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activestipple</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledstipple</b> <m>bitmap</m></dt>
<dd>This option specifies stipple patterns that should be used to fill
the item in its normal, active and disabled states.
<i>bitmap</i> specifies the stipple pattern to use, in any of the
forms accepted by <fun>Tk_GetBitmap</fun>.
If the <b>-fill</b> option hasn't been specified then this option
has no effect.
If <i>bitmap</i> is an empty string (the default), then filling is done
in a solid fashion.
For the text item, it affects the actual text.
<i>Note that stipples are not well supported on platforms that do not
use X11 as their drawing API.</i>
</dd>
</dle>
<dle>
<dt><b>-state</b> <m>state</m></dt>
<dd>This allows an item to override the canvas widget's global <i>state</i>
option.  It takes the same values:
<i>normal</i>, <i>disabled</i> or <i>hidden</i>.
</dd>
</dle>
<dle>
<dt><b>-tags</b> <m>tagList</m></dt>
<dd>Specifies a set of tags to apply to the item.
<i>TagList</i> consists of a list of tag names, which replace any
existing tags for the item.  <i>TagList</i> may be an empty list.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>outlineWidth</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activewidth</b> <m>outlineWidth</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledwidth</b> <m>outlineWidth</m></dt>
<dd>Specifies the width of the outline to be drawn around
the item's region, in its normal, active and disabled states.
<i>outlineWidth</i> may be in any of the forms described in the
<ref refid="coordinates">COORDINATES</ref> section above.
If the <b>-outline</b> option has been specified as an empty string then
this option has no effect.  This option defaults to 1.0.
For arcs, wide outlines will be drawn centered on the edges of the
arc's region.
</dd>
</dle>
</dl>
</subsection>
</section>
<section>
<title>ARC ITEMS</title>
<p>Items of type <b cat="canvasitemtype">arc</b> appear on the display as arc-shaped regions.
An arc is a section of an oval delimited by two angles (specified
by the <b>-start</b> and <b>-extent</b> options) and displayed in
one of several ways (specified by the <b>-style</b> option).
Arcs are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create arc</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create arc</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or <i>coordList</i> give
the coordinates of two diagonally opposite corners of a
rectangular region enclosing the oval that defines the arc.
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by arcs:
</p>
<example>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</example>
<p>The following extra options are supported for arcs:
</p>
<dl>
<dle>
<dt><b>-extent</b> <m>degrees</m></dt>
<dd>Specifies the size of the angular range occupied by the arc.
The arc's range extends for <i>degrees</i> degrees counter-clockwise
from the starting angle given by the <b>-start</b> option.
<i>Degrees</i> may be negative.
If it is greater than 360 or less than -360, then <i>degrees</i>
modulo 360 is used as the extent.
</dd>
</dle>
<dle>
<dt><b>-start</b> <m>degrees</m></dt>
<dd>Specifies the beginning of the angular range occupied by the
arc.
<i>Degrees</i> is given in units of degrees measured counter-clockwise
from the 3-o'clock position;  it may be either positive or negative.
</dd>
</dle>
<dle>
<dt><b>-style</b> <m>type</m></dt>
<dd>Specifies how to draw the arc.  If <i>type</i> is <b>pieslice</b>
(the default) then the arc's region is defined by a section
of the oval's perimeter plus two line segments, one between the center
of the oval and each end of the perimeter section.
If <i>type</i> is <b>chord</b> then the arc's region is defined
by a section of the oval's perimeter plus a single line segment
connecting the two end points of the perimeter section.
If <i>type</i> is <b cat="canvasitemtype">arc</b> then the arc's region consists of
a section of the perimeter alone.
In this last case the <b>-fill</b> option is ignored.
</dd>
</dle>
</dl>
</section>
<section>
<title>BITMAP ITEMS</title>
<p>Items of type <b cat="canvasitemtype">bitmap</b> appear on the display as images with
two colors, foreground and background.
Bitmaps are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create bitmap</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create bitmap</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x</i> and <i>y</i> or <i>coordList</i> specify the coordinates of a
point used to position the bitmap on the display (see the <b>-anchor</b>
option below for more information on how bitmaps are displayed).
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by bitmaps:
</p>
<example>
-state
-tags
</example>
<p>The following extra options are supported for bitmaps:
</p>
<dl>
<dle>
<dt><b>-anchor</b> <m>anchorPos</m></dt>
<dd><i>AnchorPos</i> tells how to position the bitmap relative to the
positioning point for the item;  it may have any of the forms
accepted by <fun>Tk_GetAnchor</fun>.  For example, if <i>anchorPos</i>
is <b>center</b> then the bitmap is centered on the point;  if
<i>anchorPos</i> is <b>n</b> then the bitmap will be drawn so that
its top center point is at the positioning point.
This option defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activebackground</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledbackground</b> <m>bitmap</m></dt>
<dd>Specifies the color to use for each of the bitmap's '0' valued pixels
in its normal, active and disabled states.
<i>Color</i> may have any of the forms accepted by <fun>Tk_GetColor</fun>.
If this option isn't specified, or if it is specified as an empty
string, then nothing is displayed where the bitmap pixels are 0;  this
produces a transparent effect.
</dd>
</dle>
<dle>
<dt><b>-bitmap</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activebitmap</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledbitmap</b> <m>bitmap</m></dt>
<dd>Specifies the bitmaps to display in the item in its normal, active and
disabled states.
<i>Bitmap</i> may have any of the forms accepted by <fun>Tk_GetBitmap</fun>.
</dd>
</dle>
<dle>
<dt><b>-foreground</b> <m>color</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activeforeground</b> <m>bitmap</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledforeground</b> <m>bitmap</m></dt>
<dd>Specifies the color to use for each of the bitmap's '1' valued pixels
in its normal, active and disabled states.
<i>Color</i> may have any of the forms accepted by <fun>Tk_GetColor</fun> and
defaults to <b>black</b>.
</dd>
</dle>
</dl>
</section>
<section>
<title>IMAGE ITEMS</title>
<p>Items of type <b cat="AMBIGUOUS canvasitemtype cmd">image</b> are used to display images on a
canvas.
Images are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create image</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create image</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x</i> and <i>y</i> or <i>coordList</i> specify the coordinates of a
point used to position the image on the display (see the <b>-anchor</b>
option below for more information).
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by images:
</p>
<example>
-state
-tags
</example>
<p>The following extra options are supported for images:
</p>
<dl>
<dle>
<dt><b>-anchor</b> <m>anchorPos</m></dt>
<dd><i>AnchorPos</i> tells how to position the image relative to the
positioning point for the item;  it may have any of the forms
accepted by <fun>Tk_GetAnchor</fun>.  For example, if <i>anchorPos</i>
is <b>center</b> then the image is centered on the point;  if
<i>anchorPos</i> is <b>n</b> then the image will be drawn so that
its top center point is at the positioning point.
This option defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-image</b> <m>name</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-activeimage</b> <m>name</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-disabledimage</b> <m>name</m></dt>
<dd>Specifies the name of the images to display in the item in is normal,
active and disabled states.
This image must have been created previously with the
<b>image create</b> command.
</dd>
</dle>
</dl>
</section>
<section>
<title>LINE ITEMS</title>
<p>Items of type <b cat="canvasitemtype">line</b> appear on the display as one or more connected
line segments or curves.
Line items support coordinate indexing operations using the canvas
widget commands: <b>dchars, index, insert.</b>
Lines are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create line</b> <i>x1 y1... xn yn</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create line</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x1</i> through <i>yn</i> or <i>coordList</i> give
the coordinates for a series of two or more points that describe
a series of connected line segments.
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by lines:
</p>
<example>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</example>
<p>The following extra options are supported for lines:
</p>
<dl>
<dle>
<dt><b>-arrow</b> <m>where</m></dt>
<dd>Indicates whether or not arrowheads are to be drawn at one or both
ends of the line.
<i>Where</i> must have one of the values <b>none</b> (for no arrowheads),
<b>first</b> (for an arrowhead at the first point of the line),
<b>last</b> (for an arrowhead at the last point of the line), or
<b>both</b> (for arrowheads at both ends).
This option defaults to <b>none</b>.
</dd>
</dle>
<dle>
<dt><b>-arrowshape</b> <m>shape</m></dt>
<dd>This option indicates how to draw arrowheads.
The <i>shape</i> argument must be a list with three elements, each
specifying a distance in any of the forms described in
the <ref refid="coordinates">COORDINATES</ref> section above.
The first element of the list gives the distance along the line
from the neck of the arrowhead to its tip.
The second element gives the distance along the line from the
trailing points of the arrowhead to the tip, and the third
element gives the distance from the outside edge of the line to the
trailing points.
If this option isn't specified then Tk picks a ``reasonable'' shape.
</dd>
</dle>
<dle>
<dt><b>-capstyle</b> <m>style</m></dt>
<dd>Specifies the ways in which caps are to be drawn at the endpoints
of the line.
<i>Style</i> may have any of the forms accepted by <fun>Tk_GetCapStyle</fun>
(<b>butt</b>, <b>projecting</b>, or <b cat="mathfunc">round</b>).
If this option isn't specified then it defaults to <b>butt</b>.
Where arrowheads are drawn the cap style is ignored.
</dd>
</dle>
<dle>
<dt><b>-joinstyle</b> <m>style</m></dt>
<dd>Specifies the ways in which joints are to be drawn at the vertices
of the line.
<i>Style</i> may have any of the forms accepted by <fun>Tk_GetCapStyle</fun>
(<b>bevel</b>, <b>miter</b>, or <b cat="mathfunc">round</b>).
If this option isn't specified then it defaults to <b>miter</b>.
If the line only contains two points then this option is
irrelevant.
</dd>
</dle>
<dle>
<dt><b>-smooth</b> <m>smoothMethod</m></dt>
<dd><i>smoothMethod</i> must have one of the forms accepted by
<fun>Tcl_GetBoolean</fun> or a line smoothing method.
<new version="8.5">Only <b>true</b> and <b>raw</b> are
supported in the core (with <b>bezier</b> being an alias for <b>true</b>), but more can be added at runtime.  If a boolean
false value or empty string is given, no smoothing is applied.  A boolean
truth value assumes <b>true</b> smoothing.
If the smoothing method is <b>true</b>, this indicates that the line
should be drawn as a curve, rendered as a set of quadratic splines: one spline
is drawn for the first and second line segments, one for the second
and third, and so on.  Straight-line segments can be generated within
a curve by duplicating the end-points of the desired line segment.
If the smoothing method is <b>raw</b>, this indicates that the line
should also be drawn as a curve but where the list of coordinates is
such that the first coordinate pair (and every third coordinate pair
thereafter) is a knot point on a cubic Bezier curve, and the other
coordinates are control points on the cubic Bezier curve.  Straight
line segments can be venerated within a curve by making control points
equal to their neighbouring knot points.  If the last point is a
control point and not a knot point, the point is repeated (one or two
times) so that it also becomes a knot point.
</new></dd>
</dle>
<dle>
<dt><b>-splinesteps</b> <m>number</m></dt>
<dd>Specifies the degree of smoothness desired for curves:  each spline
will be approximated with <i>number</i> line segments.  This
option is ignored unless the <b>-smooth</b> option is true or <b>raw</b>.
</dd>
</dle>
</dl>
</section>
<section>
<title>OVAL ITEMS</title>
<p>Items of type <b cat="canvasitemtype">oval</b> appear as circular or oval regions on
the display.  Each oval may have an outline, a fill, or
both.  Ovals are created with widget commands of the
following form:
</p>
<example>
<i>pathName</i> <b>create oval</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create oval</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or <i>coordList</i> give
the coordinates of two diagonally opposite corners of a
rectangular region enclosing the oval.
The oval will include the top and left edges of the rectangle
not the lower or right edges.
If the region is square then the resulting oval is circular;
otherwise it is elongated in shape.
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by ovals:
</p>
<example>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</example>
</section>
<section>
<title>POLYGON ITEMS</title>
<p>Items of type <b cat="canvasitemtype">polygon</b> appear as polygonal or curved filled regions
on the display.
Polygon items support coordinate indexing operations using the canvas
widget commands: <b>dchars, index, insert.</b>
Polygons are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create polygon</b> <i>x1 y1 ... xn yn</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create polygon</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x1</i> through <i>yn</i> or <i>coordList</i> specify the coordinates for
three or more points that define a polygon.
The first point should not be repeated as the last to
close the shape; Tk will automatically close the periphery between
the first and last points.
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by polygons:
</p>
<example>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</example>
<p>The following extra options are supported for polygons:
</p>
<dl>
<dle>
<dt><b>-joinstyle</b> <m>style</m></dt>
<dd>Specifies the ways in which joints are to be drawn at the vertices
of the outline.
<i>Style</i> may have any of the forms accepted by <fun>Tk_GetCapStyle</fun>
(<b>bevel</b>, <b>miter</b>, or <b cat="mathfunc">round</b>).
If this option isn't specified then it defaults to <b>miter</b>.
</dd>
</dle>
<dle>
<dt><b>-smooth</b> <m>boolean</m></dt>
<dd><i>Boolean</i> must have one of the forms accepted by <fun>Tcl_GetBoolean</fun>
<new version="8.5">or a line smoothing method. Only <b>true</b> and <b>raw</b> are
supported in the core (with <b>bezier</b> being an alias for <b>true</b>), but more can be added at runtime.  If a boolean
false value or empty string is given, no smoothing is applied.  A boolean
truth value assumes <b>true</b> smoothing.
If the smoothing method is <b>true</b>, this indicates that the polygon
should be drawn as a curve, rendered as a set of quadratic splines: one spline
is drawn for the first and second line segments, one for the second
and third, and so on.  Straight-line segments can be generated within
a curve by duplicating the end-points of the desired line segment.
If the smoothing method is <b>raw</b>, this indicates that the polygon
should also be drawn as a curve but where the list of coordinates is
such that the first coordinate pair (and every third coordinate pair
thereafter) is a knot point on a cubic Bezier curve, and the other
coordinates are control points on the cubic Bezier curve.  Straight
line segments can be venerated within a curve by making control points
equal to their neighbouring knot points.  If the last point is not the
second point of a pair of control points, the point is repeated (one or two
times) so that it also becomes the second point of a pair of control
points (the associated knot point will be the first control point).
</new></dd>
</dle>
<dle>
<dt><b>-splinesteps</b> <m>number</m></dt>
<dd>Specifies the degree of smoothness desired for curves:  each spline
will be approximated with <i>number</i> line segments.  This
option is ignored unless the <b>-smooth</b> option is true or <b>raw</b>.
</dd>
</dle>
</dl>
<p>Polygon items are different from other items such as rectangles, ovals
and arcs in that interior points are considered to be ``inside'' a
polygon (e.g. for purposes of the <b>find closest</b> and
<b>find overlapping</b> widget commands) even if it is not filled.
For most other item types, an
interior point is considered to be inside the item only if the item
is filled or if it has neither a fill nor an outline.  If you would
like an unfilled polygon whose interior points are not considered
to be inside the polygon, use a line item instead.
</p>
</section>
<section>
<title>RECTANGLE ITEMS</title>
<p>Items of type <b cat="canvasitemtype">rectangle</b> appear as rectangular regions on
the display.  Each rectangle may have an outline, a fill, or
both.  Rectangles are created with widget commands of the
following form:
</p>
<example>
<i>pathName</i> <b>create rectangle</b> <i>x1 y1 x2 y2</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create rectangle</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> or <i>coordList</i> give
the coordinates of two diagonally opposite corners of the rectangle
(the rectangle will include its upper and left edges but not
its lower or right edges).
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by rectangles:
</p>
<example>
-dash
-activedash
-disableddash
-dashoffset
-fill
-activefill
-disabledfill
-offset
-outline
-activeoutline
-disabledoutline
-outlinestipple
-activeoutlinestipple
-disabledoutlinestipple
-stipple
-activestipple
-disabledstipple
-state
-tags
-width
-activewidth
-disabledwidth
</example>
</section>
<section>
<title>TEXT ITEMS</title>
<p>A text item displays a string of characters on the screen in one
or more lines.
Text items support indexing and selection, along with the
following text-related canvas widget commands:  <b>dchars</b>,
<cmd>focus</cmd>, <b>icursor</b>, <b>index</b>, <b>insert</b>,
<b>select</b>.
Text items are created with widget commands of the following
form:
</p>
<example>
<i>pathName</i> <b>create text</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create text</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x</i> and <i>y</i> or <i>coordList</i> specify the coordinates of a
point used to position the text on the display (see the options
below for more information on how text is displayed).
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by text items:
</p>
<example>
-fill
-activefill
-disabledfill
-stipple
-activestipple
-disabledstipple
-state
-tags
</example>
<p>The following extra options are supported for text items:
</p>
<dl>
<dle>
<dt><b>-anchor</b> <m>anchorPos</m></dt>
<dd><i>AnchorPos</i> tells how to position the text relative to the
positioning point for the text;  it may have any of the forms
accepted by <fun>Tk_GetAnchor</fun>.  For example, if <i>anchorPos</i>
is <b>center</b> then the text is centered on the point;  if
<i>anchorPos</i> is <b>n</b> then the text will be drawn such that
the top center point of the rectangular region occupied by the
text will be at the positioning point.
This option defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-font</b> <m>fontName</m></dt>
<dd>Specifies the font to use for the text item.
<i>FontName</i> may be any string acceptable to <fun>Tk_GetFont</fun>.
If this option isn't specified, it defaults to a system-dependent
font.
</dd>
</dle>
<dle>
<dt><b>-justify</b> <m>how</m></dt>
<dd>Specifies how to justify the text within its bounding region.
<i>How</i> must be one of the values <b>left</b>, <b>right</b>,
or <b>center</b>.
This option will only matter if the text is displayed as multiple
lines.
If the option is omitted, it defaults to <b>left</b>.
</dd>
</dle>
<dle>
<dt><b>-text</b> <m>string</m></dt>
<dd><i>String</i> specifies the characters to be displayed in the text item.
Newline characters cause line breaks.
The characters in the item may also be changed with the
<b>insert</b> and <b>delete</b> widget commands.
This option defaults to an empty string.
</dd>
</dle>
<dle version="8.5">
<dt><b>-underline</b> <m/></dt>
<dd>Specifies the integer index of a character within the text to be
underlined. 0 corresponds to the first character of the text
displayed, 1 to the next character, and so on. -1 means that no
underline should be drawn (if the whole text item is to be underlined,
the appropriate font should be used instead).
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>lineLength</m></dt>
<dd>Specifies a maximum line length for the text, in any of the forms
described in the <ref refid="coordinates">COORDINATES</ref> section above.
If this option is zero (the default) the text is broken into
lines only at newline characters.
However, if this option is non-zero then any line that would
be longer than <i>lineLength</i> is broken just before a space
character to make the line shorter than <i>lineLength</i>;  the
space character is treated as if it were a newline
character.
</dd>
</dle>
</dl>
</section>
<section>
<title>WINDOW ITEMS</title>
<p>Items of type <b cat="canvasitemtype">window</b> cause a particular window to be displayed
at a given position on the canvas.
Window items are created with widget commands of the following form:
</p>
<example>
<i>pathName</i> <b>create window</b> <i>x y</i> ?<i>option value option value ...</i>?
<i>pathName</i> <b>create window</b> <i>coordList</i> ?<i>option value option value ...</i>?
</example>
<p>The arguments <i>x</i> and <i>y</i> or <i>coordList</i> specify the coordinates of a
point used to position the window on the display (see the <b>-anchor</b>
option below for more information on how bitmaps are displayed).
After the coordinates there may be any number of <i>option</i>-<i>value</i>
pairs, each of which sets one of the configuration options
for the item.  These same <i>option</i>-<i>value</i> pairs may be
used in <b>itemconfigure</b> widget commands to change the item's
configuration.
<br/>The following standard options are supported by window items:
</p>
<example>
-state
-tags
</example>
<p>The following extra options are supported for window items:
</p>
<dl>
<dle>
<dt><b>-anchor</b> <m>anchorPos</m></dt>
<dd><i>AnchorPos</i> tells how to position the window relative to the
positioning point for the item;  it may have any of the forms
accepted by <fun>Tk_GetAnchor</fun>.  For example, if <i>anchorPos</i>
is <b>center</b> then the window is centered on the point;  if
<i>anchorPos</i> is <b>n</b> then the window will be drawn so that
its top center point is at the positioning point.
This option defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>pixels</m></dt>
<dd>Specifies the height to assign to the item's window.
<i>Pixels</i> may have any of the
forms described in the <ref refid="coordinates">COORDINATES</ref> section above.
If this option isn't specified, or if it is specified as an empty
string, then the window is given whatever height it requests internally.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>pixels</m></dt>
<dd>Specifies the width to assign to the item's window.
<i>Pixels</i> may have any of the
forms described in the <ref refid="coordinates">COORDINATES</ref> section above.
If this option isn't specified, or if it is specified as an empty
string, then the window is given whatever width it requests internally.
</dd>
</dle>
<dle>
<dt><b>-window</b> <m>pathName</m></dt>
<dd>Specifies the window to associate with this item.
The window specified by <i>pathName</i> must either be a child of
the canvas widget or a child of some ancestor of the canvas widget.
<i>PathName</i> may not refer to a top-level window.
</dd>
</dle>
</dl>
<p>Note:  due to restrictions in the ways that windows are managed, it is not
possible to draw other graphical items (such as lines and images) on top
of window items.  A window item always obscures any graphics that
overlap it, regardless of their order in the display list.
</p>
</section>
<section>
<title>APPLICATION-DEFINED ITEM TYPES</title>
<p>It is possible for individual applications to define new item
types for canvas widgets using C code.
See the documentation for <fun>Tk_CreateItemType</fun>.
</p>
</section>
<section>
<title>BINDINGS</title>
<p>In the current implementation, new canvases are not given any
default behavior:  you'll have to execute explicit Tcl commands
to give the canvas its behavior.
</p>
</section>
<section>
<title>CREDITS</title>
<p>Tk's canvas widget is a blatant ripoff of ideas from Joel Bartlett's
<i>ezd</i> program.  <i>Ezd</i> provides structured graphics in a Scheme
environment and preceded canvases by a year or two.  Its simple
mechanisms for placing and animating graphical objects inspired the
functions of canvases.

</p>
</section>
<seealso>
<ref>bind(n)</ref>
<ref>font(n)</ref>
<ref>image(n)</ref>
<ref>scrollbar(n)</ref>
</seealso>
<keywords>
<keyword>canvas</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CanvPsY" title="Tk_CanvasPs" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CanvPsY.3,v 1.6 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CanvasPs" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CanvasPsY</name>
<name>Tk_CanvasPsBitmap</name>
<name>Tk_CanvasPsColor</name>
<name>Tk_CanvasPsFont</name>
<name>Tk_CanvasPsPath</name>
<name>Tk_CanvasPsStipple</name>
<desc>utility procedures for generating Postscript for canvases</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

double
<fun>Tk_CanvasPsY</fun>(<m>canvas</m>, <m>canvasY</m>)

int
<fun>Tk_CanvasPsBitmap</fun>(<m>interp</m>, <m>canvas</m>, <m>bitmap</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>)

int
<fun>Tk_CanvasPsColor</fun>(<m>interp</m>, <m>canvas</m>, <m>colorPtr</m>)

int
<fun>Tk_CanvasPsFont</fun>(<m>interp</m>, <m>canvas</m>, <m>tkFont</m>)

<fun>Tk_CanvasPsPath</fun>(<m>interp</m>, <m>canvas</m>, <m>coordPtr</m>, <m>numPoints</m>)

int
<fun>Tk_CanvasPsStipple</fun>(<m>interp</m>, <m>canvas</m>, <m>bitmap</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Canvas</argtype>
<name>canvas</name>
<argmode>in</argmode>
<desc>A token that identifies a canvas widget for which Postscript is
being generated.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name>canvasY</name>
<argmode>in</argmode>
<desc>Y-coordinate in the space of the canvas.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>A Tcl interpreter;  Postscript is appended to its result, or the
result may be replaced with an error message.
</desc>
</argdef>
<argdef>
<argtype>Pixmap</argtype>
<name>bitmap</name>
<argmode>in</argmode>
<desc>Bitmap to use for generating Postscript.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>X-coordinate within <i>bitmap</i> of left edge of region to output.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Y-coordinate within <i>bitmap</i> of top edge of region to output.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of region of bitmap to output, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of region of bitmap to output, in pixels.
</desc>
</argdef>
<argdef>
<argtype>XColor</argtype>
<name name="colorPtr">*colorPtr</name>
<argmode>in</argmode>
<desc>Information about color value to set in Postscript.
</desc>
</argdef>
<argdef>
<argtype>Tk_Font</argtype>
<name>tkFont</name>
<argmode>in</argmode>
<desc>Font for which Postscript is to be generated.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="coordPtr">*coordPtr</name>
<argmode>in</argmode>
<desc>Pointer to an array of coordinates for one or more
points specified in canvas coordinates.
The order of values in <i>coordPtr</i> is x1, y1, x2, y2, x3, y3,
and so on.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numPoints</name>
<argmode>in</argmode>
<desc>Number of points at <i>coordPtr</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are called by canvas type managers to carry out
common functions related to generating Postscript.
Most of the procedures take a <i>canvas</i> argument, which
refers to a canvas widget for which Postscript is being
generated.
</p>
<p><fun>Tk_CanvasPsY</fun> takes as argument a y-coordinate in the space of
a canvas and returns the value that should be used for that point
in the Postscript currently being generated for <i>canvas</i>.
Y coordinates require transformation because Postscript uses an
origin at the lower-left corner whereas X uses an origin at the
upper-left corner.
Canvas x coordinates can be used directly in Postscript without
transformation.
</p>
<p><fun>Tk_CanvasPsBitmap</fun> generates Postscript to describe a region
of a bitmap.
The Postscript is generated in proper image data format for Postscript,
i.e., as data between angle brackets, one bit per pixel.
The Postscript is appended to <i>interp-&gt;result</i> and <b>TCL_OK</b> is returned
unless an error occurs, in which case <b>TCL_ERROR</b> is returned and
<i>interp-&gt;result</i> is overwritten with an error message.
</p>
<p><fun>Tk_CanvasPsColor</fun> generates Postscript to set the current color
to correspond to its <i>colorPtr</i> argument, taking into account any
color map specified in the <b>postscript</b> command.
It appends the Postscript to <i>interp-&gt;result</i> and returns
<b>TCL_OK</b> unless an error occurs, in which case <b>TCL_ERROR</b> is returned and
<i>interp-&gt;result</i> is overwritten with an error message.
</p>
<p><fun>Tk_CanvasPsFont</fun> generates Postscript that sets the current font
to match <i>tkFont</i> as closely as possible.
<fun>Tk_CanvasPsFont</fun> takes into account any font map specified
in the <b>postscript</b> command, and it does
the best it can at mapping X fonts to Postscript fonts.
It appends the Postscript to <i>interp-&gt;result</i> and returns <b>TCL_OK</b>
unless an error occurs, in which case <b>TCL_ERROR</b> is returned and
<i>interp-&gt;result</i> is overwritten with an error message.
</p>
<p><fun>Tk_CanvasPsPath</fun> generates Postscript to set the current path
to the set of points given by <i>coordPtr</i> and <i>numPoints</i>.
It appends the resulting Postscript to <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_CanvasPsStipple</fun> generates Postscript that will fill the
current path in stippled fashion.
It uses <i>bitmap</i> as the stipple pattern and the current Postscript
color;  ones in the stipple bitmap are drawn in the current color, and
zeroes are not drawn at all.
The Postscript is appended to <i>interp-&gt;result</i> and <b>TCL_OK</b> is
returned, unless an error occurs, in which case <b>TCL_ERROR</b> is returned and
<i>interp-&gt;result</i> is overwritten with an error message.

</p>
</section>
<keywords>
<keyword>bitmap</keyword>
<keyword>canvas</keyword>
<keyword>color</keyword>
<keyword>font</keyword>
<keyword>path</keyword>
<keyword>Postscript</keyword>
<keyword>stipple</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CanvTkwin" version="4.1" title="Tk_CanvasTkwin">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CanvTkwin.3,v 1.5 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CanvasTkwin" section="3" date="4.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CanvasTkwin</name>
<name>Tk_CanvasGetCoord</name>
<name>Tk_CanvasDrawableCoords</name>
<name>Tk_CanvasSetStippleOrigin</name>
<name>Tk_CanvasWindowCoords</name>
<name>Tk_CanvasEventuallyRedraw</name>
<name>Tk_CanvasTagsOption</name>
<desc>utility procedures for canvas type managers</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_CanvasTkwin</fun>(<m>canvas</m>)

int
<fun>Tk_CanvasGetCoord</fun>(<m>interp</m>, <m>canvas</m>, <m>string</m>, <m>doublePtr</m>)

<fun>Tk_CanvasDrawableCoords</fun>(<m>canvas</m>, <m>x</m>, <m>y</m>, <m>drawableXPtr</m>, <m>drawableYPtr</m>)

<fun>Tk_CanvasSetStippleOrigin</fun>(<m>canvas</m>, <m>gc</m>)

<fun>Tk_CanvasWindowCoords</fun>(<m>canvas</m>, <m>x</m>, <m>y</m>, <m>screenXPtr</m>, <m>screenYPtr</m>)

<fun>Tk_CanvasEventuallyRedraw</fun>(<m>canvas</m>, <m>x1</m>, <m>y1</m>, <m>x2</m>, <m>y2</m>)

Tk_OptionParseProc *<fun>Tk_CanvasTagsParseProc</fun>;

Tk_OptionPrintProc *<fun>Tk_CanvasTagsPrintProc</fun>;
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Canvas</argtype>
<name>canvas</name>
<argmode>in</argmode>
<desc>A token that identifies a canvas widget.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Textual description of a canvas coordinate.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Points to place to store a converted coordinate.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>An x coordinate in the space of the canvas.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>A y coordinate in the space of the canvas.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name name="drawableXPtr">*drawableXPtr</name>
<argmode>out</argmode>
<desc>Pointer to a location in which to store an x coordinate in the space
of the drawable currently being used to redisplay the canvas.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name name="drawableYPtr">*drawableYPtr</name>
<argmode>out</argmode>
<desc>Pointer to a location in which to store a y coordinate in the space
of the drawable currently being used to redisplay the canvas.
</desc>
</argdef>
<argdef>
<argtype>GC</argtype>
<name>gc</name>
<argmode>out</argmode>
<desc>Graphics context to modify.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name name="screenXPtr">*screenXPtr</name>
<argmode>out</argmode>
<desc>Points to a location in which to store the screen coordinate in the
canvas window that corresponds to <i>x</i>.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name name="screenYPtr">*screenYPtr</name>
<argmode>out</argmode>
<desc>Points to a location in which to store the screen coordinate in the
canvas window that corresponds to <i>y</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x1</name>
<argmode>in</argmode>
<desc>Left edge of the region that needs redisplay.  Only pixels at or to
the right of this coordinate need to be redisplayed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y1</name>
<argmode>in</argmode>
<desc>Top edge of the region that needs redisplay.  Only pixels at or below
this coordinate need to be redisplayed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x2</name>
<argmode>in</argmode>
<desc>Right edge of the region that needs redisplay.  Only pixels to
the left of this coordinate need to be redisplayed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y2</name>
<argmode>in</argmode>
<desc>Bottom edge of the region that needs redisplay.  Only pixels above
this coordinate need to be redisplayed.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are called by canvas type managers to perform various
utility functions.
</p>
<p><fun>Tk_CanvasTkwin</fun> returns the Tk_Window associated with a particular
canvas.
</p>
<p><fun>Tk_CanvasGetCoord</fun> translates a string specification of a
coordinate (such as <b>2p</b> or <b>1.6c</b>) into a double-precision
canvas coordinate.
If <i>string</i> is a valid coordinate description then <fun>Tk_CanvasGetCoord</fun>
stores the corresponding canvas coordinate at *<i>doublePtr</i>
and returns <b>TCL_OK</b>.
Otherwise it stores an error message in <i>interp-&gt;result</i> and
returns <b>TCL_ERROR</b>.
</p>
<p><fun>Tk_CanvasDrawableCoords</fun> is called by type managers during
redisplay to compute where to draw things.
Given <i>x</i> and <i>y</i> coordinates in the space of the
canvas, <fun>Tk_CanvasDrawableCoords</fun> computes the corresponding
pixel in the drawable that is currently being used for redisplay;
it returns those coordinates in *<i>drawableXPtr</i> and *<i>drawableYPtr</i>.
This procedure should not be invoked except during redisplay.
</p>
<p><fun>Tk_CanvasSetStippleOrigin</fun> is also used during redisplay.
It sets the stipple origin in <i>gc</i> so that stipples drawn
with <i>gc</i> in the current offscreen pixmap will line up
with stipples drawn with origin (0,0) in the canvas's actual
window.
<fun>Tk_CanvasSetStippleOrigin</fun> is needed in order to guarantee
that stipple patterns line up properly when the canvas is
redisplayed in small pieces.
Redisplays are carried out in double-buffered fashion where a
piece of the canvas is redrawn in an offscreen pixmap and then
copied back onto the screen.
In this approach the stipple origins in graphics contexts need to
be adjusted during each redisplay to compensate for the position
of the off-screen pixmap relative to the window.
If an item is being drawn with stipples, its type manager typically
calls <fun>Tk_CanvasSetStippleOrigin</fun> just before using <i>gc</i>
to draw something;  after it is finished drawing, the type manager
calls <b>XSetTSOrigin</b> to restore the origin in <i>gc</i> back to (0,0)
(the restore is needed because graphics contexts are shared, so
they cannot be modified permanently).
</p>
<p><fun>Tk_CanvasWindowCoords</fun> is similar to <fun>Tk_CanvasDrawableCoords</fun>
except that it returns coordinates in the canvas's window on the
screen, instead of coordinates in an off-screen pixmap.
</p>
<p><fun>Tk_CanvasEventuallyRedraw</fun> may be invoked by a type manager
to inform Tk that a portion of a canvas needs to be redrawn.
The <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i> arguments
specify the region that needs to be redrawn, in canvas coordinates.
Type managers rarely need to invoke <fun>Tk_CanvasEventuallyRedraw</fun>,
since Tk can normally figure out when an item has changed and make
the redisplay request on its behalf (this happens, for example
whenever Tk calls a <i>configureProc</i> or <i>scaleProc</i>).
The only time that a type manager needs to call
<fun>Tk_CanvasEventuallyRedraw</fun> is if an item has changed on its own
without being invoked through one of the procedures in its Tk_ItemType;
this could happen, for example, in an image item if the image is
modified using image commands.
</p>
<p><fun>Tk_CanvasTagsParseProc</fun> and <fun>Tk_CanvasTagsPrintProc</fun> are
procedures that handle the <b>-tags</b> option for canvas items.
The code of a canvas type manager won't call these procedures
directly, but will use their addresses to create a <b>Tk_CustomOption</b>
structure for the <b>-tags</b> option.   The code typically looks
like this:
</p>
<example>
static Tk_CustomOption tagsOption = {Tk_CanvasTagsParseProc,
    Tk_CanvasTagsPrintProc, (ClientData) NULL
};

static Tk_ConfigSpec configSpecs[] = {
    ...
    {TK_CONFIG_CUSTOM, "-tags", (char *) NULL, (char *) NULL,
        (char *) NULL, 0, TK_CONFIG_NULL_OK, &amp;tagsOption},
    ...
};
</example>


</section>
<keywords>
<keyword>canvas</keyword>
<keyword>focus</keyword>
<keyword>item type</keyword>
<keyword>redisplay</keyword>
<keyword>selection</keyword>
<keyword>type manager</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CanvTxtInfo" title="Tk_CanvasTextInfo" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CanvTxtInfo.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CanvasTextInfo" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CanvasTextInfo</name>
<desc>additional information for managing text items in canvases</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_CanvasTextInfo *
<fun>Tk_CanvasGetTextInfo</fun>(<m>canvas</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Canvas</argtype>
<name>canvas</name>
<argmode>in</argmode>
<desc>A token that identifies a particular canvas widget.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Textual canvas items are somewhat more complicated to manage than
other items, due to things like the selection and the input focus.
<fun>Tk_CanvasGetTextInfo</fun> may be invoked by a type manager
to obtain additional information needed for items that display text.
The return value from <fun>Tk_CanvasGetTextInfo</fun> is a pointer to
a structure that is shared between Tk and all the items that display
text.
The structure has the following form:
</p>
<syntax cat="type" name="Tk_CanvasTextInfo" scope="global">
typedef struct Tk_CanvasTextInfo {
    Tk_3DBorder <i>selBorder</i>;
    int <i>selBorderWidth</i>;
    XColor *<i>selFgColorPtr</i>;
    Tk_Item *<i>selItemPtr</i>;
    int <i>selectFirst</i>;
    int <i>selectLast</i>;
    Tk_Item *<i>anchorItemPtr</i>;
    int <i>selectAnchor</i>;
    Tk_3DBorder <i>insertBorder</i>;
    int <i>insertWidth</i>;
    int <i>insertBorderWidth</i>;
    Tk_Item *<i>focusItemPtr</i>;
    int <i>gotFocus</i>;
    int <i>cursorOn</i>;
} Tk_CanvasTextInfo;
</syntax>
<p>The <b>selBorder</b> field identifies a Tk_3DBorder that should be
used for drawing the background under selected text.
<i>selBorderWidth</i> gives the width of the raised border around
selected text, in pixels.
<i>selFgColorPtr</i> points to an XColor that describes the foreground
color to be used when drawing selected text.
<i>selItemPtr</i> points to the item that is currently selected, or
NULL if there is no item selected or if the canvas doesn't have the
selection.
<i>selectFirst</i> and <i>selectLast</i> give the indices of the first
and last selected characters in <i>selItemPtr</i>, as returned by the
<i>indexProc</i> for that item.
<i>anchorItemPtr</i> points to the item that currently has the selection
anchor;  this is not necessarily the same as <i>selItemPtr</i>.
<i>selectAnchor</i> is an index that identifies the anchor position
within <i>anchorItemPtr</i>.
<i>insertBorder</i> contains a Tk_3DBorder to use when drawing the
insertion cursor;  <i>insertWidth</i> gives the total width of the
insertion cursor in pixels, and <i>insertBorderWidth</i> gives the
width of the raised  border around the insertion cursor.
<i>focusItemPtr</i> identifies the item that currently has the input
focus, or NULL if there is no such item.
<i>gotFocus</i> is 1 if the canvas widget has the input focus and
0 otherwise.
<i>cursorOn</i> is 1 if the insertion cursor should be drawn in
<i>focusItemPtr</i> and 0 if it should not be drawn;  this field
is toggled on and off by Tk to make the cursor blink.
</p>
<p>The structure returned by <fun>Tk_CanvasGetTextInfo</fun>
is shared between Tk and the type managers;  typically the type manager
calls <fun>Tk_CanvasGetTextInfo</fun> once when an item is created and
then saves the pointer in the item's record.
Tk will update information in the Tk_CanvasTextInfo;  for example,
a <b>configure</b> widget command might change the <i>selBorder</i>
field, or a <b>select</b> widget command might change the <i>selectFirst</i>
field, or Tk might change <i>cursorOn</i> in order to make the insertion
cursor flash on and off during successive redisplays.
</p>
<p>Type managers should treat all of the fields of the Tk_CanvasTextInfo
structure as read-only, except for <i>selItemPtr</i>, <i>selectFirst</i>,
<i>selectLast</i>, and <i>selectAnchor</i>.
Type managers may change <i>selectFirst</i>, <i>selectLast</i>, and
<i>selectAnchor</i> to adjust for insertions and deletions in the
item (but only if the item is the current owner of the selection or
anchor, as determined by <i>selItemPtr</i> or <i>anchorItemPtr</i>).
If all of the selected text in the item is deleted, the item should
set <i>selItemPtr</i> to NULL to indicate that there is no longer a
selection.

</p>
</section>
<keywords>
<keyword>canvas</keyword>
<keyword>focus</keyword>
<keyword>insertion cursor</keyword>
<keyword>selection</keyword>
<keyword>selection anchor</keyword>
<keyword>text</keyword>
</keywords>
</manpage>
<manpage version="7.0" cat="cmd" title="case" id="case">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: case.n,v 1.3 2000/09/07 14:27:46 poenitz Exp $
 -->
<?TROFF.TH title="case" section="n" date="7.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>case</name>
<desc>Evaluate one of several scripts, depending on a given value</desc>
</namesection>
<synopsis>
<syntax>
<cmd>case</cmd> <m>string</m> ?<b>in</b>? <m>patList body</m> ?<m>patList body</m> ...?

<cmd>case</cmd> <m>string</m> ?<b>in</b>? {<m>patList body</m> ?<m>patList body</m> ...?}
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><i>Note: the</i> <cmd>case</cmd> <i>command is obsolete and is supported only
for backward compatibility.  At some point in the future it may be
removed entirely.  You should use the</i> <cmd>switch</cmd> <i>command instead.</i>
</p>
<p>The <cmd>case</cmd> command matches <i>string</i> against each of
the <i>patList</i> arguments in order.
Each <i>patList</i> argument is a list of one or
more patterns.  If any of these patterns matches <i>string</i> then
<cmd>case</cmd> evaluates the following <i>body</i> argument
by passing it recursively to the Tcl interpreter and returns the result
of that evaluation.
Each <i>patList</i> argument consists of a single
pattern or list of patterns.  Each pattern may contain any of the wild-cards
described under <b>string match</b>.  If a <i>patList</i>
argument is <b>default</b>, the corresponding body will be evaluated
if no <i>patList</i> matches <i>string</i>.  If no <i>patList</i> argument
matches <i>string</i> and no default is given, then the <cmd>case</cmd>
command returns an empty string.
</p>
<p>Two syntaxes are provided for the <i>patList</i> and <i>body</i> arguments.
The first uses a separate argument for each of the patterns and commands;
this form is convenient if substitutions are desired on some of the
patterns or commands.
The second form places all of the patterns and commands together into
a single argument; the argument must have proper list structure, with
the elements of the list being the patterns and commands.
The second form makes it easy to construct multi-line case commands,
since the braces around the whole list make it unnecessary to include a
backslash at the end of each line.
Since the <i>patList</i> arguments are in braces in the second form,
no command or variable substitutions are performed on them;  this makes
the behavior of the second form different than the first form in some
cases.

</p>
</section>
<seealso>
<ref>switch(n)</ref>
</seealso>
<keywords>
<keyword>case</keyword>
<keyword>match</keyword>
<keyword>regular expression</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="catch" title="catch" version="8.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Contributions from Don Porter, NIST, 2003.  (not subject to US copyright)
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: catch.n,v 1.13 2004/11/09 10:02:16 dkf Exp $
 -->
<?TROFF.TH title="catch" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>catch</name>
<desc>Evaluate script and trap exceptional returns</desc>
</namesection>
<synopsis>
<syntax>
<cmd>catch</cmd> <m>script</m> ?<m>resultVarName</m>? ?<m>optionsVarName</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>catch</cmd> command may be used to prevent errors from aborting command
interpretation.  The <cmd>catch</cmd> command calls the Tcl interpreter recursively to
execute <i>script</i>, and always returns without raising an error,
regardless of any errors that might occur while executing <i>script</i>.
</p>
<p>If <i>script</i> raises an error, <cmd>catch</cmd> will return a non-zero integer
value corresponding to the exceptional return code returned by evaluation
of <i>script</i>.  Tcl defines the normal return code from script
evaluation to be zero (0), or <b>TCL_OK</b>.  Tcl also defines four exceptional
return codes: 1 (<b>TCL_ERROR</b>), 2 (<b>TCL_RETURN</b>), 3 (<b>TCL_BREAK</b>),
and 4 (<b>TCL_CONTINUE</b>).  Errors during evaluation of a script are indicated
by a return code of <b>TCL_ERROR</b>.  The other exceptional return codes are
returned by the <cmd>return</cmd>, <cmd>break</cmd>, and <cmd>continue</cmd> commands
and in other special situations as documented.  Tcl packages can define
new commands that return other integer values as return codes as well,
and scripts that make use of the <b>return -code</b> command can also
have return codes other than the five defined by Tcl.
</p>
<p>If the <i>resultVarName</i> argument is given, then the variable it names is
set to the result of the script evaluation.  When the return code from
the script is 1 (<b>TCL_ERROR</b>), the value stored in <i>resultVarName</i> is an error
message.  When the return code from the script is 0 (<b>TCL_OK</b>), the value
stored in <i>resultVarName</i> is the value returned from <i>script</i>.
</p>
<p><?NEW 8.5?>If the <i>optionsVarName</i> argument is given, then the variable it
names is set to a dictionary of return options returned by evaluation
of <i>script</i>.  Tcl specifies two entries that are always 
defined in the dictionary: <b>-code</b> and <b>-level</b>.  When
the return code from evaluation of <i>script</i> is not <b>TCL_RETURN</b>,
the value of the <b>-level</b> entry will be 0, and the value
of the <b>-code</b> entry will be the same as the return code.
Only when the return code is <b>TCL_RETURN</b> will the values of
the <b>-level</b> and <b>-code</b> entries be something else, as
further described in the documentation for the <cmd>return</cmd> command.
</p>
<p>When the return code from evaluation of <i>script</i> is <b>TCL_ERROR</b>,
three additional entries are defined in the dictionary of return options
stored in <i>optionsVarName</i>: <b>-errorinfo</b>, <b>-errorcode</b>, 
and <b>-errorline</b>.  The value of the <b>-errorinfo</b> entry
is a formatted stack trace containing more information about
the context in which the error happened.  The formatted stack
trace is meant to be read by a person.  The value of
the <b>-errorcode</b> entry is additional information about the
error stored as a list.  The <b>-errorcode</b> value is meant to
be further processed by programs, and may not be particularly
readable by people.  The value of the <b>-errorline</b> entry
is an integer indicating which line of <i>script</i> was being
evaluated when the error occurred.  The values of the <b>-errorinfo</b>
and <b>-errorcode</b> entries of the most recent error are also
available as values of the global variables <b>::errorInfo</b>
and <b>::errorCode</b> respectively.
</p>
<p>Tcl packages may provide commands that set other entries in the
dictionary of return options, and the <cmd>return</cmd> command may be
used by scripts to set return options in addition to those defined
above.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<section>
<title>EXAMPLES</title>
<p>The <cmd>catch</cmd> command may be used in an <cmd>if</cmd> to branch based on
the success of a script.
</p>
<example>
if { [<cmd>catch</cmd> {open $someFile w} fid] } {
    puts stderr "Could not open $someFile for writing\n$fid"
    exit 1
}
</example>
<p>There are more complex examples of <cmd>catch</cmd> usage in the
documentation for the <cmd>return</cmd> command.

</p>
</section>
<seealso>
<ref>break(n)</ref>
<ref>continue(n)</ref>
<ref>dict(n)</ref>
<ref>error(n)</ref>
<ref>return(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>catch</keyword>
<keyword>error</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CClipboard" title="Tk_ClipboardClear" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Clipboard.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_ClipboardClear" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ClipboardClear</name>
<name>Tk_ClipboardAppend</name>
<desc>Manage the clipboard</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_ClipboardClear</fun>(<m>interp</m>, <m>tkwin</m>)

int
<fun>Tk_ClipboardAppend</fun>(<m>interp</m>, <m>tkwin</m>, <m>target</m>, <m>format</m>, <m>buffer</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for reporting errors.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window that determines which display's clipboard to manipulate.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>target</name>
<argmode>in</argmode>
<desc>Conversion type for this clipboard item;  has same meaning as
<i>target</i> argument to <fun>Tk_CreateSelHandler</fun>.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>format</name>
<argmode>in</argmode>
<desc>Representation to use when data is retrieved;  has same meaning as
<i>format</i> argument to <fun>Tk_CreateSelHandler</fun>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="buffer">*buffer</name>
<argmode>in</argmode>
<desc>Null terminated string containing the data to be appended to the clipboard.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These two procedures manage the clipboard for Tk.
The clipboard is typically managed by calling <fun>Tk_ClipboardClear</fun>
once, then calling <fun>Tk_ClipboardAppend</fun> to add data for any
number of targets.
</p>
<p><fun>Tk_ClipboardClear</fun> claims the CLIPBOARD selection and frees any
data items previously stored on the clipboard in this application.  
It normally returns <b>TCL_OK</b>, but if an error occurs it returns
<b>TCL_ERROR</b> and leaves an error message in <i>interp-&gt;result</i>.
<fun>Tk_ClipboardClear</fun> must be called before a sequence of
<fun>Tk_ClipboardAppend</fun> calls can be issued.
</p>
<p><fun>Tk_ClipboardAppend</fun> appends a buffer of data to the clipboard.
The first buffer for a given <i>target</i> determines the <i>format</i>
for that <i>target</i>.
Any successive appends for that <i>target</i> must have
the same format or an error will be returned.
<fun>Tk_ClipboardAppend</fun> returns <b>TCL_OK</b> if the buffer is
successfully copied onto the clipboard.  If the clipboard is not
currently owned by the application, either
because <fun>Tk_ClipboardClear</fun> has not been called or because
ownership of the clipboard has changed since the last call to
<fun>Tk_ClipboardClear</fun>,
<fun>Tk_ClipboardAppend</fun> returns <b>TCL_ERROR</b> and leaves an error message in
<i>interp-&gt;result</i>.
</p>
<p>In order to guarantee atomicity, no event handling should occur
between <fun>Tk_ClipboardClear</fun> and the following
<fun>Tk_ClipboardAppend</fun> calls (otherwise someone could retrieve
a partially completed clipboard or claim ownership away from
this application).
</p>
<p><fun>Tk_ClipboardClear</fun> may invoke callbacks, including arbitrary
Tcl scripts, as a result of losing the CLIPBOARD selection, so
any calling function should take care to be reentrant at the point
<fun>Tk_ClipboardClear</fun> is invoked.

</p>
</section>
<keywords>
<keyword>append</keyword>
<keyword>clipboard</keyword>
<keyword>clear</keyword>
<keyword>format</keyword>
<keyword>type</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CConcat" version="7.5" title="Tcl_Concat">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Concat.3,v 1.9 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_Concat" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Concat</name>
<desc>concatenate a collection of strings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

const char *
<fun>Tcl_Concat</fun>(<m>argc</m>, <m>argv</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of strings.
</desc>
</argdef>
<argdef>
<argtype>const char *const</argtype>
<name name="argv">argv[]</name>
<argmode>in</argmode>
<desc>Array of strings to concatenate.  Must have <i>argc</i> entries.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_Concat</fun> is a utility procedure used by several of the
Tcl commands.  Given a collection of strings, it concatenates
them together into a single string, with the original strings
separated by spaces.  This procedure behaves differently than
<fun>Tcl_Merge</fun>, in that the arguments are simply concatenated:
no effort is made to ensure proper list structure.
However, in most common usage the arguments will all be proper
lists themselves;  if this is true, then the result will also have
proper list structure.
</p>
<p><fun>Tcl_Concat</fun> eliminates leading and trailing white space as it
copies strings from <b cat="variable">argv</b> to the result.  If an element of
<b cat="variable">argv</b> consists of nothing but white space, then that string
is ignored entirely.  This white-space removal was added to make
the output of the <cmd>concat</cmd> command cleaner-looking.
</p>
<p>The result string is dynamically allocated
using <fun>Tcl_Alloc</fun>;  the caller must eventually release the space
by calling <fun>Tcl_Free</fun>.
</p>
</section>
<seealso>
<ref>Tcl_ConcatObj</ref>
</seealso>
<keywords>
<keyword>concatenate</keyword>
<keyword>strings</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="cd" title="cd">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: cd.n,v 1.6 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="cd" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>cd</name>
<desc>Change working directory</desc>
</namesection>
<synopsis>
<syntax>
<cmd>cd</cmd> ?<m>dirName</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Change the current working directory to <i>dirName</i>, or to the
home directory (as specified in the HOME environment variable) if
<i>dirName</i> is not given.
Returns an empty string.
Note that the current working directory is a per-process resource; the
<cmd>cd</cmd> command changes the working directory for all interpreters
and (in a threaded environment) all threads.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Change to the home directory of the user <b>fred</b>:
</p>
<example>
<cmd>cd</cmd> ~fred
</example>
<p>Change to the directory <b>lib</b> that is a sibling directory of the
current one:
</p>
<example>
<cmd>cd</cmd> ../lib
</example>


</section>
<seealso>
<ref>filename(n)</ref>
<ref>glob(n)</ref>
<ref>pwd(n)</ref>
</seealso>
<keywords>
<keyword>working directory</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CEncoding" version="8.1" title="Tcl_GetEncoding">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Encoding.3,v 1.25 2006/10/18 18:46:59 dgp Exp $
 -->
<?TROFF.TH title="Tcl_GetEncoding" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetEncoding</name>
<name>Tcl_FreeEncoding</name>
<name>Tcl_GetEncodingFromObj</name>
<name>Tcl_ExternalToUtfDString</name>
<name>Tcl_ExternalToUtf</name>
<name>Tcl_UtfToExternalDString</name>
<name>Tcl_UtfToExternal</name>
<name>Tcl_WinTCharToUtf</name>
<name>Tcl_WinUtfToTChar</name>
<name>Tcl_GetEncodingName</name>
<name>Tcl_SetSystemEncoding</name>
<name>Tcl_GetEncodingNameFromEnvironment</name>
<name>Tcl_GetEncodingNames</name>
<name>Tcl_CreateEncoding</name>
<name>Tcl_GetEncodingSearchPath</name>
<name>Tcl_SetEncodingSearchPath</name>
<name>Tcl_GetDefaultEncodingDir</name>
<name>Tcl_SetDefaultEncodingDir</name>
<desc>procedures for creating and using encodings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Encoding
<fun>Tcl_GetEncoding</fun>(<m>interp</m>, <m>name</m>)

void
<fun>Tcl_FreeEncoding</fun>(<m>encoding</m>)

<new version="8.5">int
<b>Tcl_GetEncodingFromObj</b>(<m>interp</m>, <m>objPtr</m>, <m>encodingPtr</m>)
</new>
char *
<fun>Tcl_ExternalToUtfDString</fun>(<m>encoding</m>, <m>src</m>, <m>srcLen</m>, <m>dstPtr</m>)

char *
<fun>Tcl_UtfToExternalDString</fun>(<m>encoding</m>, <m>src</m>, <m>srcLen</m>, <m>dstPtr</m>)

int
<fun>Tcl_ExternalToUtf</fun>(<m>interp</m>, <m>encoding</m>, <m>src</m>, <m>srcLen</m>, <m>flags</m>, <m>statePtr</m>, <m>dst</m>, <m>dstLen</m>, <m>srcReadPtr</m>, <m>dstWrotePtr</m>, <m>dstCharsPtr</m>)

int
<fun>Tcl_UtfToExternal</fun>(<m>interp</m>, <m>encoding</m>, <m>src</m>, <m>srcLen</m>, <m>flags</m>, <m>statePtr</m>, <m>dst</m>, <m>dstLen</m>, <m>srcReadPtr</m>, <m>dstWrotePtr</m>, <m>dstCharsPtr</m>)

char *
<fun>Tcl_WinTCharToUtf</fun>(<m>tsrc</m>, <m>srcLen</m>, <m>dstPtr</m>)

TCHAR *
<fun>Tcl_WinUtfToTChar</fun>(<m>src</m>, <m>srcLen</m>, <m>dstPtr</m>)

const char *
<fun>Tcl_GetEncodingName</fun>(<m>encoding</m>)

int
<fun>Tcl_SetSystemEncoding</fun>(<m>interp</m>, <m>name</m>)

<new version="8.5">const char *
<b>Tcl_GetEncodingNameFromEnvironment</b>(<m>bufPtr</m>)
</new>
void
<fun>Tcl_GetEncodingNames</fun>(<m>interp</m>)

Tcl_Encoding
<fun>Tcl_CreateEncoding</fun>(<m>typePtr</m>)

<new version="8.5">Tcl_Obj *
<b>Tcl_GetEncodingSearchPath</b>()

int
<b>Tcl_SetEncodingSearchPath</b>(<m>searchPath</m>)
</new>
const char *
<fun>Tcl_GetDefaultEncodingDir</fun>(<m>void</m>)

void
<fun>Tcl_SetDefaultEncodingDir</fun>(<m>path</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting, or NULL if no error reporting is
desired.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of encoding to load.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Encoding</argtype>
<name>encoding</name>
<argmode>in</argmode>
<desc>The encoding to query, free, or use for converting text.  If <i>encoding</i> is 
NULL, the current system encoding is used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc><new version="8.5">Name of encoding to get token for.
</new></desc>
</argdef>
<argdef>
<argtype>Tcl_Encoding</argtype>
<name name="encodingPtr">*encodingPtr</name>
<argmode>out</argmode>
<desc><new version="8.5">Points to storage where encoding token is to be written.
</new></desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="src">*src</name>
<argmode>in</argmode>
<desc>For the <fun>Tcl_ExternalToUtf</fun> functions, an array of bytes in the
specified encoding that are to be converted to UTF-8.  For the
<fun>Tcl_UtfToExternal</fun> and <fun>Tcl_WinUtfToTChar</fun> functions, an array of
UTF-8 characters to be converted to the specified encoding.  
</desc>
</argdef>
<argdef>
<argtype>const TCHAR</argtype>
<name name="tsrc">*tsrc</name>
<argmode>in</argmode>
<desc>An array of Windows TCHAR characters to convert to UTF-8.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>srcLen</name>
<argmode>in</argmode>
<desc>Length of <i>src</i> or <i>tsrc</i> in bytes.  If the length is negative, the 
encoding-specific length of the string is used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="dstPtr">*dstPtr</name>
<argmode>out</argmode>
<desc>Pointer to an uninitialized or free <type>Tcl_DString</type> in which the converted
result will be stored.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Various flag bits OR-ed together.  
<b>TCL_ENCODING_START</b> signifies that the
source buffer is the first block in a (potentially multi-block) input
stream, telling the conversion routine to reset to an initial state and
perform any initialization that needs to occur before the first byte is
converted. <b>TCL_ENCODING_END</b> signifies that the source buffer is the last
block in a (potentially multi-block) input stream, telling the conversion
routine to perform any finalization that needs to occur after the last
byte is converted and then to reset to an initial state.
<b>TCL_ENCODING_STOPONERROR</b> signifies that the conversion routine should
return immediately upon reading a source character that doesn't exist in
the target encoding; otherwise a default fallback character will
automatically be substituted.  
</desc>
</argdef>
<argdef>
<argtype>Tcl_EncodingState</argtype>
<name name="statePtr">*statePtr</name>
<argmode>in/out</argmode>
<desc>Used when converting a (generally long or indefinite length) byte stream
in a piece-by-piece fashion.  The conversion routine stores its current
state in <i>*statePtr</i> after <i>src</i> (the buffer containing the
current piece) has been converted; that state information must be passed
back when converting the next piece of the stream so the conversion
routine knows what state it was in when it left off at the end of the
last piece.  May be NULL, in which case the value specified for <i>flags</i> 
is ignored and the source buffer is assumed to contain the complete string to
convert.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="dst">*dst</name>
<argmode>out</argmode>
<desc>Buffer in which the converted result will be stored.  No more than
<i>dstLen</i> bytes will be stored in <i>dst</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>dstLen</name>
<argmode>in</argmode>
<desc>The maximum length of the output buffer <i>dst</i> in bytes.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="srcReadPtr">*srcReadPtr</name>
<argmode>out</argmode>
<desc>Filled with the number of bytes from <i>src</i> that were actually
converted.  This may be less than the original source length if there was
a problem converting some source characters.  May be NULL.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="dstWrotePtr">*dstWrotePtr</name>
<argmode>out</argmode>
<desc>Filled with the number of bytes that were actually stored in the output
buffer as a result of the conversion.  May be NULL.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="dstCharsPtr">*dstCharsPtr</name>
<argmode>out</argmode>
<desc>Filled with the number of characters that correspond to the number of bytes
stored in the output buffer.  May be NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="bufPtr">*bufPtr</name>
<argmode>out</argmode>
<desc><new version="8.5">Storage for the prescribed system encoding name.
</new></desc>
</argdef>
<argdef>
<argtype>const Tcl_EncodingType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Structure that defines a new type of encoding.  
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="searchPath">*searchPath</name>
<argmode>in</argmode>
<desc><new version="8.5">List of filesystem directories in which to search for encoding data files.
</new></desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="path">*path</name>
<argmode>in</argmode>
<desc>A path to the location of the encoding file.  
</desc>
</argdef>
</arglist>
</section>
<section>
<title>INTRODUCTION</title>
<p>These routines convert between Tcl's internal character representation,
UTF-8, and character representations used by various operating systems or
file systems, such as Unicode, ASCII, or Shift-JIS.  When operating on
strings, such as such as obtaining the names of files or displaying
characters using international fonts, the strings must be translated into
one or possibly multiple formats that the various system calls can use.  For
instance, on a Japanese Unix workstation, a user might obtain a filename
represented in the EUC-JP file encoding and then translate the characters to
the jisx0208 font encoding in order to display the filename in a Tk widget.
The purpose of the encoding package is to help bridge the translation gap.
UTF-8 provides an intermediate staging ground for all the various
encodings.  In the example above, text would be translated into UTF-8 from
whatever file encoding the operating system is using.  Then it would be
translated from UTF-8 into whatever font encoding the display routines
require.
</p>
<p>Some basic encodings are compiled into Tcl.  Others can be defined by the
user or dynamically loaded from encoding files in a
platform-independent manner.
</p>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_GetEncoding</fun> finds an encoding given its <i>name</i>.  The name may
refer to a built-in Tcl encoding, a user-defined encoding registered by
calling <fun>Tcl_CreateEncoding</fun>, or a dynamically-loadable encoding
file.  The return value is a token that represents the encoding and can be
used in subsequent calls to procedures such as <fun>Tcl_GetEncodingName</fun>,
<fun>Tcl_FreeEncoding</fun>, and <fun>Tcl_UtfToExternal</fun>.  If the name did not
refer to any known or loadable encoding, NULL is returned and an error
message is returned in <i>interp</i>.
</p>
<p>The encoding package maintains a database of all encodings currently in use.
The first time <i>name</i> is seen, <fun>Tcl_GetEncoding</fun> returns an
encoding with a reference count of 1.  If the same <i>name</i> is requested
further times, then the reference count for that encoding is incremented
without the overhead of allocating a new encoding and all its associated
data structures.  
</p>
<p>When an <i>encoding</i> is no longer needed, <fun>Tcl_FreeEncoding</fun>
should be called to release it.  When an <i>encoding</i> is no longer in use
anywhere (i.e., it has been freed as many times as it has been gotten)
<fun>Tcl_FreeEncoding</fun> will release all storage the encoding was using
and delete it from the database. 
</p>
<p><new version="8.5"><b>Tcl_GetEncodingFromObj</b> treats the string representation of
<i>objPtr</i> as an encoding name, and finds an encoding with that
name, just as <fun>Tcl_GetEncoding</fun> does. When an encoding is found,
it is cached within the <b>objPtr</b> value for future reference, the
<b>Tcl_Encoding</b> token is written to the storage pointed to by
<i>encodingPtr</i>, and the value <b>TCL_OK</b> is returned. If no such
encoding is found, the value <b>TCL_ERROR</b> is returned, and no
writing to <b>*</b><i>encodingPtr</i> takes place. Just as with
<fun>Tcl_GetEncoding</fun>, the caller should call <fun>Tcl_FreeEncoding</fun>
on the resulting encoding token when that token will no longer be
used.
</new></p>
<p><fun>Tcl_ExternalToUtfDString</fun> converts a source buffer <i>src</i> from the
specified <i>encoding</i> into UTF-8.  The converted bytes are stored in 
<i>dstPtr</i>, which is then null-terminated.  The caller should eventually
call <fun>Tcl_DStringFree</fun> to free any information stored in <i>dstPtr</i>.
When converting, if any of the characters in the source buffer cannot be
represented in the target encoding, a default fallback character will be
used.  The return value is a pointer to the value stored in the DString.
</p>
<p><fun>Tcl_ExternalToUtf</fun> converts a source buffer <i>src</i> from the specified
<i>encoding</i> into UTF-8.  Up to <i>srcLen</i> bytes are converted from the
source buffer and up to <i>dstLen</i> converted bytes are stored in <i>dst</i>.
In all cases, <i>*srcReadPtr</i> is filled with the number of bytes that were
successfully converted from <i>src</i> and <i>*dstWrotePtr</i> is filled with
the corresponding number of bytes that were stored in <i>dst</i>.  The return
value is one of the following:
</p>
<dl>
<dle>
<dt><b>TCL_OK</b></dt>
<dd>All bytes of <i>src</i> were converted.
</dd>
</dle>
<dle>
<dt><b>TCL_CONVERT_NOSPACE</b></dt>
<dd>The destination buffer was not large enough for all of the converted data; as
many characters as could fit were converted though.
</dd>
</dle>
<dle>
<dt><b>TCL_CONVERT_MULTIBYTE</b></dt>
<dd>The last few bytes in the source buffer were the beginning of a multibyte
sequence, but more bytes were needed to complete this sequence.  A
subsequent call to the conversion routine should pass a buffer containing
the unconverted bytes that remained in <i>src</i> plus some further bytes
from the source stream to properly convert the formerly split-up multibyte
sequence.  
</dd>
</dle>
<dle>
<dt><b>TCL_CONVERT_SYNTAX</b></dt>
<dd>The source buffer contained an invalid character sequence.  This may occur
if the input stream has been damaged or if the input encoding method was
misidentified.
</dd>
</dle>
<dle>
<dt><b>TCL_CONVERT_UNKNOWN</b></dt>
<dd>The source buffer contained a character that could not be represented in
the target encoding and <b>TCL_ENCODING_STOPONERROR</b> was specified.  
</dd>
</dle>
</dl>
<p><fun>Tcl_UtfToExternalDString</fun> converts a source buffer <i>src</i> from UTF-8 
into the specified <i>encoding</i>.  The converted bytes are stored in
<i>dstPtr</i>, which is then terminated with the appropriate encoding-specific
null.  The caller should eventually call <fun>Tcl_DStringFree</fun> to free any
information stored in <i>dstPtr</i>.  When converting, if any of the
characters in the source buffer cannot be represented in the target
encoding, a default fallback character will be used.  The return value is
a pointer to the value stored in the DString.
</p>
<p><fun>Tcl_UtfToExternal</fun> converts a source buffer <i>src</i> from UTF-8 into
the specified <i>encoding</i>.  Up to <i>srcLen</i> bytes are converted from
the source buffer and up to <i>dstLen</i> converted bytes are stored in
<i>dst</i>.  In all cases, <i>*srcReadPtr</i> is filled with the number of
bytes that were successfully converted from <i>src</i> and <i>*dstWrotePtr</i>
is filled with the corresponding number of bytes that were stored in
<i>dst</i>.  The return values are the same as the return values for
<fun>Tcl_ExternalToUtf</fun>.
</p>
<p><fun>Tcl_WinUtfToTChar</fun> and <fun>Tcl_WinTCharToUtf</fun> are
Windows-only convenience
functions for converting between UTF-8 and Windows strings.  On Windows 95
(as with the Unix operating system),
all strings exchanged between Tcl and the operating system are "char"
based.  On Windows NT, some strings exchanged between Tcl and the
operating system are "char" oriented while others are in Unicode.  By
convention, in Windows a TCHAR is a character in the ANSI code page
on Windows 95 and a Unicode character on Windows NT.
</p>
<p>If you planned to use the same "char" based interfaces on both Windows
95 and Windows NT, you could use <fun>Tcl_UtfToExternal</fun> and
<fun>Tcl_ExternalToUtf</fun> (or their <type>Tcl_DString</type> equivalents) with an
encoding of NULL (the current system encoding).  On the other hand,
if you planned to use the Unicode interface when running on Windows NT
and the "char" interfaces when running on Windows 95, you would have
to perform the following type of test over and over in your program
(as represented in pseudo-code):
</p>
<example>
if (running NT) {
    encoding &lt;- Tcl_GetEncoding("unicode");
    nativeBuffer &lt;- Tcl_UtfToExternal(encoding, utfBuffer);
    Tcl_FreeEncoding(encoding);
} else {
    nativeBuffer &lt;- Tcl_UtfToExternal(NULL, utfBuffer);
}
</example>
<p><fun>Tcl_WinUtfToTChar</fun> and <fun>Tcl_WinTCharToUtf</fun> automatically
handle this test and use the proper encoding based on the current
operating system.  <fun>Tcl_WinUtfToTChar</fun> returns a pointer to
a TCHAR string, and <fun>Tcl_WinTCharToUtf</fun> expects a TCHAR string
pointer as the <i>src</i> string.  Otherwise, these functions
behave identically to <fun>Tcl_UtfToExternalDString</fun> and
<fun>Tcl_ExternalToUtfDString</fun>.
</p>
<p><fun>Tcl_GetEncodingName</fun> is roughly the inverse of <fun>Tcl_GetEncoding</fun>.
Given an <i>encoding</i>, the return value is the <i>name</i> argument that
was used to create the encoding.  The string returned by 
<fun>Tcl_GetEncodingName</fun> is only guaranteed to persist until the
<i>encoding</i> is deleted.  The caller must not modify this string.
</p>
<p><fun>Tcl_SetSystemEncoding</fun> sets the default encoding that should be used
whenever the user passes a NULL value for the <i>encoding</i> argument to
any of the other encoding functions.  If <i>name</i> is NULL, the system
encoding is reset to the default system encoding, <b cat="AMBIGUOUS ambiguous cmd">binary</b>.  If the
name did not refer to any known or loadable encoding, <b>TCL_ERROR</b> is
returned and an error message is left in <i>interp</i>.  Otherwise, this
procedure increments the reference count of the new system encoding,
decrements the reference count of the old system encoding, and returns
<b>TCL_OK</b>.
</p>
<p><new version="8.5"><b>Tcl_GetEncodingNameFromEnvironment</b> provides a means for the Tcl
library to report the encoding name it believes to be the correct one
to use as the system encoding, based on system calls and examination of
the environment suitable for the platform.  It accepts <i>bufPtr</i>,
a pointer to an uninitialized or freed <type>Tcl_DString</type> and writes
the encoding name to it.  The <fun>Tcl_DStringValue</fun> is returned.
</new></p>
<p><fun>Tcl_GetEncodingNames</fun> sets the <i>interp</i> result to a list
consisting of the names of all the encodings that are currently defined
or can be dynamically loaded, searching the encoding path specified by
<fun>Tcl_SetDefaultEncodingDir</fun>.  This procedure does not ensure that the
dynamically-loadable encoding files contain valid data, but merely that they
exist.
</p>
<p><fun>Tcl_CreateEncoding</fun> defines a new encoding and registers the C
procedures that are called back to convert between the encoding and
UTF-8.  Encodings created by <fun>Tcl_CreateEncoding</fun> are thereafter
visible in the database used by <fun>Tcl_GetEncoding</fun>.  Just as with the
<fun>Tcl_GetEncoding</fun> procedure, the return value is a token that
represents the encoding and can be used in subsequent calls to other
encoding functions.  <fun>Tcl_CreateEncoding</fun> returns an encoding with a
reference count of 1. If an encoding with the specified <i>name</i>
already exists, then its entry in the database is replaced with the new
encoding; the token for the old encoding will remain valid and continue
to behave as before, but users of the new token will now call the new
encoding procedures.  
</p>
<p>The <i>typePtr</i> argument to <fun>Tcl_CreateEncoding</fun> contains information 
about the name of the encoding and the procedures that will be called to
convert between this encoding and UTF-8.  It is defined as follows:
</p>
<syntax cat="type" name="Tcl_EncodingType" scope="global">
typedef struct Tcl_EncodingType {
        const char *<i>encodingName</i>;
        Tcl_EncodingConvertProc *<i>toUtfProc</i>;
        Tcl_EncodingConvertProc *<i>fromUtfProc</i>;
        Tcl_EncodingFreeProc *<i>freeProc</i>;
        ClientData <i>clientData</i>;
        int <i>nullSize</i>;
} Tcl_EncodingType;  
</syntax>
<p>The <i>encodingName</i> provides a string name for the encoding, by
which it can be referred in other procedures such as
<fun>Tcl_GetEncoding</fun>.  The <i>toUtfProc</i> refers to a callback
procedure to invoke to convert text from this encoding into UTF-8.
The <i>fromUtfProc</i> refers to a callback procedure to invoke to
convert text from UTF-8 into this encoding.  The <i>freeProc</i> refers
to a callback procedure to invoke when this encoding is deleted.  The
<i>freeProc</i> field may be NULL.  The <i>clientData</i> contains an
arbitrary one-word value passed to <i>toUtfProc</i>, <i>fromUtfProc</i>,
and <i>freeProc</i> whenever they are called.  Typically, this is a
pointer to a data structure containing encoding-specific information
that can be used by the callback procedures.  For instance, two very
similar encodings such as <b>ascii</b> and <b>macRoman</b> may use the
same callback procedure, but use different values of <i>clientData</i>
to control its behavior.  The <i>nullSize</i> specifies the number of
zero bytes that signify end-of-string in this encoding.  It must be
<b>1</b> (for single-byte or multi-byte encodings like ASCII or
Shift-JIS) or <b>2</b> (for double-byte encodings like Unicode).
Constant-sized encodings with 3 or more bytes per character (such as
CNS11643) are not accepted.
</p>
<p>The callback procedures <i>toUtfProc</i> and <i>fromUtfProc</i> should match the
type <type>Tcl_EncodingConvertProc</type>:
</p>
<syntax cat="type" name="Tcl_EncodingConvertProc" scope="global">
typedef int Tcl_EncodingConvertProc(
        ClientData <i>clientData</i>,
        const char *<i>src</i>, 
        int <i>srcLen</i>, 
        int <i>flags</i>, 
        Tcl_EncodingState *<i>statePtr</i>,
        char *<i>dst</i>, 
        int <i>dstLen</i>, 
        int *<i>srcReadPtr</i>,
        int *<i>dstWrotePtr</i>,
        int *<i>dstCharsPtr</i>);
</syntax>
<p>The <i>toUtfProc</i> and <i>fromUtfProc</i> procedures are called by the
<fun>Tcl_ExternalToUtf</fun> or <fun>Tcl_UtfToExternal</fun> family of functions to
perform the actual conversion.  The <i>clientData</i> parameter to these
procedures is the same as the <i>clientData</i> field specified to
<fun>Tcl_CreateEncoding</fun> when the encoding was created.  The remaining
arguments to the callback procedures are the same as the arguments,
documented at the top, to <fun>Tcl_ExternalToUtf</fun> or
<fun>Tcl_UtfToExternal</fun>, with the following exceptions.  If the
<i>srcLen</i> argument to one of those high-level functions is negative,
the value passed to the callback procedure will be the appropriate
encoding-specific string length of <i>src</i>.  If any of the <i>srcReadPtr</i>, 
<i>dstWrotePtr</i>, or <i>dstCharsPtr</i> arguments to one of the high-level
functions is NULL, the corresponding value passed to the callback
procedure will be a non-NULL location.
</p>
<p>The callback procedure <i>freeProc</i>, if non-NULL, should match the type 
<type>Tcl_EncodingFreeProc</type>:
</p>
<syntax cat="type" name="Tcl_EncodingFreeProc" scope="global">
typedef void Tcl_EncodingFreeProc(
        ClientData <i>clientData</i>);
</syntax>
<p>This <i>freeProc</i> function is called when the encoding is deleted.  The
<i>clientData</i> parameter is the same as the <i>clientData</i> field
specified to <fun>Tcl_CreateEncoding</fun> when the encoding was created.  
</p>
<p><?NEW 8.5?><b>Tcl_GetEncodingSearchPath</b> and <b>Tcl_SetEncodingSearchPath</b>
are called to access and set the list of filesystem directories searched
for encoding data files.  
</p>
<p>The value returned by <b>Tcl_GetEncodingSearchPath</b>
is the value stored by the last successful call to
<b>Tcl_SetEncodingSearchPath</b>.  If no calls to
<b>Tcl_SetEncodingSearchPath</b> have occurred, Tcl will compute an initial
value based on the environment.  There is one encoding search path for the
entire process, shared by all threads in the process.
</p>
<p><b>Tcl_SetEncodingSearchPath</b> stores <i>searchPath</i> and returns
<b>TCL_OK</b>, unless <i>searchPath</i> is not a valid Tcl list, which
causes <b>TCL_ERROR</b> to be returned.  The elements of <i>searchPath</i>
are not verified as existing readable filesystem directories.  When
searching for encoding data files takes place, and non-existent or
non-readable filesystem directories on the <i>searchPath</i> are silently
ignored.
</p>
<p><fun>Tcl_GetDefaultEncodingDir</fun> and <fun>Tcl_SetDefaultEncodingDir</fun>
are obsolete interfaces best replaced with calls to
<b>Tcl_GetEncodingSearchPath</b> and <b>Tcl_SetEncodingSearchPath</b>.
They are called to access and set the first element of the <i>searchPath</i>
list.  Since Tcl searches <i>searchPath</i> for encoding data files in
list order, these routines establish the ``default'' directory in which
to find encoding data files.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<section>
<title>ENCODING FILES</title>
<p>Space would prohibit precompiling into Tcl every possible encoding
algorithm, so many encodings are stored on disk as dynamically-loadable
encoding files.  This behavior also allows the user to create additional
encoding files that can be loaded using the same mechanism.  These
encoding files contain information about the tables and/or escape
sequences used to map between an external encoding and Unicode.  The
external encoding may consist of single-byte, multi-byte, or double-byte
characters.  
</p>
<p>Each dynamically-loadable encoding is represented as a text file.  The
initial line of the file, beginning with a ``#'' symbol, is a comment
that provides a human-readable description of the file.  The next line
identifies the type of encoding file.  It can be one of the following
letters:
</p>
<dl>
<dle>
<dt>[1] <b>S</b></dt>
<dd>A single-byte encoding, where one character is always one byte long in the
encoding.  An example is <b>iso8859-1</b>, used by many European languages.
</dd>
</dle>
<dle>
<dt>[2] <b>D</b></dt>
<dd>A double-byte encoding, where one character is always two bytes long in the
encoding.  An example is <b>big5</b>, used for Chinese text.
</dd>
</dle>
<dle>
<dt>[3] <b>M</b></dt>
<dd>A multi-byte encoding, where one character may be either one or two bytes long.
Certain bytes are lead bytes, indicating that another byte must follow
and that together the two bytes represent one character.  Other bytes are not
lead bytes and represent themselves.  An example is <b>shiftjis</b>, used by
many Japanese computers.
</dd>
</dle>
<dle>
<dt>[4] <b>E</b></dt>
<dd>An escape-sequence encoding, specifying that certain sequences of bytes
do not represent characters, but commands that describe how following bytes
should be interpreted.  
</dd>
</dle>
</dl>
<p>The rest of the lines in the file depend on the type.  
</p>
<p>Cases [1], [2], and [3] are collectively referred to as table-based encoding
files.  The lines in a table-based encoding file are in the same
format as this example taken from the <b>shiftjis</b> encoding (this is not
the complete file):
</p>
<example>
# Encoding file: shiftjis, multi-byte
M
003F 0 40
00
0000000100020003000400050006000700080009000A000B000C000D000E000F
0010001100120013001400150016001700180019001A001B001C001D001E001F
0020002100220023002400250026002700280029002A002B002C002D002E002F
0030003100320033003400350036003700380039003A003B003C003D003E003F
0040004100420043004400450046004700480049004A004B004C004D004E004F
0050005100520053005400550056005700580059005A005B005C005D005E005F
0060006100620063006400650066006700680069006A006B006C006D006E006F
0070007100720073007400750076007700780079007A007B007C007D203E007F
0080000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000FF61FF62FF63FF64FF65FF66FF67FF68FF69FF6AFF6BFF6CFF6DFF6EFF6F
FF70FF71FF72FF73FF74FF75FF76FF77FF78FF79FF7AFF7BFF7CFF7DFF7EFF7F
FF80FF81FF82FF83FF84FF85FF86FF87FF88FF89FF8AFF8BFF8CFF8DFF8EFF8F
FF90FF91FF92FF93FF94FF95FF96FF97FF98FF99FF9AFF9BFF9CFF9DFF9EFF9F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
81
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
300030013002FF0CFF0E30FBFF1AFF1BFF1FFF01309B309C00B4FF4000A8FF3E
FFE3FF3F30FD30FE309D309E30034EDD30053006300730FC20152010FF0F005C
301C2016FF5C2026202520182019201C201DFF08FF0930143015FF3BFF3DFF5B
FF5D30083009300A300B300C300D300E300F30103011FF0B221200B100D70000
00F7FF1D2260FF1CFF1E22662267221E22342642264000B0203220332103FFE5
FF0400A200A3FF05FF03FF06FF0AFF2000A72606260525CB25CF25CE25C725C6
25A125A025B325B225BD25BC203B301221922190219121933013000000000000
000000000000000000000000000000002208220B2286228722822283222A2229
000000000000000000000000000000002227222800AC21D221D4220022030000
0000000000000000000000000000000000000000222022A52312220222072261
2252226A226B221A223D221D2235222B222C0000000000000000000000000000
212B2030266F266D266A2020202100B6000000000000000025EF000000000000
</example>
<p>The third line of the file is three numbers.  The first number is the
fallback character (in base 16) to use when converting from UTF-8 to this
encoding.  The second number is a <b>1</b> if this file represents the
encoding for a symbol font, or <b>0</b> otherwise.  The last number (in base
10) is how many pages of data follow.  
</p>
<p>Subsequent lines in the example above are pages that describe how to map
from the encoding into 2-byte Unicode.  The first line in a page identifies
the page number.  Following it are 256 double-byte numbers, arranged as 16
rows of 16 numbers.  Given a character in the encoding, the high byte of
that character is used to select which page, and the low byte of that
character is used as an index to select one of the double-byte numbers in
that page - the value obtained being the corresponding Unicode character.
By examination of the example above, one can see that the characters 0x7E
and 0x8163 in <b>shiftjis</b> map to 203E and 2026 in Unicode, respectively.
</p>
<p>Following the first page will be all the other pages, each in the same
format as the first: one number identifying the page followed by 256
double-byte Unicode characters.  If a character in the encoding maps to the
Unicode character 0000, it means that the character doesn't actually exist.
If all characters on a page would map to 0000, that page can be omitted.
</p>
<p>Case [4] is the escape-sequence encoding file.  The lines in an this type of
file are in the same format as this example taken from the <b>iso2022-jp</b>
encoding:
</p>
<example>
<?TABSTOPS 1.5i?># Encoding file: iso2022-jp, escape-driven
E
init		{}
final		{}
iso8859-1	\x1b(B
jis0201		\x1b(J
jis0208		\x1b$@
jis0208		\x1b$B
jis0212		\x1b$(D
gb2312		\x1b$A
ksc5601		\x1b$(C
</example>
<p>In the file, the first column represents an option and the second column
is the associated value.  <b>init</b> is a string to emit or expect before
the first character is converted, while <b>final</b> is a string to emit
or expect after the last character.  All other options are names of
table-based encodings; the associated value is the escape-sequence that
marks that encoding.  Tcl syntax is used for the values; in the above
example, for instance, ``<b>{}</b>'' represents the empty string and
``<b>\x1b</b>'' represents character 27.
</p>
<p>When <fun>Tcl_GetEncoding</fun> encounters an encoding <i>name</i> that has not
been loaded, it attempts to load an encoding file called <i>name</i><b>.enc</b>
from the <b cat="AMBIGUOUS ambiguous cmd">encoding</b> subdirectory of each directory that Tcl searches
for its script library.  If the encoding file exists, but is
malformed, an error message will be left in <i>interp</i>.
</p>
</section>
<keywords>
<keyword>utf</keyword>
<keyword>encoding</keyword>
<keyword>convert</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CEval" version="8.1" title="Tcl_Eval">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
     Copyright (c) 2000 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Eval.3,v 1.23 2006/10/01 13:33:22 msofer Exp $
 -->
<?TROFF.TH title="Tcl_Eval" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_EvalObjEx</name>
<name>Tcl_EvalFile</name>
<name>Tcl_EvalObjv</name>
<name>Tcl_Eval</name>
<name>Tcl_EvalEx</name>
<name>Tcl_GlobalEval</name>
<name>Tcl_GlobalEvalObj</name>
<name>Tcl_VarEval</name>
<name>Tcl_VarEvalVA</name>
<desc>execute Tcl scripts</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_EvalObjEx</fun>(<m>interp</m>, <m>objPtr</m>, <m>flags</m>)

int
<fun>Tcl_EvalFile</fun>(<m>interp</m>, <m>fileName</m>)

int
<fun>Tcl_EvalObjv</fun>(<m>interp</m>, <m>objc</m>, <m>objv</m>, <m>flags</m>)

int
<fun>Tcl_Eval</fun>(<m>interp</m>, <m>script</m>)

int
<fun>Tcl_EvalEx</fun>(<m>interp</m>, <m>script</m>, <m>numBytes</m>, <m>flags</m>)

int
<fun>Tcl_GlobalEval</fun>(<m>interp</m>, <m>script</m>)

int
<fun>Tcl_GlobalEvalObj</fun>(<m>interp</m>, <m>objPtr</m>)

int
<fun>Tcl_VarEval</fun>(<m>interp</m>, <m>part</m>, <m>part</m>, <m>...</m><b>(char *) NULL</b>)

int
<fun>Tcl_VarEvalVA</fun>(<m>interp</m>, <m>argList</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to execute the script.  The interpreter's result is
modified to hold the result or error message from the script.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>A Tcl object containing the script to execute.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>ORed combination of flag bits that specify additional options.
<b>TCL_EVAL_GLOBAL</b> and <b>TCL_EVAL_DIRECT</b> are currently supported.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="fileName">*fileName</name>
<argmode>in</argmode>
<desc>Name of a file containing a Tcl script.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>The number of objects in the array pointed to by <i>objPtr</i>;
this is also the number of words in the command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objv">**objv</name>
<argmode>in</argmode>
<desc>Points to an array of pointers to objects; each object holds the
value of a single word in the command to execute.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numBytes</name>
<argmode>in</argmode>
<desc>The number of bytes in <i>script</i>, not including any
null terminating character.  If -1, then all characters up to the
first null byte are used.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="script">*script</name>
<argmode>in</argmode>
<desc>Points to first byte of script to execute (null-terminated and UTF-8).
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="part">*part</name>
<argmode>in</argmode>
<desc>String forming part of a Tcl script.
</desc>
</argdef>
<argdef>
<argtype>va_list</argtype>
<name>argList</name>
<argmode>in</argmode>
<desc>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures described here are invoked to execute Tcl scripts in
various forms.
<fun>Tcl_EvalObjEx</fun> is the core procedure and is used by many of the others.
It executes the commands in the script stored in <i>objPtr</i>
until either an error occurs or the end of the script is reached.
If this is the first time <i>objPtr</i> has been executed,
its commands are compiled into bytecode instructions
which are then executed.  The
bytecodes are saved in <i>objPtr</i> so that the compilation step
can be skipped if the object is evaluated again in the future.
</p>
<p>The return value from <fun>Tcl_EvalObjEx</fun> (and all the other procedures
described here) is a Tcl completion code with
one of the values <b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>,
<b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>, or possibly some other
integer value originating in an extension.
In addition, a result value or error message is left in <i>interp</i>'s
result; it can be retrieved using <fun>Tcl_GetObjResult</fun>.
</p>
<p><fun>Tcl_EvalFile</fun> reads the file given by <i>fileName</i> and evaluates
its contents as a Tcl script.  It returns the same information as
<fun>Tcl_EvalObjEx</fun>.
If the file couldn't be read then a Tcl error is returned to describe
why the file couldn't be read.
The eofchar for files is '\32' (^Z) for all platforms.
If you require a ``^Z'' in code for string comparison, you can use
``\032'' or ``\u001a'', which will be safely substituted by the Tcl
interpreter into ``^Z''.
</p>
<p><fun>Tcl_EvalObjv</fun> executes a single pre-parsed command instead of a
script.  The <i>objc</i> and <i>objv</i> arguments contain the values
of the words for the Tcl command, one word in each object in
<i>objv</i>.  <fun>Tcl_EvalObjv</fun> evaluates the command and returns
a completion code and result just like <fun>Tcl_EvalObjEx</fun>.
The caller of <fun>Tcl_EvalObjv</fun> has to manage the reference count of the
elements of <i>objv</i>, insuring that the objects are valid until
<fun>Tcl_EvalObjv</fun> returns.  
</p>
<p><fun>Tcl_Eval</fun> is similar to <fun>Tcl_EvalObjEx</fun> except that the script to
be executed is supplied as a string instead of an object and no compilation
occurs.  The string should be a proper UTF-8 string as converted by
<fun>Tcl_ExternalToUtfDString</fun> or <fun>Tcl_ExternalToUtf</fun> when it is known
to possibly contain upper ASCII characters whose possible combinations
might be a UTF-8 special code.  The string is parsed and executed directly
(using <fun>Tcl_EvalObjv</fun>) instead of compiling it and executing the
bytecodes.  In situations where it is known that the script will never be
executed again, <fun>Tcl_Eval</fun> may be faster than <fun>Tcl_EvalObjEx</fun>.
 <fun>Tcl_Eval</fun> returns a completion code and result just like 
<fun>Tcl_EvalObjEx</fun>.  Note: for backward compatibility with versions before
Tcl 8.0, <fun>Tcl_Eval</fun> copies the object result in <i>interp</i> to
<i>interp-&gt;result</i> (use is deprecated) where it can be accessed directly.
 This makes <fun>Tcl_Eval</fun> somewhat slower than <fun>Tcl_EvalEx</fun>, which
doesn't do the copy.
</p>
<p><fun>Tcl_EvalEx</fun> is an extended version of <fun>Tcl_Eval</fun> that takes
additional arguments <i>numBytes</i> and <i>flags</i>.  For the
efficiency reason given above, <fun>Tcl_EvalEx</fun> is generally preferred
over <fun>Tcl_Eval</fun>.
</p>
<p><fun>Tcl_GlobalEval</fun> and <fun>Tcl_GlobalEvalObj</fun> are older procedures
that are now deprecated.  They are similar to <fun>Tcl_EvalEx</fun> and
<fun>Tcl_EvalObjEx</fun> except that the script is evaluated in the global
namespace and its variable context consists of global variables only
(it ignores any Tcl procedures that are active).  These functions are
equivalent to using the <b>TCL_EVAL_GLOBAL</b> flag (see below).
</p>
<p><fun>Tcl_VarEval</fun> takes any number of string arguments
of any length, concatenates them into a single string,
then calls <fun>Tcl_Eval</fun> to execute that string as a Tcl command.
It returns the result of the command and also modifies
<i>interp-&gt;result</i> in the same way as <fun>Tcl_Eval</fun>.
The last argument to <fun>Tcl_VarEval</fun> must be NULL to indicate the end
of arguments.  <fun>Tcl_VarEval</fun> is now deprecated.
</p>
<p><fun>Tcl_VarEvalVA</fun> is the same as <fun>Tcl_VarEval</fun> except that
instead of taking a variable number of arguments it takes an argument
list. Like <fun>Tcl_VarEval</fun>, <fun>Tcl_VarEvalVA</fun> is deprecated.

</p>
</section>
<section>
<title>FLAG BITS</title>
<p>Any ORed combination of the following values may be used for the
<i>flags</i> argument to procedures such as <fun>Tcl_EvalObjEx</fun>:
</p>
<dl>
<dle>
<dt><b>TCL_EVAL_DIRECT</b></dt>
<dd>This flag is only used by <fun>Tcl_EvalObjEx</fun>; it is ignored by
other procedures.  If this flag bit is set, the script is not
compiled to bytecodes; instead it is executed directly
as is done by <fun>Tcl_EvalEx</fun>.  The
<b>TCL_EVAL_DIRECT</b> flag is useful in situations where the
contents of an object are going to change immediately, so the
bytecodes won't be reused in a future execution.  In this case,
it's faster to execute the script directly.
</dd>
</dle>
<dle>
<dt><b>TCL_EVAL_GLOBAL</b></dt>
<dd>If this flag is set, the script is processed at global level.  This
means that it is evaluated in the global namespace and its variable
context consists of global variables only (it ignores any Tcl
procedures at are active).

</dd>
</dle>
</dl>
</section>
<section>
<title>MISCELLANEOUS DETAILS</title>
<p>During the processing of a Tcl command it is legal to make nested
calls to evaluate other commands (this is how procedures and
some control structures are implemented).
If a code other than <b>TCL_OK</b> is returned
from a nested <fun>Tcl_EvalObjEx</fun> invocation,
then the caller should normally return immediately,
passing that same return code back to its caller,
and so on until the top-level application is reached.
A few commands, like <cmd>for</cmd>, will check for certain
return codes, like <b>TCL_BREAK</b> and <b>TCL_CONTINUE</b>, and process them
specially without returning.
</p>
<p><fun>Tcl_EvalObjEx</fun> keeps track of how many nested <fun>Tcl_EvalObjEx</fun>
invocations are in progress for <i>interp</i>.
If a code of <b>TCL_RETURN</b>, <b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b> is
about to be returned from the topmost <fun>Tcl_EvalObjEx</fun>
invocation for <i>interp</i>,
it converts the return code to <b>TCL_ERROR</b>
and sets <i>interp</i>'s result to an error message indicating that
the <cmd>return</cmd>, <cmd>break</cmd>, or <cmd>continue</cmd> command was
invoked in an inappropriate place.
This means that top-level applications should never see a return code
from <fun>Tcl_EvalObjEx</fun> other then <b>TCL_OK</b> or <b>TCL_ERROR</b>.

</p>
</section>
<keywords>
<keyword>execute</keyword>
<keyword>file</keyword>
<keyword>global</keyword>
<keyword>object</keyword>
<keyword>result</keyword>
<keyword>script</keyword>
</keywords>
</manpage>
<manpage version="8.5" cat="fun" title="Tcl_Exit" id="CExit">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Exit.3,v 1.6 2003/09/29 21:47:38 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Exit" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Exit</name>
<name>Tcl_Finalize</name>
<name>Tcl_CreateExitHandler</name>
<name>Tcl_DeleteExitHandler</name>
<name>Tcl_ExitThread</name>
<name>Tcl_FinalizeThread</name>
<name>Tcl_CreateThreadExitHandler</name>
<name>Tcl_DeleteThreadExitHandler</name>
<name>Tcl_SetExitProc</name>
<desc>end the application or thread (and invoke exit handlers)</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_Exit</fun>(<m>status</m>)

<fun>Tcl_Finalize</fun>()

<fun>Tcl_CreateExitHandler</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tcl_DeleteExitHandler</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tcl_ExitThread</fun>(<m>status</m>)

<fun>Tcl_FinalizeThread</fun>()

<fun>Tcl_CreateThreadExitHandler</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tcl_DeleteThreadExitHandler</fun>(<m>proc</m>, <m>clientData</m>)

<new version="8.5">Tcl_ExitProc *
<b>Tcl_SetExitProc</b>(<m>proc</m>)
</new></syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>status</name>
<argmode>in</argmode>
<desc>Provides information about why the application or thread exited.
Exact meaning may
be platform-specific.  0 usually means a normal exit, any nonzero value
usually means that an error occurred.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ExitProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke before exiting application, or (for
<b>Tcl_SetExitProc</b>) NULL to uninstall the current application exit
procedure.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures described here provide a graceful mechanism to end the
execution of a <b>Tcl</b> application. Exit handlers are invoked to cleanup the
application's state before ending the execution of <b>Tcl</b> code.
</p>
<p>Invoke <fun>Tcl_Exit</fun> to end a <b>Tcl</b> application and to exit from this
process. This procedure is invoked by the <cmd>exit</cmd> command, and can be
invoked anyplace else to terminate the application.
No-one should ever invoke the <cmd>exit</cmd> system procedure directly;  always
invoke <fun>Tcl_Exit</fun> instead, so that it can invoke exit handlers.
Note that if other code invokes <cmd>exit</cmd> system procedure directly, or
otherwise causes the application to terminate without calling
<fun>Tcl_Exit</fun>, the exit handlers will not be run.
<fun>Tcl_Exit</fun> internally invokes the <cmd>exit</cmd> system call, thus it never
returns control to its caller.
<new version="8.5">If an application exit handler has been installed (see
<b>Tcl_SetExitProc</b>), that handler is invoked with an argument
consisting of the exit status (cast to ClientData); the application
exit handler should not return control to Tcl.
</new></p>
<p><fun>Tcl_Finalize</fun> is similar to <fun>Tcl_Exit</fun> except that it does not
exit from the current process.
It is useful for cleaning up when a process is finished using <b>Tcl</b> but
wishes to continue executing, and when <b>Tcl</b> is used in a dynamically
loaded extension that is about to be unloaded.
On some systems <b>Tcl</b> is automatically notified when it is being
unloaded, and it calls <fun>Tcl_Finalize</fun> internally; on these systems it
not necessary for the caller to explicitly call <fun>Tcl_Finalize</fun>.
However, to ensure portability, your code should always invoke
<fun>Tcl_Finalize</fun> when <b>Tcl</b> is being unloaded, to ensure that the
code will work on all platforms. <fun>Tcl_Finalize</fun> can be safely called
more than once.
</p>
<p><fun>Tcl_ExitThread</fun> is used to terminate the current thread and invoke
per-thread exit handlers.  This finalization is done by
<fun>Tcl_FinalizeThread</fun>, which you can call if you just want to clean
up per-thread state and invoke the thread exit handlers.
<fun>Tcl_Finalize</fun> calls <fun>Tcl_FinalizeThread</fun> for the current
thread automatically.
</p>
<p><fun>Tcl_CreateExitHandler</fun> arranges for <i>proc</i> to be invoked
by <fun>Tcl_Finalize</fun> and <fun>Tcl_Exit</fun>.
<fun>Tcl_CreateThreadExitHandler</fun> arranges for <i>proc</i> to be invoked
by <fun>Tcl_FinalizeThread</fun> and <fun>Tcl_ExitThread</fun>.
This provides a hook for cleanup operations such as flushing buffers
and freeing global memory.
<i>Proc</i> should match the type <type>Tcl_ExitProc</type>:
</p>
<syntax name="Tcl_ExitProc" cat="type" scope="global">
typedef void Tcl_ExitProc(ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a
copy of the <i>clientData</i> argument given to
<fun>Tcl_CreateExitHandler</fun> or <fun>Tcl_CreateThreadExitHandler</fun> when
the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information about
what to do in <i>proc</i>.
</p>
<p><fun>Tcl_DeleteExitHandler</fun> and <fun>Tcl_DeleteThreadExitHandler</fun> may be
called to delete a
previously-created exit handler.  It removes the handler
indicated by <i>proc</i> and <i>clientData</i> so that no call
to <i>proc</i> will be made.  If no such handler exists then
<fun>Tcl_DeleteExitHandler</fun> or <fun>Tcl_DeleteThreadExitHandler</fun> does nothing.
</p>
<p><fun>Tcl_Finalize</fun> and <fun>Tcl_Exit</fun> execute all registered exit handlers,
in reverse order from the order in which they were registered.
This matches the natural order in which extensions are loaded and unloaded;
if extension <b>A</b> loads extension <b>B</b>, it usually
unloads <b>B</b> before it itself is unloaded.
If extension <b>A</b> registers its exit handlers before loading extension
<b>B</b>, this ensures that any exit handlers for <b>B</b> will be executed
before the exit handlers for <b>A</b>.
</p>
<p><fun>Tcl_Finalize</fun> and <fun>Tcl_Exit</fun> call <fun>Tcl_FinalizeThread</fun> 
and the thread exit handlers <i>after</i>
the process-wide exit handlers.  This is because thread finalization shuts
down the I/O channel system, so any attempt at I/O by the global exit
handlers will vanish into the bitbucket.
</p>
<p><new version="8.5"><b>Tcl_SetExitProc</b> installs an application exit handler, returning
the previously-installed application exit handler or NULL if no
application handler was installed.  If an application exit handler is
installed, that exit handler takes over complete responsibility for
finalization of Tcl's subsystems via <fun>Tcl_Finalize</fun> at an
appropriate time.  The argument passed to <i>proc</i> when it is
invoked will be the exit status code (as passed to <fun>Tcl_Exit</fun>)
cast to a ClientData value.
</new>
</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>cleanup</keyword>
<keyword>dynamic loading</keyword>
<keyword>end application</keyword>
<keyword>exit</keyword>
<keyword>unloading</keyword>
<keyword>thread</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CGrab" title="Tk_Grab">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: Grab.3,v 1.2 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_Grab" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_Grab</name>
<name>Tk_Ungrab</name>
<desc>manipulate grab state in an application</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_Grab</fun>(<m>interp</m>, <m>tkwin</m>, <m>grabGlobal</m>)

void
<fun>Tk_Ungrab</fun>(<m>tkwin</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window on whose behalf the pointer is to be grabbed or released
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>grabGlobal</name>
<argmode>in</argmode>
<desc>Boolean indicating whether the grab is global or application local
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These functions are used to set or release a global or
application local grab.  When a grab is set on a particular window
in a Tk application, mouse and keyboard events can only be received by
that window and its descendants.  Mouse and keyboard events for
windows outside the tree rooted at <i>tkwin</i> will be redirected to
<i>tkwin</i>.  If the grab is global, then all mouse and keyboard
events for windows outside the tree rooted at <i>tkwin</i> (even those
intended for windows in other applications) will be redirected to
<i>tkwin</i>.  If the grab is application local, only mouse and
keyboard events intended for a windows within the same application
(but outside the tree rooted at <i>tkwin</i>) will be redirected.

</p>
<p><fun>Tk_Grab</fun> sets a grab on a particular window.  <i>Tkwin</i>
specifies the window on whose behalf the pointer is to be grabbed.
<i>GrabGlobal</i> indicates whether the grab should be global or
application local; if it is non-zero, it means the grab should be
global.  Normally, <fun>Tk_Grab</fun> returns <b>TCL_OK</b>; if an error occurs
and the grab cannot be set, <b>TCL_ERROR</b> is returned and an error message
is left if <i>interp</i>'s result.  Once this call completes
successfully, no window outside the tree rooted at <i>tkwin</i> will
receive pointer- or keyboard-related events until the next call to
Tk_Ungrab.  If a previous grab was in effect within the application,
then it is replaced with a new one.

</p>
<p><b>Tcl_Ungrab</b> releases a grab on the mouse pointer and keyboard, if
there is one set on the window given by <i>tkwin</i>.  Once a grab is
released, pointer and keyboard events will start being delivered to
other windows again.

</p>
</section>
<keywords>
<keyword>grab</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="chan" version="8.5" title="chan">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 2005-2006 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: chan.n,v 1.9 2007/02/18 18:42:54 dkf Exp $
 -->
<?TROFF.TH title="chan" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>chan</name>
<desc>Read, write and manipulate channels</desc>
</namesection>
<synopsis>
<syntax>
<b>chan</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>This command provides several operations for reading from, writing to
and otherwise manipulating open channels (such as have been created
with the <b cat="AMBIGUOUS ambiguous cmd">open</b> and <cmd>socket</cmd> commands, or the default named
channels <b>stdin</b>, <b>stdout</b> or <b>stderr</b> which correspond to
the process's standard input, output and error streams respectively).
<i>Option</i> indicates what to do with the channel; any unique
abbreviation for <i>option</i> is acceptable. Valid options are:
</p>
<dl>
<dle>
<dt><b>chan blocked</b> <m>channelId</m></dt>
<dd>This tests whether the last input operation on the channel called
<i>channelId</i> failed because it would have otherwise caused the
process to block, and returns 1 if that was the case. It returns 0
otherwise. Note that this only ever returns 1 when the channel has
been configured to be non-blocking; all Tcl channels have blocking
turned on by default.
</dd>
</dle>
<dle>
<dt><b>chan close</b> <m>channelId</m></dt>
<dd>Close and destroy the channel called <i>channelId</i>. Note that this
deletes all existing file-events registered on the channel.
<p>As part of closing the channel, all buffered output is flushed to the
channel's output device, any buffered input is discarded, the
underlying operating system resource is closed and <i>channelId</i>
becomes unavailable for future use.
</p><p>If the channel is blocking, the command does not return until all
output is flushed.  If the channel is nonblocking and there is
unflushed output, the channel remains open and the command returns
immediately; output will be flushed in the background and the channel
will be closed when all the flushing is complete.
</p><p>If <i>channelId</i> is a blocking channel for a command pipeline then
<b>chan close</b> waits for the child processes to complete.
</p><p>If the channel is shared between interpreters, then <b>chan close</b>
makes <i>channelId</i> unavailable in the invoking interpreter but has
no other effect until all of the sharing interpreters have closed the
channel. When the last interpreter in which the channel is registered
invokes <b>chan close</b> (or <cmd>close</cmd>), the cleanup actions
described above occur. See the <cmd>interp</cmd> command for a description
of channel sharing.
</p><p>Channels are automatically closed when an interpreter is destroyed and
when the process exits.  Channels are switched to blocking mode, to
ensure that all output is correctly flushed before the process exits.
</p><p>The command returns an empty string, and may generate an error if
an error occurs while flushing output.  If a command in a command
pipeline created with <b cat="AMBIGUOUS ambiguous cmd">open</b> returns an error, <b>chan close</b>
generates an error (similar to the <cmd>exec</cmd> command.)
</p></dd>
</dle>
<dle>
<dt><b>chan configure</b> <m>channelId</m> ?<m>optionName</m>? ?<m>value</m>? ?<m>optionName value</m>?...</dt>
<dd>Query or set the configuration options of the channel named
<i>channelId</i>.
<p>If no <i>optionName</i> or <i>value</i> arguments are supplied, the
command returns a list containing alternating option names and values
for the channel.  If <i>optionName</i> is supplied but no <i>value</i>
then the command returns the current value of the given option.  If
one or more pairs of <i>optionName</i> and <i>value</i> are supplied,
the command sets each of the named options to the corresponding
<i>value</i>; in this case the return value is an empty string.
</p><p>The options described below are supported for all channels. In
addition, each channel type may add options that only it supports. See
the manual entry for the command that creates each type of channels
for the options that that specific type of channel supports. For
example, see the manual entry for the <cmd>socket</cmd> command for its
additional options.
</p><dl>
<dle>
<dt><b>-blocking</b> <m>boolean</m></dt>
<dd>The <b>-blocking</b> option determines whether I/O operations on the
channel can cause the process to block indefinitely.  The value of the
option must be a proper boolean value.  Channels are normally in
blocking mode; if a channel is placed into nonblocking mode it will
affect the operation of the <b>chan gets</b>, <b>chan read</b>, <b>chan
puts</b>, <b>chan flush</b>, and <b>chan close</b> commands; see the
documentation for those commands for details.  For nonblocking mode to
work correctly, the application must be using the Tcl event loop
(e.g. by calling <fun>Tcl_DoOneEvent</fun> or invoking the <cmd>vwait</cmd>
command).
</dd>
</dle>
<dle>
<dt><b>-buffering</b> <m>newValue</m></dt>
<dd>If <i>newValue</i> is <b>full</b> then the I/O system will buffer output
until its internal buffer is full or until the <b>chan flush</b>
command is invoked. If <i>newValue</i> is <b cat="canvasitemtype">line</b>, then the I/O
system will automatically flush output for the channel whenever a
newline character is output. If <i>newValue</i> is <b>none</b>, the I/O
system will flush automatically after every output operation.  The
default is for <b>-buffering</b> to be set to <b>full</b> except for
channels that connect to terminal-like devices; for these channels the
initial setting is <b cat="canvasitemtype">line</b>.  Additionally, <b>stdin</b> and
<b>stdout</b> are initially set to <b cat="canvasitemtype">line</b>, and <b>stderr</b> is set
to <b>none</b>.
</dd>
</dle>
<dle>
<dt><b>-buffersize</b> <m>newSize</m></dt>
<dd><i>Newvalue</i> must be an integer; its value is used to set the size
of buffers, in bytes, subsequently allocated for this channel to store
input or output. <i>Newvalue</i> must be a number of no more than one
million, allowing buffers of up to one million bytes in size.
</dd>
</dle>
<dle>
<dt><b>-encoding</b> <m>name</m></dt>
<dd>This option is used to specify the encoding of the channel as one of
the named encodings returned by <b>encoding names</b> or the special
value <b cat="AMBIGUOUS ambiguous cmd">binary</b>, so that the data can be converted to and from
Unicode for use in Tcl.  For instance, in order for Tcl to read
characters from a Japanese file in <b>shiftjis</b> and properly process
and display the contents, the encoding would be set to <b>shiftjis</b>.
Thereafter, when reading from the channel, the bytes in the Japanese
file would be converted to Unicode as they are read.  Writing is also
supported - as Tcl strings are written to the channel they will
automatically be converted to the specified encoding on output.
<p>If a file contains pure binary data (for instance, a JPEG image), the
encoding for the channel should be configured to be <b cat="AMBIGUOUS ambiguous cmd">binary</b>.  Tcl
will then assign no interpretation to the data in the file and simply
read or write raw bytes.  The Tcl <b cat="AMBIGUOUS ambiguous cmd">binary</b> command can be used to
manipulate this byte-oriented data.  It is usually better to set the
<b>-translation</b> option to <b cat="AMBIGUOUS ambiguous cmd">binary</b> when you want to transfer
binary data, as this turns off the other automatic interpretations of
the bytes in the stream as well.
</p><p>The default encoding for newly opened channels is the same platform-
and locale-dependent system encoding used for interfacing with the
operating system, as returned by <b>encoding system</b>.
</p></dd>
</dle>
<dle>
<dt><b>-eofchar</b> <m>char</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-eofchar</b> <b>{</b><m>inChar outChar</m><b>}</b></dt>
<dd>This option supports DOS file systems that use Control-z (\x1a) as an
end of file marker.  If <i>char</i> is not an empty string, then this
character signals end-of-file when it is encountered during input.
For output, the end-of-file character is output when the channel is
closed.  If <i>char</i> is the empty string, then there is no special
end of file character marker.  For read-write channels, a two-element
list specifies the end of file marker for input and output,
respectively.  As a convenience, when setting the end-of-file
character for a read-write channel you can specify a single value that
will apply to both reading and writing.  When querying the end-of-file
character of a read-write channel, a two-element list will always be
returned.  The default value for <b>-eofchar</b> is the empty string
in all cases except for files under Windows.  In that case the
<b>-eofchar</b> is Control-z (\x1a) for reading and the empty string
for writing.
</dd>
</dle>
<dle>
<dt><b>-translation</b> <m>mode</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-translation</b> <b>{</b><m>inMode outMode</m><b>}</b> </dt>
<dd>In Tcl scripts the end of a line is always represented using a single
newline character (\n).  However, in actual files and devices the end
of a line may be represented differently on different platforms, or
even for different devices on the same platform.  For example, under
UNIX newlines are used in files, whereas carriage-return-linefeed
sequences are normally used in network connections.  On input (i.e.,
with <b>chan gets</b> and <b>chan read</b>) the Tcl I/O system
automatically translates the external end-of-line representation into
newline characters.  Upon output (i.e., with <b>chan puts</b>), the I/O
system translates newlines to the external end-of-line representation.
The default translation mode, <b>auto</b>, handles all the common cases
automatically, but the <b>-translation</b> option provides explicit
control over the end of line translations.
<p>The value associated with <b>-translation</b> is a single item for
read-only and write-only channels.  The value is a two-element list for
read-write channels; the read translation mode is the first element of
the list, and the write translation mode is the second element.  As a
convenience, when setting the translation mode for a read-write channel
you can specify a single value that will apply to both reading and
writing.  When querying the translation mode of a read-write channel, a
two-element list will always be returned.  The following values are
currently supported:
</p><dl>
<dle>
<dt><b>auto</b></dt>
<dd>As the input translation mode, <b>auto</b> treats any of newline
(<b>lf</b>), carriage return (<b>cr</b>), or carriage return followed by
a newline (<b>crlf</b>) as the end of line representation.  The end of
line representation can even change from line-to-line, and all cases
are translated to a newline.  As the output translation mode,
<b>auto</b> chooses a platform specific representation; for sockets on
all platforms Tcl chooses <b>crlf</b>, for all Unix flavors, it chooses
<b>lf</b>, and for the various flavors of Windows it chooses
<b>crlf</b>.  The default setting for <b>-translation</b> is <b>auto</b>
for both input and output.
</dd>
</dle>
<dle>
<dt><b>binary</b> </dt>
<dd>No end-of-line translations are performed.  This is nearly identical
to <b>lf</b> mode, except that in addition <b cat="AMBIGUOUS ambiguous cmd">binary</b> mode also sets
the end-of-file character to the empty string (which disables it) and
sets the encoding to <b cat="AMBIGUOUS ambiguous cmd">binary</b> (which disables encoding filtering).
See the description of <b>-eofchar</b> and <b>-encoding</b> for more
information.
</dd>
</dle>
<dle>
<dt><b>cr</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
single carriage return character.  As the input translation mode,
<b>cr</b> mode converts carriage returns to newline characters.  As the
output translation mode, <b>cr</b> mode translates newline characters
to carriage returns.
</dd>
</dle>
<dle>
<dt><b>crlf</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
carriage return character followed by a linefeed character.  As the
input translation mode, <b>crlf</b> mode converts
carriage-return-linefeed sequences to newline characters.  As the
output translation mode, <b>crlf</b> mode translates newline characters
to carriage-return-linefeed sequences.  This mode is typically used on
Windows platforms and for network connections.
</dd>
</dle>
<dle>
<dt><b>lf</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
single newline (linefeed) character.  In this mode no translations
occur during either input or output.  This mode is typically used on
UNIX platforms.
</dd>
</dle>
</dl></dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>chan copy</b> <m>inputChan outputChan</m> ?<b>-size</b> <m>size</m>? ?<b>-command</b> <m>callback</m>?</dt>
<dd>Copy data from the channel <i>inputChan</i>, which must have been
opened for reading, to the channel <i>outputChan</i>, which must have
been opened for writing. The <b>chan copy</b> command leverages the
buffering in the Tcl I/O system to avoid extra copies and to avoid
buffering too much data in main memory when copying large files to
slow destinations like network sockets.
<p>The <b>chan copy</b> command transfers data from <i>inputChan</i> until
end of file or <i>size</i> bytes have been transferred. If no
<b>-size</b> argument is given, then the copy goes until end of file.
All the data read from <i>inputChan</i> is copied to <i>outputChan</i>.
Without the <b>-command</b> option, <b>chan copy</b> blocks until the
copy is complete and returns the number of bytes written to
<i>outputChan</i>.
</p><p>The <b>-command</b> argument makes <b>chan copy</b> work in the
background.  In this case it returns immediately and the
<i>callback</i> is invoked later when the copy completes.  The
<i>callback</i> is called with one or two additional arguments that
indicates how many bytes were written to <i>outputChan</i>.  If an
error occurred during the background copy, the second argument is the
error string associated with the error.  With a background copy, it is
not necessary to put <i>inputChan</i> or <i>outputChan</i> into
non-blocking mode; the <b>chan copy</b> command takes care of that
automatically.  However, it is necessary to enter the event loop by
using the <cmd>vwait</cmd> command or by using Tk.
</p><p>You are not allowed to do other I/O operations with <i>inputChan</i> or
<i>outputChan</i> during a background <b>chan copy</b>.  If either
<i>inputChan</i> or <i>outputChan</i> get closed while the copy is in
progress, the current copy is stopped and the command callback is
<i>not</i> made.  If <i>inputChan</i> is closed, then all data already
queued for <i>outputChan</i> is written out.
</p><p>Note that <i>inputChan</i> can become readable during a background
copy.  You should turn off any <b>chan event</b> or <cmd>fileevent</cmd>
handlers during a background copy so those handlers do not interfere
with the copy.  Any I/O attempted by a <b>chan event</b> or
<cmd>fileevent</cmd> handler will get a "channel busy" error.
</p><p><b>Chan copy</b> translates end-of-line sequences in <i>inputChan</i>
and <i>outputChan</i> according to the <b>-translation</b> option for
these channels (see <b>chan configure</b> above).  The translations
mean that the number of bytes read from <i>inputChan</i> can be
different than the number of bytes written to <i>outputChan</i>.  Only
the number of bytes written to <i>outputChan</i> is reported, either as
the return value of a synchronous <b>chan copy</b> or as the argument
to the callback for an asynchronous <b>chan copy</b>.
</p><p><b>Chan copy</b> obeys the encodings and character translations
configured for the channels. This means that the incoming characters
are converted internally first UTF-8 and then into the encoding of the
channel <b>chan copy</b> writes to (see <b>chan configure</b> above for
details on the <b>-encoding</b> and <b>-translation</b> options). No
conversion is done if both channels are set to encoding <b cat="AMBIGUOUS ambiguous cmd">binary</b>
and have matching translations. If only the output channel is set to
encoding <b cat="AMBIGUOUS ambiguous cmd">binary</b> the system will write the internal UTF-8
representation of the incoming characters. If only the input channel
is set to encoding <b cat="AMBIGUOUS ambiguous cmd">binary</b> the system will assume that the
incoming bytes are valid UTF-8 characters and convert them according
to the output encoding. The behaviour of the system for bytes which
are not valid UTF-8 characters is undefined in this case.
</p></dd>
</dle>
<dle>
<dt><b>chan create</b> <m>mode cmdPrefix</m></dt>
<dd>This subcommand creates a new script level channel using the command
prefix <i>cmdPrefix</i> as its handler. Any such channel is called a
<b>reflected</b> channel. The specified command prefix, <b>cmdPrefix</b>,
must be a non-empty list, and should provide the API described in the
<b>reflectedchan</b> manual page. The handle of the new channel is
returned as the result of the <b>chan create</b> command, and the
channel is open. Use either <cmd>close</cmd> or <b>chan close</b> to remove
the channel.
<p>The argument <i>mode</i> specifies if the new channel is opened for
reading, writing, or both. It has to be a list containing any of the
strings "<b cat="AMBIGUOUS ambiguous cmd">read</b>" or "<b>write</b>". The list must have at least one
element, as a channel you can neither write to nor read from makes no
sense. The handler command for the new channel must support the chosen
mode, or an error is thrown.
</p><p>The command prefix is executed in the global namespace, at the top of
call stack, following the appending of arguments as described in the
<b>reflectedchan</b> manual page. Command resolution happens at the
time of the call. Renaming the command, or destroying it means that
the next call of a handler method may fail, causing the channel
command invoking the handler to fail as well. Depending on the
subcommand being invoked, the error message may not be able to explain
the reason for that failure.
</p><p>Every channel created with this subcommand knows which interpreter it
was created in, and only ever executes its handler command in that
interpreter, even if the channel was shared with and/or was moved into
a different interpreter. Each reflected channel also knows the thread
it was created in, and executes its handler command only in that
thread, even if the channel was moved into a different thread. To this
end all invocations of the handler are forwarded to the original
thread by posting special events to it. This means that the original
thread (i.e. the thread that executed the <b>chan create</b> command)
must have an active event loop, i.e. it must be able to process such
events. Otherwise the thread sending them will <i>block
indefinitely</i>. Deadlock may occur.
</p><p>Note that this permits the creation of a channel whose two endpoints
live in two different threads, providing a stream-oriented bridge
between these threads. In other words, we can provide a way for
regular stream communication between threads instead of having to send
commands.
</p><p>When a thread or interpreter is deleted, all channels created with
this subcommand and using this thread/interpreter as their computing
base are deleted as well, in all interpreters they have been shared
with or moved into, and in whatever thread they have been transfered
to. While this pulls the rug out under the other thread(s) and/or
interpreter(s), this cannot be avoided. Trying to use such a channel
will cause the generation of a regular error about unknown channel
handles.
</p><p>This subcommand is <b>safe</b> and made accessible to safe
interpreters.  While it arranges for the execution of arbitrary Tcl
code the system also makes sure that the code is always executed
within the safe interpreter.
</p></dd>
</dle>
<dle>
<dt><b>chan eof</b> <m>channelId</m></dt>
<dd>Test whether the last input operation on the channel called
<i>channelId</i> failed because the end of the data stream was reached,
returning 1 if end-of-file was reached, and 0 otherwise.
</dd>
</dle>
<dle>
<dt><b>chan event</b> <m>channelId event</m> ?<m>script</m>?</dt>
<dd>Arrange for the Tcl script <i>script</i> to be installed as a <i>file
event handler</i> to be called whenever the channel called
<i>channelId</i> enters the state described by <i>event</i> (which must
be either <b>readable</b> or <b>writable</b>); only one such handler may
be installed per event per channel at a time.  If <i>script</i> is the
empty string, the current handler is deleted (this also happens if the
channel is closed or the interpreter deleted).  If <i>script</i> is
omitted, the currently installed script is returned (or an empty
string if no such handler is installed).  The callback is only
performed if the event loop is being serviced (e.g. via <cmd>vwait</cmd> or
<cmd>update</cmd>).
<p>A file event handler is a binding between a channel and a script, such
that the script is evaluated whenever the channel becomes readable or
writable.  File event handlers are most commonly used to allow data to
be received from another process on an event-driven basis, so that the
receiver can continue to interact with the user or with other channels
while waiting for the data to arrive.  If an application invokes
<b>chan gets</b> or <b>chan read</b> on a blocking channel when there is
no input data available, the process will block; until the input data
arrives, it will not be able to service other events, so it will
appear to the user to ``freeze up''.  With <b>chan event</b>, the
process can tell when data is present and only invoke <b>chan gets</b>
or <b>chan read</b> when they won't block.
</p><p>A channel is considered to be readable if there is unread data
available on the underlying device.  A channel is also considered to
be readable if there is unread data in an input buffer, except in the
special case where the most recent attempt to read from the channel
was a <b>chan gets</b> call that could not find a complete line in the
input buffer.  This feature allows a file to be read a line at a time
in nonblocking mode using events.  A channel is also considered to be
readable if an end of file or error condition is present on the
underlying file or device.  It is important for <i>script</i> to check
for these conditions and handle them appropriately; for example, if
there is no special check for end of file, an infinite loop may occur
where <i>script</i> reads no data, returns, and is immediately invoked
again.
</p><p>A channel is considered to be writable if at least one byte of data
can be written to the underlying file or device without blocking, or
if an error condition is present on the underlying file or device.
Note that client sockets opened in asynchronous mode become writable
when they become connected or if the connection fails.
</p><p>Event-driven I/O works best for channels that have been placed into
nonblocking mode with the <b>chan configure</b> command.  In blocking
mode, a <b>chan puts</b> command may block if you give it more data
than the underlying file or device can accept, and a <b>chan gets</b>
or <b>chan read</b> command will block if you attempt to read more data
than is ready; no events will be processed while the commands block.
In nonblocking mode <b>chan puts</b>, <b>chan read</b>, and <b>chan
gets</b> never block.
</p><p>The script for a file event is executed at global level (outside the
context of any Tcl procedure) in the interpreter in which the <b>chan
event</b> command was invoked.  If an error occurs while executing the
script then the command registered with <b>interp bgerror</b> is used
to report the error.  In addition, the file event handler is deleted
if it ever returns an error; this is done in order to prevent infinite
loops due to buggy handlers.
</p></dd>
</dle>
<dle>
<dt><b>chan flush</b> <m>channelId</m></dt>
<dd>Ensures that all pending output for the channel called <i>channelId</i>
is written.
<p>If the channel is in blocking mode the command does not return until
all the buffered output has been flushed to the channel. If the
channel is in nonblocking mode, the command may return before all
buffered output has been flushed; the remainder will be flushed in the
background as fast as the underlying file or device is able to absorb
it.
</p></dd>
</dle>
<dle>
<dt><b>chan gets</b> <m>channelId</m> ?<m>varName</m>?</dt>
<dd>Reads the next line from the channel called <i>channelId</i>. If
<i>varName</i> is not specified, the result of the command will be the
line that has been read (without a trailing newline character) or an
empty string upon end-of-file or, in non-blocking mode, if the data
available is exhausted. If <i>varName</i> is specified, the line that
has been read will be written to the variable called <i>varName</i> and
result will be the number of characters that have been read or -1 if
end-of-file was reached or, in non-blocking mode, if the data
available is exhausted.
<p>If an end-of-file occurs while part way through reading a line, the
partial line will be returned (or written into <i>varName</i>). When
<i>varName</i> is not specified, the end-of-file case can be
distinguished from an empty line using the <b>chan eof</b> command, and
the partial-line-but-nonblocking case can be distinguished with the
<b>chan blocked</b> command.
</p></dd>
</dle>
<dle>
<dt><b>chan names</b> ?<m>pattern</m>?</dt>
<dd>Produces a list of all channel names. If <i>pattern</i> is specified,
only those channel names that match it (according to the rules of
<b>string match</b>) will be returned.
</dd>
</dle>
<dle>
<dt><b>chan pending</b> <m>mode channelId</m></dt>
<dd>Depending on whether <i>mode</i> is "input" or "output", returns the number of 
bytes of input or output (respectively) currently buffered 
internally for <i>channelId</i> (especially useful in a readable event 
callback to impose application-specific limits on input line lengths to avoid
a potential denial-of-service attack where a hostile user crafts
an extremely long line that exceeds the available memory to buffer it).
Returns -1 if the channel was not opened for the mode in question.
</dd>
</dle>
<dle>
<dt><b>chan postevent</b> <m>channelId eventSpec</m></dt>
<dd>This subcommand is used by command handlers specified with <b>chan
create</b>. It notifies the channel represented by the handle
<i>channelId</i> that the event(s) listed in the <i>eventSpec</i> have
occurred. The argument has to be a list containing any of the strings
"<b cat="AMBIGUOUS ambiguous cmd">read</b>" and "<b>write</b>". The list must contain at least one
element as it does not make sense to invoke the command if there are
no events to post.
<p>Note that this subcommand can only be used with channel handles that
were created/opened by <b>chan create</b>. All other channels will
cause this subcommand to report an error.
</p><p>As only the Tcl level of a channel, i.e. its command handler, should
post events to it we also restrict the usage of this command to the
interpreter that created the channel. In other words, posting events
to a reflected channel from an interpreter that does not contain it's
implementation is not allowed. Attempting to post an event from any
other interpreter will cause this subcommand to report an error.
</p><p>Another restriction is that it is not possible to post events that the
I/O core has not registered an interest in. Trying to do so will cause
the method to throw an error. See the command handler method
<b>watch</b> described in <b>reflectedchan</b>, the document specifying
the API of command handlers for reflected channels.
</p><p>This command is <b>safe</b> and made accessible to safe interpreters.
It can trigger the execution of <b>chan event</b> handlers, whether in the
current interpreter or in other interpreters or other threads, even
where the event is posted from a safe interpreter and listened for by
a trusted interpreter. <b>Chan event</b> handlers are <i>always</i>
executed in the interpreter that set them up.
</p></dd>
</dle>
<dle>
<dt><b>chan puts</b> ?<b>-nonewline</b>? ?<m>channelId</m>? <m>string</m></dt>
<dd>Writes <i>string</i> to the channel named <i>channelId</i> followed by a
newline character. A trailing newline character is written unless the
optional flag <b>-nonewline</b> is given. If <i>channelId</i> is
omitted, the string is written to the standard output channel,
<b>stdout</b>.
<p>Newline characters in the output are translated by <b>chan puts</b> to
platform-specific end-of-line sequences according to the currently
configured value of the <b>-translation</b> option for the channel
(for example, on PCs newlines are normally replaced with
carriage-return-linefeed sequences; see <b>chan configure</b> above for
details).
</p><p>Tcl buffers output internally, so characters written with <b>chan
puts</b> may not appear immediately on the output file or device; Tcl
will normally delay output until the buffer is full or the channel is
closed.  You can force output to appear immediately with the <b>chan
flush</b> command.
</p><p>When the output buffer fills up, the <b>chan puts</b> command will
normally block until all the buffered data has been accepted for
output by the operating system.  If <i>channelId</i> is in nonblocking
mode then the <b>chan puts</b> command will not block even if the
operating system cannot accept the data.  Instead, Tcl continues to
buffer the data and writes it in the background as fast as the
underlying file or device can accept it.  The application must use the
Tcl event loop for nonblocking output to work; otherwise Tcl never
finds out that the file or device is ready for more output data.  It
is possible for an arbitrarily large amount of data to be buffered for
a channel in nonblocking mode, which could consume a large amount of
memory.  To avoid wasting memory, nonblocking I/O should normally be
used in an event-driven fashion with the <b>chan event</b> command
(don't invoke <b>chan puts</b> unless you have recently been notified
via a file event that the channel is ready for more output data).
</p></dd>
</dle>
<dle>
<dt><b>chan read</b> <m>channelId</m> ?<m>numChars</m>?</dt>
<dd/>
</dle>
<dle>
<dt><b>chan read</b> ?<b>-nonewline</b>? <m>channelId</m></dt>
<dd>In the first form, the result will be the next <i>numChars</i>
characters read from the channel named <i>channelId</i>; if
<i>numChars</i> is omitted, all characters up to the point when the
channel would signal a failure (whether an end-of-file, blocked or
other error condition) are read. In the second form (i.e. when
<i>numChars</i> has been omitted) the flag <b>-nonewline</b> may be
given to indicate that any trailing newline in the string that has
been read should be trimmed.
<p>If <i>channelId</i> is in nonblocking mode, <b>chan read</b> may not
read as many characters as requested: once all available input has
been read, the command will return the data that is available rather
than blocking for more input.  If the channel is configured to use a
multi-byte encoding, then there may actually be some bytes remaining
in the internal buffers that do not form a complete character.  These
bytes will not be returned until a complete character is available or
end-of-file is reached.  The <b>-nonewline</b> switch is ignored if
the command returns before reaching the end of the file.
</p><p><b>Chan read</b> translates end-of-line sequences in the input into
newline characters according to the <b>-translation</b> option for the
channel (see <b>chan configure</b> above for a discussion on the ways
in which <b>chan configure</b> will alter input).
</p><p>When reading from a serial port, most applications should configure
the serial port channel to be nonblocking, like this:
</p><example>
<b>chan configure</b> <i>channelId</i> <b>-blocking</b> <i>0</i>.
</example><p>Then <b>chan read</b> behaves much like described above.  Note that
most serial ports are comparatively slow; it is entirely possible to
get a <b>readable</b> event for each character read from them. Care
must be taken when using <b>chan read</b> on blocking serial ports:
</p><dl>
<dle>
<dt><b>chan read</b> <m>channelId numChars</m></dt>
<dd>In this form <b>chan read</b> blocks until <i>numChars</i> have been
received from the serial port.
</dd>
</dle>
<dle>
<dt><b>chan read</b> <m>channelId</m></dt>
<dd>In this form <b>chan read</b> blocks until the reception of the
end-of-file character, see <b>chan configure -eofchar</b>. If there no
end-of-file character has been configured for the channel, then
<b>chan read</b> will block forever.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>chan seek</b> <m>channelId offset</m> ?<m>origin</m>?</dt>
<dd>Sets the current access position within the underlying data stream for
the channel named <i>channelId</i> to be <i>offset</i> bytes relative to
<i>origin</i>. <i>Offset</i> must be an integer (which may be negative)
and <i>origin</i> must be one of the following:
<dl>
<dle>
<dt><b>start</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the start
of the underlying file or device.
</dd>
</dle>
<dle>
<dt><b>current</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the current
access position; a negative <i>offset</i> moves the access position
backwards in the underlying file or device.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the end of the
file or device.  A negative <i>offset</i> places the access position
before the end of file, and a positive <i>offset</i> places the access
position after the end of file.
</dd>
</dle>
</dl><p>The <i>origin</i> argument defaults to <b>start</b>.
</p><p><b>Chan seek</b> flushes all buffered output for the channel before the
command returns, even if the channel is in nonblocking mode.  It also
discards any buffered and unread input.  This command returns an empty
string.  An error occurs if this command is applied to channels whose
underlying file or device does not support seeking.
</p><p>Note that <i>offset</i> values are byte offsets, not character offsets.
Both <b>chan seek</b> and <b>chan tell</b> operate in terms of bytes,
not characters, unlike <b>chan read</b>.
</p></dd>
</dle>
<dle>
<dt><b>chan tell</b> <m>channelId</m></dt>
<dd>Returns a number giving the current access position within the
underlying data stream for the channel named <i>channelId</i>. This
value returned is a byte offset that can be passed to <b>chan seek</b>
in order to set the channel to a particular position.  Note that this
value is in terms of bytes, not characters like <b>chan read</b>.  The
value returned is -1 for channels that do not support seeking.
</dd>
</dle>
<dle>
<dt><b>chan truncate</b> <m>channelId</m> ?<m>length</m>?</dt>
<dd>Sets the byte length of the underlying data stream for the channel
named <i>channelId</i> to be <i>length</i> (or to the current byte
offset within the underlying data stream if <i>length</i> is
omitted). The channel is flushed before truncation.
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<p>This opens a file using a known encoding (CP1252, a very common encoding
on Windows), searches for a string, rewrites that part, and truncates the
file after a further two lines.
</p>
<example>
set f [open somefile.txt r+]
<b>chan configure</b> $f -encoding cp1252
set offset 0

<i># Search for string "FOOBAR" in the file</i>
while {[<b>chan gets</b> $f line] &gt;= 0} {
   set idx [string first FOOBAR $line]
   if {$idx &gt; -1} {
      <i># Found it; rewrite line</i>

      <b>chan seek</b> $f [expr {$offset + $idx}]
      <b>chan puts</b> -nonewline $f BARFOO

      <i># Skip to end of following line, and truncate</i>
      <b>chan gets</b> $f
      <b>chan gets</b> $f
      <b>chan truncate</b> $f

      <i># Stop searching the file now</i>
      break
   }

   <i># Save offset of start of next line for later</i>
   set offset [<b>chan tell</b> $f]
}
<b>chan close</b> $f
</example>
</section>
<seealso>
<ref>close(n)</ref>
<ref>eof(n)</ref>
<ref>fblocked(n)</ref>
<ref>fconfigure(n)</ref>
<ref>fcopy(n)</ref>
<ref>file(n)</ref>
<ref>fileevent(n)</ref>
<ref>flush(n)</ref>
<ref>gets(n)</ref>
<ref>open(n)</ref>
<ref>puts(n)</ref>
<ref>read(n)</ref>
<ref>seek(n)</ref>
<ref>socket(n)</ref>
<ref>tell(n)</ref>
<ref>reflectedchan(n)</ref>
</seealso>
<keywords>
<keyword>channel</keyword>
<keyword>input</keyword>
<keyword>output</keyword>
<keyword>events</keyword>
<keyword>offset</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="checkbutton" version="4.4" title="checkbutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: checkbutton.n,v 1.12 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="checkbutton" section="n" date="4.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>checkbutton</name>
<desc>Create and manipulate checkbutton widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">checkbutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeforeground</li>
<li>-anchor</li>
<li>-background</li>
<li>-bitmap</li>
<li>-borderwidth</li>
<li>-compound</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-image</li>
<li>-justify</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-wraplength</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies a Tcl command to associate with the button.  This command
is typically invoked when mouse button 1 is released over the button
window.  The button's global variable (<b>-variable</b> option) will
be updated before the command is invoked.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired height for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in lines of text.
If this option isn't specified, the button's desired height is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
<optiondef>
<name>-indicatoron</name>
<dbname>indicatorOn</dbname>
<dbclass>IndicatorOn</dbclass>
<desc>Specifies whether or not the indicator should be drawn.  Must be a
proper boolean value.  If false, the <b>relief</b> option is
ignored and the widget's relief is always sunken if the widget is
selected and raised otherwise.
</desc>
</optiondef>
<optiondef>
<name>-offrelief</name>
<dbname>offRelief</dbname>
<dbclass>OffRelief</dbclass>
<desc>Specifies the relief for the checkbutton when the indicator is not drawn and
the checkbutton is off.  The default value is "raised".  By setting this option
to "flat" and setting -indicatoron to false and -overrelief to raised,
the effect is achieved 
of having a flat button that raises on mouse-over and which is
depressed when activated.  This is the behavior typically exhibited by
the Bold, Italic, and Underline checkbuttons on the toolbar of a 
word-processor, for example.
</desc>
</optiondef>
<optiondef>
<name>-offvalue</name>
<dbname>offValue</dbname>
<dbclass>Value</dbclass>
<desc>Specifies value to store in the button's associated variable whenever
this button is deselected.  Defaults to ``0''.
</desc>
</optiondef>
<optiondef>
<name>-onvalue</name>
<dbname>onValue</dbname>
<dbclass>Value</dbclass>
<desc>Specifies value to store in the button's associated variable whenever
this button is selected.  Defaults to ``1''.
</desc>
</optiondef>
<optiondef>
<name>-overrelief</name>
<dbname>overRelief</dbname>
<dbclass>OverRelief</dbclass>
<desc>Specifies an alternative relief for the checkbutton, to be used when the
mouse cursor is over the widget.  This option can be used to make
toolbar buttons, by configuring <b>-relief flat -overrelief
raised</b>.  If the value of this option is the empty string, then no
alternative relief is used when the mouse cursor is over the checkbutton.
The empty string is the default value.
</desc>
</optiondef>
<optiondef>
<name>-selectcolor</name>
<dbname>selectColor</dbname>
<dbclass>Background</dbclass>
<desc>Specifies a background color to use when the button is selected.
If <b>indicatorOn</b> is true then the color is used as the background for
the indicator regardless of the select state.
If <b>indicatorOn</b> is false, this color is used as the background
for the entire widget, in place of <b>background</b> or <b>activeBackground</b>,
whenever the widget is selected.
If specified as an empty string then no special color is used for
displaying when the widget is selected.
</desc>
</optiondef>
<optiondef>
<name>-selectimage</name>
<dbname>selectImage</dbname>
<dbclass>SelectImage</dbclass>
<desc>Specifies an image to display (in place of the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option)
when the checkbutton is selected.
This option is ignored unless the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option has been
specified.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the checkbutton:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the checkbutton is displayed using the
<b>foreground</b> and <b>background</b> options.  The active state is
typically used when the pointer is over the checkbutton.  In active state
the checkbutton is displayed using the <b>activeForeground</b> and
<b>activeBackground</b> options.  Disabled state means that the checkbutton
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the <b>disabledForeground</b> and
<b>background</b> options determine how the checkbutton is displayed.
</desc>
</optiondef>
<optiondef>
<name>-tristateimage</name>
<dbname>tristateImage</dbname>
<dbclass>TristateImage</dbclass>
<desc><new version="8.5">Specifies an image to display (in place of the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option)
when the checkbutton is in tri-state mode.
This option is ignored unless the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option has been
specified.
</new></desc>
</optiondef>
<optiondef>
<name>-tristatevalue</name>
<dbname>tristateValue</dbname>
<dbclass>Value</dbclass>
<desc><new version="8.5">Specifies the value that causes the checkbutton to display the multi-value 
selection, also known as the tri-state mode.  Defaults to ``""''
</new></desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies name of global variable to set to indicate whether
or not this button is selected.  Defaults to the name of the
button within its parent (i.e. the last element of the button
window's path name).
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies a desired width for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in characters.
If this option isn't specified, the button's desired width is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">checkbutton</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a checkbutton widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the checkbutton such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">checkbutton</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A checkbutton is a widget
that displays a textual string, bitmap or image
and a square called an <i>indicator</i>.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the <b>wrapLength</b> option) and
one of the characters may optionally be underlined using the
<b>underline</b> option.
A checkbutton has
all of the behavior of a simple button, including the
following: it can display itself in either of three different
ways, according to the <b>state</b> option;
it can be made to appear
raised, sunken, or flat; it can be made to flash; and it invokes
a Tcl command whenever mouse button 1 is clicked over the
checkbutton.
</p>
<p>In addition, checkbuttons can be <i>selected</i>.
If a checkbutton is selected then the indicator is normally
drawn with a selected appearance, and
a Tcl variable associated with the checkbutton is set to a particular
value (normally 1).
<new version="8.5">The indicator is drawn with a check mark inside.
If the checkbutton is not selected, then the indicator is drawn with a
deselected appearance, and the associated variable is
set to a different value (typically 0).
The indicator is drawn without a check mark inside.  In the special case 
where the variable (if specified) has a value that matches the tristatevalue, 
the indicator is drawn with a tri-state appearance and is in the tri-state 
mode indicating mixed or multiple values.  (This is used when the check 
box represents the state of multiple items.)
The indicator is drawn in a platform dependent manner.  Under Unix and 
Windows, the background interior of the box is ``grayed''.  Under Mac, 
the indicator is drawn with a dash mark inside.
By default, the name of the variable associated with a checkbutton is the
same as the <i>name</i> used to create the checkbutton.
The variable name, and the ``on'', ``off'' and ``tristate'' values stored in 
it, may be modified with options on the command line or in the option
database.
Configuration options may also be used to modify the way the
indicator is displayed (or whether it is displayed at all).
By default a checkbutton is configured to select and deselect
itself on alternate button clicks.
In addition, each checkbutton monitors its associated variable and
automatically selects and deselects itself when the variables value
changes to and from the button's ``on'', ``off'' and ``tristate'' values.
</new></p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">checkbutton</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for checkbutton widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">checkbutton</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">checkbutton</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>deselect</b></dt>
<dd>Deselects the checkbutton and sets the associated variable to its ``off''
value.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>flash</b></dt>
<dd>Flashes the checkbutton.  This is accomplished by redisplaying the checkbutton
several times, alternating between active and normal colors.  At
the end of the flash the checkbutton is left in the same normal/active
state as when the command was invoked.
This command is ignored if the checkbutton's state is <b>disabled</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>invoke</b></dt>
<dd>Does just what would have happened if the user invoked the checkbutton
with the mouse: toggle the selection state of the button and invoke
the Tcl command associated with the checkbutton, if there is one.
The return value is the return value from the Tcl command, or an
empty string if there is no command associated with the checkbutton.
This command is ignored if the checkbutton's state is <b>disabled</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select</b></dt>
<dd>Selects the checkbutton and sets the associated variable to its ``on''
value.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>toggle</b></dt>
<dd>Toggles the selection state of the button, redisplaying it and
modifying its associated variable to reflect the new state.
</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>Tk automatically creates class bindings for checkbuttons that give them
the following default behavior:
</p>
<ol>
<li>On Unix systems, a checkbutton activates whenever the mouse passes
over it and deactivates whenever the mouse leaves the checkbutton.  On
Mac and Windows systems, when mouse button 1 is pressed over a
checkbutton, the button activates whenever the mouse pointer is inside
the button, and deactivates whenever the mouse pointer leaves the
button.
</li>
<li>When mouse button 1 is pressed over a checkbutton, it is invoked (its
selection state toggles and the command associated with the button is
invoked, if there is one).
</li>
<li>When a checkbutton has the input focus, the space key causes the checkbutton
to be invoked.  Under Windows, there are additional key bindings; plus
(+) and equal (=) select the button, and minus (-) deselects the button.
</li>
</ol>
<p>If the checkbutton's state is <b>disabled</b> then none of the above
actions occur:  the checkbutton is completely non-responsive.
</p>
<p>The behavior of checkbuttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<seealso>
<ref>button(n)</ref>
<ref>options(n)</ref>
<ref>radiobutton(n)</ref>
<ref>ttk_checkbutton(n)</ref>
</seealso>
<keywords>
<keyword>checkbutton</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ChnlStack" version="8.3" title="Tcl_StackChannel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1999-2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: ChnlStack.3,v 1.8 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="Tcl_StackChannel" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_StackChannel</name>
<name>Tcl_UnstackChannel</name>
<name>Tcl_GetStackedChannel</name>
<name>Tcl_GetTopChannel</name>
<desc>manipulate stacked I/O channels</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Channel
<fun>Tcl_StackChannel</fun>(<m>interp</m>, <m>typePtr</m>, <m>clientData</m>, <m>mask</m>, <m>channel</m>)

int
<fun>Tcl_UnstackChannel</fun>(<m>interp</m>, <m>channel</m>)

Tcl_Channel
<fun>Tcl_GetStackedChannel</fun>(<m>channel</m>)

Tcl_Channel
<fun>Tcl_GetTopChannel</fun>(<m>channel</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ChannelType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>The new channel I/O procedures to use for <i>channel</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to channel I/O procedures.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>Conditions under which <i>channel</i> will be used: OR-ed combination of
<b>TCL_READABLE</b>, <b>TCL_WRITABLE</b> and <b>TCL_EXCEPTION</b>.
This can be a subset of the operations currently allowed on <i>channel</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>An existing Tcl channel such as returned by <fun>Tcl_CreateChannel</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These functions are for use by extensions that add processing layers to Tcl
I/O channels.  Examples include compression and encryption modules.  These
functions transparently stack and unstack a new channel on top of an
existing one.  Any number of channels can be stacked together.
</p>
<p>The implementation of the Tcl channel code was rewritten in 8.3.2 to
correct some problems with the previous implementation with regard to
stacked channels.  Anyone using stacked channels or creating stacked
channel drivers should update to the new <b>TCL_CHANNEL_VERSION_2</b>
<type>Tcl_ChannelType</type> structure.  See <fun>Tcl_CreateChannel</fun> for details.
</p>
<p><fun>Tcl_StackChannel</fun> stacks a new <i>channel</i> on an existing channel
with the same name that was registered for <i>channel</i> by
<fun>Tcl_RegisterChannel</fun>.
</p>
<p><fun>Tcl_StackChannel</fun> works by creating a new channel structure and
placing itself on top of the channel stack.  EOL translation, encoding and
buffering options are shared between all channels in the stack.  The hidden
channel does no buffering, newline translations, or character set encoding.
Instead, the buffering, newline translations, and encoding functions all
remain at the top of the channel stack.  A pointer to the new top channel
structure is returned.  If an error occurs when stacking the channel, NULL
is returned instead.
</p>
<p>The <i>mask</i> parameter specifies the operations that are allowed on the
new channel.  These can be a subset of the operations allowed on the
original channel.  For example, a read-write channel may become read-only
after the <fun>Tcl_StackChannel</fun> call.
</p>
<p>Closing a channel closes the channels stacked below it.  The close of
stacked channels is executed in a way that allows buffered data to be
properly flushed.
</p>
<p><fun>Tcl_UnstackChannel</fun> reverses the process.  The old channel is
associated with the channel name, and the processing module added by
<fun>Tcl_StackChannel</fun> is destroyed.  If there is no old channel, then
<fun>Tcl_UnstackChannel</fun> is equivalent to <fun>Tcl_Close</fun>.  If an error
occurs unstacking the channel, <b>TCL_ERROR</b> is returned, otherwise
<b>TCL_OK</b> is returned.
</p>
<p><fun>Tcl_GetTopChannel</fun> returns the top channel in the stack of
channels the supplied channel is part of.
</p>
<p><fun>Tcl_GetStackedChannel</fun> returns the channel in the stack of
channels which is just below the supplied channel.

</p>
</section>
<seealso>
<ref>Notifier(3)</ref>
<ref>Tcl_CreateChannel(3)</ref>
<ref>Tcl_OpenFileChannel(3)</ref>
<ref>vwait(n).</ref>
</seealso>
<keywords>
<keyword>channel</keyword>
<keyword>compression</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="chooseColor" version="4.2" title="tk_chooseColor">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: chooseColor.n,v 1.3 2002/10/02 21:12:41 hobbs Exp $
 -->
<?TROFF.TH title="tk_chooseColor" section="n" date="4.2" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_chooseColor</name>
<desc>pops up a dialog box for the user to select a color.</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk_chooseColor</cmd> ?<m>option value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The procedure <cmd>tk_chooseColor</cmd> pops up a dialog box for the
user to select a color. The following <i>option-value</i> pairs are
possible as command line arguments:
</p>
<dl>
<dle>
<dt><b>-initialcolor</b> <m>color</m></dt>
<dd>Specifies the color to display in the color dialog when it pops
up. <i>color</i> must be in a form acceptable to the <fun>Tk_GetColor</fun>
function.
</dd>
</dle>
<dle>
<dt><b>-parent</b> <m>window</m></dt>
<dd>Makes <i>window</i> the logical parent of the color dialog. The color
dialog is displayed on top of its parent window.
</dd>
</dle>
<dle>
<dt><b>-title</b> <m>titleString</m></dt>
<dd>Specifies a string to display as the title of the dialog box. If this
option is not specified, then a default title will be displayed.
</dd>
</dle>
</dl>
<p>If the user selects a color, <cmd>tk_chooseColor</cmd> will return the
name of the color in a form acceptable to <fun>Tk_GetColor</fun>.  If the
user cancels the operation, both commands will return the empty
string.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
button .b -bg [tk_chooseColor -initialcolor gray -title "Choose color"]
</example>


</section>
<keywords>
<keyword>color selection dialog</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="chooseDirectory" title="tk_chooseDirectory" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: chooseDirectory.n,v 1.4 2004/10/28 10:22:51 dkf Exp $
 -->
<?TROFF.TH title="tk_chooseDirectory" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_chooseDirectory</name>
<desc>pops up a dialog box for the user to select a directory.</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk_chooseDirectory</cmd> ?<m>option value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The procedure <cmd>tk_chooseDirectory</cmd> pops up a dialog box for the
user to select a directory. The following <i>option-value</i> pairs are
possible as command line arguments:
</p>
<dl>
<dle>
<dt><b>-initialdir</b> <m>dirname</m></dt>
<dd>Specifies that the directories in <i>directory</i> should be displayed
when the dialog pops up. If this parameter is not specified, then
the directories in the current working directory are displayed. If the
parameter specifies a relative path, the return value will convert the
relative path to an absolute path.  This option may not always work on
the Macintosh.  This is not a bug. Rather, the <i>General Controls</i>
control panel on the Mac allows the end user to override the
application default directory.
</dd>
</dle>
<dle>
<dt><b>-parent</b> <m>window</m></dt>
<dd>Makes <i>window</i> the logical parent of the dialog. The dialog
is displayed on top of its parent window.
</dd>
</dle>
<dle>
<dt><b>-title</b> <m>titleString</m></dt>
<dd>Specifies a string to display as the title of the dialog box. If this
option is not specified, then a default title will be displayed.
</dd>
</dle>
<dle>
<dt><b>-mustexist</b> <m>boolean</m></dt>
<dd>Specifies whether the user may specify non-existent directories.  If
this parameter is true, then the user may only select directories that
already exist.  The default value is <i>false</i>.
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<example>
set dir [<cmd>tk_chooseDirectory</cmd> \
        -initialdir ~ -title "Choose a directory"]
if {$dir eq ""} {
   label .l -text "No directory selected"
} else {
   label .l -text "Selected $dir"
}
</example>


</section>
<seealso>
<ref>tk_getOpenFile(n)</ref>
<ref>tk_getSaveFile(n)</ref>
</seealso>
<keywords>
<keyword>directory</keyword>
<keyword>selection</keyword>
<keyword>dialog</keyword>
<keyword>platform-specific</keyword>
</keywords>
</manpage>
<manpage cat="type" id="CInterp" version="7.5" title="Tcl_Interp">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Interp.3,v 1.9 2005/05/10 18:33:56 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_Interp" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Interp</name>
<desc>client-visible fields of interpreter structures</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

typedef struct {
        char *<m>result</m>;
        Tcl_FreeProc *<m>freeProc</m>;
        int <m>errorLine</m>;
} Tcl_Interp;

typedef void Tcl_FreeProc(char *<m>blockPtr</m>);
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <fun>Tcl_CreateInterp</fun> procedure returns a pointer to a Tcl_Interp
structure.  This pointer is then passed into other Tcl procedures
to process commands in the interpreter and perform other operations
on the interpreter.  Interpreter structures contain many fields
that are used by Tcl, but only three that may be accessed by
clients:  <i>result</i>, <i>freeProc</i>, and <i>errorLine</i>.
</p>
<p><b>Note that access to the</b> <i>result</i> <b>and</b> <i>freeProc</i> <b>fields is</b>
<b>deprecated.</b>  Use <fun>Tcl_SetResult</fun> and <b>Tcl_GetResult</b> instead.
</p>
<p>The <i>result</i> and <i>freeProc</i> fields are used to return
results or error messages from commands.
This information is returned by command procedures back to <fun>Tcl_Eval</fun>,
and by <fun>Tcl_Eval</fun> back to its callers.
The <i>result</i> field points to the string that represents the
result or error message, and the <i>freeProc</i> field tells how
to dispose of the storage for the string when it isn't needed anymore.
The easiest way for command procedures to manipulate these
fields is to call procedures like <fun>Tcl_SetResult</fun>
or <fun>Tcl_AppendResult</fun>;  they
will hide all the details of managing the fields.
The description below is for those procedures that manipulate the
fields directly.
</p>
<p>Whenever a command procedure returns, it must ensure
that the <i>result</i> field of its interpreter points to the string
being returned by the command.
The <i>result</i> field must always point to a valid string.
If a command wishes to return no result then <i>interp-&gt;result</i>
should point to an empty string.
Normally, results are assumed to be statically allocated,
which means that the contents will not change before the next time
<fun>Tcl_Eval</fun> is called or some other command procedure is invoked.
In this case, the <i>freeProc</i> field must be zero.
Alternatively, a command procedure may dynamically
allocate its return value (e.g. using <fun>Tcl_Alloc</fun>)
and store a pointer to it in <i>interp-&gt;result</i>.
In this case, the command procedure must also set <i>interp-&gt;freeProc</i>
to the address of a procedure that can free the value, or <b>TCL_DYNAMIC</b>
if the storage was allocated directly by Tcl or by a call to
<fun>Tcl_Alloc</fun>. 
If <i>interp-&gt;freeProc</i> is non-zero, then Tcl will call <i>freeProc</i>
to free the space pointed to by <i>interp-&gt;result</i> before it
invokes the next command.
If a client procedure overwrites <i>interp-&gt;result</i> when
<i>interp-&gt;freeProc</i> is non-zero, then it is responsible for calling
<i>freeProc</i> to free the old <i>interp-&gt;result</i> (the <fun>Tcl_FreeResult</fun>
macro should be used for this purpose).
</p>
<p><i>FreeProc</i> should have arguments and result that match the
<type>Tcl_FreeProc</type> declaration above:  it receives a single
argument which is a pointer to the result value to free.
In most applications <b>TCL_DYNAMIC</b> is the only non-zero value ever
used for <i>freeProc</i>.
However, an application may store a different procedure address
in <i>freeProc</i> in order to use an alternate memory allocator
or in order to do other cleanup when the result memory is freed.
</p>
<p>As part of processing each command, <fun>Tcl_Eval</fun> initializes
<i>interp-&gt;result</i>
and <i>interp-&gt;freeProc</i> just before calling the command procedure for
the command.  The <i>freeProc</i> field will be initialized to zero,
and <i>interp-&gt;result</i> will point to an empty string.  Commands that
do not return any value can simply leave the fields alone.
Furthermore, the empty string pointed to by <i>result</i> is actually
part of an array of <b>TCL_RESULT_SIZE</b> characters (approximately 200).
If a command wishes to return a short string, it can simply copy
it to the area pointed to by <i>interp-&gt;result</i>.  Or, it can use
the sprintf procedure to generate a short result string at the location
pointed to by <i>interp-&gt;result</i>.
</p>
<p>It is a general convention in Tcl-based applications that the result
of an interpreter is normally in the initialized state described
in the previous paragraph.
Procedures that manipulate an interpreter's result (e.g. by
returning an error) will generally assume that the result
has been initialized when the procedure is called.
If such a procedure is to be called after the result has been
changed, then <fun>Tcl_ResetResult</fun> should be called first to
reset the result to its initialized state.  The direct use of
<i>interp-&gt;result</i> is strongly deprecated (see <fun>Tcl_SetResult</fun>).
</p>
<p>The <i>errorLine</i>
field is valid only after <fun>Tcl_Eval</fun> returns
a <b>TCL_ERROR</b> return code.  In this situation the <i>errorLine</i>
field identifies the line number of the command being executed when
the error occurred.  The line numbers are relative to the command
being executed:  1 means the first line of the command passed to
<fun>Tcl_Eval</fun>, 2 means the second line, and so on.
The <i>errorLine</i> field is typically used in conjunction with
<fun>Tcl_AddErrorInfo</fun> to report information about where an error
occurred.
<i>ErrorLine</i> should not normally be modified except by <fun>Tcl_Eval</fun>.

</p>
</section>
<keywords>
<keyword>free</keyword>
<keyword>initialized</keyword>
<keyword>interpreter</keyword>
<keyword>malloc</keyword>
<keyword>result</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="clipboard" version="8.4" title="clipboard">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: clipboard.n,v 1.11 2005/08/04 10:01:59 dkf Exp $
 -->
<?TROFF.TH title="clipboard" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>clipboard</name>
<desc>Manipulate Tk clipboard</desc>
</namesection>
<synopsis>
<syntax>
<cmd>clipboard</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command provides a Tcl interface to the Tk clipboard,
which stores data for later retrieval using the selection mechanism 
(via the <b>-selection CLIPBOARD</b> option).
In order to copy data into the clipboard, <b>clipboard clear</b> must
be called, followed by a sequence of one or more calls to <b>clipboard
append</b>.  To ensure that the clipboard is updated atomically, all
appends should be completed before returning to the event loop.
</p>
<p>The first argument to <cmd>clipboard</cmd> determines the format of the
rest of the arguments and the behavior of the command.  The following
forms are currently supported:
</p>
<commandlist>
<commanddef>
<command><b>clipboard clear</b> ?<b>-displayof</b> <m>window</m>?</command>
<desc>Claims ownership of the clipboard on <i>window</i>'s display and removes
any previous contents.  <i>Window</i> defaults to ``.''.  Returns an
empty string.
</desc>
</commanddef>
<commanddef>
<command><b>clipboard append</b> ?<b>-displayof</b> <m>window</m>? ?<b>-format</b> <m>format</m>? ?<b>-type</b> <m>type</m>? ?<b>--</b>? <m>data</m></command>
<desc>Appends <i>data</i> to the clipboard on <i>window</i>'s
display in the form given by <i>type</i> with the representation given
by <i>format</i> and claims ownership of the clipboard on <i>window</i>'s
display.
<p><i>Type</i> specifies the form in which the selection is to be returned
(the desired ``target'' for conversion, in ICCCM terminology), and
should be an atom name such as STRING or FILE_NAME; see the
Inter-Client Communication Conventions Manual for complete details.
<i>Type</i> defaults to STRING.
</p><p>The <i>format</i> argument specifies the representation that should be
used to transmit the selection to the requester (the second column of
Table 2 of the ICCCM), and defaults to STRING.  If <i>format</i> is
STRING, the selection is transmitted as 8-bit ASCII characters.  If
<i>format</i> is ATOM, then the <i>data</i> is
divided into fields separated by white space; each field is converted
to its atom value, and the 32-bit atom value is transmitted instead of
the atom name.  For any other <i>format</i>,  <i>data</i> is divided
into fields separated by white space and each 
field is converted to a 32-bit integer; an array of integers is
transmitted to the selection requester.  Note that strings passed to
<b>clipboard append</b> are concatenated before conversion, so the
caller must take care to ensure appropriate spacing across string
boundaries.  All items appended to the clipboard with the same
<i>type</i> must have the same <i>format</i>.
</p><p>The <i>format</i> argument is needed only for compatibility with
clipboard requesters that don't use Tk.  If the Tk toolkit is being
used to retrieve the CLIPBOARD selection then the value is converted back to
a string at the requesting end, so <i>format</i> is
irrelevant.
</p><p>A <b>--</b> argument may be specified to mark the end of options:  the
next argument will always be used as <i>data</i>.
This feature may be convenient if, for example, <i>data</i> starts
with a <b>-</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>clipboard get</b> ?<b>-displayof</b> <m>window</m>? ?<b>-type</b> <m>type</m>?</command>
<desc>Retrieve data from the clipboard on <i>window</i>'s display.
<i>window</i> defaults to ".".  <i>Type</i> specifies the form in which
the data is to be returned and should be an atom name such as STRING
or FILE_NAME.  <i>Type</i> defaults to STRING.  This command is
equivalent to <b>selection get -selection CLIPBOARD</b>.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLES</title>
<p>Get the current contents of the clipboard.
</p>
<example>
if {[catch {<b>clipboard get</b>} contents]} {
    # There were no clipboard contents at all
}
</example>
<p>Set the clipboard to contain a fixed string.
</p>
<example>
<b>clipboard clear</b>
<b>clipboard append</b> "some fixed string"
</example>
<p>You can put custom data into the clipboard by using a custom <b>-type</b>
option. This is not necessarily portable, but can be very useful. The
method of passing Tcl scripts this way is effective, but should be mixed
with safe interpreters in production code.
</p>
<example>
# This is a very simple canvas serializer;
# it produces a script that recreates the item(s) when executed
proc getItemConfig {canvas tag} {
   set script {}
   foreach item [$canvas find withtag $tag] {
      append script {$canvas create } [$canvas type $item]
      append script { } [$canvas coords $item] { }
      foreach config [$canvas itemconf $item] {
         lassign $config name - - - value
         append script [list $name $value] { }
      }
      append script \n
   }
   return [string trim $script]
}

# Set up a binding on a canvas to cut and paste an item
set c [canvas .c]
pack $c
$c create text 150 30 -text "cut and paste me"
bind $c &lt;&lt;Cut&gt;&gt; {
   <b>clipboard clear</b>
   <b>clipboard append -type</b> TkCanvasItem \
         [getItemConfig %W current]
   # Delete because this is cut, not copy.
   %W delete current
}
bind $c &lt;&lt;Paste&gt;&gt; {
   catch {
      set canvas %W
      eval [<b>clipboard get -type</b> TkCanvasItem]
   }
}
</example>


</section>
<seealso>
<ref>interp(n)</ref>
<ref>selection(n)</ref>
</seealso>
<keywords>
<keyword>clear</keyword>
<keyword>format</keyword>
<keyword>clipboard</keyword>
<keyword>append</keyword>
<keyword>selection</keyword>
<keyword>type</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="clock" version="8.5" title="clock">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Generated from file './doc/clock.dt' by tcllib/doctools with format 'nroff'
     Copyright (c) 2004 Kevin B. Kenny <kennykb@acm.org>. All rights reserved.
 -->
<?TROFF.TH title="clock" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>clock</name>
<desc>Obtain and manipulate dates and times</desc>
</namesection>
<synopsis>
<syntax>
package require <b>Tcl 8.5</b>

<b>clock add</b> <m>timeVal</m> ?<m>count unit...</m>? ?<m>-option value</m>?

<b>clock clicks</b> ?<m>-option</m>?

<b>clock format</b> <m>timeVal</m> ?<m>-option value</m>...?

<b>clock microseconds</b> 

<b>clock milliseconds</b> 

<b>clock scan</b> <m>inputString</m> ?<m>-option value</m>...?

<b>clock seconds</b> 

</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>clock</cmd> command performs several operations that obtain and
manipulate values that represent times.  The command supports several
subcommands that determine what action is carried out by the command.
</p>
<commandlist>
<commanddef>
<command><b>clock add</b> <m>timeVal</m> ?<m>count unit...</m>? ?<m>-option value</m>?</command>
<desc>Adds a (possibly negative) offset to a time that is expressed as an
integer number of seconds.  See <ref refid="clock-arithmetic">CLOCK ARITHMETIC</ref> for a full description.
</desc>
</commanddef>
<commanddef>
<command><b>clock clicks</b> ?<m>-option</m>?</command>
<desc>If no <i>-option</i> argument is supplied, returns a high-resolution
time value as a system-dependent integer value.  The unit of the value
is system-dependent but should be the highest resolution clock available
on the system such as a CPU cycle counter.  See <ref refid="high-resolution-timers">HIGH RESOLUTION TIMERS</ref> for a full description.
<p>If the <i>-option</i> argument is <i>-milliseconds</i>, then the command
is synonymous with <b>clock milliseconds</b> (see below).  This
usage is obsolete, and <b>clock milliseconds</b> is to be
considered the preferred way of obtaining a count of milliseconds.
</p><p>If the <i>-option</i> argument is <i>-microseconds</i>, then the command
is synonymous with <b>clock microseconds</b> (see below).  This
usage is obsolete, and <b>clock microseconds</b> is to be
considered the preferred way of obtaining a count of microseconds.
</p></desc>
</commanddef>
<commanddef>
<command><b>clock format</b> <m>timeVal</m> ?<m>-option value</m>...?</command>
<desc>Formats a time that is expressed as an integer number of seconds into a format
intended for consumption by users or external programs.
See <ref refid="formatting-times">FORMATTING TIMES</ref> for a full description.
</desc>
</commanddef>
<commanddef>
<command><b>clock microseconds</b> </command>
<desc>Returns the current time as an integer number of microseconds.  See <ref refid="high-resolution-timers">HIGH RESOLUTION TIMERS</ref> for a full description.
</desc>
</commanddef>
<commanddef>
<command><b>clock milliseconds</b> </command>
<desc>Returns the current time as an integer number of milliseconds.  See <ref refid="high-resolution-timers">HIGH RESOLUTION TIMERS</ref> for a full description.
</desc>
</commanddef>
<commanddef>
<command><b>clock scan</b> <m>inputString</m> ?<m>-option value</m>...?</command>
<desc>Scans a time that is expressed as a character string and produces an
integer number of seconds.
See <ref refid="scanning-times">SCANNING TIMES</ref> for a full description.
</desc>
</commanddef>
<commanddef>
<command><b>clock seconds</b> </command>
<desc>Returns the current time as an integer number of seconds.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>PARAMETERS</title>
<dl>
<dle>
<dt><m>count</m></dt>
<dd>An integer representing a count of some unit of time.  See
<ref refid="clock-arithmetic">CLOCK ARITHMETIC</ref> for the details.
</dd>
</dle>
<dle>
<dt><m>timeVal</m></dt>
<dd>An integer value passed to the <cmd>clock</cmd> command that represents an
absolute time as a number of seconds from the <i>epoch time</i> of
1 January 1970, 00:00 UTC.  Note that the count of seconds does not
include any leap seconds; seconds are counted as if each UTC day has
exactly 86400 seconds.  Tcl responds to leap seconds by speeding or
slowing its clock by a tiny fraction for some minutes until it is
back in sync with UTC; its data model does not represent minutes that
have 59 or 61 seconds.
</dd>
</dle>
<dle>
<dt><m>unit</m></dt>
<dd>One of the words, <b>seconds</b>, <b>minutes</b>, <b>hours</b>,
<b>days</b>, <b>weeks</b>, <b>months</b>, or <b>years</b>, or
any unique prefix of such a word. Used in conjunction with <i>count</i>
to identify an interval of time, for example, <i>3 seconds</i> or
<i>1 year</i>.
</dd>
</dle>
</dl>
</section>
<section>
<title>OPTIONS</title>
<dl>
<dle>
<dt><b>-base</b> time</dt>
<dd>Specifies that any relative times present in a <b>clock scan</b> command
are to be given relative to <i>time</i>.  <i>time</i> must be expressed as
a count of nominal seconds from the epoch time of 1 January 1970, 00:00 UTC.
</dd>
</dle>
<dle>
<dt><b>-format</b> format</dt>
<dd>Specifies the desired output format for <b>clock format</b> or the
expected input format for <b>clock scan</b>.  The <i>format</i> string consists
of any number of characters other than the per-cent sign ('<i>%</i>')
interspersed with any number of <i>format groups</i>, which are two-character
sequences beginning with the per-cent sign.  The permissible format groups,
and their interpretation, are described under <ref refid="format-groups">FORMAT GROUPS</ref>.
<p>On <b>clock format</b>, the default format is
</p><example>
%a %b %d %H:%M:%S %z %Y
</example><p>On <b>clock scan</b>, the lack of a <i>-format</i> option indicates that
a "free format scan" is requested; see <ref refid="free-form-scan">FREE FORM SCAN</ref> for a
description of what happens.
</p></dd>
</dle>
<dle>
<dt><b>-gmt</b> boolean</dt>
<dd>If <i>boolean</i> is true, specifies that a time specified to <b>clock add</b>,
<b>clock format</b> or <b>clock scan</b> should be processed in
UTC.  If <i>boolean</i> is false, the processing defaults to the local time
zone.  This usage is obsolete; the correct current usage is to
specify the UTC time zone with '<b>-timezone</b> <i>:UTC</i>' or any of
the equivalent ways to specify it.
</dd>
</dle>
<dle>
<dt><b>-locale</b> localeName</dt>
<dd>Specifies that locale-dependent scanning and formatting (and date arithmetic
for dates preceding the adoption of the Gregorian calendar) is to be done in
the locale identified by <i>localeName</i>.  The locale name may be any of
the locales acceptable to the <b>msgcat</b> package, or it may be the special
name <i>system</i>, which represents the current locale of the process, or
the null string, which represents Tcl's default locale.
<p>The effect of locale on scanning and formatting is discussed in the
descriptions of the individual format groups under <ref refid="format-groups">FORMAT GROUPS</ref>.
The effect of locale on clock arithmetic is discussed under
<ref refid="clock-arithmetic">CLOCK ARITHMETIC</ref>.
</p></dd>
</dle>
<dle>
<dt><b>-timezone</b> zoneName</dt>
<dd>Specifies that clock arithmetic, formatting, and scanning are to be done
according to the rules for the time zone specified by <i>zoneName</i>.
The permissible values, and their interpretation, are discussed under
<ref refid="time-zones">TIME ZONES</ref>.
On subcommands that expect a <b>-timezone</b> argument, the default
is to use the <i>current time zone</i>.  The current time zone is
determined, in order of preference, by:
<ol>
<li>the environment variable <b>TCL_TZ</b>.
</li>
<li>the environment variable <b>TZ</b>.
</li>
<li>on Windows systems, the time zone settings from the Control Panel.
</li>
</ol>If none of these is present, the C <b>localtime</b> and <b>mktime</b>
functions are used to attempt to convert times between local and
Greenwich.  On 32-bit systems, this approach is likely to have bugs,
particularly for times that lie outside the window (approximately the
years 1902 to 2037) that can be represented in a 32-bit integer.
</dd>
</dle>
</dl>
</section>
<section id="clock-arithmetic">
<title>CLOCK ARITHMETIC</title>
<p>The <b>clock add</b> command performs clock arithmetic on a value
(expressed as nominal seconds from the epoch time of 1 January 1970, 00:00 UTC)
given as its first argument.  The remaining arguments (other than the
possible <b>-timezone</b>, <b>-locale</b> and <b>-gmt</b> options)
are integers and keywords in alternation, where the keywords are chosen
from <b>seconds</b>, <b>minutes</b>, <b>hours</b>,
<b>days</b>, <b>weeks</b>, <b>months</b>, or <b>years</b>, or
any unique prefix of such a word.
</p>
<p>Addition of seconds, minutes and hours is fairly straightforward;
the given time increment (times sixty for minutes, or 3600 for hours)
is simply added to the <i>timeVal</i> given
to the <b>clock add</b> command.  The result is interpreted as
a nominal number of seconds from the Epoch.
</p>
<p>Surprising results
may be obtained when crossing a point at which a leap second is
inserted or removed; the <b>clock add</b> command simply ignores
leap seconds and therefore assumes that times come in sequence,
23:59:58, 23:59:59, 00:00:00.  (This assumption is handled by
the fact that Tcl's model of time reacts to leap seconds by speeding
or slowing the clock by a minuscule amount until Tcl's time
is back in step with the world.
</p>
<p>The fact that adding and subtracting hours is defined in terms of
absolute time means that it will add fixed amounts of time in time zones
that observe summer time (Daylight Saving Time).  For example,
the following code sets the value of <b>x</b> to <b>04:00:00</b> because
the clock has changed in the interval in question.
</p>
<example>
set s [<b>clock scan</b> {2004-10-30 05:00:00} \
           -format {%Y-%m-%d %H:%M:%S} -timezone :America/New_York]
set a [<b>clock add</b> $s 24 hours -timezone :America/New_York]
set x [<b>clock format</b> $a \
           -format {%H:%M:%S} -timezone :America/New_York]
</example>
<p>Adding and subtracting days and weeks is accomplished by converting
the given time to a calendar day and time of day in the appropriate
time zone and locale.  The requisite number of days (weeks are converted
to days by multiplying by seven) is added to the calendar day, and
the date and time are then converted back to a count of seconds from
the epoch time.
</p>
<p>Adding and subtracting a given number of days across the point that
the time changes at the start or end of summer time (Daylight Saving Time)
results in the <i>same local time</i> on the day in question.  For
instance, the following code sets the value of <b>x</b> to <b>05:00:00</b>.
</p>
<example>
set s [<b>clock scan</b> {2004-10-30 05:00:00} \
           -format {%Y-%m-%d %H:%M:%S} -timezone :America/New_York]
set a [<b>clock add</b> $s 1 day -timezone :America/New_York]
set x [<b>clock format</b> $a \
           -format {%H:%M:%S} -timezone :America/New_York]
</example>
<p>In cases of ambiguity, where the same local time happens twice
on the same day, the earlier time is used.  In cases where the conversion
yields an impossible time (for instance, 02:30 during the Spring
Daylight Saving Time change using US rules), the time is converted
as if the clock had not changed.  Thus, the following code
will set the value of <b>x</b> to <b>03:30:00</b>.
</p>
<example>
set s [<b>clock scan</b> {2004-04-03 02:30:00} \
           -format {%Y-%m-%d %H:%M:%S} -timezone :America/New_York]
set a [<b>clock add</b> $s 1 day -timezone :America/New_York]
set x [<b>clock format</b> $a \
           -format {%H:%M:%S} -timezone :America/New_York]
</example>
<p>Adding a given number of days or weeks works correctly across the conversion
between the Julian and Gregorian calendars; the omitted days are skipped.
The following code sets <b>z</b> to <b>1752-09-14</b>.
</p>
<example>
set x [<b>clock scan</b> 1752-09-02 -format %Y-%m-%d -locale en_US]
set y [<b>clock add</b> $x 1 day -locale en_US]
set z [<b>clock format</b> $y -format %Y-%m-%d -locale en_US]
</example>
<p>In the bizarre case that adding the given number of days yields a date
that does not exist because it falls within the dropped days of the
Julian-to-Gregorian conversion, the date is converted as if it was
on the Julian calendar.
</p>
<p>Adding a number of months, or a number of years, is similar; it
converts the given time to a calendar date and time of day.  It then
adds the requisite number of months or years, and reconverts the resulting
date and time of day to an absolute time.
</p>
<p>If the resulting date is impossible because the month has too few days
(for example, when adding 1 month to 31 January), the last day of the
month is substituted.  Thus, adding 1 month to 31 January will result in
28 February in a common year or 29 February in a leap year.
</p>
<p>The rules for handling anomalies relating to summer time and to the
Gregorian calendar are the same when adding/subtracting months and
years as they are when adding/subtracting days and weeks.
</p>
<p>If multiple <i>count unit</i> pairs are present on the command, they
are evaluated consecutively, from left to right.
</p>
</section>
<section id="high-resolution-timers">
<title>HIGH RESOLUTION TIMERS</title>
<p>Most of the subcommands supported by the <cmd>clock</cmd> command deal with
times represented as a count of seconds from the epoch time, and this is the
representation that <b>clock seconds</b> returns.  There are three exceptions,
which are all intended for use where higher-resolution times are required.
<b>clock milliseconds</b> returns the count of milliseconds from the
epoch time, and <b>clock microseconds</b> returns the count of microseconds
from the epoch time. In addition, there is a <b>clock clicks</b> command
that returns a platform-dependent high-resolution timer.  Unlike
<b>clock seconds</b> and <b>clock milliseconds</b>, the value
of <b>clock clicks</b> is not guaranteed to be tied to any fixed
epoch; it is simply intended to be the most precise interval timer
available, and is intended only for relative timing studies such as
benchmarks.
</p>
</section>
<section id="formatting-times">
<title>FORMATTING TIMES</title>
<p>The <b>clock format</b> command produces times for display to a user
or writing to an external medium.  The command accepts times that are
expressed in seconds from the epoch time of 1 January 1970, 00:00 UTC,
as returned by <b>clock seconds</b>, <b>clock scan</b>, <b>clock add</b>,
<b>file atime</b> or <b>file mtime</b>.
</p>
<p>If a <b>-format</b> option is present, the following argument is
a string that specifies how the date and time are to be formatted.
The string consists
of any number of characters other than the per-cent sign ('<i>%</i>')
interspersed with any number of <i>format groups</i>, which are two-character
sequences beginning with the per-cent sign.  The permissible format groups,
and their interpretation, are described under <ref refid="format-groups">FORMAT GROUPS</ref>.
</p>
<p>If a <b>-timezone</b> option is present, the following
argument is a string that specifies the time zone in which the date and time
are to be formatted.  As an alternative to <b>-timezone</b> <i>:UTC</i>,
the obsolete usage <b>-gmt</b> <i>true</i> may be used.  See
<ref refid="time-zones">TIME ZONES</ref> for the permissible variants for the time zone.
</p>
<p>If a <b>-locale</b> option is present, the following argument is
a string that specifies the locale in which the time is to be formatted,
in the same format that is used for the <b>msgcat</b> package.  Note
that the default, if <b>-locale</b> is not specified, is the root locale
<b>{}</b> rather than the current locale.  The current locale may
be obtained by using <b>-locale</b> <b>current</b>.
In addition, some platforms support a <b>system</b> locale that
reflects the user's current choices.  For instance, on Windows, the
format that the user has selected from dates and times in the Control
Panel can be obtained by using the <b>system</b> locale.  On
platforms that do not define a user selection of date and time formats
separate from <b>LC_TIME</b>, <b>-locale</b> <b>system</b> is
synonymous with <b>-locale</b> <b>current</b>.
</p>
</section>
<section id="scanning-times">
<title>SCANNING TIMES</title>
<p>The <b>clock scan</b> command accepts times that are formatted as
strings and converts them to counts of seconds from the epoch time
of 1 January 1970, 00:00 UTC.  It normally takes a <b>-format</b>
option that is followed by a string describing
the expected format of the input.  (See
<ref refid="free-form-scan">FREE FORM SCAN</ref> for the effect of <b>clock scan</b>
without such an argument.)  The string consists of any number of
characters other than the per-cent sign ('<i>%</i>'),
interspersed with any number of <i>format groups</i>, which are two-character
sequences beginning with the per-cent sign.  The permissible format groups,
and their interpretation, are described under <ref refid="format-groups">FORMAT GROUPS</ref>.
</p>
<p>If a <b>-timezone</b> option is present, the following
argument is a string that specifies the time zone in which the date and time
are to be interpreted.  As an alternative to <b>-timezone</b> <i>:UTC</i>,
the obsolete usage <b>-gmt</b> <i>true</i> may be used.  See
<ref refid="time-zones">TIME ZONES</ref> for the permissible variants for the time zone.
</p>
<p>If a <b>-locale</b> option is present, the following argument is
a string that specifies the locale in which the time is to be interpreted,
in the same format that is used for the <b>msgcat</b> package.  Note
that the default, if <b>-locale</b> is not specified, is the root locale
<b>{}</b> rather than the current locale.  The current locale may
be obtained by using <b>-locale</b> <b>current</b>.
In addition, some platforms support a <b>system</b> locale that
reflects the user's current choices.  For instance, on Windows, the
format that the user has selected from dates and times in the Control
Panel can be obtained by using the <b>system</b> locale.  On
platforms that do not define a user selection of date and time formats
separate from <b>LC_TIME</b>, <b>-locale</b> <b>system</b> is
synonymous with <b>-locale</b> <b>current</b>.
</p>
<p>If a <b>-base</b> option is present, the following argument is
a time (expressed in seconds from the epoch time) that is used as
a <i>base time</i> for interpreting relative times.  If no
<b>-base</b> option is present, the base time is the current time.
</p>
<p>Scanning of times in fixed format works by determining three things:
the date, the time of day, and the time zone.  These three are then
combined into a point in time, which is returned as the number of seconds
from the epoch.
</p>
<p>Before scanning begins, the format string is preprocessed
to replace <b>%c</b>, <b>%Ec</b>, <b>%x</b>, <b>%Ex</b>,
<b>%X</b>. <b>%Ex</b>, <b>%r</b>, <b>%R</b>, <b>%T</b>,
<b>%D</b>, <b>%EY</b> and <b>%+</b> format groups with counterparts
that are appropriate to the current locale and contain none of the
above groups.  For instance, <b>%D</b> will (in the <b>en_US</b> locale)
be replaced with <b>%m/%d/%Y</b>.
</p>
<p>The date is determined according to the fields that are present in the
preprocessed format string.  In order of preference:
</p>
<ol>
<li>If the string contains a <b>%s</b> format group, representing
seconds from the epoch, that group is used to determine the date.
</li>
<li>If the string contains a <b>%J</b> format group, representing
the Julian Day Number, that group is used to determine the date.
</li>
<li>If the string contains a complete set of format groups specifying
century, year, month, and day of month; century, year, and day of year;
or ISO8601 fiscal year, week of year, and day of week; those groups are
combined and used to determine the date.  If more than one complete
set is present, the one at the rightmost position in the string is
used.
</li>
<li>If the string lacks a century but contains a set of format
groups specifying year of century, month and day of month; year of
century and day of year; or two-digit ISO8601 fiscal year, week of year,
and day of week; those groups are
combined and used to determine the date.  If more than one complete
set is present, the one at the rightmost position in the string is
used.  The year is presumed to lie in the range 1938 to 2037 inclusive.
</li>
<li>If the string entirely lacks any specification for the year,
but contains a set of format groups specifying month and day of month,
day of year, or week of year and day of week, those groups are
combined and used to determine the date.  If more than one complete
set is present, the one at the rightmost position in the string is
used.  The year is determined by interpreting the base time in the given
time zone.
</li>
<li>If the string contains none of the above sets, but has a day
of the month or day of the week, the day of the month or day of the week
are used to determine the date by interpreting the base time in the
given time zone and returning the given day of the current week or month.
(The week runs from Monday to Sunday, ISO8601-fashion.)  If both day
of month and day of week are present, the day of the month takes
priority.
</li>
<li>If none of the above rules results in a usable date, the date
of the base time in the given time zone is used.
</li>
</ol>
<p>The time is also determined according to the fields that are present in the
preprocessed format string.  In order of preference:
</p>
<ol>
<li>If the string contains a <b>%s</b> format group, representing
seconds from the epoch, that group determines the time of day.
</li>
<li>If the string contains either an hour on the 24-hour clock
or an hour on the 12-hour clock plus an AM/PM indicator, that hour determines
the hour of the day.  If the string further contains a group specifying
the minute of the hour, that group combines with the hour.  If the string
further contains a group specifying the second of the minute, that group
combines with the hour and minute.
</li>
<li>If the string contains neither a <b>%s</b> format group nor
a group specifying the hour of the day, then midnight (<b>00:00</b>, the start
of the given date) is used.
The time zone is determined by either the <b>-timezone</b> or <b>-gmt</b>
options, or by using the current time zone.
</li>
</ol>
<p>If a format string lacks a <b>%z</b> or <b>%Z</b> format group,
it is possible for the time to be ambiguous because it appears twice
in the same day, once without and once with Daylight Saving Time.
If this situation occurs, the first occurrence of the time is chosen.
(For this reason, it is wise to have the input string contain the
time zone when converting local times.  This caveat does not apply to
UTC times.)
</p>
</section>
<section id="format-groups">
<title>FORMAT GROUPS</title>
<p>The following format groups are recognized by the <b>clock scan</b> and
<b>clock format</b> commands.
</p>
<dl>
<dle>
<dt><b>%a</b></dt>
<dd>On output, receives an abbreviation (<i>e.g.,</i> <b>Mon</b>) for the day
of the week in the given locale.  On input, matches the name of the day
of the week in the given locale (in either abbreviated or full form, or
any unique prefix of either form).
</dd>
</dle>
<dle>
<dt><b>%A</b></dt>
<dd>On output, receives the full name (<i>e.g.,</i> <b>Monday</b>) of the day
of the week in the given locale.  On input, matches the name of the day
of the week in the given locale (in either abbreviated or full form, or
any unique prefix of either form).
</dd>
</dle>
<dle>
<dt><b>%b</b></dt>
<dd>On output, receives an abbreviation (<i>e.g.,</i> <b>Jan</b>) for the name
of the month in the given locale.  On input, matches the name of the month
in the given locale (in either abbreviated or full form, or
any unique prefix of either form).
</dd>
</dle>
<dle>
<dt><b>%B</b></dt>
<dd>On output, receives the full name (<i>e.g.,</i> <b>January</b>)
of the month in the given locale.  On input, matches the name of the month
in the given locale (in either abbreviated or full form, or
any unique prefix of either form).
</dd>
</dle>
<dle>
<dt><b>%c</b></dt>
<dd>On output, receives a localized representation of date and time of day;
the localized representation is expected to use the Gregorian calendar.
On input, matches whatever %c produces.
</dd>
</dle>
<dle>
<dt><b>%C</b></dt>
<dd>On output, receives the number of the century in Indo-Arabic numerals.
On input, matches one or two digits, possibly with leading whitespace,
that are expected to be the number of the century.
</dd>
</dle>
<dle>
<dt><b>%d</b></dt>
<dd>On output, produces the number of the day of the month, as two decimal
digits.  On input, matches one or two digits, possibly with leading
whitespace, that are expected to be the number of the day of the month.
</dd>
</dle>
<dle>
<dt><b>%D</b></dt>
<dd>This format group is synonymous with <b>%m/%d/%Y</b>.  It should be
used only in exchanging data within the <b>en_US</b> locale, since
other locales typically do not use this order for the fields of the date.
</dd>
</dle>
<dle>
<dt><b>%e</b></dt>
<dd>On output, produces the number of the day of the month, as one or
two decimal digits (with a leading blank for one-digit dates).
On input, matches one or two digits, possibly with leading
whitespace, that are expected to be the number of the day of the month.
</dd>
</dle>
<dle>
<dt><b>%Ec</b></dt>
<dd>On output, produces a locale-dependent representation of the date and
time of day in the locale's alternative calendar.  On input, matches
whatever %Ec produces.  The locale's alternative calendar need not
be the Gregorian calendar.
</dd>
</dle>
<dle>
<dt><b>%EC</b></dt>
<dd>On output, produces a locale-dependent name of an era in the locale's
alternative calendar.  On input, matches the name of the era or any
unique prefix.
</dd>
</dle>
<dle>
<dt><b>%EE</b></dt>
<dd>On output, produces the string <b>B.C.E.</b> or <b>C.E.</b>, or a
string of the same meaning in the locale, to indicate whether <b>%Y</b> refers
to years before or after Year 1 of the Common Era.  On input, accepts
the string <b>B.C.E.</b>, <b>B.C.</b>, <b>C.E.</b>, <b>A.D.</b>, or the
abbreviation appropriate to the current locale, and uses it to fix
whether <b>%Y</b> refers to years before or after Year 1 of the 
Common Era.
</dd>
</dle>
<dle>
<dt><b>%Ex</b></dt>
<dd>On output, produces a locale-dependent representation of the date
in the locale's alternative calendar.  On input, matches
whatever %Ex produces.  The locale's alternative calendar need not
be the Gregorian calendar.
</dd>
</dle>
<dle>
<dt><b>%EX</b></dt>
<dd>On output, produces a locale-dependent representation of the
time of day in the locale's alternative numerals.  On input, matches
whatever %EX produces.
</dd>
</dle>
<dle>
<dt><b>%Ey</b></dt>
<dd>On output, produces a locale-dependent number of the year of the era
in the locale's alternative calendar and numerals.  On input, matches
such a number.
</dd>
</dle>
<dle>
<dt><b>%EY</b></dt>
<dd>On output, produces a representation of the year in the locale's
alternative calendar and numerals.  On input, matches what <b>%EY</b>
produces.  Often synonymous with <b>%EC%Ey</b>.
</dd>
</dle>
<dle>
<dt><b>%g</b></dt>
<dd>On output, produces a two-digit year number suitable for use with
the week-based ISO8601 calendar; that is, the year number corresponds
to the week number produced by <b>%V</b>.  On input, accepts such
a two-digit year number, possibly with leading whitespace.
</dd>
</dle>
<dle>
<dt><b>%G</b></dt>
<dd>On output, produces a four-digit year number suitable for use with
the week-based ISO8601 calendar; that is, the year number corresponds
to the week number produced by <b>%V</b>.  On input, accepts such
a four-digit year number, possibly with leading whitespace.
</dd>
</dle>
<dle>
<dt><b>%h</b></dt>
<dd>This format group is synonymous with <b>%b</b>.
</dd>
</dle>
<dle>
<dt><b>%H</b></dt>
<dd>On output, produces a two-digit number giving the hour of the day
(00-23) on a 24-hour clock.  On input, accepts such a number.
</dd>
</dle>
<dle>
<dt><b>%I</b></dt>
<dd>On output, produces a two-digit number giving the hour of the day
(12-11) on a 12-hour clock.  On input, accepts such a number.
</dd>
</dle>
<dle>
<dt><b>%j</b></dt>
<dd>On output, produces a three-digit number giving the day of the year
(001-366).  On input, accepts such a number.
</dd>
</dle>
<dle>
<dt><b>%J</b></dt>
<dd>On output, produces a string of digits giving the Julian Day Number.
On input, accepts a string of digits and interprets it as a Julian Day Number.
The Julian Day Number is a count of the number of calendar days
that have elapsed since 1 January, 4713 BCE of the proleptic
Julian calendar.  The epoch time of 1 January 1970 corresponds
to Julian Day Number 2440588.
</dd>
</dle>
<dle>
<dt><b>%k</b></dt>
<dd>On output, produces a one- or two-digit number giving the hour of the day
(0-23) on a 24-hour clock.  On input, accepts such a number.
</dd>
</dle>
<dle>
<dt><b>%l</b></dt>
<dd>On output, produces a one- or two-digit number giving the hour of the day
(12-11) on a 12-hour clock.  On input, accepts such a number.
</dd>
</dle>
<dle>
<dt><b>%m</b></dt>
<dd>On output, produces the number of the month (01-12) with exactly two
digits.  On input, accepts two digits and interprets them as the number
of the month.
</dd>
</dle>
<dle>
<dt><b>%M</b></dt>
<dd>On output, produces the number of the minute of the hour (00-59)
with exactly two digits.  On input, accepts two digits and interprets them
as the number of the minute of the hour.
</dd>
</dle>
<dle>
<dt><b>%N</b></dt>
<dd>On output, produces the number of the month (1-12) with one or two digits.
digits.  On input, accepts one or two digits, possibly with leading whitespace,
and interprets them as the number of the month.
</dd>
</dle>
<dle>
<dt><b>%Od</b>, <b>%Oe</b>, <b>%OH</b>, <b>%OI</b>, <b>%Ok</b>, <b>%Ol</b>, <b>%Om</b>, <b>%OM</b>, <b>%OS</b>, <b>%Ou</b>, <b>%Ow</b>, <b>%Oy</b></dt>
<dd>All of these format groups are synonymous with their counterparts
without the '<b>O</b>', except that the string is produced and parsed in the
locale-dependent alternative numerals.
</dd>
</dle>
<dle>
<dt><b>%p</b></dt>
<dd>On output, produces an indicator for the part of the day, <b>A.M.</b>
or <b>P.M.</b>, appropriate to the given locale.  If the script of the
given locale supports multiple letterforms, uppercase is preferred.
On input, matches the representation <b>A.M.</b> or <b>P.M.</b> in
the given locale, in either case.
</dd>
</dle>
<dle>
<dt><b>%P</b></dt>
<dd>On output, produces an indicator for the part of the day, <b>A.M.</b>
or <b>P.M.</b>, appropriate to the given locale.  If the script of the
given locale supports multiple letterforms, lowercase is preferred.
On input, matches the representation <b>A.M.</b> or <b>P.M.</b> in
the given locale, in either case.
</dd>
</dle>
<dle>
<dt><b>%Q</b></dt>
<dd>This format group is reserved for internal use within the Tcl library.
</dd>
</dle>
<dle>
<dt><b>%r</b></dt>
<dd>On output, produces a locale-dependent time of day representation on a
12-hour clock. On input, accepts whatever <b>%r</b> produces.
</dd>
</dle>
<dle>
<dt><b>%R</b></dt>
<dd>On output, produces a locale-dependent time of day representation on a
24-hour clock. On input, accepts whatever <b>%R</b> produces.
</dd>
</dle>
<dle>
<dt><b>%s</b></dt>
<dd>On output, simply formats the <i>timeVal</i> argument as a decimal
integer and inserts it into the output string.  On input, accepts
a decimal integer and uses is as the time value without any further
processing. Since <b>%s</b> uniquely determines a point in time, it
overrides all other input formats.
</dd>
</dle>
<dle>
<dt><b>%S</b></dt>
<dd>On output, produces a two-digit number of the second of the minute
(00-59). On input, accepts two digits and uses them as the second of the
minute.
</dd>
</dle>
<dle>
<dt><b>%t</b></dt>
<dd>On output, produces a TAB character. On input, matches a TAB character.
</dd>
</dle>
<dle>
<dt><b>%T</b></dt>
<dd>Synonymous with <b>%H:%M:%S</b>.
</dd>
</dle>
<dle>
<dt><b>%u</b></dt>
<dd>On output, produces the number of the day of the week
(<b>1</b>-Monday, <b>7</b>-Sunday). On input, accepts a single digit and
interprets it as the day of the week. Sunday may be either <b>0</b> or
<b>7</b>.
</dd>
</dle>
<dle>
<dt><b>%U</b></dt>
<dd>On output, produces the ordinal number of the week of the year
(00-53). The first Sunday of the year is the first day of week 01. On
input accepts two digits which are otherwise ignored. This format
group is never used in determining an input date.  This interpretation
of the week of the year was once common in US banking but is now
largely obsolete.  See <b>%V</b> for the ISO8601 week number.
</dd>
</dle>
<dle>
<dt><b>%V</b></dt>
<dd>On output, produces the number of the ISO8601 week as a two digit
number (01-53). Week 01 is the week containing January 4; or the first
week of the year containing at least 4 days; or the week containing
the first Thursday of the year (the three statements are
equivalent). Each week begins on a Monday. On input, accepts the
ISO8601 week number.
</dd>
</dle>
<dle>
<dt><b>%w</b></dt>
<dd>On output, produces the ordinal number of the day of the week
(Sunday==0; Saturday==6).  On input, accepts a single digit and
interprets it as the day of the week; Sunday may be represented as 
either 0 or 7.  Note that <b>%w</b> is not the ISO8601 weekday number, 
which is produced and accepted by <b>%u</b>.
</dd>
</dle>
<dle>
<dt><b>%W</b></dt>
<dd>On output, produces a week number (00-53) within the year; week 01
begins on the first Monday of the year. On input, accepts two digits,
which are otherwise ignored. This format group is never used in
determining an input date.  It is not the ISO8601 week number; that
week is produced and accepted by <b>%V</b>.
</dd>
</dle>
<dle>
<dt><b>%x</b></dt>
<dd>On output, produces the date in a locale-dependent representation. On
input, accepts whatever <b>%x</b> produces and is used to determine
calendar date.
</dd>
</dle>
<dle>
<dt><b>%X</b></dt>
<dd>On output, produces the time of day in a locale-dependent
representation. On input, accepts whatever <b>%X</b> produces and is used
to determine time of day.
</dd>
</dle>
<dle>
<dt><b>%y</b></dt>
<dd>On output, produces the two-digit year of the century. On input,
accepts two digits, and is used to determine calendar date. The
date is presumed to lie between 1938 and 2037 inclusive. Note
that <b>%y</b> does not yield a year appropriate for use with the ISO8601
week number <b>%V</b>; programs should use <b>%g</b> for that purpose.
</dd>
</dle>
<dle>
<dt><b>%Y</b></dt>
<dd>On output, produces the four-digit calendar year. On input,
accepts four digits and may be used to determine calendar date. Note
that <b>%Y</b> does not yield a year appropriate for use with the ISO8601
week number <b>%V</b>; programs should use <b>%G</b> for that purpose.
</dd>
</dle>
<dle>
<dt><b>%z</b></dt>
<dd>On output, produces the current time zone, expressed in hours and
minutes east (+hhmm) or west (-hhmm) of Greenwich. On input, accepts a
time zone specifier (see <ref refid="time-zones">TIME ZONES</ref> below) that will be used to
determine the time zone.
</dd>
</dle>
<dle>
<dt><b>%Z</b></dt>
<dd>On output, produces the current time zone's name, possibly
translated to the given locale. On input, accepts a time zone
specifier (see <ref refid="time-zones">TIME ZONES</ref> below) that will be used to determine the
time zone. This option should, in general, be used on input only when
parsing RFC822 dates. Other uses are fraught with ambiguity; for
instance, the string <b>BST</b> may represent British Summer Time or
Brazilian Standard Time. It is recommended that date/time strings for
use by computers use numeric time zones instead.
</dd>
</dle>
<dle>
<dt><b>%%</b></dt>
<dd>On output, produces a literal '<b>%</b>' character. On input, matches
a literal '<b>%</b>' character.
</dd>
</dle>
<dle>
<dt><b>%+</b></dt>
<dd>Synonymous with '<b>%a %b %e %H:%M:%S %Z %Y</b>'.
</dd>
</dle>
</dl>
</section>
<section id="time-zones">
<title>TIME ZONES</title>
<p>When the <cmd>clock</cmd> command is processing a local time, it has several
possible sources for the time zone to use.  In order of preference, they
are:
</p>
<ol>
<li>A time zone specified inside a string being parsed and matched by a <b>%z</b>
or <b>%Z</b> format group.
</li>
<li>A time zone specified with the <b>-timezone</b> option to the <cmd>clock</cmd>
command (or, equivalently, by <b>-gmt</b> <b>1</b>).
</li>
<li>A time zone specified in an environment variable <b>TCL_TZ</b>.
</li>
<li>A time zone specified in an environment variable <b>TZ</b>.
</li>
<li>The local time zone from the Control Panel on Windows systems.
</li>
<li>The C library's idea of the local time zone, as defined by the
<b>mktime</b> and <b>localtime</b> functions.
</li>
</ol>
<p>Whatever the source of the time zone string, the same set of rules
is used to parse it.  First, if it was obtained from a <b>%z</b>
or <b>%Z</b> format group, it is checked to see if it is one of
the strings,
</p>
<example>
 gmt     ut      utc     bst     wet     wat     at
 nft     nst     ndt     ast     adt     est     edt
 cst     cdt     mst     mdt     pst     pdt     yst
 ydt     hst     hdt     cat     ahst    nt      idlw
 cet     cest    met     mewt    mest    swt     sst
 eet     eest    bt      it      zp4     zp5     ist
 zp6     wast    wadt    jt      cct     jst     cast
 cadt    east    eadt    gst     nzt     nzst    nzdt
 idle
</example>
<p>If it is a string in the above list, it designates a known
time zone, and is interpreted as such.
</p>
<p>The next check is for a string beginning with a colon.
If the time zone begins with a colon, it is one of a
standardized list of names like <b>:America/New_York</b>
that give the rules for various locales.  A complete list
of the location names is too lengthy to be listed here.
On most Tcl installations, the definitions of the locations
are to be found in named files in the directory
 "<i>/no_backup/tools/lib/tcl8.5/clock/tzdata</i>".  On some Unix systems, these
files are omitted, and the definitions are instead
obtained from system files in "<i>/usr/share/zoneinfo</i>",
 "<i>/usr/share/lib/zoneinfo</i>" or "<i>/usr/local/etc/zoneinfo</i>".
As a special case, the name <b>:localtime</b> refers to
the local time zone as defined by the C library.
</p>
<p>A string consisting of a plus or minus sign followed by
four or six decimal digits is interpreted as an offset in
hours, minutes, and seconds (if six digits are present) from
UTC.  The plus sign denotes a sign east of Greenwich;
the minus sign one west of Greenwich.
</p>
<p>A string conforming to the Posix specification of the <b>TZ</b>
environment variable will be recognized.  The specification
may be found at
<i>http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html</i>.
</p>
<p>Any other string is processed by prefixing a colon and attempting
to use it as a location name, as above.
</p>
</section>
<section>
<title>LOCALIZATION</title>
<p>Developers wishing to localize the date and time formatting and parsing
are referred to <i>http://tip.tcl.tk/173</i> for a
specification.
</p>
</section>
<section id="free-form-scan">
<title>FREE FORM SCAN</title>
<p>If the <b>clock scan</b> command is invoked without a <b>-format</b>
option, then it requests a <i>free-form scan.</i>  
<i>This form of scan is deprecated.</i>  The reason for the deprecation
is that there are too many ambiguities. (Does the string '2000'
represent a year, a time of day, or a quantity?)  No set of rules
for interpreting free-form dates and times has been found to
give unsurprising results in all cases.
</p>
<p>If free-form scan is used, only the <b>-base</b> and <b>-gmt</b>
options are accepted.  The <b>-timezone</b> and <b>-locale</b>
options will result in an error if <b>-format</b> is not supplied.
</p>
<p>For the benefit of users who need to understand legacy code that
uses free-form scan, the documentation for how free-form scan
interprets a string is included here:
</p>
<p>If only a time is
specified, the current date is assumed.  If the <i>inputString</i>
does not contain a
time zone mnemonic, the local time zone is assumed, unless the <b>-gmt</b>
argument is true, in which case the clock value is calculated assuming
that the specified time is relative to Greenwich Mean Time.
<b>-gmt</b>, if specified, affects only the computed time value; it does not
impact the interpretation of <b>-base</b>.
</p>
<p>If the <b>-base</b> flag is specified, the next argument should contain
an integer clock value.  Only the date in this value is used, not the
time.  This is useful for determining the time on a specific day or
doing other date-relative conversions.
</p>
<p>The <i>inputString</i> argument consists of zero or more specifications of the
following form:
</p>
<dl>
<dle>
<dt><m>time</m></dt>
<dd>A time of day, which is of the form: <b>hh?:mm?:ss?? ?meridian? ?zone?</b>
or <b>hhmm ?meridian? ?zone?</b>
If no meridian is specified, <b>hh</b> is interpreted on
a 24-hour clock.
</dd>
</dle>
<dle>
<dt><m>date</m></dt>
<dd>A specific month and day with optional year.  The
acceptable formats are "<b>mm/dd</b>?<b>/yy</b>?",
 "<b>monthname dd</b>?<b>, yy</b>?",
 "<b>day, dd monthname</b> ?<b>yy</b>?",
 "<b>dd monthname yy</b>",
 "?<b>CC</b>?<b>yymmdd</b>", and
 "<b>dd-monthname-</b>?<b>CC</b>?<b>yy</b>".
The default year is the current year.  If the year is less
than 100, we treat the years 00-68 as 2000-2068 and the years 69-99
as 1969-1999.  Not all platforms can represent the years 38-70, so
an error may result if these years are used.
</dd>
</dle>
<dle>
<dt><m>ISO 8601 point-in-time</m></dt>
<dd>An ISO 8601 point-in-time specification, such as <b>CCyymmddThhmmss</b>,
where <b>T</b> is the literal T, "<b>CCyymmdd hhmmss</b>", or
<b>CCyymmddThh:mm:ss</b>. Note that only these three formats are accepted.
The command does <i>not</i> accept the full range of point-in-time
specifications specified in ISO8601.  Other formats can be recognized by
giving an explicit <i>-format</i> option to the <b>clock scan</b> command.
</dd>
</dle>
<dle>
<dt><m>relative time</m></dt>
<dd>A specification relative to the current time.  The format is <b>number
unit</b>. Acceptable units are <b>year</b>, <b>fortnight</b>, 
<b>month</b>, <b>week</b>, <b>day</b>,
<b>hour</b>, <b>minute</b> (or <b cat="mathfunc">min</b>), and <b>second</b> (or <b>sec</b>).  The
unit can be specified as a singular or plural, as in <b>3 weeks</b>.
These modifiers may also be specified:
<b>tomorrow</b>, <b>yesterday</b>, <b>today</b>, <b>now</b>,
<b>last</b>, <b>this</b>, <b>next</b>, <b>ago</b>.
The actual date is calculated according to the following steps.
</dd>
</dle>
</dl>
<p>First, any absolute date and/or time is processed and converted.
Using that time as the base, day-of-week specifications are added.
Next, relative specifications are used.  If a date or day is
specified, and no absolute or relative time is given, midnight is
used.  Finally, a correction is applied so that the correct hour of
the day is produced after allowing for daylight savings time
differences and the correct date is given when going from the end
of a long month to a short month.
</p>
<p>Daylight savings time correction is applied only when the relative time
is specified in units of days or more, i.e. days, weeks, fortnights, months or
years.  This means that when crossing the daylight savings time boundary,
different results will be given for <b>clock scan "1 day"</b> and
<b>clock scan "24 hours"</b>:
</p>
<example>
% <b>clock scan</b> "1 day" -base [<b>clock scan</b> 1999-10-31]
941443200
% <b>clock scan</b> "24 hours" -base [<b>clock scan</b> 1999-10-31]
941439600
</example>
</section>
<seealso>
<ref>msgcat</ref>
</seealso>
<section>
<title>COPYRIGHT</title>
<p>Copyright (c) 2004 Kevin B. Kenny &lt;kennykb@acm.org&gt;. All rights reserved.
</p>
</section>
</manpage>
<manpage cat="cmd" id="close" version="7.5" title="close">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: close.n,v 1.10 2005/05/10 18:33:59 kennykb Exp $
 -->
<?TROFF.TH title="close" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>close</name>
<desc>Close an open channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>close</cmd> <m>channelId</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Closes the channel given by <i>channelId</i>.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>),
the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or
the result of a channel creation command provided by a Tcl extension.
</p>
<p>All buffered output is flushed to the channel's output device,
any buffered input is discarded, the underlying file or device is closed,
and <i>channelId</i> becomes unavailable for use.
</p>
<p>If the channel is blocking, the command does not return until all output
is flushed.
If the channel is nonblocking and there is unflushed output, the
channel remains open and the command
returns immediately; output will be flushed in the background and the
channel will be closed when all the flushing is complete.
</p>
<p>If <i>channelId</i> is a blocking channel for a command pipeline then
<cmd>close</cmd> waits for the child processes to complete.
</p>
<p>If the channel is shared between interpreters, then <cmd>close</cmd>
makes <i>channelId</i> unavailable in the invoking interpreter but has no
other effect until all of the sharing interpreters have closed the
channel.
When the last interpreter in which the channel is registered invokes
<cmd>close</cmd>, the cleanup actions described above occur. See the
<cmd>interp</cmd> command for a description of channel sharing.
</p>
<p>Channels are automatically closed when an interpreter is destroyed and
when the process exits.  Channels are switched to blocking mode, to ensure
that all output is correctly flushed before the process exits.
</p>
<p>The command returns an empty string, and may generate an error if
an error occurs while flushing output.  If a command in a command
pipeline created with <b cat="AMBIGUOUS ambiguous cmd">open</b> returns an error, <cmd>close</cmd>
generates an error (similar to the <cmd>exec</cmd> command.)
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This illustrates how you can use Tcl to ensure that files get closed
even when errors happen by combining <cmd>catch</cmd>, <cmd>close</cmd> and
<cmd>return</cmd>:
</p>
<example>
proc withOpenFile {filename channelVar script} {
    upvar 1 $channelVar chan
    set chan [open $filename]
    catch {
        uplevel 1 $script
    } result options
    <cmd>close</cmd> $chan
    return -options $options $result
}
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>open(n)</ref>
<ref>socket(n)</ref>
<ref>eof(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>channel</keyword>
<keyword>close</keyword>
<keyword>nonblocking</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_ClearSelection" id="ClrSelect">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ClrSelect.3,v 1.2 1998/09/14 18:22:46 stanton Exp $
 -->
<?TROFF.TH title="Tk_ClearSelection" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ClearSelection</name>
<desc>Deselect a selection</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_ClearSelection</fun>(<m>tkwin</m>, <m>selection</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>The selection will be cleared from the display containing this
window.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>selection</name>
<argmode>in</argmode>
<desc>The name of selection to be cleared.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_ClearSelection</fun> cancels the selection specified by the atom 
<i>selection</i> for the display containing <i>tkwin</i>.
The selection need not be in <i>tkwin</i> itself or even in
<i>tkwin</i>'s application.
If there is a window anywhere on <i>tkwin</i>'s display that
owns <i>selection</i>, the window will be notified and the
selection will be cleared.
If there is no owner for <i>selection</i> on the display, then the
procedure has no effect.

</p>
</section>
<keywords>
<keyword>clear</keyword>
<keyword>selection</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CmdCmplt" title="Tcl_CommandComplete">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CmdCmplt.3,v 1.4 2004/10/07 15:15:35 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CommandComplete" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CommandComplete</name>
<desc>Check for unmatched braces in a Tcl command</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_CommandComplete</fun>(<m>cmd</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char</argtype>
<name name="cmd">*cmd</name>
<argmode>in</argmode>
<desc>Command string to test for completeness.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CommandComplete</fun> takes a Tcl command string
as argument and determines whether it contains one or more
complete commands (i.e. there are no unclosed quotes, braces,
brackets, or variable references).
If the command string is complete then it returns 1; otherwise it returns 0.

</p>
</section>
<keywords>
<keyword>complete command</keyword>
<keyword>partial command</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="colors" version="8.3" title="colors">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     Copyright (c) 2003 ActiveState Corporation.
     
     RCS: @(#) $Id: colors.n,v 1.5 2006/11/16 13:50:17 dkf Exp $
 -->
<?TROFF.TH title="colors" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>colors</name>
<desc>symbolic color names recognized by Tk</desc>
</namesection>
<section>
<title>DESCRIPTION</title>
<p>Tk recognizes many symbolic color names (e.g., <b>red</b>) when
specifying colors. The symbolic names recognized by Tk and their
8-bit RGB values are:
</p>
<example>
<i>Name</i>                       <i>Red</i>  <i>Green</i>  <i>Blue</i>
alice blue                 240   248   255
AliceBlue                  240   248   255
antique white              250   235   215
AntiqueWhite               250   235   215
AntiqueWhite1              255   239   219
AntiqueWhite2              238   223   204
AntiqueWhite3              205   192   176
AntiqueWhite4              139   131   120
aquamarine                 127   255   212
aquamarine1                127   255   212
aquamarine2                118   238   198
aquamarine3                102   205   170
aquamarine4                 69   139   116
azure                      240   255   255
azure1                     240   255   255
azure2                     224   238   238
azure3                     193   205   205
azure4                     131   139   139
beige                      245   245   220
bisque                     255   228   196
bisque1                    255   228   196
bisque2                    238   213   183
bisque3                    205   183   158
bisque4                    139   125   107
black                        0     0     0
blanched almond            255   235   205
BlanchedAlmond             255   235   205
blue                         0     0   255
blue violet                138    43   226
blue1                        0     0   255
blue2                        0     0   238
blue3                        0     0   205
blue4                        0     0   139
BlueViolet                 138    43   226
brown                      165    42    42
brown1                     255    64    64
brown2                     238    59    59
brown3                     205    51    51
brown4                     139    35    35
burlywood                  222   184   135
burlywood1                 255   211   155
burlywood2                 238   197   145
burlywood3                 205   170   125
burlywood4                 139   115    85
cadet blue                  95   158   160
CadetBlue                   95   158   160
CadetBlue1                 152   245   255
CadetBlue2                 142   229   238
CadetBlue3                 122   197   205
CadetBlue4                  83   134   139
chartreuse                 127   255     0
chartreuse1                127   255     0
chartreuse2                118   238     0
chartreuse3                102   205     0
chartreuse4                 69   139     0
chocolate                  210   105    30
chocolate1                 255   127    36
chocolate2                 238   118    33
chocolate3                 205   102    29
chocolate4                 139    69    19
coral                      255   127    80
coral1                     255   114    86
coral2                     238   106    80
coral3                     205    91    69
coral4                     139    62    47
cornflower blue            100   149   237
CornflowerBlue             100   149   237
cornsilk                   255   248   220
cornsilk1                  255   248   220
cornsilk2                  238   232   205
cornsilk3                  205   200   177
cornsilk4                  139   136   120
cyan                         0   255   255
cyan1                        0   255   255
cyan2                        0   238   238
cyan3                        0   205   205
cyan4                        0   139   139
dark blue                    0     0   139
dark cyan                    0   139   139
dark goldenrod             184   134    11
dark gray                  169   169   169
dark green                   0   100     0
dark grey                  169   169   169
dark khaki                 189   183   107
dark magenta               139     0   139
dark olive green            85   107    47
dark orange                255   140     0
dark orchid                153    50   204
dark red                   139     0     0
dark salmon                233   150   122
dark sea green             143   188   143
dark slate blue             72    61   139
dark slate gray             47    79    79
dark slate grey             47    79    79
dark turquoise               0   206   209
dark violet                148     0   211
DarkBlue                     0     0   139
DarkCyan                     0   139   139
DarkGoldenrod              184   134    11
DarkGoldenrod1             255   185    15
DarkGoldenrod2             238   173    14
DarkGoldenrod3             205   149    12
DarkGoldenrod4             139   101     8
DarkGray                   169   169   169
DarkGreen                    0   100     0
DarkGrey                   169   169   169
DarkKhaki                  189   183   107
DarkMagenta                139     0   139
DarkOliveGreen              85   107    47
DarkOliveGreen1            202   255   112
DarkOliveGreen2            188   238   104
DarkOliveGreen3            162   205    90
DarkOliveGreen4            110   139    61
DarkOrange                 255   140     0
DarkOrange1                255   127     0
DarkOrange2                238   118     0
DarkOrange3                205   102     0
DarkOrange4                139    69     0
DarkOrchid                 153    50   204
DarkOrchid1                191    62   255
DarkOrchid2                178    58   238
DarkOrchid3                154    50   205
DarkOrchid4                104    34   139
DarkRed                    139     0     0
DarkSalmon                 233   150   122
DarkSeaGreen               143   188   143
DarkSeaGreen1              193   255   193
DarkSeaGreen2              180   238   180
DarkSeaGreen3              155   205   155
DarkSeaGreen4              105   139   105
DarkSlateBlue               72    61   139
DarkSlateGray               47    79    79
DarkSlateGray1             151   255   255
DarkSlateGray2             141   238   238
DarkSlateGray3             121   205   205
DarkSlateGray4              82   139   139
DarkSlateGrey               47    79    79
DarkTurquoise                0   206   209
DarkViolet                 148     0   211
deep pink                  255    20   147
deep sky blue                0   191   255
DeepPink                   255    20   147
DeepPink1                  255    20   147
DeepPink2                  238    18   137
DeepPink3                  205    16   118
DeepPink4                  139    10    80
DeepSkyBlue                  0   191   255
DeepSkyBlue1                 0   191   255
DeepSkyBlue2                 0   178   238
DeepSkyBlue3                 0   154   205
DeepSkyBlue4                 0   104   139
dim gray                   105   105   105
dim grey                   105   105   105
DimGray                    105   105   105
DimGrey                    105   105   105
dodger blue                 30   144   255
DodgerBlue                  30   144   255
DodgerBlue1                 30   144   255
DodgerBlue2                 28   134   238
DodgerBlue3                 24   116   205
DodgerBlue4                 16    78   139
firebrick                  178    34    34
firebrick1                 255    48    48
firebrick2                 238    44    44
firebrick3                 205    38    38
firebrick4                 139    26    26
floral white               255   250   240
FloralWhite                255   250   240
forest green                34   139    34
ForestGreen                 34   139    34
gainsboro                  220   220   220
ghost white                248   248   255
GhostWhite                 248   248   255
gold                       255   215     0
gold1                      255   215     0
gold2                      238   201     0
gold3                      205   173     0
gold4                      139   117     0
goldenrod                  218   165    32
goldenrod1                 255   193    37
goldenrod2                 238   180    34
goldenrod3                 205   155    29
goldenrod4                 139   105    20
gray                       190   190   190
gray0                        0     0     0
gray1                        3     3     3
gray2                        5     5     5
gray3                        8     8     8
gray4                       10    10    10
gray5                       13    13    13
gray6                       15    15    15
gray7                       18    18    18
gray8                       20    20    20
gray9                       23    23    23
gray10                      26    26    26
gray11                      28    28    28
gray12                      31    31    31
gray13                      33    33    33
gray14                      36    36    36
gray15                      38    38    38
</example>
<example>
gray16                      41    41    41
gray17                      43    43    43
gray18                      46    46    46
gray19                      48    48    48
gray20                      51    51    51
gray21                      54    54    54
gray22                      56    56    56
gray23                      59    59    59
gray24                      61    61    61
gray25                      64    64    64
gray26                      66    66    66
gray27                      69    69    69
gray28                      71    71    71
gray29                      74    74    74
gray30                      77    77    77
gray31                      79    79    79
gray32                      82    82    82
gray33                      84    84    84
gray34                      87    87    87
gray35                      89    89    89
gray36                      92    92    92
gray37                      94    94    94
gray38                      97    97    97
gray39                      99    99    99
gray40                     102   102   102
gray41                     105   105   105
gray42                     107   107   107
gray43                     110   110   110
gray44                     112   112   112
gray45                     115   115   115
gray46                     117   117   117
gray47                     120   120   120
gray48                     122   122   122
gray49                     125   125   125
gray50                     127   127   127
gray51                     130   130   130
gray52                     133   133   133
gray53                     135   135   135
gray54                     138   138   138
gray55                     140   140   140
gray56                     143   143   143
gray57                     145   145   145
gray58                     148   148   148
gray59                     150   150   150
gray60                     153   153   153
gray61                     156   156   156
gray62                     158   158   158
gray63                     161   161   161
gray64                     163   163   163
gray65                     166   166   166
gray66                     168   168   168
gray67                     171   171   171
gray68                     173   173   173
gray69                     176   176   176
gray70                     179   179   179
gray71                     181   181   181
gray72                     184   184   184
gray73                     186   186   186
gray74                     189   189   189
gray75                     191   191   191
gray76                     194   194   194
gray77                     196   196   196
gray78                     199   199   199
gray79                     201   201   201
gray80                     204   204   204
gray81                     207   207   207
gray82                     209   209   209
gray83                     212   212   212
gray84                     214   214   214
gray85                     217   217   217
gray86                     219   219   219
gray87                     222   222   222
gray88                     224   224   224
gray89                     227   227   227
gray90                     229   229   229
gray91                     232   232   232
gray92                     235   235   235
gray93                     237   237   237
gray94                     240   240   240
gray95                     242   242   242
gray96                     245   245   245
gray97                     247   247   247
gray98                     250   250   250
gray99                     252   252   252
gray100                    255   255   255
green                        0   255     0
green yellow               173   255    47
green1                       0   255     0
green2                       0   238     0
green3                       0   205     0
green4                       0   139     0
GreenYellow                173   255    47
grey                       190   190   190
grey0                        0     0     0
grey1                        3     3     3
grey2                        5     5     5
grey3                        8     8     8
grey4                       10    10    10
grey5                       13    13    13
grey6                       15    15    15
grey7                       18    18    18
grey8                       20    20    20
grey9                       23    23    23
grey10                      26    26    26
grey11                      28    28    28
grey12                      31    31    31
grey13                      33    33    33
grey14                      36    36    36
grey15                      38    38    38
grey16                      41    41    41
grey17                      43    43    43
grey18                      46    46    46
grey19                      48    48    48
grey20                      51    51    51
grey21                      54    54    54
grey22                      56    56    56
grey23                      59    59    59
grey24                      61    61    61
grey25                      64    64    64
grey26                      66    66    66
grey27                      69    69    69
grey28                      71    71    71
grey29                      74    74    74
grey30                      77    77    77
grey31                      79    79    79
grey32                      82    82    82
grey33                      84    84    84
grey34                      87    87    87
grey35                      89    89    89
grey36                      92    92    92
grey37                      94    94    94
grey38                      97    97    97
grey39                      99    99    99
grey40                     102   102   102
grey41                     105   105   105
grey42                     107   107   107
grey43                     110   110   110
grey44                     112   112   112
grey45                     115   115   115
grey46                     117   117   117
grey47                     120   120   120
grey48                     122   122   122
grey49                     125   125   125
grey50                     127   127   127
grey51                     130   130   130
grey52                     133   133   133
grey53                     135   135   135
grey54                     138   138   138
grey55                     140   140   140
grey56                     143   143   143
grey57                     145   145   145
grey58                     148   148   148
grey59                     150   150   150
grey60                     153   153   153
grey61                     156   156   156
grey62                     158   158   158
grey63                     161   161   161
grey64                     163   163   163
grey65                     166   166   166
grey66                     168   168   168
grey67                     171   171   171
grey68                     173   173   173
grey69                     176   176   176
grey70                     179   179   179
grey71                     181   181   181
grey72                     184   184   184
grey73                     186   186   186
grey74                     189   189   189
grey75                     191   191   191
grey76                     194   194   194
grey77                     196   196   196
grey78                     199   199   199
grey79                     201   201   201
grey80                     204   204   204
grey81                     207   207   207
grey82                     209   209   209
grey83                     212   212   212
grey84                     214   214   214
grey85                     217   217   217
grey86                     219   219   219
grey87                     222   222   222
grey88                     224   224   224
grey89                     227   227   227
grey90                     229   229   229
grey91                     232   232   232
grey92                     235   235   235
grey93                     237   237   237
grey94                     240   240   240
grey95                     242   242   242
grey96                     245   245   245
grey97                     247   247   247
grey98                     250   250   250
grey99                     252   252   252
grey100                    255   255   255
honeydew                   240   255   240
honeydew1                  240   255   240
honeydew2                  224   238   224
honeydew3                  193   205   193
honeydew4                  131   139   131
hot pink                   255   105   180
</example>
<example>
HotPink                    255   105   180
HotPink1                   255   110   180
HotPink2                   238   106   167
HotPink3                   205    96   144
HotPink4                   139    58    98
indian red                 205    92    92
IndianRed                  205    92    92
IndianRed1                 255   106   106
IndianRed2                 238    99    99
IndianRed3                 205    85    85
IndianRed4                 139    58    58
ivory                      255   255   240
ivory1                     255   255   240
ivory2                     238   238   224
ivory3                     205   205   193
ivory4                     139   139   131
khaki                      240   230   140
khaki1                     255   246   143
khaki2                     238   230   133
khaki3                     205   198   115
khaki4                     139   134    78
lavender                   230   230   250
lavender blush             255   240   245
LavenderBlush              255   240   245
LavenderBlush1             255   240   245
LavenderBlush2             238   224   229
LavenderBlush3             205   193   197
LavenderBlush4             139   131   134
lawn green                 124   252     0
LawnGreen                  124   252     0
lemon chiffon              255   250   205
LemonChiffon               255   250   205
LemonChiffon1              255   250   205
LemonChiffon2              238   233   191
LemonChiffon3              205   201   165
LemonChiffon4              139   137   112
light blue                 173   216   230
light coral                240   128   128
light cyan                 224   255   255
light goldenrod            238   221   130
light goldenrod yellow     250   250   210
light gray                 211   211   211
light green                144   238   144
light grey                 211   211   211
light pink                 255   182   193
light salmon               255   160   122
light sea green             32   178   170
light sky blue             135   206   250
light slate blue           132   112   255
light slate gray           119   136   153
light slate grey           119   136   153
light steel blue           176   196   222
light yellow               255   255   224
LightBlue                  173   216   230
LightBlue1                 191   239   255
LightBlue2                 178   223   238
LightBlue3                 154   192   205
LightBlue4                 104   131   139
LightCoral                 240   128   128
LightCyan                  224   255   255
LightCyan1                 224   255   255
LightCyan2                 209   238   238
LightCyan3                 180   205   205
LightCyan4                 122   139   139
LightGoldenrod             238   221   130
LightGoldenrod1            255   236   139
LightGoldenrod2            238   220   130
LightGoldenrod3            205   190   112
LightGoldenrod4            139   129    76
LightGoldenrodYellow       250   250   210
LightGray                  211   211   211
LightGreen                 144   238   144
LightGrey                  211   211   211
LightPink                  255   182   193
LightPink1                 255   174   185
LightPink2                 238   162   173
LightPink3                 205   140   149
LightPink4                 139    95   101
LightSalmon                255   160   122
LightSalmon1               255   160   122
LightSalmon2               238   149   114
LightSalmon3               205   129    98
LightSalmon4               139    87    66
LightSeaGreen               32   178   170
LightSkyBlue               135   206   250
LightSkyBlue1              176   226   255
LightSkyBlue2              164   211   238
LightSkyBlue3              141   182   205
LightSkyBlue4               96   123   139
LightSlateBlue             132   112   255
LightSlateGray             119   136   153
LightSlateGrey             119   136   153
LightSteelBlue             176   196   222
LightSteelBlue1            202   225   255
LightSteelBlue2            188   210   238
LightSteelBlue3            162   181   205
LightSteelBlue4            110   123   139
LightYellow                255   255   224
LightYellow1               255   255   224
LightYellow2               238   238   209
LightYellow3               205   205   180
LightYellow4               139   139   122
lime green                  50   205    50
LimeGreen                   50   205    50
linen                      250   240   230
magenta                    255     0   255
magenta1                   255     0   255
magenta2                   238     0   238
magenta3                   205     0   205
magenta4                   139     0   139
maroon                     176    48    96
maroon1                    255    52   179
maroon2                    238    48   167
maroon3                    205    41   144
maroon4                    139    28    98
medium aquamarine          102   205   170
medium blue                  0     0   205
medium orchid              186    85   211
medium purple              147   112   219
medium sea green            60   179   113
medium slate blue          123   104   238
medium spring green          0   250   154
medium turquoise            72   209   204
medium violet red          199    21   133
MediumAquamarine           102   205   170
MediumBlue                   0     0   205
MediumOrchid               186    85   211
MediumOrchid1              224   102   255
MediumOrchid2              209    95   238
MediumOrchid3              180    82   205
MediumOrchid4              122    55   139
MediumPurple               147   112   219
MediumPurple1              171   130   255
MediumPurple2              159   121   238
MediumPurple3              137   104   205
MediumPurple4               93    71   139
MediumSeaGreen              60   179   113
MediumSlateBlue            123   104   238
MediumSpringGreen            0   250   154
MediumTurquoise             72   209   204
MediumVioletRed            199    21   133
midnight blue               25    25   112
MidnightBlue                25    25   112
mint cream                 245   255   250
MintCream                  245   255   250
misty rose                 255   228   225
MistyRose                  255   228   225
MistyRose1                 255   228   225
MistyRose2                 238   213   210
MistyRose3                 205   183   181
MistyRose4                 139   125   123
moccasin                   255   228   181
navajo white               255   222   173
NavajoWhite                255   222   173
NavajoWhite1               255   222   173
NavajoWhite2               238   207   161
NavajoWhite3               205   179   139
NavajoWhite4               139   121    94
navy                         0     0   128
navy blue                    0     0   128
NavyBlue                     0     0   128
old lace                   253   245   230
OldLace                    253   245   230
olive drab                 107   142    35
OliveDrab                  107   142    35
OliveDrab1                 192   255    62
OliveDrab2                 179   238    58
OliveDrab3                 154   205    50
OliveDrab4                 105   139    34
orange                     255   165     0
orange red                 255    69     0
orange1                    255   165     0
orange2                    238   154     0
orange3                    205   133     0
orange4                    139    90     0
OrangeRed                  255    69     0
OrangeRed1                 255    69     0
OrangeRed2                 238    64     0
OrangeRed3                 205    55     0
OrangeRed4                 139    37     0
orchid                     218   112   214
orchid1                    255   131   250
orchid2                    238   122   233
orchid3                    205   105   201
orchid4                    139    71   137
pale goldenrod             238   232   170
pale green                 152   251   152
pale turquoise             175   238   238
pale violet red            219   112   147
PaleGoldenrod              238   232   170
PaleGreen                  152   251   152
PaleGreen1                 154   255   154
PaleGreen2                 144   238   144
PaleGreen3                 124   205   124
PaleGreen4                  84   139    84
PaleTurquoise              175   238   238
PaleTurquoise1             187   255   255
PaleTurquoise2             174   238   238
PaleTurquoise3             150   205   205
PaleTurquoise4             102   139   139
</example>
<example>
PaleVioletRed              219   112   147
PaleVioletRed1             255   130   171
PaleVioletRed2             238   121   159
PaleVioletRed3             205   104   127
PaleVioletRed4             139    71    93
papaya whip                255   239   213
PapayaWhip                 255   239   213
peach puff                 255   218   185
PeachPuff                  255   218   185
PeachPuff1                 255   218   185
PeachPuff2                 238   203   173
PeachPuff3                 205   175   149
PeachPuff4                 139   119   101
peru                       205   133    63
pink                       255   192   203
pink1                      255   181   197
pink2                      238   169   184
pink3                      205   145   158
pink4                      139    99   108
plum                       221   160   221
plum1                      255   187   255
plum2                      238   174   238
plum3                      205   150   205
plum4                      139   102   139
powder blue                176   224   230
PowderBlue                 176   224   230
purple                     160    32   240
purple1                    155    48   255
purple2                    145    44   238
purple3                    125    38   205
purple4                     85    26   139
red                        255     0     0
red1                       255     0     0
red2                       238     0     0
red3                       205     0     0
red4                       139     0     0
rosy brown                 188   143   143
RosyBrown                  188   143   143
RosyBrown1                 255   193   193
RosyBrown2                 238   180   180
RosyBrown3                 205   155   155
RosyBrown4                 139   105   105
royal blue                  65   105   225
RoyalBlue                   65   105   225
RoyalBlue1                  72   118   255
RoyalBlue2                  67   110   238
RoyalBlue3                  58    95   205
RoyalBlue4                  39    64   139
saddle brown               139    69    19
SaddleBrown                139    69    19
salmon                     250   128   114
salmon1                    255   140   105
salmon2                    238   130    98
salmon3                    205   112    84
salmon4                    139    76    57
sandy brown                244   164    96
SandyBrown                 244   164    96
sea green                   46   139    87
SeaGreen                    46   139    87
SeaGreen1                   84   255   159
SeaGreen2                   78   238   148
SeaGreen3                   67   205   128
SeaGreen4                   46   139    87
seashell                   255   245   238
seashell1                  255   245   238
seashell2                  238   229   222
seashell3                  205   197   191
seashell4                  139   134   130
sienna                     160    82    45
sienna1                    255   130    71
sienna2                    238   121    66
sienna3                    205   104    57
sienna4                    139    71    38
sky blue                   135   206   235
SkyBlue                    135   206   235
SkyBlue1                   135   206   255
SkyBlue2                   126   192   238
SkyBlue3                   108   166   205
SkyBlue4                    74   112   139
slate blue                 106    90   205
slate gray                 112   128   144
slate grey                 112   128   144
SlateBlue                  106    90   205
SlateBlue1                 131   111   255
SlateBlue2                 122   103   238
SlateBlue3                 105    89   205
SlateBlue4                  71    60   139
SlateGray                  112   128   144
SlateGray1                 198   226   255
SlateGray2                 185   211   238
SlateGray3                 159   182   205
SlateGray4                 108   123   139
SlateGrey                  112   128   144
snow                       255   250   250
snow1                      255   250   250
snow2                      238   233   233
snow3                      205   201   201
snow4                      139   137   137
spring green                 0   255   127
SpringGreen                  0   255   127
SpringGreen1                 0   255   127
SpringGreen2                 0   238   118
SpringGreen3                 0   205   102
SpringGreen4                 0   139    69
steel blue                  70   130   180
SteelBlue                   70   130   180
SteelBlue1                  99   184   255
SteelBlue2                  92   172   238
SteelBlue3                  79   148   205
SteelBlue4                  54   100   139
tan                        210   180   140
tan1                       255   165    79
tan2                       238   154    73
tan3                       205   133    63
tan4                       139    90    43
thistle                    216   191   216
thistle1                   255   225   255
thistle2                   238   210   238
thistle3                   205   181   205
thistle4                   139   123   139
tomato                     255    99    71 
tomato1                    255    99    71
tomato2                    238    92    66
tomato3                    205    79    57
tomato4                    139    54    38
turquoise                   64   224   208
turquoise1                   0   245   255
turquoise2                   0   229   238
turquoise3                   0   197   205
turquoise4                   0   134   139
violet                     238   130   238
violet red                 208    32   144
VioletRed                  208    32   144
VioletRed1                 255    62   150
VioletRed2                 238    58   140
VioletRed3                 205    50   120
VioletRed4                 139    34    82
wheat                      245   222   179
wheat1                     255   231   186
wheat2                     238   216   174
wheat3                     205   186   150
wheat4                     139   126   102
white                      255   255   255
white smoke                245   245   245
WhiteSmoke                 245   245   245
yellow                     255   255     0
yellow green               154   205    50
yellow1                    255   255     0
yellow2                    238   238     0
yellow3                    205   205     0
yellow4                    139   139     0
YellowGreen                154   205    50
</example>
</section>
<seealso>
<ref>options(n)</ref>
<ref>Tk_GetColor(3)</ref>
</seealso>
<keywords>
<keyword>color</keyword>
<keyword>option</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="concat" title="concat" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: concat.n,v 1.6 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="concat" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>concat</name>
<desc>Join lists together</desc>
</namesection>
<synopsis>
<syntax>
<cmd>concat</cmd><m> </m>?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command joins each of its arguments together with spaces after
trimming leading and trailing white-space from each of them.  If all the
arguments are lists, this has the same effect as concatenating them
into a single list.
It permits any number of arguments;
if no <i>arg</i>s are supplied, the result is an empty string.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Although <cmd>concat</cmd> will concatenate lists (so the command:
</p>
<example>
<cmd>concat</cmd> a b {c d e} {f {g h}}
</example>
<p>will return "<b>a b c d e f {g h}</b>" as its result), it will also
concatenate things that are not lists, and hence the command:
</p>
<example>
<cmd>concat</cmd> " a b {c   " d "  e} f"
</example>
<p>will return "<b>a b {c d e} f</b>" as its result.
</p>
<p>Note that the concatenation does not remove spaces from the middle of
its arguments, so the command:
</p>
<example>
<cmd>concat</cmd> "a   b   c" { d e f }
</example>
<p>will return "<b>a   b   c d e f</b>" (i.e. with three spaces between
the <b>a</b>, the <b>b</b> and the <b>c</b>).

</p>
</section>
<seealso>
<ref>append(n)</ref>
<ref>eval(n)</ref>
</seealso>
<keywords>
<keyword>concatenate</keyword>
<keyword>join</keyword>
<keyword>lists</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ConfigWidg" version="4.1" title="Tk_ConfigureWidget">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ConfigWidg.3,v 1.16 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_ConfigureWidget" section="3" date="4.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ConfigureWidget</name>
<name>Tk_ConfigureInfo</name>
<name>Tk_ConfigureValue</name>
<name>Tk_FreeOptions</name>
<desc>process configuration options for widgets</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_ConfigureWidget(</b><m>interp</m>, <m>tkwin</m>, <m>specs</m>, <m>argc</m>, <m>argv</m>, <m>widgRec</m>, <m>flags</m><b>)</b>

int
<b>Tk_ConfigureInfo(</b><m>interp</m>, <m>tkwin</m>, <m>specs</m>, <m>widgRec</m>, <m>argvName</m>, <m>flags</m><b>)</b>

int
<b>Tk_ConfigureValue(</b><m>interp</m>, <m>tkwin</m>, <m>specs</m>, <m>widgRec</m>, <m>argvName</m>, <m>flags</m><b>)</b>

<b>Tk_FreeOptions(</b><m>specs</m>, <m>widgRec</m>, <m>display</m>, <m>flags</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for returning error messages.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window used to represent widget (needed to set up X resources).
</desc>
</argdef>
<argdef>
<argtype>Tk_ConfigSpec</argtype>
<name name="specs">*specs</name>
<argmode>in</argmode>
<desc>Pointer to table specifying legal configuration options for this
widget.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of arguments in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argv">**argv</name>
<argmode>in</argmode>
<desc>Command-line options for configuring widget.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="widgRec">*widgRec</name>
<argmode>in/out</argmode>
<desc>Points to widget record structure.  Fields in this structure get
modified by <fun>Tk_ConfigureWidget</fun> to hold configuration information.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>If non-zero, then it specifies an OR-ed combination of flags that
control the processing of configuration information.
<b>TK_CONFIG_ARGV_ONLY</b> causes the option database and defaults to be
ignored, and flag bits <b>TK_CONFIG_USER_BIT</b> and higher are used to
selectively disable entries in <i>specs</i>.
</desc>
</argdef>
<argdef>
<argtype>type name</argtype>
<name>type</name>
<argmode>in</argmode>
<desc>The name of the type of a widget record.
</desc>
</argdef>
<argdef>
<argtype>field name</argtype>
<name>field</name>
<argmode>in</argmode>
<desc>The name of a field in records of type <i>type</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argvName">*argvName</name>
<argmode>in</argmode>
<desc>The name used on Tcl command lines to refer to a particular option
(e.g. when creating a widget or invoking the <b>configure</b> widget
command).  If non-NULL, then information is returned only for this
option.  If NULL, then information is returned for all available
options.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display containing widget whose record is being freed;  needed in
order to free up resources.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p>Note: <fun>Tk_ConfigureWidget</fun> should be replaced with the new
<type>Tcl_Obj</type> based API <fun>Tk_SetOptions</fun>.  The old interface is
retained for backward compatibility.
</p>
<p><fun>Tk_ConfigureWidget</fun> is called to configure various aspects of a
widget, such as colors, fonts, border width, etc.
It is intended as a convenience procedure to reduce the amount
of code that must be written in individual widget managers to
handle configuration information.
It is typically
invoked when widgets are created, and again when the <b>configure</b>
command is invoked for a widget.
Although intended primarily for widgets, <fun>Tk_ConfigureWidget</fun>
can be used in other situations where <i>argc-argv</i> information
is to be used to fill in a record structure, such as configuring
graphical elements for a canvas widget or entries of a menu.
</p>
<p><fun>Tk_ConfigureWidget</fun> processes
a table specifying the configuration options that are supported
(<i>specs</i>) and a collection of command-line arguments (<i>argc</i> and
<i>argv</i>) to fill in fields of a record (<i>widgRec</i>).
It uses the option database and defaults specified in <i>specs</i>
to fill in fields of <i>widgRec</i> that are not specified in <i>argv</i>.
<fun>Tk_ConfigureWidget</fun> normally returns the value <b>TCL_OK</b>; in this
case it does not modify <i>interp</i>.
If an error
occurs then <b>TCL_ERROR</b> is returned and <fun>Tk_ConfigureWidget</fun> will
leave an error message in <i>interp-&gt;result</i> in the standard Tcl
fashion.
In the event of an error return, some of the fields of <i>widgRec</i>
could already have been set, if configuration information for them
was successfully processed before the error occurred.
The other fields will be set to reasonable initial values so that
<fun>Tk_FreeOptions</fun> can be called for cleanup.
</p>
<p>The <i>specs</i> array specifies the kinds of configuration options
expected by the widget.  Each of its entries specifies one configuration
option and has the following structure:
</p>
<syntax cat="type" name="Tk_ConfigSpec" scope="global">
typedef struct {
    int <i>type</i>;
    char *<i>argvName</i>;
    char *<i>dbName</i>;
    char *<i>dbClass</i>;
    char *<i>defValue</i>;
    int <i>offset</i>;
    int <i>specFlags</i>;
    Tk_CustomOption *<i>customPtr</i>;
} Tk_ConfigSpec;
</syntax>
<p>The <i>type</i> field indicates what type of configuration option this is
(e.g. <b>TK_CONFIG_COLOR</b> for a color value, or <b>TK_CONFIG_INT</b> for
an integer value).  The <i>type</i> field indicates how to use the
value of the option (more on this below).
The <i>argvName</i> field is a string such as ``-font'' or ``-bg'',
which is compared with the values in <i>argv</i> (if <i>argvName</i> is
NULL it means this is a grouped entry;  see <ref refid="grouped-entries">GROUPED ENTRIES</ref> below).  The
<i>dbName</i> and <i>dbClass</i> fields are used to look up a value
for this option in the option database.  The <i>defValue</i> field
specifies a default value for this configuration option if no
value is specified in either <i>argv</i> or the option database.
<i>Offset</i> indicates where in <i>widgRec</i> to store information
about this option, and <i>specFlags</i> contains additional information
to control the processing of this configuration option (see <ref refid="flags">FLAGS</ref>
below).
The last field, <i>customPtr</i>, is only used if <i>type</i> is
<b>TK_CONFIG_CUSTOM</b>;  see <ref refid="custom-option-types">CUSTOM OPTION TYPES</ref> below.
</p>
<p><fun>Tk_ConfigureWidget</fun> first processes <i>argv</i> to see which
(if any) configuration options are specified there.  <i>Argv</i>
must contain an even number of fields;  the first of each pair
of fields must match the <i>argvName</i> of some entry in <i>specs</i>
(unique abbreviations are acceptable),
and the second field of the pair contains the value for that
configuration option.  If there are entries in <i>spec</i> for which
there were no matching entries in <i>argv</i>,
<fun>Tk_ConfigureWidget</fun> uses the <i>dbName</i> and <i>dbClass</i>
fields of the <i>specs</i> entry to probe the option database;  if
a value is found, then it is used as the value for the option.
Finally, if no entry is found in the option database, the
<i>defValue</i> field of the <i>specs</i> entry is used as the
value for the configuration option.  If the <i>defValue</i> is
NULL, or if the <b>TK_CONFIG_DONT_SET_DEFAULT</b> bit is set in
<i>flags</i>, then there is no default value and this <i>specs</i> entry
will be ignored if no value is specified in <i>argv</i> or the
option database.
</p>
<p>Once a string value has been determined for a configuration option,
<fun>Tk_ConfigureWidget</fun> translates the string value into a more useful
form, such as a color if <i>type</i> is <b>TK_CONFIG_COLOR</b> or an integer
if <i>type</i> is <b>TK_CONFIG_INT</b>.  This value is then stored in the
record pointed to by <i>widgRec</i>.  This record is assumed to
contain information relevant to the manager of the widget;  its exact
type is unknown to <fun>Tk_ConfigureWidget</fun>.  The <i>offset</i> field
of each <i>specs</i> entry indicates where in <i>widgRec</i> to store
the information about this configuration option.  You should use the
<fun>Tk_Offset</fun> macro to generate <i>offset</i> values (see below for
a description of <fun>Tk_Offset</fun>).  The location indicated by
<i>widgRec</i> and <i>offset</i> will be referred to as the ``target''
in the descriptions below.
</p>
<p>The <i>type</i> field of each entry in <i>specs</i> determines what
to do with the string value of that configuration option.  The
legal values for <i>type</i>, and the corresponding actions, are:
</p>
<dl>
<dle>
<dt><b>TK_CONFIG_ACTIVE_CURSOR</b></dt>
<dd>The value
must be an ASCII string identifying a cursor in a form
suitable for passing to <fun>Tk_GetCursor</fun>. 
The value is converted to a <b>Tk_Cursor</b> by calling
<fun>Tk_GetCursor</fun> and the result is stored in the target.
In addition, the resulting cursor is made the active cursor
for <i>tkwin</i> by calling <b>XDefineCursor</b>.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target and <i>tkwin</i>'s
active cursor will be set to <b>None</b>.
If the previous value of the target
wasn't <b>None</b>, then it is freed by passing it to <fun>Tk_FreeCursor</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_ANCHOR</b></dt>
<dd>The value must be an ASCII string identifying an anchor point in one of the ways
accepted by <fun>Tk_GetAnchor</fun>.
The string is converted to a <b>Tk_Anchor</b> by calling
<fun>Tk_GetAnchor</fun> and the result is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_BITMAP</b></dt>
<dd>The value must be an ASCII string identifying a bitmap in a form
suitable for passing to <fun>Tk_GetBitmap</fun>.  The value is converted
to a <b>Pixmap</b> by calling <fun>Tk_GetBitmap</fun> and the result
is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target is set to <b>None</b>.
If the previous value of the target
wasn't <b>None</b>, then it is freed by passing it to <fun>Tk_FreeBitmap</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_BOOLEAN</b></dt>
<dd>The value must be an ASCII string specifying a boolean value.  Any
of the values ``true'', ``yes'', ``on'', or ``1'',
or an abbreviation of one of these values, means true;
any of the values ``false'', ``no'', ``off'', or ``0'', or an abbreviation of
one of these values, means false.
The target is expected to be an integer;  for true values it will
be set to 1 and for false values it will be set to 0.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_BORDER</b></dt>
<dd>The value must be an ASCII string identifying a border color in a form
suitable for passing to <fun>Tk_Get3DBorder</fun>.  The value is converted
to a (<b>Tk_3DBorder *</b>) by calling <fun>Tk_Get3DBorder</fun> and the result
is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target
wasn't NULL, then it is freed by passing it to <fun>Tk_Free3DBorder</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_CAP_STYLE</b></dt>
<dd>The value must be
an ASCII string identifying a cap style in one of the ways
accepted by <fun>Tk_GetCapStyle</fun>.
The string is converted to an integer value corresponding
to the cap style by calling
<fun>Tk_GetCapStyle</fun> and the result is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_COLOR</b></dt>
<dd>The value must be an ASCII string identifying a color in a form
suitable for passing to <fun>Tk_GetColor</fun>.  The value is converted
to an (<b>XColor *</b>) by calling <fun>Tk_GetColor</fun> and the result
is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target will be set to <b>None</b>.
If the previous value of the target
wasn't NULL, then it is freed by passing it to <fun>Tk_FreeColor</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_CURSOR</b></dt>
<dd>This option is identical to <b>TK_CONFIG_ACTIVE_CURSOR</b> except
that the new cursor is not made the active one for <i>tkwin</i>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_CUSTOM</b></dt>
<dd>This option allows applications to define new option types.
The <i>customPtr</i> field of the entry points to a structure
defining the new option type.
See the section <ref refid="custom-option-types">CUSTOM OPTION TYPES</ref> below for details.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_DOUBLE</b></dt>
<dd>The value must be an ASCII floating-point number in
the format accepted by <b>strtol</b>.  The string is converted
to a <b cat="mathfunc">double</b> value, and the value is stored in the
target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_END</b></dt>
<dd>Marks the end of the table.  The last entry in <i>specs</i>
must have this type;  all of its other fields are ignored and it
will never match any arguments.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_FONT</b></dt>
<dd>The value must be an ASCII string identifying a font in a form
suitable for passing to <fun>Tk_GetFont</fun>.  The value is converted
to a <type>Tk_Font</type> by calling <fun>Tk_GetFont</fun> and the result
is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target
wasn't NULL, then it is freed by passing it to <fun>Tk_FreeFont</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_INT</b></dt>
<dd>The value must be an ASCII integer string
in the format accepted by <b>strtol</b> (e.g. ``0''
and ``0x'' prefixes may be used to specify octal or hexadecimal
numbers, respectively).  The string is converted to an integer
value and the integer is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_JOIN_STYLE</b></dt>
<dd>The value must be
an ASCII string identifying a join style in one of the ways
accepted by <fun>Tk_GetJoinStyle</fun>.
The string is converted to an integer value corresponding
to the join style by calling
<fun>Tk_GetJoinStyle</fun> and the result is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_JUSTIFY</b></dt>
<dd>The value must be
an ASCII string identifying a justification method in one of the
ways accepted by <fun>Tk_GetJustify</fun>.
The string is converted to a <b>Tk_Justify</b> by calling
<fun>Tk_GetJustify</fun> and the result is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_MM</b></dt>
<dd>The value must specify a screen distance in one of the forms acceptable
to <fun>Tk_GetScreenMM</fun>.
The string is converted to double-precision floating-point distance
in millimeters and the value is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_PIXELS</b></dt>
<dd>The value must specify screen units in one of the forms acceptable
to <fun>Tk_GetPixels</fun>.
The string is converted to an integer distance in pixels and the
value is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_RELIEF</b></dt>
<dd>The value must be an ASCII string identifying a relief in a form
suitable for passing to <fun>Tk_GetRelief</fun>.  The value is converted
to an integer relief value by calling <fun>Tk_GetRelief</fun> and the result
is stored in the target.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_STRING</b></dt>
<dd>A copy
of the value is made by allocating memory space with
<fun>Tcl_Alloc</fun> and copying the value into the dynamically-allocated
space.  A pointer to the new string is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> then the value
may be an empty string, in which case the target will be set to NULL.
If the previous value of the target wasn't NULL, then it is
freed by passing it to <fun>Tcl_Free</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_SYNONYM</b></dt>
<dd>This <i>type</i> value identifies special entries in <i>specs</i> that
are synonyms for other entries.  If an <i>argv</i> value matches the
<i>argvName</i> of a <b>TK_CONFIG_SYNONYM</b> entry, the entry isn't used
directly. Instead, <fun>Tk_ConfigureWidget</fun> searches <i>specs</i>
for another entry whose <i>argvName</i> is the same as the <i>dbName</i>
field in the <b>TK_CONFIG_SYNONYM</b> entry;  this new entry is used just
as if its <i>argvName</i> had matched the <i>argv</i> value.  The
synonym mechanism allows multiple <i>argv</i> values to be used for
a single configuration option, such as ``-background'' and ``-bg''.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_UID</b></dt>
<dd>The value is translated to a <fun>Tk_Uid</fun>
(by passing it to <fun>Tk_GetUid</fun>).  The resulting value
is stored in the target.
If <b>TK_CONFIG_NULL_OK</b> is specified in <i>specFlags</i> and the value
is an empty string then the target will be set to NULL.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_WINDOW</b></dt>
<dd>The value must be a window path name.  It is translated to a
<type>Tk_Window</type> token and the token is stored in the target.

</dd>
</dle>
</dl>
</section>
<section id="grouped-entries">
<title>GROUPED ENTRIES</title>
<p>In some cases it is useful to generate multiple resources from
a single configuration value.  For example, a color name might
be used both to generate the background color for a widget (using
<b>TK_CONFIG_COLOR</b>) and to generate a 3-D border to draw around the
widget (using <b>TK_CONFIG_BORDER</b>).  In cases like this it is possible
to specify that several consecutive entries in <i>specs</i> are to
be treated as a group.  The first entry is used to determine a value
(using its <i>argvName</i>, <i>dbName</i>,
<i>dbClass</i>, and <i>defValue</i> fields).  The value will be processed
several times (one for each entry in the group), generating multiple
different resources and modifying multiple targets within <i>widgRec</i>.
Each of the entries after the first must have a NULL value in its
<i>argvName</i> field;  this indicates that the entry is to be grouped
with the entry that precedes it.  Only the <i>type</i> and <i>offset</i>
fields are used from these follow-on entries.

</p>
</section>
<section id="flags">
<title>FLAGS</title>
<p>The <i>flags</i> argument passed to <fun>Tk_ConfigureWidget</fun> is used
in conjunction with the <i>specFlags</i> fields in the entries of <i>specs</i>
to provide additional control over the processing of configuration
options.  These values are used in three different ways as
described below.
</p>
<p>First, if the <i>flags</i> argument to <fun>Tk_ConfigureWidget</fun> has
the <b>TK_CONFIG_ARGV_ONLY</b> bit set (i.e., <i>flags</i> | <b>TK_CONFIG_ARGV_ONLY</b> != 0),
then the option database and
<i>defValue</i> fields are not used.  In this case, if an entry in
<i>specs</i> doesn't match a field in <i>argv</i> then nothing happens:
the corresponding target isn't modified.  This feature is useful
when the goal is to modify certain configuration options while
leaving others in their current state, such as when a <b>configure</b>
widget command is being processed.
</p>
<p>Second, the <i>specFlags</i> field of an entry in <i>specs</i> may be used
to control the processing of that entry.  Each <i>specFlags</i>
field may consists of an OR-ed combination of the following values:
</p>
<dl>
<dle>
<dt><b>TK_CONFIG_COLOR_ONLY</b></dt>
<dd>If this bit is set then the entry will only be considered if the
display for <i>tkwin</i> has more than one bit plane.  If the display
is monochromatic then this <i>specs</i> entry will be ignored.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_MONO_ONLY</b></dt>
<dd>If this bit is set then the entry will only be considered if the
display for <i>tkwin</i> has exactly one bit plane.  If the display
is not monochromatic then this <i>specs</i> entry will be ignored.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_NULL_OK</b></dt>
<dd>This bit is only relevant for some types of entries (see the
descriptions of the various entry types above).
If this bit is set, it indicates that an empty string value
for the field is acceptable and if it occurs then the
target should be set to NULL or <b>None</b>, depending
on the type of the target.
This flag is typically used to allow a
feature to be turned off entirely, e.g. set a cursor value to
<b>None</b> so that a window simply inherits its parent's cursor.
If this bit isn't set then empty strings are processed as strings,
which generally results in an error.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_DONT_SET_DEFAULT</b></dt>
<dd>If this bit is one, it means that the <i>defValue</i> field of the
entry should only be used for returning the default value in
<fun>Tk_ConfigureInfo</fun>.
In calls to <fun>Tk_ConfigureWidget</fun> no default will be supplied
for entries with this flag set;  it is assumed that the
caller has already supplied a default value in the target location.
This flag provides a performance optimization where it is expensive
to process the default string:  the client can compute the default
once, save the value, and provide it before calling
<fun>Tk_ConfigureWidget</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_CONFIG_OPTION_SPECIFIED</b></dt>
<dd>This bit is
<new version="8.5">deprecated. It used to be set and cleared by <fun>Tk_ConfigureWidget</fun>
so that callers could detect what entries were specified in
<i>argv</i>, but it was removed because it was inherently
thread-unsafe. Code that wishes to detect what options were specified
should use <fun>Tk_SetOptions</fun> instead.
</new></dd>
</dle>
</dl>
<p>The <b>TK_CONFIG_MONO_ONLY</b> and <b>TK_CONFIG_COLOR_ONLY</b> flags are typically
used to specify different default values for
monochrome and color displays.  This is done by creating two
entries in <i>specs</i> that are identical except for their
<i>defValue</i> and <i>specFlags</i> fields.  One entry should have
the value <b>TK_CONFIG_MONO_ONLY</b> in its <i>specFlags</i> and the
default value for monochrome displays in its <i>defValue</i>;  the
other entry should have the value <b>TK_CONFIG_COLOR_ONLY</b> in
its <i>specFlags</i> and the appropriate <i>defValue</i> for
color displays.
</p>
<p>Third, it is possible to use <i>flags</i> and <i>specFlags</i>
together to selectively disable some entries.  This feature is
not needed very often.  It is useful in cases where several
similar kinds of widgets are implemented in one place.  It allows
a single <i>specs</i> table to be created with all the configuration
options for all the widget types.  When processing a particular
widget type, only entries relevant to that type will be used.  This
effect is achieved by setting the high-order bits (those in positions
equal to or greater than <b>TK_CONFIG_USER_BIT</b>) in <i>specFlags</i>
values or in <i>flags</i>.  In order for a particular entry in
<i>specs</i> to be used, its high-order bits must match exactly
the high-order bits of the <i>flags</i> value passed to
<fun>Tk_ConfigureWidget</fun>.  If a <i>specs</i> table is being used
for N different widget types, then N of the high-order bits will
be used.  Each <i>specs</i> entry will have one of more of those
bits set in its <i>specFlags</i> field to indicate the widget types
for which this entry is valid.  When calling <fun>Tk_ConfigureWidget</fun>,
<i>flags</i> will have a single one of these bits set to select the
entries for the desired widget type.  For a working example of
this feature, see the code in tkButton.c.

</p>
</section>
<section>
<title>TK_OFFSET</title>
<p>The <fun>Tk_Offset</fun> macro is provided as a safe way of generating
the <i>offset</i> values for entries in Tk_ConfigSpec structures.
It takes two arguments:  the name of a type of record, and the
name of a field in that record.  It returns the byte offset of
the named field in records of the given type.

</p>
</section>
<section>
<title>TK_CONFIGUREINFO</title>
<p>The <fun>Tk_ConfigureInfo</fun> procedure may be used to obtain
information about one or all of the options for a given widget.
Given a token for a window (<i>tkwin</i>), a table describing the
configuration options for a class of widgets (<i>specs</i>), a
pointer to a widget record containing the current information for
a widget (<i>widgRec</i>), and a NULL <i>argvName</i> argument,
<fun>Tk_ConfigureInfo</fun> generates a string describing all of the
configuration options for the window.  The string is placed
in <i>interp-&gt;result</i>.  Under normal circumstances
it returns <b>TCL_OK</b>;  if an error occurs then it returns <b>TCL_ERROR</b>
and <i>interp-&gt;result</i> contains an error message.
</p>
<p>If <i>argvName</i> is NULL, then the value left in
<i>interp-&gt;result</i> by <fun>Tk_ConfigureInfo</fun>
consists of a list of one or more entries, each of which describes
one configuration option (i.e. one entry in <i>specs</i>).  Each
entry in the list will contain either two or five values.  If the
corresponding entry in <i>specs</i> has type <b>TK_CONFIG_SYNONYM</b>, then
the list will contain two values:  the <i>argvName</i> for the entry
and the <i>dbName</i> (synonym name).  Otherwise the list will contain
five values:  <i>argvName</i>, <i>dbName</i>, <i>dbClass</i>, <i>defValue</i>,
and current value.  The current value is computed from the appropriate
field of <i>widgRec</i> by calling procedures like <fun>Tk_NameOfColor</fun>.
</p>
<p>If the <i>argvName</i> argument to <fun>Tk_ConfigureInfo</fun> is non-NULL,
then it indicates a single option, and information is returned only
for that option.  The string placed in <i>interp-&gt;result</i> will be
a list containing two or five values as described above;  this will
be identical to the corresponding sublist that would have been returned
if <i>argvName</i> had been NULL.
</p>
<p>The <i>flags</i> argument to <fun>Tk_ConfigureInfo</fun> is used to restrict
the <i>specs</i> entries to consider, just as for <fun>Tk_ConfigureWidget</fun>.

</p>
</section>
<section>
<title>TK_CONFIGUREVALUE</title>
<p><fun>Tk_ConfigureValue</fun> takes arguments similar to <fun>Tk_ConfigureInfo</fun>;
instead of returning a list of values, it just returns the current value
of the option given by <i>argvName</i> (<i>argvName</i> must not be NULL).
The value is returned in <i>interp-&gt;result</i> and <b>TCL_OK</b> is
normally returned as the procedure's result.
If an error occurs in <fun>Tk_ConfigureValue</fun> (e.g., <i>argvName</i> is
not a valid option name), <b>TCL_ERROR</b> is returned and an error message
is left in <i>interp-&gt;result</i>.
This procedure is typically called to implement <b>cget</b> widget
commands.

</p>
</section>
<section>
<title>TK_FREEOPTIONS</title>
<p>The <fun>Tk_FreeOptions</fun> procedure may be invoked during widget cleanup
to release all of the resources associated with configuration options.
It scans through <i>specs</i> and for each entry corresponding to a
resource that must be explicitly freed (e.g. those with
type <b>TK_CONFIG_COLOR</b>), it frees the resource in the widget record.
If the field in the widget record doesn't refer to a resource (e.g.
it contains a null pointer) then no resource is freed for that
entry.
After freeing a resource, <fun>Tk_FreeOptions</fun> sets the
corresponding field of the widget record to null.

</p>
</section>
<section id="custom-option-types">
<title>CUSTOM OPTION TYPES</title>
<p>Applications can extend the built-in configuration types with additional
configuration types by writing procedures to parse and print options
of the a type and creating a structure pointing to those procedures:
</p>
<syntax cat="type" name="Tk_OptionPrintProc" scope="global">
typedef struct Tk_CustomOption {
    Tk_OptionParseProc *<i>parseProc</i>;
    Tk_OptionPrintProc *<i>printProc</i>;
    ClientData <i>clientData</i>;
} Tk_CustomOption;

typedef int Tk_OptionParseProc(
    ClientData <i>clientData</i>,
    Tcl_Interp *<i>interp</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>value</i>,
    char *<i>widgRec</i>,
    int <i>offset</i>);

typedef char *Tk_OptionPrintProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>,
    char *<i>widgRec</i>,
    int <i>offset</i>,
    Tcl_FreeProc **<i>freeProcPtr</i>);
</syntax>
<p>The Tk_CustomOption structure contains three fields, which are pointers
to the two procedures and a <i>clientData</i> value to be passed to those
procedures when they are invoked.  The <i>clientData</i> value typically
points to a structure containing information that is needed by the
procedures when they are parsing and printing options.
</p>
<p>The <i>parseProc</i> procedure is invoked by
<fun>Tk_ConfigureWidget</fun> to parse a string and store the resulting
value in the widget record.
The <i>clientData</i> argument is a copy of the <i>clientData</i>
field in the Tk_CustomOption structure.
The <i>interp</i> argument points to a Tcl interpreter used for
error reporting.  <i>Tkwin</i> is a copy of the <i>tkwin</i> argument
to <fun>Tk_ConfigureWidget</fun>.  The <i>value</i> argument is a string
describing the value for the option;  it could have been specified
explicitly in the call to <fun>Tk_ConfigureWidget</fun> or it could
come from the option database or a default.
<i>Value</i> will never be a null pointer but it may point to
an empty string.
<i>RecordPtr</i> is the same as the <i>widgRec</i> argument to
<fun>Tk_ConfigureWidget</fun>;  it points to the start of the widget
record to modify.
The last argument, <i>offset</i>, gives the offset in bytes from the start
of the widget record to the location where the option value is to
be placed.  The procedure should translate the string to whatever
form is appropriate for the option and store the value in the widget
record.  It should normally return <b>TCL_OK</b>, but if an error occurs
in translating the string to a value then it should return <b>TCL_ERROR</b>
and store an error message in <i>interp-&gt;result</i>.
</p>
<p>The <i>printProc</i> procedure is called
by <fun>Tk_ConfigureInfo</fun> to produce a string value describing an
existing option.
Its <i>clientData</i>, <i>tkwin</i>, <i>widgRec</i>, and <i>offset</i>
arguments all have the same meaning as for Tk_OptionParseProc
procedures.
The <i>printProc</i> procedure should examine the option whose value
is stored at <i>offset</i> in <i>widgRec</i>, produce a string describing
that option, and return a pointer to the string.
If the string is stored in dynamically-allocated memory, then
the procedure must set <i>*freeProcPtr</i> to the address of
a procedure to call to free the string's memory;  <fun>Tk_ConfigureInfo</fun>
will call this procedure when it is finished with the string.
If the result string is stored in static memory then <i>printProc</i>
need not do anything with the <i>freeProcPtr</i> argument.
</p>
<p>Once <i>parseProc</i> and <i>printProc</i> have been defined and a
Tk_CustomOption structure has been created for them, options of this
new type may be manipulated with Tk_ConfigSpec entries whose <i>type</i>
fields are <b>TK_CONFIG_CUSTOM</b> and whose <i>customPtr</i> fields point
to the Tk_CustomOption structure.

</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Although the explanation of <fun>Tk_ConfigureWidget</fun> is fairly
complicated, its actual use is pretty straightforward.
The easiest way to get started is to copy the code
from an existing widget.
The library implementation of frames
(tkFrame.c) has a simple configuration table, and the library
implementation of buttons (tkButton.c) has a much more complex
table that uses many of the fancy <i>specFlags</i> mechanisms.

</p>
</section>
<seealso>
<ref>Tk_SetOptions(3)</ref>
</seealso>
<keywords>
<keyword>anchor</keyword>
<keyword>bitmap</keyword>
<keyword>boolean</keyword>
<keyword>border</keyword>
<keyword>cap style</keyword>
<keyword>color</keyword>
<keyword>configuration options</keyword>
<keyword>cursor</keyword>
<keyword>custom</keyword>
<keyword>double</keyword>
<keyword>font</keyword>
<keyword>integer</keyword>
<keyword>join style</keyword>
<keyword>justify</keyword>
<keyword>millimeters</keyword>
<keyword>pixels</keyword>
<keyword>relief</keyword>
<keyword>synonym</keyword>
<keyword>uid</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_ConfigureWindow" id="ConfigWind">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ConfigWind.3,v 1.2 1998/09/14 18:22:46 stanton Exp $
 -->
<?TROFF.TH title="Tk_ConfigureWindow" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ConfigureWindow</name>
<name>Tk_MoveWindow</name>
<name>Tk_ResizeWindow</name>
<name>Tk_MoveResizeWindow</name>
<name>Tk_SetWindowBorderWidth</name>
<name>Tk_ChangeWindowAttributes</name>
<name>Tk_SetWindowBackground</name>
<name>Tk_SetWindowBackgroundPixmap</name>
<name>Tk_SetWindowBorder</name>
<name>Tk_SetWindowBorderPixmap</name>
<name>Tk_SetWindowColormap</name>
<name>Tk_DefineCursor</name>
<name>Tk_UndefineCursor</name>
<desc>change window configuration or attributes</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_ConfigureWindow</fun>(<m>tkwin</m>, <m>valueMask</m>, <m>valuePtr</m>)

<fun>Tk_MoveWindow</fun>(<m>tkwin</m>, <m>x</m>, <m>y</m>)

<fun>Tk_ResizeWindow</fun>(<m>tkwin</m>, <m>width</m>, <m>height</m>)

<fun>Tk_MoveResizeWindow</fun>(<m>tkwin</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>)

<fun>Tk_SetWindowBorderWidth</fun>(<m>tkwin</m>, <m>borderWidth</m>)

<fun>Tk_ChangeWindowAttributes</fun>(<m>tkwin</m>, <m>valueMask</m>, <m>attsPtr</m>)

<fun>Tk_SetWindowBackground</fun>(<m>tkwin</m>, <m>pixel</m>)

<fun>Tk_SetWindowBackgroundPixmap</fun>(<m>tkwin</m>, <m>pixmap</m>)

<fun>Tk_SetWindowBorder</fun>(<m>tkwin</m>, <m>pixel</m>)

<fun>Tk_SetWindowBorderPixmap</fun>(<m>tkwin</m>, <m>pixmap</m>)

<fun>Tk_SetWindowColormap</fun>(<m>tkwin</m>, <m>colormap</m>)

<fun>Tk_DefineCursor</fun>(<m>tkwin</m>, <m>cursor</m>)

<fun>Tk_UndefineCursor</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>unsigned int</argtype>
<name>valueMask</name>
<argmode>in</argmode>
<desc>OR-ed mask of values like <b>CWX</b> or <b>CWBorderPixel</b>,
indicating which fields of <i>*valuePtr</i> or <i>*attsPtr</i> to use.
</desc>
</argdef>
<argdef>
<argtype>XWindowChanges</argtype>
<name name="valuePtr">*valuePtr</name>
<argmode>in</argmode>
<desc>Points to a structure containing new values for the configuration
parameters selected by <i>valueMask</i>.  Fields not selected
by <i>valueMask</i> are ignored.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>New x-coordinate for <i>tkwin</i>'s top left pixel (including
border, if any) within tkwin's parent.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>New y-coordinate for <i>tkwin</i>'s top left pixel (including
border, if any) within tkwin's parent.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>New width for <i>tkwin</i> (interior, not including border).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>New height for <i>tkwin</i> (interior, not including border).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>borderWidth</name>
<argmode>in</argmode>
<desc>New width for <i>tkwin</i>'s border.
</desc>
</argdef>
<argdef>
<argtype>XSetWindowAttributes</argtype>
<name name="attsPtr">*attsPtr</name>
<argmode>in</argmode>
<desc>Points to a structure containing new values for the attributes
given by the <i>valueMask</i> argument.  Attributes not selected
by <i>valueMask</i> are ignored.
</desc>
</argdef>
<argdef>
<argtype>unsigned long</argtype>
<name>pixel</name>
<argmode>in</argmode>
<desc>New background or border color for window.
</desc>
</argdef>
<argdef>
<argtype>Pixmap</argtype>
<name>pixmap</name>
<argmode>in</argmode>
<desc>New pixmap to use for background or border of <i>tkwin</i>.  WARNING:
cannot necessarily be deleted immediately, as for Xlib calls.  See
note below.
</desc>
</argdef>
<argdef>
<argtype>Colormap</argtype>
<name>colormap</name>
<argmode>in</argmode>
<desc>New colormap to use for <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Cursor</argtype>
<name>cursor</name>
<argmode>in</argmode>
<desc>New cursor to use for <i>tkwin</i>.  If <b>None</b> is specified, then
<i>tkwin</i> will not have its own cursor;  it will use the cursor
of its parent.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are analogous to the X library procedures
with similar names, such as <b>XConfigureWindow</b>.  Each
one of the above procedures calls the corresponding X procedure
and also saves the configuration information in Tk's local
structure for the window.  This allows the information to
be retrieved quickly by the application (using macros such
as <fun>Tk_X</fun> and <fun>Tk_Height</fun>) without having to contact
the X server.  In addition, if no X window has actually been
created for <i>tkwin</i> yet, these procedures do not issue
X operations or cause event handlers to be invoked;  they save
the information in Tk's local
structure for the window;  when the window is created later,
the saved information will be used to configure the window.
</p>
<p>See the X library documentation for details on what these
procedures do and how they use their arguments.
</p>
<p>In the procedures <fun>Tk_ConfigureWindow</fun>, <fun>Tk_MoveWindow</fun>,
<fun>Tk_ResizeWindow</fun>, <fun>Tk_MoveResizeWindow</fun>, and
<fun>Tk_SetWindowBorderWidth</fun>,
if <i>tkwin</i> is an internal window then event handlers interested
in configure events are invoked immediately, before the procedure
returns.  If <i>tkwin</i> is a top-level window
then the event handlers will be invoked later, after X has seen
the request and returned an event for it.
</p>
<p>Applications using Tk should never call procedures like
<b>XConfigureWindow</b> directly;  they should always use the
corresponding Tk procedures.
</p>
<p>The size and location of a window should only be modified by the
appropriate geometry manager for that window and never by a window
itself (but see <fun>Tk_MoveToplevelWindow</fun> for moving a top-level
window).
</p>
<p>You may not use <fun>Tk_ConfigureWindow</fun> to change the
stacking order of a window (<i>valueMask</i> may not contain the
<b>CWSibling</b> or <b>CWStackMode</b> bits).
To change the stacking order, use the procedure <fun>Tk_RestackWindow</fun>.
</p>
<p>The procedure <fun>Tk_SetWindowColormap</fun> will automatically add
<i>tkwin</i> to the <b>TK_COLORMAP_WINDOWS</b> property of its
nearest top-level ancestor if the new colormap is different from
that of <i>tkwin</i>'s parent and <i>tkwin</i> isn't already in
the <b>TK_COLORMAP_WINDOWS</b> property.

</p>
</section>
<section>
<title>BUGS</title>
<p><fun>Tk_SetWindowBackgroundPixmap</fun> and <fun>Tk_SetWindowBorderPixmap</fun>
differ slightly from their Xlib counterparts in that the <i>pixmap</i>
argument may not necessarily be deleted immediately after calling
one of these procedures.  This is because <i>tkwin</i>'s window
may not exist yet at the time of the call, in which case <i>pixmap</i>
is merely saved and used later when <i>tkwin</i>'s window is actually
created.  If you wish to delete <i>pixmap</i>, then call
<fun>Tk_MakeWindowExist</fun> first to be sure that <i>tkwin</i>'s window exists
and <i>pixmap</i> has been passed to the X server.
</p>
<p>A similar problem occurs for the <i>cursor</i> argument passed to
<fun>Tk_DefineCursor</fun>.  The solution is the same as for pixmaps above:
call <fun>Tk_MakeWindowExist</fun> before freeing the cursor.

</p>
</section>
<seealso>
<ref>Tk_MoveToplevelWindow</ref>
<ref>Tk_RestackWindow</ref>
</seealso>
<keywords>
<keyword>attributes</keyword>
<keyword>border</keyword>
<keyword>color</keyword>
<keyword>configure</keyword>
<keyword>height</keyword>
<keyword>pixel</keyword>
<keyword>pixmap</keyword>
<keyword>width</keyword>
<keyword>window</keyword>
<keyword>x</keyword>
<keyword>y</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="console" title="console" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: console.n,v 1.7 2004/10/28 10:22:51 dkf Exp $
 -->
<?TROFF.TH title="console" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>console</name>
<desc>Control the console on systems without a real console</desc>
</namesection>
<synopsis>
<syntax>
<b>console</b> <m>subcommand</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The console window is a replacement for a real console to allow input
and output on the standard I/O channels on platforms that do not have
a real console.  It is implemented as a separate interpreter with the
Tk toolkit loaded, and control over this interpreter is given through
the <b>console</b> command.  The behaviour of the console window is
defined mainly through the contents of the <i>console.tcl</i> file in
the Tk library.
</p>
<dl>
<dle>
<dt><b>console eval</b> <m>script</m></dt>
<dd>Evaluate the <i>script</i> argument as a Tcl script in the console
interpreter.  The normal interpreter is accessed through the
<b>consoleinterp</b> command in the console interpreter.
</dd>
</dle>
<dle>
<dt><b>console hide</b></dt>
<dd>Hide the console window from view.  Precisely equivalent to
withdrawing the <b>.</b> window in the console interpreter.
</dd>
</dle>
<dle>
<dt><b>console show</b></dt>
<dd>Display the console window.  Precisely equivalent to deiconifying the
<b>.</b> window in the console interpreter.
</dd>
</dle>
<dle>
<dt><b>console title</b> ?<m>string</m>?</dt>
<dd>Query or modify the title of the console window.  If <i>string</i> is
not specified, queries the title of the console window, and sets the
title of the console window to <i>string</i> otherwise.  Precisely
equivalent to using the <b>wm title</b> command in the console
interpreter.
</dd>
</dle>
</dl>
</section>
<section>
<title>ACCESS TO THE MAIN INTERPRETER</title>
<p>The <b>consoleinterp</b> command in the console interpreter allows
scripts to be evaluated in the main interpreter.  It supports two
subcommands: <b cat="AMBIGUOUS ambiguous cmd">eval</b> and <b>record</b>.
</p>
<dl>
<dle>
<dt><b>consoleinterp eval</b> <m>script</m></dt>
<dd>Evaluates <i>script</i> as a Tcl script at the global level in the main
interpreter.
</dd>
</dle>
<dle>
<dt><b>consoleinterp record</b> <m>script</m></dt>
<dd>Records and evaluates <i>script</i> as a Tcl script at the global level
in the main interpreter as if <i>script</i> had been typed in at the
console.
</dd>
</dle>
</dl>
</section>
<section>
<title>ADDITIONAL TRAP CALLS</title>
<p>There are several additional commands in the console interpreter that
are called in response to activity in the main interpreter.
<i>These are documented here for completeness only; they form part of
the internal implementation of the console and are likely to change or
be modified without warning.</i>
</p>
<p>Output to the console from the main interpreter via the stdout and
stderr channels is handled by invoking the <b>tk::ConsoleOutput</b>
command in the console interpreter with two arguments.  The first
argument is the name of the channel being written to, and the second
argument is the string being written to the channel (after encoding
and end-of-line translation processing has been performed.)
</p>
<p>When the <b>.</b> window of the main interpreter is destroyed, the
<b>tk::ConsoleExit</b> command in the console interpreter is called
(assuming the console interpreter has not already been deleted itself,
that is.)
</p>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>The default script creates a console window (implemented using a text
widget) that has the following behaviour:
</p>
<ol>
<li>Pressing the tab key inserts a TAB character (as defined by the Tcl
\t escape.)
</li>
<li>Pressing the return key causes the current line (if complete by the
rules of <b>info complete</b>) to be passed to the main interpreter for
evaluation.
</li>
<li>Pressing the delete key deletes the selected text (if any text is
selected) or the character to the right of the cursor (if not at the
end of the line.)
</li>
<li>Pressing the backspace key deletes the selected text (if any text is
selected) or the character to the left of the cursor (of not at the
start of the line.)
</li>
<li>Pressing either Control+A or the home key causes the cursor to go to
the start of the line (but after the prompt, if a prompt is present on
the line.)
</li>
<li>Pressing either Control+E or the end key causes the cursor to go to
the end of the line.
</li>
<li>Pressing either Control+P or the up key causes the previous entry in
the command history to be selected.
</li>
<li>Pressing either Control+N or the down key causes the next entry in the
command history to be selected.
</li>
<li>Pressing either Control+B or the left key causes the cursor to move
one character backward as long as the cursor is not at the prompt.
</li>
<li>Pressing either Control+F or the right key causes the cursor to move
one character forward.
</li>
<li>Pressing F9 rebuilds the console window by destroying all its children
and reloading the Tcl script that defined the console's behaviour.
</li>
</ol>
<p>Most other behaviour is the same as a conventional text widget except
for the way that the <i>&lt;&lt;Cut&gt;&gt;</i> event is handled identically to the
<i>&lt;&lt;Copy&gt;&gt;</i> event.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Not all platforms have the <b>console</b> command, so debugging code
often has the following code fragment in it so output produced by
<cmd>puts</cmd> can be seen while during development:
</p>
<example>
catch {<b>console show</b>}
</example>


</section>
<seealso>
<ref>destroy(n)</ref>
<ref>fconfigure(n)</ref>
<ref>history(n)</ref>
<ref>interp(n)</ref>
<ref>puts(n)</ref>
<ref>text(n)</ref>
<ref>wm(n)</ref>
</seealso>
<keywords>
<keyword>console</keyword>
<keyword>interpreter</keyword>
<keyword>window</keyword>
<keyword>interactive</keyword>
<keyword>output channels</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="continue" title="continue">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: continue.n,v 1.7 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="continue" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>continue</name>
<desc>Skip to the next iteration of a loop</desc>
</namesection>
<synopsis>
<syntax>
<cmd>continue</cmd>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is typically invoked inside the body of a looping command
such as <cmd>for</cmd> or <cmd>foreach</cmd> or <cmd>while</cmd>.
It returns a <b>TCL_CONTINUE</b> code, which causes a continue exception
to occur.
The exception causes the current script to be aborted
out to the innermost containing loop command, which then
continues with the next iteration of the loop.
Catch exceptions are also handled in a few other situations, such
as the <cmd>catch</cmd> command and the outermost scripts of procedure
bodies.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Print a line for each of the integers from 0 to 10 <i>except</i> 5:
</p>
<example>
for {set x 0} {$x&lt;10} {incr x} {
   if {$x == 5} {
      <cmd>continue</cmd>
   }
   puts "x is $x"
}
</example>


</section>
<seealso>
<ref>break(n)</ref>
<ref>for(n)</ref>
<ref>foreach(n)</ref>
<ref>return(n)</ref>
<ref>while(n)</ref>
</seealso>
<keywords>
<keyword>continue</keyword>
<keyword>iteration</keyword>
<keyword>loop</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_CoordsToWindow" id="CoordToWin">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CoordToWin.3,v 1.2 1998/09/14 18:22:46 stanton Exp $
 -->
<?TROFF.TH title="Tk_CoordsToWindow" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CoordsToWindow</name>
<desc>Find window containing a point</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_CoordsToWindow</fun>(<m>rootX</m>, <m>rootY</m>, <m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>rootX</name>
<argmode>in</argmode>
<desc>X-coordinate (in root window coordinates).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>rootY</name>
<argmode>in</argmode>
<desc>Y-coordinate (in root window coordinates).
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window that identifies application.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CoordsToWindow</fun> locates the window that contains a given point.
The point is specified in root coordinates with <i>rootX</i> and
<i>rootY</i> (if a virtual-root window manager is in use then
<i>rootX</i> and <i>rootY</i> are in the coordinate system of the
virtual root window).
The return value from the procedure is a token for the window that
contains the given point.
If the point is not in any window, or if the containing window
is not in the same application as <i>tkwin</i>, then NULL is
returned.
</p>
<p>The containing window is decided using the same rules that determine
which window contains the mouse cursor:  if a parent and a child both
contain the point then the child gets preference, and if two siblings
both contain the point then the highest one in the stacking order
(i.e. the one that's visible on the screen) gets preference.

</p>
</section>
<keywords>
<keyword>containing</keyword>
<keyword>coordinates</keyword>
<keyword>root window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CRegExp" version="8.1" title="Tcl_RegExpMatch">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1998-1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: RegExp.3,v 1.23 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_RegExpMatch" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_RegExpMatch</name>
<name>Tcl_RegExpCompile</name>
<name>Tcl_RegExpExec</name>
<name>Tcl_RegExpRange</name>
<name>Tcl_GetRegExpFromObj</name>
<name>Tcl_RegExpMatchObj</name>
<name>Tcl_RegExpExecObj</name>
<name>Tcl_RegExpGetInfo</name>
<desc>Pattern matching with regular expressions</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_RegExpMatchObj</fun>(<m>interp</m>, <m>textObj</m>, <m>patObj</m>)

int
<fun>Tcl_RegExpMatch</fun>(<m>interp</m>, <m>text</m>, <m>pattern</m>)

Tcl_RegExp
<fun>Tcl_RegExpCompile</fun>(<m>interp</m>, <m>pattern</m>)

int
<fun>Tcl_RegExpExec</fun>(<m>interp</m>, <m>regexp</m>, <m>text</m>, <m>start</m>)

void
<fun>Tcl_RegExpRange</fun>(<m>regexp</m>, <m>index</m>, <m>startPtr</m>, <m>endPtr</m>)

Tcl_RegExp
<fun>Tcl_GetRegExpFromObj</fun>(<m>interp</m>, <m>patObj</m>, <m>cflags</m>)

int
<fun>Tcl_RegExpExecObj</fun>(<m>interp</m>, <m>regexp</m>, <m>textObj</m>, <m>offset</m>, <m>nmatches</m>, <m>eflags</m>)

void
<fun>Tcl_RegExpGetInfo</fun>(<m>regexp</m>, <m>infoPtr</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter to use for error reporting.  The interpreter may be
NULL if no error reporting is desired.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="textObj">*textObj</name>
<argmode>in/out</argmode>
<desc>Refers to the object from which to get the text to search.  The
internal representation of the object may be converted to a form that
can be efficiently searched.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="patObj">*patObj</name>
<argmode>in/out</argmode>
<desc>Refers to the object from which to get a regular expression. The
compiled regular expression is cached in the object.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="text">*text</name>
<argmode>in</argmode>
<desc>Text to search for a match with a regular expression.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>String in the form of a regular expression pattern.
</desc>
</argdef>
<argdef>
<argtype>Tcl_RegExp</argtype>
<name>regexp</name>
<argmode>in</argmode>
<desc>Compiled regular expression.  Must have been returned previously
by <fun>Tcl_GetRegExpFromObj</fun> or <fun>Tcl_RegExpCompile</fun>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="start">*start</name>
<argmode>in</argmode>
<desc>If <i>text</i> is just a portion of some other string, this argument
identifies the beginning of the larger string.
If it isn't the same as <i>text</i>, then no <b>^</b> matches
will be allowed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>index</name>
<argmode>in</argmode>
<desc>Specifies which range is desired:  0 means the range of the entire
match, 1 or greater means the range that matched a parenthesized
sub-expression.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="startPtr">**startPtr</name>
<argmode>out</argmode>
<desc>The address of the first character in the range is stored here, or
NULL if there is no such range.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="endPtr">**endPtr</name>
<argmode>out</argmode>
<desc>The address of the character just after the last one in the range
is stored here, or NULL if there is no such range.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>cflags</name>
<argmode>in</argmode>
<desc>OR-ed combination of compilation flags. See below for more information.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>offset</name>
<argmode>in</argmode>
<desc>The character offset into the text where matching should begin.
The value of the offset has no impact on <b>^</b> matches.  This
behavior is controlled by <i>eflags</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>nmatches</name>
<argmode>in</argmode>
<desc>The number of matching subexpressions that should be remembered for
later use.  If this value is 0, then no subexpression match
information will be computed.  If the value is -1, then
all of the matching subexpressions will be remembered.  Any other
value will be taken as the maximum number of subexpressions to
remember.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>eflags</name>
<argmode>in</argmode>
<desc>OR-ed combination of the values <b>TCL_REG_NOTBOL</b> and <b>TCL_REG_NOTEOL</b>.
See below for more information.
</desc>
</argdef>
<argdef>
<argtype>Tcl_RegExpInfo</argtype>
<name name="infoPtr">*infoPtr</name>
<argmode>out</argmode>
<desc>The address of the location where information about a previous match
should be stored by <fun>Tcl_RegExpGetInfo</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_RegExpMatch</fun> determines whether its <i>pattern</i> argument
matches <i>regexp</i>, where <i>regexp</i> is interpreted
as a regular expression using the rules in the <b>re_syntax</b>
reference page. 
If there is a match then <fun>Tcl_RegExpMatch</fun> returns 1.
If there is no match then <fun>Tcl_RegExpMatch</fun> returns 0.
If an error occurs in the matching process (e.g. <i>pattern</i>
is not a valid regular expression) then <fun>Tcl_RegExpMatch</fun>
returns -1 and leaves an error message in the interpreter result.
<fun>Tcl_RegExpMatchObj</fun> is similar to <fun>Tcl_RegExpMatch</fun> except it
operates on the Tcl objects <i>textObj</i> and <i>patObj</i> instead of
UTF strings. 
<fun>Tcl_RegExpMatchObj</fun> is generally more efficient than
<fun>Tcl_RegExpMatch</fun>, so it is the preferred interface.
</p>
<p><fun>Tcl_RegExpCompile</fun>, <fun>Tcl_RegExpExec</fun>, and <fun>Tcl_RegExpRange</fun>
provide lower-level access to the regular expression pattern matcher.
<fun>Tcl_RegExpCompile</fun> compiles a regular expression string into
the internal form used for efficient pattern matching.
The return value is a token for this compiled form, which can be
used in subsequent calls to <fun>Tcl_RegExpExec</fun> or <fun>Tcl_RegExpRange</fun>.
If an error occurs while compiling the regular expression then
<fun>Tcl_RegExpCompile</fun> returns NULL and leaves an error message
in the interpreter result.
Note:  the return value from <fun>Tcl_RegExpCompile</fun> is only valid
up to the next call to <fun>Tcl_RegExpCompile</fun>;  it is not safe to
retain these values for long periods of time.
</p>
<p><fun>Tcl_RegExpExec</fun> executes the regular expression pattern matcher.
It returns 1 if <i>text</i> contains a range of characters that
match <i>regexp</i>, 0 if no match is found, and
-1 if an error occurs.
In the case of an error, <fun>Tcl_RegExpExec</fun> leaves an error
message in the interpreter result.
When searching a string for multiple matches of a pattern,
it is important to distinguish between the start of the original
string and the start of the current search.
For example, when searching for the second occurrence of a
match, the <i>text</i> argument might point to the character
just after the first match;  however, it is important for the
pattern matcher to know that this is not the start of the entire string,
so that it doesn't allow <b>^</b> atoms in the pattern to match.
The <i>start</i> argument provides this information by pointing
to the start of the overall string containing <i>text</i>.
<i>Start</i> will be less than or equal to <i>text</i>;  if it
is less than <i>text</i> then no <b>^</b> matches will be allowed.
</p>
<p><fun>Tcl_RegExpRange</fun> may be invoked after <fun>Tcl_RegExpExec</fun>
returns;  it provides detailed information about what ranges of
the string matched what parts of the pattern.
<fun>Tcl_RegExpRange</fun> returns a pair of pointers in <i>*startPtr</i>
and <i>*endPtr</i> that identify a range of characters in
the source string for the most recent call to <fun>Tcl_RegExpExec</fun>.
<i>Index</i> indicates which of several ranges is desired:
if <i>index</i> is 0, information is returned about the overall range
of characters that matched the entire pattern;  otherwise,
information is returned about the range of characters that matched the
<i>index</i>'th parenthesized subexpression within the pattern.
If there is no range corresponding to <i>index</i> then NULL
is stored in <i>*startPtr</i> and <i>*endPtr</i>.
</p>
<p><fun>Tcl_GetRegExpFromObj</fun>, <fun>Tcl_RegExpExecObj</fun>, and
<fun>Tcl_RegExpGetInfo</fun> are object interfaces that provide the most
direct control of Henry Spencer's regular expression library.  For
users that need to modify compilation and execution options directly,
it is recommended that you use these interfaces instead of calling the
internal regexp functions.  These interfaces handle the details of UTF
to Unicode translations as well as providing improved performance
through caching in the pattern and string objects.
</p>
<p><fun>Tcl_GetRegExpFromObj</fun> attempts to return a compiled regular
expression from the <i>patObj</i>.  If the object does not already
contain a compiled regular expression it will attempt to create one
from the string in the object and assign it to the internal
representation of the <i>patObj</i>.  The return value of this function
is of type <type>Tcl_RegExp</type>.  The return value is a token for this
compiled form, which can be used in subsequent calls to
<fun>Tcl_RegExpExecObj</fun> or <fun>Tcl_RegExpGetInfo</fun>.  If an error
occurs while compiling the regular expression then
<fun>Tcl_GetRegExpFromObj</fun> returns NULL and leaves an error message in
the interpreter result.  The regular expression token can be used as
long as the internal representation of <i>patObj</i> refers to the
compiled form.  The <i>eflags</i> argument is a bit-wise OR of
zero or more of the following flags that control the compilation of
<i>patObj</i>:
</p>
<dl>
<dle>
<dt><b>TCL_REG_ADVANCED</b></dt>
<dd>Compile advanced regular expressions (`AREs').  This mode corresponds to
the normal regular expression syntax accepted by the Tcl <cmd>regexp</cmd> and
<cmd>regsub</cmd> commands.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_EXTENDED</b></dt>
<dd>Compile extended regular expressions (`EREs').  This mode corresponds
to the regular expression syntax recognized by Tcl 8.0 and earlier
versions. 
</dd>
</dle>
<dle>
<dt><b>TCL_REG_BASIC</b></dt>
<dd>Compile basic regular expressions (`BREs').  This mode corresponds
to the regular expression syntax recognized by common Unix utilities
like <b>sed</b> and <b>grep</b>.  This is the default if no flags are
specified.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_EXPANDED</b></dt>
<dd>Compile the regular expression (basic, extended, or advanced) using an
expanded syntax that allows comments and whitespace.  This mode causes
non-backslashed non-bracket-expression white
space and #-to-end-of-line comments to be ignored.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_QUOTE</b></dt>
<dd>Compile a literal string, with all characters treated as ordinary characters.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NOCASE</b></dt>
<dd>Compile for matching that ignores upper/lower case distinctions.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NEWLINE</b></dt>
<dd>Compile for newline-sensitive matching.  By default, newline is a
completely ordinary character with no special meaning in either
regular expressions or strings.  With this flag, `[^' bracket
expressions and `.' never match newline, `^' matches an empty string
after any newline in addition to its normal function, and `$' matches
an empty string before any newline in addition to its normal function.
<b>REG_NEWLINE</b> is the bit-wise OR of <b>REG_NLSTOP</b> and
<b>REG_NLANCH</b>.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NLSTOP</b></dt>
<dd>Compile for partial newline-sensitive matching,
with the behavior of
`[^' bracket expressions and `.' affected,
but not the behavior of `^' and `$'.  In this mode, `[^' bracket
expressions and `.' never match newline.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NLANCH</b></dt>
<dd>Compile for inverse partial newline-sensitive matching,
with the behavior
of `^' and `$' (the ``anchors'') affected, but not the behavior of
`[^' bracket expressions and `.'.  In this mode `^' matches an empty string
after any newline in addition to its normal function, and `$' matches
an empty string before any newline in addition to its normal function.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NOSUB</b></dt>
<dd>Compile for matching that reports only success or failure,
not what was matched.  This reduces compile overhead and may improve
performance.  Subsequent calls to <fun>Tcl_RegExpGetInfo</fun> or
<fun>Tcl_RegExpRange</fun> will not report any match information.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_CANMATCH</b></dt>
<dd>Compile for matching that reports the potential to complete a partial
match given more text (see below).
</dd>
</dle>
</dl>
<p>Only one of
<b>TCL_REG_EXTENDED</b>,
<b>TCL_REG_ADVANCED</b>,
<b>TCL_REG_BASIC</b>, and
<b>TCL_REG_QUOTE</b> may be specified.
</p>
<p><fun>Tcl_RegExpExecObj</fun> executes the regular expression pattern
matcher.  It returns 1 if <i>objPtr</i> contains a range of characters
that match <i>regexp</i>, 0 if no match is found, and -1 if an error
occurs.  In the case of an error, <fun>Tcl_RegExpExecObj</fun> leaves an
error message in the interpreter result.  The <i>nmatches</i> value
indicates to the matcher how many subexpressions are of interest.  If
<i>nmatches</i> is 0, then no subexpression match information is
recorded, which may allow the matcher to make various optimizations.
If the value is -1, then all of the subexpressions in the pattern are
remembered.  If the value is a positive integer, then only that number
of subexpressions will be remembered.  Matching begins at the
specified Unicode character index given by <i>offset</i>.  Unlike
<fun>Tcl_RegExpExec</fun>, the behavior of anchors is not affected by the
offset value.  Instead the behavior of the anchors is explicitly
controlled by the <i>eflags</i> argument, which is a bit-wise OR of
zero or more of the following flags:
</p>
<dl>
<dle>
<dt><b>TCL_REG_NOTBOL</b></dt>
<dd>The starting character will not be treated as the beginning of a
line or the beginning of the string, so `^' will not match there.
Note that this flag has no effect on how `<b>\A</b>' matches.
</dd>
</dle>
<dle>
<dt><b>TCL_REG_NOTEOL</b></dt>
<dd>The last character in the string will not be treated as the end of a
line or the end of the string, so '$' will not match there.
Note that this flag has no effect on how `<b>\Z</b>' matches.
</dd>
</dle>
</dl>
<p><fun>Tcl_RegExpGetInfo</fun> retrieves information about the last match
performed with a given regular expression <i>regexp</i>.  The
<i>infoPtr</i> argument contains a pointer to a structure that is
defined as follows:
</p>
<syntax cat="type" name="Tcl_RegExpInfo" scope="global">
typedef struct Tcl_RegExpInfo {
        int <i>nsubs</i>;
        Tcl_RegExpIndices *<i>matches</i>;
        long <i>extendStart</i>;
} Tcl_RegExpInfo;
</syntax>
<p>The <i>nsubs</i> field contains a count of the number of parenthesized
subexpressions within the regular expression.  If the <b>TCL_REG_NOSUB</b>
was used, then this value will be zero.  The <i>matches</i> field
points to an array of <i>nsubs</i> values that indicate the bounds of each
subexpression matched.  The first element in the array refers to the
range matched by the entire regular expression, and subsequent elements
refer to the parenthesized subexpressions in the order that they
appear in the pattern.  Each element is a structure that is defined as
follows:
</p>
<syntax cat="type" name="Tcl_RegExpIndices" scope="global">
typedef struct Tcl_RegExpIndices {
        long <i>start</i>;
        long <i>end</i>;
} Tcl_RegExpIndices;
</syntax>
<p>The <i>start</i> and <i>end</i> values are Unicode character indices
relative to the offset location within <i>objPtr</i> where matching began.
The <i>start</i> index identifies the first character of the matched
subexpression.  The <i>end</i> index identifies the first character
after the matched subexpression.  If the subexpression matched the
empty string, then <i>start</i> and <i>end</i> will be equal.  If the
subexpression did not participate in the match, then <i>start</i> and
<i>end</i> will be set to -1.
</p>
<p>The <i>extendStart</i> field in <type>Tcl_RegExpInfo</type> is only set if the
<b>TCL_REG_CANMATCH</b> flag was used.  It indicates the first
character in the string where a match could occur.  If a match was
found, this will be the same as the beginning of the current match.
If no match was found, then it indicates the earliest point at which a
match might occur if additional text is appended to the string.  If it
is no match is possible even with further text, this field will be set 
to -1.

</p>
</section>
<seealso>
<ref>re_syntax(n)</ref>
</seealso>
<keywords>
<keyword>match</keyword>
<keyword>pattern</keyword>
<keyword>regular expression</keyword>
<keyword>string</keyword>
<keyword>subexpression</keyword>
<keyword>Tcl_RegExpIndices</keyword>
<keyword>Tcl_RegExpInfo</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtChannel" version="8.4" title="Tcl_CreateChannel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
     Copyright (c) 1997-2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: CrtChannel.3,v 1.35 2007/02/24 18:29:23 dgp Exp $
 -->
<?TROFF.TH title="Tcl_CreateChannel" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateChannel</name>
<name>Tcl_GetChannelInstanceData</name>
<name>Tcl_GetChannelType</name>
<name>Tcl_GetChannelName</name>
<name>Tcl_GetChannelHandle</name>
<name>Tcl_GetChannelMode</name>
<name>Tcl_GetChannelBufferSize</name>
<name>Tcl_SetChannelBufferSize</name>
<name>Tcl_NotifyChannel</name>
<name>Tcl_BadChannelOption</name>
<name>Tcl_ChannelName</name>
<name>Tcl_ChannelVersion</name>
<name>Tcl_ChannelBlockModeProc</name>
<name>Tcl_ChannelCloseProc</name>
<name>Tcl_ChannelClose2Proc</name>
<name>Tcl_ChannelInputProc</name>
<name>Tcl_ChannelOutputProc</name>
<name>Tcl_ChannelSeekProc</name>
<name>Tcl_ChannelWideSeekProc</name>
<name>Tcl_ChannelTruncateProc</name>
<name>Tcl_ChannelSetOptionProc</name>
<name>Tcl_ChannelGetOptionProc</name>
<name>Tcl_ChannelWatchProc</name>
<name>Tcl_ChannelGetHandleProc</name>
<name>Tcl_ChannelFlushProc</name>
<name>Tcl_ChannelHandlerProc</name>
<name>Tcl_ChannelThreadActionProc</name>
<name>Tcl_IsChannelShared</name>
<name>Tcl_IsChannelRegistered</name>
<name>Tcl_CutChannel</name>
<name>Tcl_SpliceChannel</name>
<name>Tcl_IsChannelExisting</name>
<name>Tcl_ClearChannelHandlers</name>
<name>Tcl_GetChannelThread</name>
<name>Tcl_ChannelBuffered</name>
<desc>procedures for creating and manipulating channels</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Channel
<fun>Tcl_CreateChannel</fun>(<m>typePtr</m>, <m>channelName</m>, <m>instanceData</m>, <m>mask</m>)

ClientData
<fun>Tcl_GetChannelInstanceData</fun>(<m>channel</m>)

Tcl_ChannelType *
<fun>Tcl_GetChannelType</fun>(<m>channel</m>)

const char *
<fun>Tcl_GetChannelName</fun>(<m>channel</m>)

int
<fun>Tcl_GetChannelHandle</fun>(<m>channel</m>, <m>direction</m>, <m>handlePtr</m>)

Tcl_ThreadId
<fun>Tcl_GetChannelThread</fun>(<m>channel</m>)

int
<fun>Tcl_GetChannelMode</fun>(<m>channel</m>)

int
<fun>Tcl_GetChannelBufferSize</fun>(<m>channel</m>)

<fun>Tcl_SetChannelBufferSize</fun>(<m>channel</m>, <m>size</m>)

<fun>Tcl_NotifyChannel</fun>(<m>channel</m>, <m>mask</m>)

int
<fun>Tcl_BadChannelOption</fun>(<m>interp</m>, <m>optionName</m>, <m>optionList</m>)

int
<fun>Tcl_IsChannelShared</fun>(<m>channel</m>)

int
<fun>Tcl_IsChannelRegistered</fun>(<m>interp</m>, <m>channel</m>)

int
<fun>Tcl_IsChannelExisting</fun>(<m>channelName</m>)

void
<fun>Tcl_CutChannel</fun>(<m>channel</m>)

void
<fun>Tcl_SpliceChannel</fun>(<m>channel</m>)

void
<fun>Tcl_ClearChannelHandlers</fun>(<m>channel</m>)

int
<fun>Tcl_ChannelBuffered</fun>(<m>channel</m>)

const char *
<fun>Tcl_ChannelName</fun>(<m>typePtr</m>)

Tcl_ChannelTypeVersion
<fun>Tcl_ChannelVersion</fun>(<m>typePtr</m>)

Tcl_DriverBlockModeProc *
<fun>Tcl_ChannelBlockModeProc</fun>(<m>typePtr</m>)

Tcl_DriverCloseProc *
<fun>Tcl_ChannelCloseProc</fun>(<m>typePtr</m>)

Tcl_DriverClose2Proc *
<fun>Tcl_ChannelClose2Proc</fun>(<m>typePtr</m>)

Tcl_DriverInputProc *
<fun>Tcl_ChannelInputProc</fun>(<m>typePtr</m>)

Tcl_DriverOutputProc *
<fun>Tcl_ChannelOutputProc</fun>(<m>typePtr</m>)

Tcl_DriverSeekProc *
<fun>Tcl_ChannelSeekProc</fun>(<m>typePtr</m>)

Tcl_DriverWideSeekProc *
<fun>Tcl_ChannelWideSeekProc</fun>(<m>typePtr</m>)

Tcl_DriverThreadActionProc *
<fun>Tcl_ChannelThreadActionProc</fun>(<m>typePtr</m>)

<new version="8.5">Tcl_DriverTruncateProc *
<fun>Tcl_ChannelTruncateProc</fun>(<m>typePtr</m>)
</new>
Tcl_DriverSetOptionProc *
<fun>Tcl_ChannelSetOptionProc</fun>(<m>typePtr</m>)

Tcl_DriverGetOptionProc *
<fun>Tcl_ChannelGetOptionProc</fun>(<m>typePtr</m>)

Tcl_DriverWatchProc *
<fun>Tcl_ChannelWatchProc</fun>(<m>typePtr</m>)

Tcl_DriverGetHandleProc *
<fun>Tcl_ChannelGetHandleProc</fun>(<m>typePtr</m>)

Tcl_DriverFlushProc *
<fun>Tcl_ChannelFlushProc</fun>(<m>typePtr</m>)

Tcl_DriverHandlerProc *
<fun>Tcl_ChannelHandlerProc</fun>(<m>typePtr</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const Tcl_ChannelType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Points to a structure containing the addresses of procedures that
can be called to perform I/O and other functions on the channel.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="channelName">*channelName</name>
<argmode>in</argmode>
<desc>The name of this channel, such as <b>file3</b>; must not be in use
by any other channel. Can be NULL, in which case the channel is
created without a name.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>instanceData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to be associated with this channel.  This
value is passed to procedures in <i>typePtr</i> when they are invoked.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>OR-ed combination of <b>TCL_READABLE</b> and <b>TCL_WRITABLE</b> to indicate
whether a channel is readable and writable.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>The channel to operate on.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>direction</name>
<argmode>in</argmode>
<desc><b>TCL_READABLE</b> means the input handle is wanted; <b>TCL_WRITABLE</b>
means the output handle is wanted.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="handlePtr">*handlePtr</name>
<argmode>out</argmode>
<desc>Points to the location where the desired OS-specific handle should be
stored.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>size</name>
<argmode>in</argmode>
<desc>The size, in bytes, of buffers to allocate in this channel.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>An OR-ed combination of <b>TCL_READABLE</b>, <b>TCL_WRITABLE</b>
and <b>TCL_EXCEPTION</b> that indicates events that have occurred on
this channel.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Current interpreter. (can be NULL)
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="optionName">*optionName</name>
<argmode>in</argmode>
<desc>Name of the invalid option.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="optionList">*optionList</name>
<argmode>in</argmode>
<desc>Specific options list (space separated words, without "-") 
to append to the standard generic options list.
Can be NULL for generic options error message only.

</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl uses a two-layered channel architecture. It provides a generic upper
layer to enable C and Tcl programs to perform input and output using the
same APIs for a variety of files, devices, sockets etc. The generic C APIs
are described in the manual entry for <fun>Tcl_OpenFileChannel</fun>.
</p>
<p>The lower layer provides type-specific channel drivers for each type
of device supported on each platform.  This manual entry describes the
C APIs used to communicate between the generic layer and the
type-specific channel drivers.  It also explains how new types of
channels can be added by providing new channel drivers.
</p>
<p>Channel drivers consist of a number of components: First, each channel
driver provides a <type>Tcl_ChannelType</type> structure containing pointers to
functions implementing the various operations used by the generic layer to
communicate with the channel driver. The <type>Tcl_ChannelType</type> structure
and the functions referenced by it are described in the section
<ref refid="tcl_channeltype">TCL_CHANNELTYPE</ref>, below.
</p>
<p>Second, channel drivers usually provide a Tcl command to create
instances of that type of channel. For example, the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b>
command creates channels that use the file and command channel
drivers, and the Tcl <cmd>socket</cmd> command creates channels that use
TCP sockets for network communication.
</p>
<p>Third, a channel driver optionally provides a C function to open
channel instances of that type. For example, <fun>Tcl_OpenFileChannel</fun>
opens a channel that uses the file channel driver, and
<fun>Tcl_OpenTcpClient</fun> opens a channel that uses the TCP network
protocol.  These creation functions typically use
<fun>Tcl_CreateChannel</fun> internally to open the channel.
</p>
<p>To add a new type of channel you must implement a C API or a Tcl command
that opens a channel by invoking <fun>Tcl_CreateChannel</fun>.
When your driver calls <fun>Tcl_CreateChannel</fun> it passes in
a <type>Tcl_ChannelType</type> structure describing the driver's I/O
procedures.
The generic layer will then invoke the functions referenced in that
structure to perform operations on the channel.
</p>
<p><fun>Tcl_CreateChannel</fun> opens a new channel and associates the supplied
<i>typePtr</i> and <i>instanceData</i> with it. The channel is opened in the
mode indicated by <i>mask</i>.
For a discussion of channel drivers, their operations and the
<type>Tcl_ChannelType</type> structure, see the section <ref refid="tcl_channeltype">TCL_CHANNELTYPE</ref>, below.
</p>
<p><fun>Tcl_CreateChannel</fun> interacts with the code managing the standard
channels. Once a standard channel was initialized either through a
call to <fun>Tcl_GetStdChannel</fun> or a call to <fun>Tcl_SetStdChannel</fun>
closing this standard channel will cause the next call to
<fun>Tcl_CreateChannel</fun> to make the new channel the new standard
channel too. See <fun>Tcl_StandardChannels</fun> for a general treatise
about standard channels and the behaviour of the Tcl library with
regard to them.
</p>
<p><fun>Tcl_GetChannelInstanceData</fun> returns the instance data associated with
the channel in <i>channel</i>. This is the same as the <i>instanceData</i>
argument in the call to <fun>Tcl_CreateChannel</fun> that created this channel.
</p>
<p><fun>Tcl_GetChannelType</fun> returns a pointer to the <type>Tcl_ChannelType</type>
structure used by the channel in the <i>channel</i> argument. This is
the same as the <i>typePtr</i> argument in the call to
<fun>Tcl_CreateChannel</fun> that created this channel.
</p>
<p><fun>Tcl_GetChannelName</fun> returns a string containing the name associated
with the channel, or NULL if the <i>channelName</i> argument to
<fun>Tcl_CreateChannel</fun> was NULL.
</p>
<p><fun>Tcl_GetChannelHandle</fun> places the OS-specific device handle
associated with <i>channel</i> for the given <i>direction</i> in the
location specified by <i>handlePtr</i> and returns <b>TCL_OK</b>.  If
the channel does not have a device handle for the specified direction,
then <b>TCL_ERROR</b> is returned instead.  Different channel drivers
will return different types of handle.  Refer to the manual entries
for each driver to determine what type of handle is returned.
</p>
<p><fun>Tcl_GetChannelThread</fun> returns the id of the thread currently managing
the specified <i>channel</i>. This allows channel drivers to send their file
events to the correct event queue even for a multi-threaded core.
</p>
<p><fun>Tcl_GetChannelMode</fun> returns an OR-ed combination of <b>TCL_READABLE</b>
and <b>TCL_WRITABLE</b>, indicating whether the channel is open for input
and output.
</p>
<p><fun>Tcl_GetChannelBufferSize</fun> returns the size, in bytes, of buffers
allocated to store input or output in <i>channel</i>. If the value was not set
by a previous call to <fun>Tcl_SetChannelBufferSize</fun>, described below, then
the default value of 4096 is returned.
</p>
<p><fun>Tcl_SetChannelBufferSize</fun> sets the size, in bytes, of buffers that
will be allocated in subsequent operations on the channel to store input or
output. The <i>size</i> argument should be between ten and one million,
allowing buffers of ten bytes to one million bytes. If <i>size</i> is
outside this range, <fun>Tcl_SetChannelBufferSize</fun> sets the buffer size to
4096.
</p>
<p><fun>Tcl_NotifyChannel</fun> is called by a channel driver to indicate to
the generic layer that the events specified by <i>mask</i> have
occurred on the channel.  Channel drivers are responsible for invoking
this function whenever the channel handlers need to be called for the
channel.  See <ref refid="watchproc">WATCHPROC</ref> below for more details.
</p>
<p><fun>Tcl_BadChannelOption</fun> is called from driver specific
<i>setOptionProc</i> or <i>getOptionProc</i> to generate a complete
error message.
</p>
<p><fun>Tcl_ChannelBuffered</fun> returns the number of bytes of input
currently buffered in the internal buffer (push back area) of the
channel itself. It does not report about the data in the overall
buffers for the stack of channels the supplied channel is part of.
</p>
<p><fun>Tcl_IsChannelShared</fun> checks the refcount of the specified
<i>channel</i> and returns whether the <i>channel</i> was shared among
multiple interpreters (result == 1) or not (result == 0).
</p>
<p><fun>Tcl_IsChannelRegistered</fun> checks whether the specified <i>channel</i> is
registered in the given <i>interp</i>reter (result == 1) or not
(result == 0).
</p>
<p><fun>Tcl_IsChannelExisting</fun> checks whether a channel with the specified
name is registered in the (thread)-global list of all channels (result
== 1) or not (result == 0).
</p>
<p><fun>Tcl_CutChannel</fun> removes the specified <i>channel</i> from the
(thread)global list of all channels (of the current thread).
Application to a channel still registered in some interpreter
is not allowed.
<new version="8.5">Also notifies the driver if the <type>Tcl_ChannelType</type> version is
<b>TCL_CHANNEL_VERSION_4</b> (or higher), and
<type>Tcl_DriverThreadActionProc</type> is defined for it.
</new></p>
<p><fun>Tcl_SpliceChannel</fun> adds the specified <i>channel</i> to the
(thread)global list of all channels (of the current thread).
Application to a channel registered in some interpreter is not allowed.
<new version="8.5">Also notifies the driver if the <type>Tcl_ChannelType</type> version is
<b>TCL_CHANNEL_VERSION_4</b> (or higher), and
<type>Tcl_DriverThreadActionProc</type> is defined for it.
</new></p>
<p><fun>Tcl_ClearChannelHandlers</fun> removes all channelhandlers and event
scripts associated with the specified <i>channel</i>, thus shutting
down all event processing for this channel.
</p>
</section>
<section id="tcl_channeltype">
<title>TCL_CHANNELTYPE</title>
<p>A channel driver provides a <type>Tcl_ChannelType</type> structure that contains
pointers to functions that implement the various operations on a channel;
these operations are invoked as needed by the generic layer.  The structure
was versioned starting in Tcl 8.3.2/8.4 to correct a problem with stacked
channel drivers.  See the <ref refid="old-channel-types">OLD CHANNEL TYPES</ref> section below for
details about the old structure.
</p>
<p>The <type>Tcl_ChannelType</type> structure contains the following fields:
</p>
<syntax cat="type" name="Tcl_ChannelType" scope="global">
typedef struct Tcl_ChannelType {
        char *<i>typeName</i>;
        Tcl_ChannelTypeVersion <i>version</i>;
        Tcl_DriverCloseProc *<i>closeProc</i>;
        Tcl_DriverInputProc *<i>inputProc</i>;
        Tcl_DriverOutputProc *<i>outputProc</i>;
        Tcl_DriverSeekProc *<i>seekProc</i>;
        Tcl_DriverSetOptionProc *<i>setOptionProc</i>;
        Tcl_DriverGetOptionProc *<i>getOptionProc</i>;
        Tcl_DriverWatchProc *<i>watchProc</i>;
        Tcl_DriverGetHandleProc *<i>getHandleProc</i>;
        Tcl_DriverClose2Proc *<i>close2Proc</i>;
        Tcl_DriverBlockModeProc *<i>blockModeProc</i>;
        Tcl_DriverFlushProc *<i>flushProc</i>;
        Tcl_DriverHandlerProc *<i>handlerProc</i>;
        Tcl_DriverWideSeekProc *<i>wideSeekProc</i>;
        Tcl_DriverThreadActionProc *<i>threadActionProc</i>;
<new version="8.5">        Tcl_DriverTruncateProc *<i>truncateProc</i>;
</new>} Tcl_ChannelType;
</syntax>
<p>It is not necessary to provide implementations for all channel
operations.  Those which are not necessary may be set to NULL in the
struct: <i>blockModeProc</i>, <i>seekProc</i>, <i>setOptionProc</i>,
<i>getOptionProc</i>, and <i>close2Proc</i>, in addition to
<i>flushProc</i>, <i>handlerProc</i>, <i>threadActionProc</i>, and
<i>truncateProc</i>.  Other functions that cannot be implemented in a
meaningful way should return <b>EINVAL</b> when called, to indicate
that the operations they represent are not available. Also note that
<i>wideSeekProc</i> can be NULL if <i>seekProc</i> is.
</p>
<p>The user should only use the above structure for <type>Tcl_ChannelType</type>
instantiation.  When referencing fields in a <type>Tcl_ChannelType</type>
structure, the following functions should be used to obtain the values:
<fun>Tcl_ChannelName</fun>, <fun>Tcl_ChannelVersion</fun>,
<fun>Tcl_ChannelBlockModeProc</fun>, <fun>Tcl_ChannelCloseProc</fun>,
<fun>Tcl_ChannelClose2Proc</fun>, <fun>Tcl_ChannelInputProc</fun>,
<fun>Tcl_ChannelOutputProc</fun>, <fun>Tcl_ChannelSeekProc</fun>,
<fun>Tcl_ChannelWideSeekProc</fun>, <fun>Tcl_ChannelThreadActionProc</fun>,
<new version="8.5"><fun>Tcl_ChannelTruncateProc</fun>,
</new><fun>Tcl_ChannelSetOptionProc</fun>, <fun>Tcl_ChannelGetOptionProc</fun>,
<fun>Tcl_ChannelWatchProc</fun>, <fun>Tcl_ChannelGetHandleProc</fun>,
<fun>Tcl_ChannelFlushProc</fun>, or <fun>Tcl_ChannelHandlerProc</fun>.
</p>
<p>The change to the structures was made in such a way that standard channel
types are binary compatible.  However, channel types that use stacked
channels (i.e. TLS, Trf) have new versions to correspond to the above change
since the previous code for stacked channels had problems.
</p>
<subsection>
<title>TYPENAME</title>
<p>The <i>typeName</i> field contains a null-terminated string that
identifies the type of the device implemented by this driver, e.g.
<cmd>file</cmd> or <cmd>socket</cmd>.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelName</fun>, which returns
a pointer to the string.
</p>
</subsection>
<subsection>
<title>VERSION</title>
<p>
The <i>version</i> field should be set to the version of the structure
that you require. <b>TCL_CHANNEL_VERSION_2</b> is the minimum recommended.
<b>TCL_CHANNEL_VERSION_3</b> must be set to specifiy the <i>wideSeekProc</i> member.
<b>TCL_CHANNEL_VERSION_4</b> must be set to specifiy the <i>threadActionProc</i> member
(includes <i>wideSeekProc</i>).
<new version="8.5"><b>TCL_CHANNEL_VERSION_5</b> must be set to specifiy the
<i>truncateProc</i> members (includes
<i>wideSeekProc</i> and <i>threadActionProc</i>).
</new>If it is not set to any of these, then this
<type>Tcl_ChannelType</type> is assumed to have the original structure.  See
<ref refid="old-channel-types">OLD CHANNEL TYPES</ref> for more details.  While Tcl will recognize
and function with either structures, stacked channels must be of at
least <b>TCL_CHANNEL_VERSION_2</b> to function correctly.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelVersion</fun>, which returns
one of
<new version="8.5"><b>TCL_CHANNEL_VERSION_5</b>,
</new><b>TCL_CHANNEL_VERSION_4</b>,
<b>TCL_CHANNEL_VERSION_3</b>,
<b>TCL_CHANNEL_VERSION_2</b> or <b>TCL_CHANNEL_VERSION_1</b>.
</p>
</subsection>
<subsection>
<title>BLOCKMODEPROC</title>
<p>The <i>blockModeProc</i> field contains the address of a function called by
the generic layer to set blocking and nonblocking mode on the device.
<i>BlockModeProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverBlockModeProc" scope="global">
typedef int Tcl_DriverBlockModeProc(
        ClientData <i>instanceData</i>,
        int <i>mode</i>);
</syntax>
<p>The <i>instanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when this channel was created.  The <i>mode</i>
argument is either <b>TCL_MODE_BLOCKING</b> or <b>TCL_MODE_NONBLOCKING</b> to
set the device into blocking or nonblocking mode. The function should
return zero if the operation was successful, or a nonzero POSIX error code
if the operation failed.
</p>
<p>If the operation is successful, the function can modify the supplied
<i>instanceData</i> to record that the channel entered blocking or
nonblocking mode and to implement the blocking or nonblocking behavior.
For some device types, the blocking and nonblocking behavior can be
implemented by the underlying operating system; for other device types, the
behavior must be emulated in the channel driver.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelBlockModeProc</fun>, which returns
a pointer to the function.
</p>
<p>A channel driver <b>not</b> supplying a <i>blockModeProc</i> has to be
very, very careful. It has to tell the generic layer exactly which
blocking mode is acceptable to it, and should this also document for
the user so that the blocking mode of the channel is not changed to an
inacceptable value. Any confusion here may lead the interpreter into a
(spurious and difficult to find) deadlock.
</p>
</subsection>
<subsection>
<title>CLOSEPROC AND CLOSE2PROC</title>
<p>The <i>closeProc</i> field contains the address of a function called by the
generic layer to clean up driver-related information when the channel is
closed. <i>CloseProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverCloseProc" scope="global">
typedef int Tcl_DriverCloseProc(
        ClientData <i>instanceData</i>,
        Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>instanceData</i> argument is the same as the value provided to
<fun>Tcl_CreateChannel</fun> when the channel was created. The function should
release any storage maintained by the channel driver for this channel, and
close the input and output devices encapsulated by this channel. All queued
output will have been flushed to the device before this function is called,
and no further driver operations will be invoked on this instance after
calling the <i>closeProc</i>. If the close operation is successful, the
procedure should return zero; otherwise it should return a nonzero POSIX
error code. In addition, if an error occurs and <i>interp</i> is not NULL,
the procedure should store an error message in the interpreter's result.
</p>
<p>Alternatively, channels that support closing the read and write sides
independently may set <i>closeProc</i> to <b>TCL_CLOSE2PROC</b> and set
<i>close2Proc</i> to the address of a function that matches the
following prototype:
</p>
<syntax cat="type" name="Tcl_DriverClose2Proc" scope="global">
typedef int Tcl_DriverClose2Proc(
        ClientData <i>instanceData</i>,
        Tcl_Interp *<i>interp</i>,
        int <i>flags</i>);
</syntax>
<p>The <i>close2Proc</i> will be called with <i>flags</i> set to an OR'ed
combination of <b>TCL_CLOSE_READ</b> or <b>TCL_CLOSE_WRITE</b> to
indicate that the driver should close the read and/or write side of
the channel.  The channel driver may be invoked to perform
additional operations on the channel after <i>close2Proc</i> is
called to close one or both sides of the channel.  If <i>flags</i> is
<b>0</b> (zero), the driver should close the channel in the manner
described above for <i>closeProc</i>.  No further operations will be
invoked on this instance after <i>close2Proc</i> is called with all
flags cleared.  In all cases, the <i>close2Proc</i> function should
return zero if the close operation was successful; otherwise it should
return a nonzero POSIX error code. In addition, if an error occurs and
<i>interp</i> is not NULL, the procedure should store an error message
in the interpreter's result.
</p>
<p>The <i>closeProc</i> and <i>close2Proc</i> values can be retrieved with
<fun>Tcl_ChannelCloseProc</fun> or <fun>Tcl_ChannelClose2Proc</fun>, which
return a pointer to the respective function.
</p>
</subsection>
<subsection>
<title>INPUTPROC</title>
<p>The <i>inputProc</i> field contains the address of a function called by the
generic layer to read data from the file or device and store it in an
internal buffer. <i>InputProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverInputProc" scope="global">
typedef int Tcl_DriverInputProc(
        ClientData <i>instanceData</i>,
        char *<i>buf</i>,
        int <i>bufSize</i>,
        int *<i>errorCodePtr</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when the channel was created.  The <i>buf</i>
argument points to an array of bytes in which to store input from the
device, and the <i>bufSize</i> argument indicates how many bytes are
available at <i>buf</i>.
</p>
<p>The <i>errorCodePtr</i> argument points to an integer variable provided by
the generic layer. If an error occurs, the function should set the variable
to a POSIX error code that identifies the error that occurred.
</p>
<p>The function should read data from the input device encapsulated by the
channel and store it at <i>buf</i>.  On success, the function should return
a nonnegative integer indicating how many bytes were read from the input
device and stored at <i>buf</i>. On error, the function should return -1. If
an error occurs after some data has been read from the device, that data is
lost.
</p>
<p>If <i>inputProc</i> can determine that the input device has some data
available but less than requested by the <i>bufSize</i> argument, the
function should only attempt to read as much data as is available and
return without blocking. If the input device has no data available
whatsoever and the channel is in nonblocking mode, the function should
return an <b>EAGAIN</b> error. If the input device has no data available
whatsoever and the channel is in blocking mode, the function should block
for the shortest possible time until at least one byte of data can be read
from the device; then, it should return as much data as it can read without
blocking.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelInputProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>OUTPUTPROC</title>
<p>The <i>outputProc</i> field contains the address of a function called by the
generic layer to transfer data from an internal buffer to the output device.
<i>OutputProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverOutputProc" scope="global">
typedef int Tcl_DriverOutputProc(
        ClientData <i>instanceData</i>,
        const char *<i>buf</i>,
        int <i>toWrite</i>,
        int *<i>errorCodePtr</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when the channel was created. The <i>buf</i>
argument contains an array of bytes to be written to the device, and the
<i>toWrite</i> argument indicates how many bytes are to be written from the
<i>buf</i> argument.
</p>
<p>The <i>errorCodePtr</i> argument points to an integer variable provided by
the generic layer. If an error occurs, the function should set this
variable to a POSIX error code that identifies the error.
</p>
<p>The function should write the data at <i>buf</i> to the output device
encapsulated by the channel. On success, the function should return a
nonnegative integer indicating how many bytes were written to the output
device.  The return value is normally the same as <i>toWrite</i>, but may be
less in some cases such as if the output operation is interrupted by a
signal. If an error occurs the function should return -1.  In case of
error, some data may have been written to the device.
</p>
<p>If the channel is nonblocking and the output device is unable to absorb any
data whatsoever, the function should return -1 with an <b>EAGAIN</b> error
without writing any data.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelOutputProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>SEEKPROC AND WIDESEEKPROC</title>
<p>The <i>seekProc</i> field contains the address of a function called by the
generic layer to move the access point at which subsequent input or output
operations will be applied. <i>SeekProc</i> must match the following
prototype:
</p>
<syntax cat="type" name="Tcl_DriverSeekProc" scope="global">
typedef int Tcl_DriverSeekProc(
        ClientData <i>instanceData</i>,
        long <i>offset</i>,
        int <i>seekMode</i>,
        int *<i>errorCodePtr</i>);
</syntax>
<p>The <i>instanceData</i> argument is the same as the value given to
<fun>Tcl_CreateChannel</fun> when this channel was created.  <i>Offset</i> and
<i>seekMode</i> have the same meaning as for the <fun>Tcl_Seek</fun>
procedure (described in the manual entry for <fun>Tcl_OpenFileChannel</fun>).
</p>
<p>The <i>errorCodePtr</i> argument points to an integer variable provided by
the generic layer for returning <b>errno</b> values from the function.  The
function should set this variable to a POSIX error code if an error occurs.
The function should store an <b>EINVAL</b> error code if the channel type
does not implement seeking.
</p>
<p>The return value is the new access point or -1 in case of error. If an
error occurred, the function should not move the access point.
</p>
<p>If there is a non-NULL <i>seekProc</i> field, the <i>wideSeekProc</i>
field may contain the address of an alternative function to use which
handles wide (i.e. larger than 32-bit) offsets, so allowing seeks
within files larger than 2GB.  The <i>wideSeekProc</i> will be called
in preference to the <i>seekProc</i>, but both must be defined if the
<i>wideSeekProc</i> is defined.  <i>WideSeekProc</i> must match the
following prototype:
</p>
<syntax cat="type" name="Tcl_DriverWideSeekProc" scope="global">
typedef Tcl_WideInt Tcl_DriverWideSeekProc(
        ClientData <i>instanceData</i>,
        Tcl_WideInt <i>offset</i>,
        int <i>seekMode</i>,
        int *<i>errorCodePtr</i>);
</syntax>
<p>The arguments and return values mean the same thing as with
<i>seekProc</i> above, except that the type of offsets and the return
type are different.
</p>
<p>The <i>seekProc</i> value can be retrieved with
<fun>Tcl_ChannelSeekProc</fun>, which returns a pointer to the function,
and similarly the <i>wideSeekProc</i> can be retrieved with
<fun>Tcl_ChannelWideSeekProc</fun>.
</p>
</subsection>
<subsection>
<title>SETOPTIONPROC</title>
<p>The <i>setOptionProc</i> field contains the address of a function called by
the generic layer to set a channel type specific option on a channel.
<i>setOptionProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverSetOptionProc" scope="global">
typedef int Tcl_DriverSetOptionProc(
        ClientData <i>instanceData</i>,
        Tcl_Interp *<i>interp</i>,
        const char *<i>optionName</i>,
        const char *<i>newValue</i>);
</syntax>
<p><i>optionName</i> is the name of an option to set, and <i>newValue</i> is
the new value for that option, as a string. The <i>instanceData</i> is the
same as the value given to <fun>Tcl_CreateChannel</fun> when this channel was
created. The function should do whatever channel type specific action is
required to implement the new value of the option.
</p>
<p>Some options are handled by the generic code and this function is never
called to set them, e.g. <b>-blockmode</b>. Other options are specific to
each channel type and the <i>setOptionProc</i> procedure of the channel
driver will get called to implement them. The <i>setOptionProc</i> field can
be NULL, which indicates that this channel type supports no type specific
options. 
</p>
<p>If the option value is successfully modified to the new value, the function
returns <b>TCL_OK</b>.
It should call <fun>Tcl_BadChannelOption</fun> which itself returns
<b>TCL_ERROR</b> if the <i>optionName</i> is
unrecognized. 
If <i>newValue</i> specifies a value for the option that
is not supported or if a system call error occurs,
the function should leave an error message in the
<i>result</i> field of <i>interp</i> if <i>interp</i> is not NULL. The
function should also call <fun>Tcl_SetErrno</fun> to store an appropriate POSIX
error code.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelSetOptionProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>GETOPTIONPROC</title>
<p>The <i>getOptionProc</i> field contains the address of a function called by
the generic layer to get the value of a channel type specific option on a
channel. <i>getOptionProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverGetOptionProc" scope="global">
typedef int Tcl_DriverGetOptionProc(
        ClientData <i>instanceData</i>,
        Tcl_Interp *<i>interp</i>,
        const char *<i>optionName</i>,
        Tcl_DString *<i>optionValue</i>);
</syntax>
<p><i>OptionName</i> is the name of an option supported by this type of
channel. If the option name is not NULL, the function stores its current
value, as a string, in the Tcl dynamic string <i>optionValue</i>.
If <i>optionName</i> is NULL, the function stores in <i>optionValue</i> an
alternating list of all supported options and their current values.
On success, the function returns <b>TCL_OK</b>. 
It should call <fun>Tcl_BadChannelOption</fun> which itself returns
<b>TCL_ERROR</b> if the <i>optionName</i> is
unrecognized. If a system call error occurs,
the function should leave an error message in the
result of <i>interp</i> if <i>interp</i> is not NULL. The
function should also call <fun>Tcl_SetErrno</fun> to store an appropriate POSIX
error code.
</p>
<p>Some options are handled by the generic code and this function is never
called to retrieve their value, e.g. <b>-blockmode</b>. Other options are
specific to each channel type and the <i>getOptionProc</i> procedure of the
channel driver will get called to implement them. The <i>getOptionProc</i>
field can be NULL, which indicates that this channel type supports no type
specific options.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelGetOptionProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection id="watchproc">
<title>WATCHPROC</title>
<p>The <i>watchProc</i> field contains the address of a function called
by the generic layer to initialize the event notification mechanism to
notice events of interest on this channel.
<i>WatchProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverWatchProc" scope="global">
typedef void Tcl_DriverWatchProc(
        ClientData <i>instanceData</i>,
        int <i>mask</i>);
</syntax>
<p>The <i>instanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when this channel was created. The <i>mask</i>
argument is an OR-ed combination of <b>TCL_READABLE</b>, <b>TCL_WRITABLE</b>
and <b>TCL_EXCEPTION</b>; it indicates events the caller is interested in
noticing on this channel.
</p>
<p>The function should initialize device type specific mechanisms to
notice when an event of interest is present on the channel.  When one
or more of the designated events occurs on the channel, the channel
driver is responsible for calling <fun>Tcl_NotifyChannel</fun> to inform
the generic channel module.  The driver should take care not to starve
other channel drivers or sources of callbacks by invoking
Tcl_NotifyChannel too frequently.  Fairness can be insured by using
the Tcl event queue to allow the channel event to be scheduled in sequence
with other events.  See the description of <fun>Tcl_QueueEvent</fun> for
details on how to queue an event.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelWatchProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>GETHANDLEPROC</title>
<p>The <i>getHandleProc</i> field contains the address of a function called by
the generic layer to retrieve a device-specific handle from the channel.
<i>GetHandleProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverGetHandleProc" scope="global">
typedef int Tcl_DriverGetHandleProc(
        ClientData <i>instanceData</i>,
        int <i>direction</i>,
        ClientData *<i>handlePtr</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when this channel was created. The <i>direction</i>
argument is either <b>TCL_READABLE</b> to retrieve the handle used
for input, or <b>TCL_WRITABLE</b> to retrieve the handle used for
output.
</p>
<p>If the channel implementation has device-specific handles, the
function should retrieve the appropriate handle associated with the
channel, according the <i>direction</i> argument.  The handle should be
stored in the location referred to by <i>handlePtr</i>, and
<b>TCL_OK</b> should be returned.  If the channel is not open for the
specified direction, or if the channel implementation does not use
device handles, the function should return <b>TCL_ERROR</b>.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelGetHandleProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>FLUSHPROC</title>
<p>The <i>flushProc</i> field is currently reserved for future use.
It should be set to NULL.
<i>FlushProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverFlushProc" scope="global">
typedef int Tcl_DriverFlushProc(
        ClientData <i>instanceData</i>);
</syntax>
<p>This value can be retrieved with <fun>Tcl_ChannelFlushProc</fun>, which returns
a pointer to the function.
</p>
</subsection>
<subsection>
<title>HANDLERPROC</title>
<p>The <i>handlerProc</i> field contains the address of a function called by
the generic layer to notify the channel that an event occurred.  It should
be defined for stacked channel drivers that wish to be notified of events
that occur on the underlying (stacked) channel.
<i>HandlerProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_DriverHandlerProc" scope="global">
typedef int Tcl_DriverHandlerProc(
        ClientData <i>instanceData</i>,
        int <i>interestMask</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to <fun>Tcl_CreateChannel</fun>
when this channel was created.  The <i>interestMask</i> is an OR-ed
combination of <b>TCL_READABLE</b> or <b>TCL_WRITABLE</b>; it indicates what
type of event occurred on this channel.
</p>
<p>This value can be retrieved with <fun>Tcl_ChannelHandlerProc</fun>, which returns
a pointer to the function.

</p>
</subsection>
<subsection>
<title>THREADACTIONPROC</title>
<p>The <i>threadActionProc</i> field contains the address of the function
called by the generic layer when a channel is created, closed, or
going to move to a different thread, i.e. whenever thread-specific
driver state might have to initialized or updated. It can be NULL.
The action <i>TCL_CHANNEL_THREAD_REMOVE</i> is used to notify the
driver that it should update or remove any thread-specific data it
might be maintaining for the channel.
</p>
<p>The action <i>TCL_CHANNEL_THREAD_INSERT</i> is used to notify the
driver that it should update or initialize any thread-specific data it
might be maintaining using the calling thread as the associate. See
<fun>Tcl_CutChannel</fun> and <fun>Tcl_SpliceChannel</fun> for more detail.
</p>
<syntax cat="type" name="Tcl_DriverThreadActionProc" scope="global">
typedef void Tcl_DriverThreadActionProc(
        ClientData <i>instanceData</i>,
        int        <i>action</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when this channel was created.
</p>
<p>These values can be retrieved with <fun>Tcl_ChannelThreadActionProc</fun>,
which returns a pointer to the function.
</p>
</subsection>
<subsection>
<title>TRUNCATEPROC</title>
<p>The <i>truncateProc</i> field contains the address of the function
called by the generic layer when a channel is truncated to some
length. It can be NULL.
</p>
<syntax cat="type" name="Tcl_DriverTruncateProc" scope="global">
typedef int Tcl_DriverTruncateProc(
        ClientData <i>instanceData</i>,
        Tcl_WideInt <i>length</i>);
</syntax>
<p><i>InstanceData</i> is the same as the value passed to
<fun>Tcl_CreateChannel</fun> when this channel was created, and
<i>length</i> is the new length of the underlying file, which should
not be negative. The result should be 0 on success or an errno code
(suitable for use with <fun>Tcl_SetErrno</fun>) on failure.
</p>
<p>These values can be retrieved with <fun>Tcl_ChannelTruncateProc</fun>,
which returns a pointer to the function.
</p>
</subsection>
</section>
<section>
<title>TCL_BADCHANNELOPTION</title>
<p>This procedure generates a "bad option" error message in an
(optional) interpreter.  It is used by channel drivers when 
an invalid Set/Get option is requested. Its purpose is to concatenate
the generic options list to the specific ones and factorize
the generic options error message string.
</p>
<p>It always returns <b>TCL_ERROR</b>
</p>
<p>An error message is generated in <i>interp</i>'s result object to
indicate that a command was invoked with a bad option.
The message has the form
</p>
<example>
    bad option "blah": should be one of 
    &lt;...generic options...&gt;+&lt;...specific options...&gt;
</example>
<p>so you get for instance:
</p>
<example>
    bad option "-blah": should be one of -blocking,
    -buffering, -buffersize, -eofchar, -translation,
    -peername, or -sockname
</example>
<p>when called with <i>optionList</i>="peername sockname"
</p>
<p>``blah'' is the <i>optionName</i> argument and ``&lt;specific options&gt;''
is a space separated list of specific option words.
The function takes good care of inserting minus signs before
each option, commas after, and an ``or'' before the last option.
</p>
</section>
<section id="old-channel-types">
<title>OLD CHANNEL TYPES</title>
<p>The original (8.3.1 and below) <type>Tcl_ChannelType</type> structure contains
the following fields:
</p>
<syntax cat="type" name="Tcl_ChannelType" scope="global">
typedef struct Tcl_ChannelType {
        char *<i>typeName</i>;
        Tcl_DriverBlockModeProc *<i>blockModeProc</i>;
        Tcl_DriverCloseProc *<i>closeProc</i>;
        Tcl_DriverInputProc *<i>inputProc</i>;
        Tcl_DriverOutputProc *<i>outputProc</i>;
        Tcl_DriverSeekProc *<i>seekProc</i>;
        Tcl_DriverSetOptionProc *<i>setOptionProc</i>;
        Tcl_DriverGetOptionProc *<i>getOptionProc</i>;
        Tcl_DriverWatchProc *<i>watchProc</i>;
        Tcl_DriverGetHandleProc *<i>getHandleProc</i>;
        Tcl_DriverClose2Proc *<i>close2Proc</i>;
} Tcl_ChannelType;
</syntax>
<p>It is still possible to create channel with the above structure.  The
internal channel code will determine the version.  It is imperative to use
the new <type>Tcl_ChannelType</type> structure if you are creating a stacked
channel driver, due to problems with the earlier stacked channel
implementation (in 8.2.0 to 8.3.1).
</p>
<p>Prior to 8.4.0 (i.e. during the later releases of 8.3 and early part
of the 8.4 development cycle) the <type>Tcl_ChannelType</type> structure
contained the following fields:
</p>
<syntax cat="type" name="Tcl_ChannelType" scope="global">
typedef struct Tcl_ChannelType {
        char *<i>typeName</i>;
        Tcl_ChannelTypeVersion <i>version</i>;
        Tcl_DriverCloseProc *<i>closeProc</i>;
        Tcl_DriverInputProc *<i>inputProc</i>;
        Tcl_DriverOutputProc *<i>outputProc</i>;
        Tcl_DriverSeekProc *<i>seekProc</i>;
        Tcl_DriverSetOptionProc *<i>setOptionProc</i>;
        Tcl_DriverGetOptionProc *<i>getOptionProc</i>;
        Tcl_DriverWatchProc *<i>watchProc</i>;
        Tcl_DriverGetHandleProc *<i>getHandleProc</i>;
        Tcl_DriverClose2Proc *<i>close2Proc</i>;
        Tcl_DriverBlockModeProc *<i>blockModeProc</i>;
        Tcl_DriverFlushProc *<i>flushProc</i>;
        Tcl_DriverHandlerProc *<i>handlerProc</i>;
        Tcl_DriverTruncateProc *<i>truncateProc</i>;
} Tcl_ChannelType;
</syntax>
<p>When the above structure is registered as a channel type, the
<i>version</i> field should always be <b>TCL_CHANNEL_VERSION_2</b>.

</p>
</section>
<seealso>
<ref>Tcl_Close(3)</ref>
<ref>Tcl_OpenFileChannel(3)</ref>
<ref>Tcl_SetErrno(3)</ref>
<ref>Tcl_QueueEvent(3)</ref>
<ref>Tcl_StackChannel(3)</ref>
<ref>Tcl_GetStdChannel(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>channel driver</keyword>
<keyword>channel registration</keyword>
<keyword>channel type</keyword>
<keyword>nonblocking</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtChnlHdlr" title="Tcl_CreateChannelHandler" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: CrtChnlHdlr.3,v 1.3 2004/10/07 14:44:31 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CreateChannelHandler" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateChannelHandler</name>
<name>Tcl_DeleteChannelHandler</name>
<desc>call a procedure when a channel becomes readable or writable</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_CreateChannelHandler</fun>(<m>channel</m>, <m>mask</m>, <m>proc</m>, <m>clientData</m>)

void
<fun>Tcl_DeleteChannelHandler</fun>(<m>channel</m>, <m>proc</m>, <m>clientData</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>Tcl channel such as returned by <fun>Tcl_CreateChannel</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>Conditions under which <i>proc</i> should be called: OR-ed combination of
<b>TCL_READABLE</b>, <b>TCL_WRITABLE</b> and <b>TCL_EXCEPTION</b>. Specify
a zero value to temporarily disable an existing handler.
</desc>
</argdef>
<argdef>
<argtype>Tcl_FileProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever the channel indicated by <i>channel</i> meets
the conditions specified by <i>mask</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateChannelHandler</fun> arranges for <i>proc</i> to be called in the
future whenever input or output becomes possible on the channel identified
by <i>channel</i>, or whenever an exceptional condition exists for
<i>channel</i>. The conditions of interest under which <i>proc</i> will be
invoked are specified by the <i>mask</i> argument.
See the manual entry for <cmd>fileevent</cmd> for a precise description of
what it means for a channel to be readable or writable.
<i>Proc</i> must conform to the following prototype:
</p>
<syntax cat="type" name="Tcl_ChannelProc" scope="global">
typedef void Tcl_ChannelProc(
        ClientData <i>clientData</i>,
        int <i>mask</i>);
</syntax>
<p>The <i>clientData</i> argument is the same as the value passed to
<fun>Tcl_CreateChannelHandler</fun> when the handler was created. Typically,
<i>clientData</i> points to a data structure containing application-specific
information about the channel. <i>Mask</i> is an integer mask indicating
which of the requested conditions actually exists for the channel; it will
contain a subset of the bits from the <i>mask</i> argument to
<fun>Tcl_CreateChannelHandler</fun> when the handler was created.
</p>
<p>Each channel handler is identified by a unique combination of <i>channel</i>,
<i>proc</i> and <i>clientData</i>.
There may be many handlers for a given channel as long as they don't
have the same <i>channel</i>, <i>proc</i>, and <i>clientData</i>.
If <fun>Tcl_CreateChannelHandler</fun> is invoked when there is already a handler
for <i>channel</i>, <i>proc</i>, and <i>clientData</i>, then no new
handler is created;  instead, the <i>mask</i> is changed for the
existing handler.
</p>
<p><fun>Tcl_DeleteChannelHandler</fun> deletes a channel handler identified by
<i>channel</i>, <i>proc</i> and <i>clientData</i>; if no such handler exists,
the call has no effect.
</p>
<p>Channel handlers are invoked via the Tcl event mechanism, so they
are only useful in applications that are event-driven.
Note also that the conditions specified in the <i>mask</i> argument
to <i>proc</i> may no longer exist when <i>proc</i> is invoked:  for
example, if there are two handlers for <b>TCL_READABLE</b> on the same
channel, the first handler could consume all of the available input
so that the channel is no longer readable when the second handler
is invoked.
For this reason it may be useful to use nonblocking I/O on channels
for which there are event handlers.

</p>
</section>
<seealso>
<ref>Notifier(3)</ref>
<ref>Tcl_CreateChannel(3)</ref>
<ref>Tcl_OpenFileChannel(3)</ref>
<ref>vwait(n).</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>callback</keyword>
<keyword>channel</keyword>
<keyword>events</keyword>
<keyword>handler</keyword>
<keyword>nonblocking.</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtCloseHdlr" title="Tcl_CreateCloseHandler" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: CrtCloseHdlr.3,v 1.3 2004/10/07 14:44:31 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CreateCloseHandler" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateCloseHandler</name>
<name>Tcl_DeleteCloseHandler</name>
<desc>arrange for callbacks when channels are closed</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_CreateCloseHandler</fun>(<m>channel</m>, <m>proc</m>, <m>clientData</m>)

void
<fun>Tcl_DeleteCloseHandler</fun>(<m>channel</m>, <m>proc</m>, <m>clientData</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>The channel for which to create or delete a close callback.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CloseProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>The procedure to call as the callback.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateCloseHandler</fun> arranges for <i>proc</i> to be called when
<i>channel</i> is closed with <fun>Tcl_Close</fun> or
<fun>Tcl_UnregisterChannel</fun>, or using the Tcl <cmd>close</cmd> command.
<i>Proc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_CloseProc" scope="global">
typedef void Tcl_CloseProc(
        ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> is the same as the value provided in the call to
<fun>Tcl_CreateCloseHandler</fun>.
</p>
<p><fun>Tcl_DeleteCloseHandler</fun> removes a close callback for <i>channel</i>.
The <i>proc</i> and <i>clientData</i> identify which close callback to
remove; <fun>Tcl_DeleteCloseHandler</fun> does nothing if its <i>proc</i> and
<i>clientData</i> arguments do not match the <i>proc</i> and <i>clientData</i>
for a  close handler for <i>channel</i>.

</p>
</section>
<seealso>
<ref>close(n)</ref>
<ref>Tcl_Close(3)</ref>
<ref>Tcl_UnregisterChannel(3)</ref>
</seealso>
<keywords>
<keyword>callback</keyword>
<keyword>channel closing</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtCmHdlr" title="Tk_CreateClientMessageHandler" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtCmHdlr.3,v 1.2 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CreateClientMessageHandler" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateClientMessageHandler</name>
<name>Tk_DeleteClientMessageHandler</name>
<desc>associate procedure callback with ClientMessage type X events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateClientMessageHandler</fun>(<m>proc</m>)

<fun>Tk_DeleteClientMessageHandler</fun>(<m>proc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_ClientMessageProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever a ClientMessage X event occurs on any display.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>
<fun>Tk_CreateClientMessageHandler</fun> arranges for <i>proc</i> to be invoked
in the future whenever a ClientMessage X event occurs that isn't handled by
<b>WM_PROTOCOL</b>.  <fun>Tk_CreateClientMessageHandler</fun> is intended for use
by applications which need to watch X ClientMessage events, such as drag and
drop applications.
</p>
<p>The callback to <i>proc</i> will be made by <fun>Tk_HandleEvent</fun>;
this mechanism only works in programs that dispatch events
through <fun>Tk_HandleEvent</fun> (or through other Tk procedures that
call <fun>Tk_HandleEvent</fun>, such as <b>Tk_DoOneEvent</b> or
<fun>Tk_MainLoop</fun>).
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tk_ClientMessageProc</type>:
</p>
<syntax cat="type" name="Tk_ClientMessageProc" scope="global">
typedef int Tk_ClientMessageProc(
    Tk_Window <i>tkwin</i>,
    XEvent *<i>eventPtr</i>);
</syntax>
<p>The <i>tkwin</i> parameter to <i>proc</i> is the Tk window which is
associated with this event.  <i>EventPtr</i> is a pointer to the X event.
</p>
<p>Whenever an X ClientMessage event is processed by <fun>Tk_HandleEvent</fun>,
the <i>proc</i> is called if it wasn't handled as a <b>WM_PROTOCOL</b>.
The return value from <i>proc</i> is normally 0.
A non-zero return value indicates that the event is not to be handled
further; that is, <i>proc</i> has done all processing that is to be
allowed for the event.
</p>
<p>If there are multiple ClientMessage event handlers, each one is called
for each event, in the order in which they were established.
</p>
<p><fun>Tk_DeleteClientMessageHandler</fun> may be called to delete a
previously-created ClientMessage event handler: it deletes each handler it
finds that matches the <i>proc</i> argument.  If no such handler exists,
then <fun>Tk_DeleteClientMessageHandler</fun> returns without doing anything.
Although Tk supports it, it's probably a bad idea to have more than one
callback with the same <i>proc</i> argument.

</p>
</section>
<keywords>
<keyword>bind</keyword>
<keyword>callback</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtCommand" title="Tcl_CreateCommand">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtCommand.3,v 1.12 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_CreateCommand" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateCommand</name>
<desc>implement new commands in C</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Command
<fun>Tcl_CreateCommand</fun>(<m>interp</m>, <m>cmdName</m>, <m>proc</m>, <m>clientData</m>, <m>deleteProc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to create new command.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="cmdName">*cmdName</name>
<argmode>in</argmode>
<desc>Name of command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Implementation of new command:  <i>proc</i> will be called whenever
<i>cmdName</i> is invoked as a command.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i> and <i>deleteProc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>Procedure to call before <i>cmdName</i> is deleted from the interpreter;
allows for command-specific cleanup.  If NULL, then no procedure is
called before the command is deleted.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateCommand</fun> defines a new command in <i>interp</i> and associates
it with procedure <i>proc</i> such that whenever <i>cmdName</i> is
invoked as a Tcl command (via a call to <fun>Tcl_Eval</fun>) the Tcl interpreter
will call <i>proc</i> to process the command.
It differs from <fun>Tcl_CreateObjCommand</fun> in that a new string-based
command is defined;
that is, a command procedure is defined that takes an array of
argument strings instead of objects.
The object-based command procedures registered by <fun>Tcl_CreateObjCommand</fun>
can execute significantly faster than the string-based command procedures
defined by <fun>Tcl_CreateCommand</fun>.
This is because they take Tcl objects as arguments
and those objects can retain an internal representation that
can be manipulated more efficiently.
Also, Tcl's interpreter now uses objects internally.
In order to invoke a string-based command procedure
registered by <fun>Tcl_CreateCommand</fun>,
it must generate and fetch a string representation
from each argument object before the call
and create a new Tcl object to hold the string result returned by the
string-based command procedure.
New commands should be defined using <fun>Tcl_CreateObjCommand</fun>.
We support <fun>Tcl_CreateCommand</fun> for backwards compatibility.
</p>
<p>The procedures <fun>Tcl_DeleteCommand</fun>, <fun>Tcl_GetCommandInfo</fun>,
and <fun>Tcl_SetCommandInfo</fun> are used in conjunction with
<fun>Tcl_CreateCommand</fun>.
</p>
<p><fun>Tcl_CreateCommand</fun> will delete an existing command <i>cmdName</i>,
if one is already associated with the interpreter.
It returns a token that may be used to refer
to the command in subsequent calls to <fun>Tcl_GetCommandName</fun>.
If <i>cmdName</i> contains any <b>::</b> namespace qualifiers,
then the command is added to the specified namespace;
otherwise the command is added to the global namespace.
If <fun>Tcl_CreateCommand</fun> is called for an interpreter that is in
the process of being deleted, then it does not create a new command
and it returns NULL.
<i>Proc</i> should have arguments and result that match the type
<type>Tcl_CmdProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdProc" scope="global">
typedef int Tcl_CmdProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        int <i>argc</i>,
        const char *<i>argv</i>[]);
</syntax>
<p>When <i>proc</i> is invoked the <i>clientData</i> and <i>interp</i>
parameters will be copies of the <i>clientData</i> and <i>interp</i>
arguments given to <fun>Tcl_CreateCommand</fun>.
Typically, <i>clientData</i> points to an application-specific
data structure that describes what to do when the command procedure
is invoked.  <i>Argc</i> and <i>argv</i> describe the arguments to
the command, <i>argc</i> giving the number of arguments (including
the command name) and <i>argv</i> giving the values of the arguments
as strings.  The <i>argv</i> array will contain <i>argc</i>+1 values;
the first <i>argc</i> values point to the argument strings, and the
last value is NULL.  
Note that the argument strings should not be modified as they may
point to constant strings or may be shared with other parts of the
interpreter.
</p>
<p>Note that the argument strings are encoded in normalized UTF-8 since
version 8.1 of Tcl.
</p>
<p><i>Proc</i> must return an integer code that is expected to be one of
<b>TCL_OK</b>, <b>TCL_ERROR</b>, <b>TCL_RETURN</b>, <b>TCL_BREAK</b>, or
<b>TCL_CONTINUE</b>.  See the Tcl overview man page
for details on what these codes mean.  Most normal commands will only
return <b>TCL_OK</b> or <b>TCL_ERROR</b>.  In addition, <i>proc</i> must set
the interpreter result to point to a string value;
in the case of a <b>TCL_OK</b> return code this gives the result
of the command, and in the case of <b>TCL_ERROR</b> it gives an error message.
The <fun>Tcl_SetResult</fun> procedure provides an easy interface for setting
the return value;  for complete details on how the interpreter result
field is managed, see the <type>Tcl_Interp</type> man page.
Before invoking a command procedure,
<fun>Tcl_Eval</fun> sets the interpreter result to point to an empty string,
so simple commands can return an empty result by doing nothing at all.
</p>
<p>The contents of the <i>argv</i> array belong to Tcl and are not
guaranteed to persist once <i>proc</i> returns:  <i>proc</i> should
not modify them, nor should it set the interpreter result to point
anywhere within the <i>argv</i> values.
Call <fun>Tcl_SetResult</fun> with status <b>TCL_VOLATILE</b> if you want
to return something from the <i>argv</i> array.
</p>
<p><i>DeleteProc</i> will be invoked when (if) <i>cmdName</i> is deleted.
This can occur through a call to <fun>Tcl_DeleteCommand</fun> or <fun>Tcl_DeleteInterp</fun>,
or by replacing <i>cmdName</i> in another call to <fun>Tcl_CreateCommand</fun>.
<i>DeleteProc</i> is invoked before the command is deleted, and gives the
application an opportunity to release any structures associated
with the command.  <i>DeleteProc</i> should have arguments and
result that match the type <type>Tcl_CmdDeleteProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdDeleteProc" scope="global">
typedef void Tcl_CmdDeleteProc(
        ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> argument will be the same as the <i>clientData</i>
argument passed to <fun>Tcl_CreateCommand</fun>.
</p>
</section>
<seealso>
<ref>Tcl_CreateObjCommand</ref>
<ref>Tcl_DeleteCommand</ref>
<ref>Tcl_GetCommandInfo</ref>
<ref>Tcl_SetCommandInfo</ref>
<ref>Tcl_GetCommandName</ref>
<ref>Tcl_SetObjResult</ref>
</seealso>
<keywords>
<keyword>bind</keyword>
<keyword>command</keyword>
<keyword>create</keyword>
<keyword>delete</keyword>
<keyword>interpreter</keyword>
<keyword>namespace</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtErrHdlr" title="Tk_CreateErrorHandler">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtErrHdlr.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CreateErrorHandler" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateErrorHandler</name>
<name>Tk_DeleteErrorHandler</name>
<desc>handle X protocol errors</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_ErrorHandler
<fun>Tk_CreateErrorHandler</fun>(<m>display</m>, <m>error</m>, <m>request</m>, <m>minor</m>, <m>proc</m>, <m>clientData</m>)

<fun>Tk_DeleteErrorHandler</fun>(<m>handler</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display whose errors are to be handled.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>error</name>
<argmode>in</argmode>
<desc>Match only error events with this value in the <i>error_code</i>
field.  If -1, then match any <i>error_code</i> value.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>request</name>
<argmode>in</argmode>
<desc>Match only error events with this value in the <i>request_code</i>
field.  If -1, then match any <i>request_code</i> value.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>minor</name>
<argmode>in</argmode>
<desc>Match only error events with this value in the <i>minor_code</i>
field.  If -1, then match any <i>minor_code</i> value.
</desc>
</argdef>
<argdef>
<argtype>Tk_ErrorProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever an error event is received for
<i>display</i> and matches <i>error</i>, <i>request</i>, and <i>minor</i>.
NULL means ignore any matching errors.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_ErrorHandler</argtype>
<name>handler</name>
<argmode>in</argmode>
<desc>Token for error handler to delete (return value from a previous
call to <fun>Tk_CreateErrorHandler</fun>).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreateErrorHandler</fun> arranges for a particular procedure
(<i>proc</i>) to be called whenever certain protocol errors occur on a
particular display (<i>display</i>).  Protocol errors occur when
the X protocol is used incorrectly, such as attempting to map a window
that doesn't exist.  See the Xlib documentation for <b>XSetErrorHandler</b>
for more information on the kinds of errors that can occur.
For <i>proc</i> to be invoked
to handle a particular error, five things must occur:
</p>
<ol>
<li>The error must pertain to <i>display</i>.
</li>
<li>Either the <i>error</i> argument to <fun>Tk_CreateErrorHandler</fun>
must have been -1, or the <i>error</i> argument must match
the <i>error_code</i> field from the error event.
</li>
<li>Either the <i>request</i> argument to <fun>Tk_CreateErrorHandler</fun>
must have been -1, or the <i>request</i> argument must match
the <i>request_code</i> field from the error event.
</li>
<li>Either the <i>minor</i> argument to <fun>Tk_CreateErrorHandler</fun>
must have been -1, or the <i>minor</i> argument must match
the <i>minor_code</i> field from the error event.
</li>
<li>The protocol request to which the error pertains must have been
made when the handler was active (see below for more information).
</li>
</ol>
<p><i>Proc</i> should have arguments and result that match the
following type:
</p>
<syntax cat="type" name="Tk_ErrorProc" scope="global">
typedef int Tk_ErrorProc(
    ClientData <i>clientData</i>,
    XErrorEvent *<i>errEventPtr</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the <i>clientData</i>
argument given to <b>Tcl_CreateErrorHandler</b> when the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information that is
needed to deal with the error.  <i>ErrEventPtr</i> is
a pointer to the X error event.
The procedure <i>proc</i> should return an integer value.  If it
returns 0 it means that <i>proc</i> handled the error completely and there
is no need to take any other action for the error.  If it returns
non-zero it means <i>proc</i> was unable to handle the error.
</p>
<p>If a value of NULL is specified for <i>proc</i>, all matching errors
will be ignored:  this will produce the same result as if a procedure
had been specified that always returns 0.
</p>
<p>If more than more than one handler matches a particular error, then
they are invoked in turn.  The handlers will be invoked in reverse
order of creation:  most recently declared handler first.
If any handler returns 0, then subsequent (older) handlers will
not be invoked.  If no handler returns 0, then Tk invokes X'es
default error handler, which prints an error message and aborts the
program.  If you wish to have a default handler that deals with errors
that no other handler can deal with, then declare it first.
</p>
<p>The X documentation states that ``the error handler should not call
any functions (directly or indirectly) on the display that will
generate protocol requests or that will look for input events.''
This restriction applies to handlers declared by <fun>Tk_CreateErrorHandler</fun>;
disobey it at your own risk.
</p>
<p><fun>Tk_DeleteErrorHandler</fun> may be called to delete a
previously-created error handler.  The <i>handler</i> argument
identifies the error handler, and should be a value returned by
a previous call to <fun>Tk_CreateEventHandler</fun>.
</p>
<p>A particular error handler applies to errors resulting
from protocol requests generated between
the call to <fun>Tk_CreateErrorHandler</fun> and the call to
<fun>Tk_DeleteErrorHandler</fun>.  However, the actual callback
to <i>proc</i> may not occur until after the <fun>Tk_DeleteErrorHandler</fun>
call, due to buffering in the client and server.
If an error event pertains to
a protocol request made just before calling <fun>Tk_DeleteErrorHandler</fun>,
then the error event may not have been processed
before the <fun>Tk_DeleteErrorHandler</fun>
call.  When this situation arises, Tk will save information about
the handler and
invoke the handler's <i>proc</i> later when the error event
finally arrives.
If an application wishes to delete an error handler and know
for certain that all relevant errors have been processed,
it should first call <fun>Tk_DeleteErrorHandler</fun> and then
call <b>XSync</b>;  this will flush out any buffered requests and errors,
but will result in a performance penalty because
it requires communication to and from the X server.  After the
<b>XSync</b> call Tk is guaranteed not to call any error
handlers deleted before the <b>XSync</b> call.
</p>
<p>For the Tk error handling mechanism to work properly, it is essential
that application code never calls <b>XSetErrorHandler</b> directly;
applications should use only <fun>Tk_CreateErrorHandler</fun>.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>error</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtFileHdlr" version="8.0" title="Tcl_CreateFileHandler">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtFileHdlr.3,v 1.5 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_CreateFileHandler" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateFileHandler</name>
<name>Tcl_DeleteFileHandler</name>
<desc>associate procedure callbacks with files or devices (Unix only)</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_CreateFileHandler</fun>(<m>fd</m>, <m>mask</m>, <m>proc</m>, <m>clientData</m>)

<fun>Tcl_DeleteFileHandler</fun>(<m>fd</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>fd</name>
<argmode>in</argmode>
<desc>Unix file descriptor for an open file or device.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>Conditions under which <i>proc</i> should be called:
OR-ed combination of <b>TCL_READABLE</b>, <b>TCL_WRITABLE</b>,
and <b>TCL_EXCEPTION</b>.  May be set to 0 to temporarily disable
a handler.
</desc>
</argdef>
<argdef>
<argtype>Tcl_FileProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever the file or device indicated
by <i>file</i> meets the conditions specified by <i>mask</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateFileHandler</fun> arranges for <i>proc</i> to be
invoked in the future whenever I/O becomes possible on a file
or an exceptional condition exists for the file.  The file
is indicated by <i>fd</i>, and the conditions of interest
are indicated by <i>mask</i>.  For example, if <i>mask</i>
is <b>TCL_READABLE</b>, <i>proc</i> will be called when
the file is readable.
The callback to <i>proc</i> is made by <fun>Tcl_DoOneEvent</fun>, so
<fun>Tcl_CreateFileHandler</fun> is only useful in programs that dispatch
events through <fun>Tcl_DoOneEvent</fun> or through Tcl commands such
as <cmd>vwait</cmd>.
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tcl_FileProc</type>:
</p>
<syntax cat="type" name="Tcl_FileProc" scope="global">
typedef void Tcl_FileProc(
        ClientData <i>clientData</i>,
        int <i>mask</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy
of the <i>clientData</i>
argument given to <fun>Tcl_CreateFileHandler</fun> when the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information about
the file.  <i>Mask</i> is an integer mask indicating which
of the requested conditions actually exists for the file;  it
will contain a subset of the bits in the <i>mask</i> argument
to <fun>Tcl_CreateFileHandler</fun>.
</p>
<p>There may exist only one handler for a given file at a given time.
If <fun>Tcl_CreateFileHandler</fun> is called when a handler already
exists for <i>fd</i>, then the new callback replaces the information
that was previously recorded.
</p>
<p><fun>Tcl_DeleteFileHandler</fun> may be called to delete the
file handler for <i>fd</i>;  if no handler exists for the
file given by <i>fd</i> then the procedure has no effect.
</p>
<p>The purpose of file handlers is to enable an application to respond to
events while waiting for files to become ready for I/O.  For this to work
correctly, the application may need to use non-blocking I/O operations on
the files for which handlers are declared.  Otherwise the application may
block if it reads or writes too much data; while waiting for the I/O to
complete the application won't be able to service other events. Use
<fun>Tcl_SetChannelOption</fun> with <b>-blocking</b> to set the channel into
blocking or nonblocking mode as required.
</p>
<p>Note that these interfaces are only supported by the Unix
implementation of the Tcl notifier.   

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>file</keyword>
<keyword>handler</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtGenHdlr" title="Tk_CreateGenericHandler">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtGenHdlr.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CreateGenericHandler" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateGenericHandler</name>
<name>Tk_DeleteGenericHandler</name>
<desc>associate procedure callback with all X events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateGenericHandler</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tk_DeleteGenericHandler</fun>(<m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_GenericProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever any X event occurs on any display.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreateGenericHandler</fun> arranges for <i>proc</i> to be
invoked in the future whenever any X event occurs.  This mechanism is
<i>not</i> intended for dispatching X events on windows managed by Tk
(you should use <fun>Tk_CreateEventHandler</fun> for this purpose).
<fun>Tk_CreateGenericHandler</fun> is intended for other purposes, such
as tracing X events, monitoring events on windows not owned by Tk,
accessing X-related libraries that were not originally designed for
use with Tk, and so on.
</p>
<p>The callback to <i>proc</i> will be made by <fun>Tk_HandleEvent</fun>;
this mechanism only works in programs that dispatch events
through <fun>Tk_HandleEvent</fun> (or through other Tk procedures that
call <fun>Tk_HandleEvent</fun>, such as <b>Tk_DoOneEvent</b> or
<fun>Tk_MainLoop</fun>).
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tk_GenericProc</type>:
</p>
<syntax cat="type" name="Tk_GenericProc" scope="global">
typedef int Tk_GenericProc(
    ClientData <i>clientData</i>,
    XEvent *<i>eventPtr</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the <i>clientData</i>
argument given to <fun>Tk_CreateGenericHandler</fun> when the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information about
how to handle events.
<i>EventPtr</i> is a pointer to the X event.
</p>
<p>Whenever an X event is processed by <fun>Tk_HandleEvent</fun>, <i>proc</i>
is called.  The return value from <i>proc</i> is normally 0.
A non-zero return value indicates that the event is not to be handled
further; that is, <i>proc</i> has done all processing that is to be
allowed for the event.
</p>
<p>If there are multiple generic event handlers, each one is called
for each event, in the order in which they were established.
</p>
<p><fun>Tk_DeleteGenericHandler</fun> may be called to delete a
previously-created generic event handler:  it deletes each handler
it finds that matches the <i>proc</i> and <i>clientData</i> arguments.  If
no such handler exists, then <fun>Tk_DeleteGenericHandler</fun> returns
without doing anything.  Although Tk supports it, it's probably
a bad idea to have more than one callback with the same
<i>proc</i> and <i>clientData</i> arguments.
</p>
<p>Establishing a generic event handler does nothing to ensure that the
process will actually receive the X events that the handler wants to
process.
For example, it is the caller's responsibility to invoke
<b>XSelectInput</b> to select the desired events, if that is necessary.
</p>
</section>
<keywords>
<keyword>bind</keyword>
<keyword>callback</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtImgType" version="8.3" title="Tk_CreateImageType">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtImgType.3,v 1.10 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CreateImageType" section="3" date="8.3" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateImageType</name>
<name>Tk_GetImageMasterData</name>
<name>Tk_InitImageArgs</name>
<desc>define new kind of image</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateImageType</fun>(<m>typePtr</m>)

ClientData
<fun>Tk_GetImageMasterData</fun>(<m>interp</m>, <m>name</m>, <m>typePtrPtr</m>)

<fun>Tk_InitImageArgs</fun>(<m>interp</m>, <m>argc</m>, <m>argvPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_ImageType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Structure that defines the new type of image.
Must be static: a
pointer to this structure is retained by the image code.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which image was created.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of existing image.
</desc>
</argdef>
<argdef>
<argtype>Tk_ImageType</argtype>
<name name="typePtrPtr">**typePtrPtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store a pointer to type information for
the given image, if it exists.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of arguments
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="argvPtr">***argvPtr</name>
<argmode>in/out</argmode>
<desc>Pointer to argument list
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreateImageType</fun> is invoked to define a new kind of image.
An image type corresponds to a particular value of the <i>type</i>
argument for the <b>image create</b> command.  There may exist
any number of different image types, and new types may be defined
dynamically by calling <fun>Tk_CreateImageType</fun>.
For example, there might be one type for 2-color bitmaps,
another for multi-color images, another for dithered images,
another for video, and so on.
</p>
<p>The code that implements a new image type is called an
<i>image manager</i>.
It consists of a collection of procedures plus three different
kinds of data structures.
The first data structure is a Tk_ImageType structure, which contains
the name of the image type and pointers to five procedures provided
by the image manager to deal with images of this type:
</p>
<syntax cat="type" name="Tk_ImageType" scope="global">
typedef struct Tk_ImageType {
    char *<i>name</i>;
    Tk_ImageCreateProc *<i>createProc</i>;
    Tk_ImageGetProc *<i>getProc</i>;
    Tk_ImageDisplayProc *<i>displayProc</i>;
    Tk_ImageFreeProc *<i>freeProc</i>;
    Tk_ImageDeleteProc *<i>deleteProc</i>;
} Tk_ImageType;
</syntax>
<p>The fields of this structure will be described in later subsections
of this entry.
</p>
<p>The second major data structure manipulated by an image manager
is called an <i>image master</i>;  it contains overall information
about a particular image, such as the values of the configuration
options specified in an <b>image create</b> command.
There will usually be one of these structures for each
invocation of the <b>image create</b> command.
</p>
<p>The third data structure related to images is an <i>image instance</i>.
There will usually be one of these structures for each usage of an
image in a particular widget.
It is possible for a single image to appear simultaneously
in multiple widgets, or even multiple times in the same widget.
Furthermore, different instances may be on different screens
or displays.
The image instance data structure describes things that may
vary from instance to instance, such as colors and graphics
contexts for redisplay.
There is usually one instance structure for each <b>-image</b>
option specified for a widget or canvas item.
</p>
<p>The following subsections describe the fields of a Tk_ImageType
in more detail.

</p>
<subsection>
<title>NAME FIELD</title>
<p><i>typePtr-&gt;name</i> provides a name for the image type.
Once <fun>Tk_CreateImageType</fun> returns, this name may be used
in <b>image create</b> commands to create images of the new
type.
If there already existed an image type by this name then
the new image type replaces the old one.

</p>
</subsection>
<subsection>
<title>PORTABILITY</title>
<p>In Tk 8.2 and earlier, the createProc below had a different
signature. If you want to compile an image type using the
old interface which should still run on all Tcl/Tk versions,
compile it with the flag -DUSE_OLD_IMAGE. Further on, if
you are using Stubs, you need to call the function
Tk_InitImageArgs(interp, argc, &amp;argv) first in your
createProc. See below for a description of this function.

</p>
</subsection>
<subsection>
<title>CREATEPROC FIELD</title>
<p><i>typePtr-&gt;createProc</i> provides the address of a procedure for
Tk to call whenever <b>image create</b> is invoked to create
an image of the new type.
<i>typePtr-&gt;createProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageCreateProc" scope="global">
typedef int Tk_ImageCreateProc(
    Tcl_Interp *<i>interp</i>,
    char *<i>name</i>,
    int <i>objc</i>,
    Tcl_Obj *const <i>objv</i>[],
    Tk_ImageType *<i>typePtr</i>,
    Tk_ImageMaster <i>master</i>,
    ClientData *<i>masterDataPtr</i>);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the <b cat="AMBIGUOUS canvasitemtype cmd">image</b>
command was invoked, and <i>name</i> is the name for the new image,
which was either specified explicitly in the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> command
or generated automatically by the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> command.
The <i>objc</i> and <i>objv</i> arguments describe all the configuration
options for the new image (everything after the name argument to
<b cat="AMBIGUOUS canvasitemtype cmd">image</b>).
The <i>master</i> argument is a token that refers to Tk's information
about this image;  the image manager must return this token to
Tk when invoking the <fun>Tk_ImageChanged</fun> procedure.
Typically <i>createProc</i> will parse <i>objc</i> and <i>objv</i>
and create an image master data structure for the new image.
<i>createProc</i> may store an arbitrary one-word value at
*<i>masterDataPtr</i>, which will be passed back to the
image manager when other callbacks are invoked.
Typically the value is a pointer to the master data
structure for the image.
</p>
<p>If <i>createProc</i> encounters an error, it should leave an error
message in <i>interp-&gt;result</i> and return <b>TCL_ERROR</b>;  otherwise
it should return <b>TCL_OK</b>.
</p>
<p><i>createProc</i> should call <fun>Tk_ImageChanged</fun> in order to set the
size of the image and request an initial redisplay.

</p>
</subsection>
<subsection>
<title>GETPROC FIELD</title>
<p><i>typePtr-&gt;getProc</i> is invoked by Tk whenever a widget
calls <fun>Tk_GetImage</fun> to use a particular image.
This procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageGetProc" scope="global">
typedef ClientData Tk_ImageGetProc(
    Tk_Window <i>tkwin</i>,
    ClientData <i>masterData</i>);
</syntax>
<p>The <i>tkwin</i> argument identifies the window in which the
image will be used and <i>masterData</i> is the value
returned by <i>createProc</i> when the image master was created.
<i>getProc</i> will usually create a data structure for the new
instance, including such things as the resources needed to
display the image in the given window.
<i>getProc</i> returns a one-word token for the instance, which
is typically the address of the instance data structure.
Tk will pass this value back to the image manager when invoking
its <i>displayProc</i> and <i>freeProc</i> procedures.

</p>
</subsection>
<subsection>
<title>DISPLAYPROC FIELD</title>
<p><i>typePtr-&gt;displayProc</i> is invoked by Tk whenever an image needs
to be displayed (i.e., whenever a widget calls <fun>Tk_RedrawImage</fun>).
<i>displayProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageDisplayProc" scope="global">
typedef void Tk_ImageDisplayProc(
    ClientData <i>instanceData</i>,
    Display *<i>display</i>,
    Drawable <i>drawable</i>,
    int <i>imageX</i>,
    int <i>imageY</i>,
    int <i>width</i>,
    int <i>height</i>,
    int <i>drawableX</i>,
    int <i>drawableY</i>);
</syntax>
<p>The <i>instanceData</i> will be the same as the value returned by
<i>getProc</i> when the instance was created.
<i>display</i> and <i>drawable</i> indicate where to display the
image;  <i>drawable</i> may be a pixmap rather than
the window specified to <i>getProc</i> (this is usually the case,
since most widgets double-buffer their redisplay to get smoother
visual effects).
<i>imageX</i>, <i>imageY</i>, <i>width</i>, and <i>height</i>
identify the region of the image that must be redisplayed.
This region will always be within the size of the image
as specified in the most recent call to <fun>Tk_ImageChanged</fun>.
<i>drawableX</i> and <i>drawableY</i> indicate where in <i>drawable</i>
the image should be displayed;  <i>displayProc</i> should display
the given region of the image so that point (<i>imageX</i>, <i>imageY</i>)
in the image appears at (<i>drawableX</i>, <i>drawableY</i>) in <i>drawable</i>.

</p>
</subsection>
<subsection>
<title>FREEPROC FIELD</title>
<p><i>typePtr-&gt;freeProc</i> contains the address of a procedure that
Tk will invoke when an image instance is released (i.e., when
<fun>Tk_FreeImage</fun> is invoked).
This can happen, for example, when a widget is deleted or a image item
in a canvas is deleted, or when the image displayed in a widget or
canvas item is changed.
<i>freeProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageFreeProc" scope="global">
typedef void Tk_ImageFreeProc(
    ClientData <i>instanceData</i>,
    Display *<i>display</i>);
</syntax>
<p>The <i>instanceData</i> will be the same as the value returned by
<i>getProc</i> when the instance was created, and <i>display</i>
is the display containing the window for the instance.
<i>freeProc</i> should release any resources associated with the
image instance, since the instance will never be used again.

</p>
</subsection>
<subsection>
<title>DELETEPROC FIELD</title>
<p><i>typePtr-&gt;deleteProc</i> is a procedure that Tk invokes when an
image is being deleted (i.e. when the <b>image delete</b> command
is invoked).
Before invoking <i>deleteProc</i> Tk will invoke <i>freeProc</i> for
each of the image's instances.
<i>deleteProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageDeleteProc" scope="global">
typedef void Tk_ImageDeleteProc(
    ClientData <i>masterData</i>);
</syntax>
<p>The <i>masterData</i> argument will be the same as the value
stored in <i>*masterDataPtr</i> by <i>createProc</i> when the
image was created.
<i>deleteProc</i> should release any resources associated with
the image.

</p>
</subsection>
</section>
<section>
<title>TK_GETIMAGEMASTERDATA</title>
<p>The procedure <fun>Tk_GetImageMasterData</fun> may be invoked to retrieve
information about an image.  For example, an image manager can use this
procedure to locate its image master data for an image.
If there exists an image named <i>name</i>
in the interpreter given by <i>interp</i>, then <i>*typePtrPtr</i> is
filled in with type information for the image (the <i>typePtr</i> value
passed to <fun>Tk_CreateImageType</fun> when the image type was registered)
and the return value is the ClientData value returned by the
<i>createProc</i> when the image was created (this is typically a
pointer to the image master data structure).  If no such image exists
then NULL is returned and NULL is stored at <i>*typePtrPtr</i>.

</p>
</section>
<section>
<title>TK_INITIMAGEARGS</title>
<p>The function <fun>Tk_InitImageArgs</fun> converts the arguments of the
<b>createProc</b> from objects to strings when necessary. When
not using stubs, not using the old interface, or running
under an older (pre-8.3) Tk version, this function has no
effect. This function makes porting older image handlers to
the new interface a lot easier: After running this function,
the arguments are guaranteed to be in string format, no
matter how Tk deliverd them.

</p>
</section>
<seealso>
<ref>Tk_ImageChanged</ref>
<ref>Tk_GetImage</ref>
<ref>Tk_FreeImage</ref>
<ref>Tk_RedrawImage</ref>
<ref>Tk_SizeOfImage</ref>
</seealso>
<keywords>
<keyword>image manager</keyword>
<keyword>image type</keyword>
<keyword>instance</keyword>
<keyword>master</keyword>
</keywords>
</manpage>
<manpage version="7.5" cat="fun" title="Tcl_CreateInterp" id="CrtInterp">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtInterp.3,v 1.7 2002/06/26 11:50:52 msofer Exp $
 -->
<?TROFF.TH title="Tcl_CreateInterp" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateInterp</name>
<name>Tcl_DeleteInterp</name>
<name>Tcl_InterpDeleted</name>
<desc>create and delete Tcl command interpreters</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Interp *
<fun>Tcl_CreateInterp</fun>()

<fun>Tcl_DeleteInterp</fun>(<m>interp</m>)

int
<fun>Tcl_InterpDeleted</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Token for interpreter to be destroyed.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateInterp</fun> creates a new interpreter structure and returns
a token for it.  The token is required in calls to most other Tcl
procedures, such as <fun>Tcl_CreateCommand</fun>, <fun>Tcl_Eval</fun>, and
<fun>Tcl_DeleteInterp</fun>.
Clients are only allowed to access a few of the fields of
Tcl_Interp structures;  see the <type>Tcl_Interp</type>
and <fun>Tcl_CreateCommand</fun> man pages for details.
The new interpreter is initialized with the built-in Tcl commands
and with the variables documented in tclvars(n).  To bind in
additional commands, call <fun>Tcl_CreateCommand</fun>.
</p>
<p><fun>Tcl_DeleteInterp</fun> marks an interpreter as deleted; the interpreter
will eventually be deleted when all calls to <fun>Tcl_Preserve</fun> for it have
been matched by calls to <fun>Tcl_Release</fun>. At that time, all of the
resources associated with it, including variables, procedures, and
application-specific command bindings, will be deleted.  After
<fun>Tcl_DeleteInterp</fun> returns any attempt to use <fun>Tcl_Eval</fun> on the
interpreter will fail and return <b>TCL_ERROR</b>. After the call to
<fun>Tcl_DeleteInterp</fun> it is safe to examine the interpreter's result,
query or set the values of variables, define, undefine or retrieve
procedures, and examine the runtime evaluation stack. See below, in the
section <ref refid="interpreters-and-memory-management">INTERPRETERS AND MEMORY MANAGEMENT</ref> for details.
</p>
<p><fun>Tcl_InterpDeleted</fun> returns nonzero if <fun>Tcl_DeleteInterp</fun> was
called with <i>interp</i> as its argument; this indicates that the
interpreter will eventually be deleted, when the last call to
<fun>Tcl_Preserve</fun> for it is matched by a call to <fun>Tcl_Release</fun>. If
nonzero is returned, further calls to <fun>Tcl_Eval</fun> in this interpreter
will return <b>TCL_ERROR</b>.
</p>
<p><fun>Tcl_InterpDeleted</fun> is useful in deletion callbacks to distinguish
between when only the memory the callback is responsible for is being
deleted and when the whole interpreter is being deleted. In the former case
the callback may recreate the data being deleted, but this would lead to an
infinite loop if the interpreter were being deleted.

</p>
</section>
<section id="interpreters-and-memory-management">
<title>INTERPRETERS AND MEMORY MANAGEMENT</title>
<p><fun>Tcl_DeleteInterp</fun> can be called at any time on an interpreter that may
be used by nested evaluations and C code in various extensions. Tcl
implements a simple mechanism that allows callers to use interpreters
without worrying about the interpreter being deleted in a nested call, and
without requiring special code to protect the interpreter, in most cases.
This mechanism ensures that nested uses of an interpreter can safely
continue using it even after <fun>Tcl_DeleteInterp</fun> is called.
</p>
<p>The mechanism relies on matching up calls to <fun>Tcl_Preserve</fun> with calls
to <fun>Tcl_Release</fun>. If <fun>Tcl_DeleteInterp</fun> has been called, only when
the last call to <fun>Tcl_Preserve</fun> is matched by a call to
<fun>Tcl_Release</fun>, will the interpreter be freed. See the manual entry for
<fun>Tcl_Preserve</fun> for a description of these functions.
</p>
<p>The rules for when the user of an interpreter must call <fun>Tcl_Preserve</fun>
and <fun>Tcl_Release</fun> are simple:
</p>
<dl>
<dle>
<dt>Interpreters Passed As Arguments</dt>
<dd>Functions that are passed an interpreter as an argument can safely use the
interpreter without any special protection. Thus, when you write an
extension consisting of new Tcl commands, no special code is needed to
protect interpreters received as arguments. This covers the majority of all
uses.
</dd>
</dle>
<dle>
<dt>Interpreter Creation And Deletion</dt>
<dd>When a new interpreter is created and used in a call to <fun>Tcl_Eval</fun>,
<fun>Tcl_VarEval</fun>, <fun>Tcl_GlobalEval</fun>, <fun>Tcl_SetVar</fun>, or
<fun>Tcl_GetVar</fun>, a pair of calls to <fun>Tcl_Preserve</fun> and
<fun>Tcl_Release</fun> should be wrapped around all uses of the interpreter.
Remember that it is unsafe to use the interpreter once <fun>Tcl_Release</fun>
has been called. To ensure that the interpreter is properly deleted when
it is no longer needed, call <fun>Tcl_InterpDeleted</fun> to test if some other
code already called <fun>Tcl_DeleteInterp</fun>; if not, call
<fun>Tcl_DeleteInterp</fun> before calling <fun>Tcl_Release</fun> in your own code.
</dd>
</dle>
<dle>
<dt>Retrieving An Interpreter From A Data Structure</dt>
<dd>When an interpreter is retrieved from a data structure (e.g. the client
data of a callback) for use in <fun>Tcl_Eval</fun>, <fun>Tcl_VarEval</fun>,
<fun>Tcl_GlobalEval</fun>, <fun>Tcl_SetVar</fun>, or <fun>Tcl_GetVar</fun>, a pair of
calls to <fun>Tcl_Preserve</fun> and <fun>Tcl_Release</fun> should be wrapped around
all uses of the interpreter; it is unsafe to reuse the interpreter once
<fun>Tcl_Release</fun> has been called.  If an interpreter is stored inside a
callback data structure, an appropriate deletion cleanup mechanism should
be set up by the code that creates the data structure so that the
interpreter is removed from the data structure (e.g. by setting the field
to NULL) when the interpreter is deleted. Otherwise, you may be using an
interpreter that has been freed and whose memory may already have been
reused.
</dd>
</dle>
</dl>
<p>All uses of interpreters in Tcl and Tk have already been protected.
Extension writers should ensure that their code also properly protects any
additional interpreters used, as described above.

</p>
</section>
<seealso>
<ref>Tcl_Preserve(3)</ref>
<ref>Tcl_Release(3)</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>create</keyword>
<keyword>delete</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtItemType" version="4.0" title="Tk_CreateItemType">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1995 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtItemType.3,v 1.10 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CreateItemType" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateItemType</name>
<name>Tk_GetItemTypes</name>
<desc>define new kind of canvas item</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateItemType</fun>(<m>typePtr</m>)

Tk_ItemType *
<fun>Tk_GetItemTypes</fun>()
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_ItemType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Structure that defines the new type of canvas item.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>INTRODUCTION</title>
<p><fun>Tk_CreateItemType</fun> is invoked to define a new kind of canvas item
described by the <i>typePtr</i> argument.
An item type corresponds to a particular value of the <i>type</i>
argument to the <b>create</b> widget command for canvases, and
the code that implements a canvas item type is called a <i>type manager</i>.
Tk defines several built-in item types, such as <b cat="canvasitemtype">rectangle</b>
and <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> and <b cat="AMBIGUOUS canvasitemtype cmd">image</b>, but <fun>Tk_CreateItemType</fun>
allows additional item types to be defined.
Once <fun>Tk_CreateItemType</fun> returns, the new item type may be used
in new or existing canvas widgets just like the built-in item
types.
</p>
<p><fun>Tk_GetItemTypes</fun> returns a pointer to the first in the list
of all item types currently defined for canvases.
The entries in the list are linked together through their
<i>nextPtr</i> fields, with the end of the list marked by a
NULL <i>nextPtr</i>.
</p>
<p>You may find it easier to understand the rest of this manual entry
by looking at the code for an existing canvas item type such as
bitmap (file tkCanvBmap.c) or text (tkCanvText.c).
The easiest way to create a new type manager is to copy the code
for an existing type and modify it for the new type.
</p>
<p>Tk provides a number of utility procedures for the use of canvas
type managers, such as <b>Tk_CanvasCoords</b> and <fun>Tk_CanvasPsColor</fun>;
these are described in separate manual entries.

</p>
</section>
<section>
<title>DATA STRUCTURES</title>
<p>A type manager consists of a collection of procedures that provide a
standard set of operations on items of that type.
The type manager deals with three kinds of data
structures.
The first data structure is a Tk_ItemType; it contains
information such as the name of the type and pointers to
the standard procedures implemented by the type manager:
</p>
<syntax cat="type" name="Tk_ItemType" scope="global">
typedef struct Tk_ItemType {
    char *<i>name</i>;
    int <i>itemSize</i>;
    Tk_ItemCreateProc *<i>createProc</i>;
    Tk_ConfigSpec *<i>configSpecs</i>;
    Tk_ItemConfigureProc *<i>configProc</i>;
    Tk_ItemCoordProc *<i>coordProc</i>;
    Tk_ItemDeleteProc *<i>deleteProc</i>;
    Tk_ItemDisplayProc *<i>displayProc</i>;
    int <i>alwaysRedraw</i>;
    Tk_ItemPointProc *<i>pointProc</i>;
    Tk_ItemAreaProc *<i>areaProc</i>;
    Tk_ItemPostscriptProc *<i>postscriptProc</i>;
    Tk_ItemScaleProc *<i>scaleProc</i>;
    Tk_ItemTranslateProc *<i>translateProc</i>;
    Tk_ItemIndexProc *<i>indexProc</i>;
    Tk_ItemCursorProc *<i>icursorProc</i>;
    Tk_ItemSelectionProc *<i>selectionProc</i>;
    Tk_ItemInsertProc *<i>insertProc</i>;
    Tk_ItemDCharsProc *<i>dCharsProc</i>;
    Tk_ItemType *<i>nextPtr</i>;
} Tk_ItemType;
</syntax>
<p>The fields of a Tk_ItemType structure are described in more detail
later in this manual entry.
When <fun>Tk_CreateItemType</fun> is called, its <i>typePtr</i>
argument must point to a structure with all of the fields initialized
except <i>nextPtr</i>, which Tk sets to link all the types together
into a list.
The structure must be in permanent memory (either statically
allocated or dynamically allocated but never freed);  Tk retains
a pointer to this structure.
</p>
<p>The second data structure manipulated by a type manager is an
<i>item record</i>.
For each item in a canvas there exists one item record.
All of the items of a given type generally have item records with
the same structure, but different types usually have different
formats for their item records.
The first part of each item record is a header with a standard structure
defined by Tk via the type Tk_Item;  the rest of the item
record is defined by the type manager.
A type manager must define its item records with a Tk_Item as
the first field.
For example, the item record for bitmap items is defined as follows:
</p>
<syntax cat="type" name="BitmapItem" scope="global">
typedef struct BitmapItem {
    Tk_Item <i>header</i>;
    double <i>x</i>, <i>y</i>;
    Tk_Anchor <i>anchor</i>;
    Pixmap <i>bitmap</i>;
    XColor *<i>fgColor</i>;
    XColor *<i>bgColor</i>;
    GC <i>gc</i>;
} BitmapItem;
</syntax>
<p>The <i>header</i> substructure contains information used by Tk
to manage the item, such as its identifier, its tags, its type,
and its bounding box.
The fields starting with <i>x</i> belong to the type manager:
Tk will never read or write them.
The type manager should not need to read or write any of the
fields in the header except for four fields
whose names are <i>x1</i>, <i>y1</i>, <i>x2</i>, and <i>y2</i>.
These fields give a bounding box for the items using integer
canvas coordinates:  the item should not cover any pixels
with x-coordinate lower than <i>x1</i> or y-coordinate
lower than <i>y1</i>, nor should it cover any pixels with
x-coordinate greater than or equal to <i>x2</i> or y-coordinate
greater than or equal to <i>y2</i>.
It is up to the type manager to keep the bounding box up to
date as the item is moved and reconfigured.
</p>
<p>Whenever Tk calls a procedure in a type manager it passes in a pointer
to an item record.
The argument is always passed as a pointer to a Tk_Item;  the type
manager will typically cast this into a pointer to its own specific
type, such as BitmapItem.
</p>
<p>The third data structure used by type managers has type
Tk_Canvas;  it serves as an opaque handle for the canvas widget
as a whole.
Type managers need not know anything about the contents of this
structure.
A Tk_Canvas handle is typically passed in to the
procedures of a type manager, and the type manager can pass the
handle back to library procedures such as Tk_CanvasTkwin
to fetch information about the canvas.

</p>
</section>
<section>
<title>NAME FIELD</title>
<p>This section and the ones that follow describe each of the fields
in a Tk_ItemType structure in detail.
The <i>name</i> field provides a string name for the item type.
Once <fun>Tk_CreateImageType</fun> returns, this name may be used
in <b>create</b> widget commands to create items of the new
type.
If there already existed an item type by this name then
the new item type replaces the old one.

</p>
</section>
<section>
<title>ITEMSIZE</title>
<p><i>typePtr-&gt;itemSize</i> gives the size in bytes of item records
of this type, including the Tk_Item header.
Tk uses this size to allocate memory space for items of the type.
All of the item records for a given type must have the same size.
If variable length fields are needed for an item (such as a list
of points for a polygon), the type manager can allocate a separate
object of variable length and keep a pointer to it in the item record.

</p>
</section>
<section>
<title>CREATEPROC</title>
<p><i>typePtr-&gt;createProc</i> points to a procedure for
Tk to call whenever a new item of this type is created.
<i>typePtr-&gt;createProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemCreateProc" scope="global">
typedef int Tk_ItemCreateProc(
    Tcl_Interp *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[]);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the canvas's
<b>create</b> widget command was invoked, and <i>canvas</i> is a
handle for the canvas widget.
<i>itemPtr</i> is a pointer to a newly-allocated item of
size <i>typePtr-&gt;itemSize</i>.
Tk has already initialized the item's header (the first
<b>sizeof(Tk_ItemType)</b> bytes).
The <i>objc</i> and <i>objv</i> arguments describe all of the
arguments to the <b>create</b> command after the <i>type</i>
argument.
For example, in the widget command
</p>
<example>
<b>.c create rectangle 10 20 50 50 -fill black</b>
</example>
<p><i>objc</i> will be <b>6</b> and <i>objv</i>[0] will contain the
integer object <b>10</b>.
</p>
<p><i>createProc</i> should use <i>objc</i> and <i>objv</i> to initialize
the type-specific parts of the item record and set an initial value
for the bounding box in the item's header.
It should return a standard Tcl completion code and leave an
error message in <i>interp-&gt;result</i> if an error occurs.
If an error occurs Tk will free the item record, so <i>createProc</i>
must be sure to leave the item record in a clean state if it returns an error
(e.g., it must free any additional memory that it allocated for
the item).

</p>
</section>
<section>
<title>CONFIGSPECS</title>
<p>Each type manager must provide a standard table describing its
configuration options, in a form suitable for use with
<fun>Tk_ConfigureWidget</fun>.
This table will normally be used by <i>typePtr-&gt;createProc</i>
and <i>typePtr-&gt;configProc</i>, but Tk also uses it directly
to retrieve option information in the <b>itemcget</b> and
<b>itemconfigure</b> widget commands.
<i>typePtr-&gt;configSpecs</i> must point to the configuration table
for this type.
Note: Tk provides a custom option type <b>tk_CanvasTagsOption</b>
for implementing the <b>-tags</b> option;  see an existing type
manager for an example of how to use it in <i>configSpecs</i>.

</p>
</section>
<section>
<title>CONFIGPROC</title>
<p><i>typePtr-&gt;configProc</i> is called by Tk whenever the
<b>itemconfigure</b> widget command is invoked to change the
configuration options for a canvas item.
This procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemConfigureProc" scope="global">
typedef int Tk_ItemConfigureProc(
    Tcl_Interp *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[],
    int <i>flags</i>);
</syntax>
<p>The <i>interp</i> objument identifies the interpreter in which the
widget command was invoked,  <i>canvas</i> is a handle for the canvas
widget, and <i>itemPtr</i> is a pointer to the item being configured.
<i>objc</i> and <i>objv</i> contain the configuration options.  For
example, if the following command is invoked:
</p>
<example>
<b>.c itemconfigure 2 -fill red -outline black</b>
</example>
<p><i>objc</i> is <b>4</b> and <i>objv</i> contains the string objects <b>-fill</b>
through <b>black</b>.
<i>objc</i> will always be an even value.
The  <i>flags</i> argument contains flags to pass to <fun>Tk_ConfigureWidget</fun>;
currently this value is always <b>TK_CONFIG_ARGV_ONLY</b> when Tk
invokes <i>typePtr-&gt;configProc</i>, but the type manager's <i>createProc</i>
procedure will usually invoke <i>configProc</i> with different flag values.
</p>
<p><i>typePtr-&gt;configProc</i> returns a standard Tcl completion code and
leaves an error message in <i>interp-&gt;result</i> if an error occurs.
It must update the item's bounding box to reflect the new configuration
options.

</p>
</section>
<section>
<title>COORDPROC</title>
<p><i>typePtr-&gt;coordProc</i> is invoked by Tk to implement the <b>coords</b>
widget command for an item.
It must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemCoordProc" scope="global">
typedef int Tk_ItemCoordProc(
    Tcl_Interp *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>objc</i>,
    Tcl_Obj* const <i>objv</i>[]);
</syntax>
<p>The arguments <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i>
all have the standard meanings, and <i>objc</i> and <i>objv</i>
describe the coordinate arguments.
For example, if the following widget command is invoked:
</p>
<example>
<b>.c coords 2 30 90</b>
</example>
<p><i>objc</i> will be <b>2</b> and <b>objv</b> will contain the integer objects
<b>30</b> and <b>90</b>.
</p>
<p>The <i>coordProc</i> procedure should process the new coordinates,
update the item appropriately (e.g., it must reset the bounding
box in the item's header), and return a standard Tcl completion
code.
If an error occurs, <i>coordProc</i> must leave an error message in
<i>interp-&gt;result</i>.

</p>
</section>
<section>
<title>DELETEPROC</title>
<p><i>typePtr-&gt;deleteProc</i> is invoked by Tk to delete an item
and free any resources allocated to it.
It must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemDeleteProc" scope="global">
typedef void Tk_ItemDeleteProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    Display *<i>display</i>);
</syntax>
<p>The <i>canvas</i> and <i>itemPtr</i> arguments have the usual
interpretations, and <i>display</i> identifies the X display containing
the canvas.
<i>deleteProc</i> must free up any resources allocated for the item,
so that Tk can free the item record.
<i>deleteProc</i> should not actually free the item record;  this will
be done by Tk when <i>deleteProc</i> returns.

</p>
</section>
<section>
<title>DISPLAYPROC AND ALWAYSREDRAW</title>
<p><i>typePtr-&gt;displayProc</i> is invoked by Tk to redraw an item
on the screen.
It must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemDisplayProc" scope="global">
typedef void Tk_ItemDisplayProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    Display *<i>display</i>,
    Drawable <i>dst</i>,
    int <i>x</i>,
    int <i>y</i>,
    int <i>width</i>,
    int <i>height</i>);
</syntax>
<p>The <i>canvas</i> and <i>itemPtr</i> arguments have the usual meaning.
<i>display</i> identifies the display containing the canvas, and
<i>dst</i> specifies a drawable in which the item should be rendered;
typically this is an off-screen pixmap, which Tk will copy into
the canvas's window once all relevant items have been drawn.
<i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i> specify a rectangular
region in canvas coordinates, which is the area to be redrawn;
only information that overlaps this area needs to be redrawn.
Tk will not call <i>displayProc</i> unless the item's bounding box
overlaps the redraw area, but the type manager may wish to use
the redraw area to optimize the redisplay of the item.
</p>
<p>Because of scrolling and the use of off-screen pixmaps for
double-buffered redisplay, the item's coordinates in <i>dst</i>
will not necessarily be the same as those in the canvas.
<i>displayProc</i> should call <fun>Tk_CanvasDrawableCoords</fun>
to transform coordinates from those of the canvas to those
of <i>dst</i>.
</p>
<p>Normally an item's <i>displayProc</i> is only invoked if the item
overlaps the area being displayed.
However, if <i>typePtr-&gt;alwaysRedraw</i> has a non-zero value, then
<i>displayProc</i> is invoked during every redisplay operation,
even if the item doesn't overlap the area of redisplay.
<i>alwaysRedraw</i> should normally be set to 0;  it is only
set to 1 in special cases such as window items that need to be
unmapped when they are off-screen.

</p>
</section>
<section>
<title>POINTPROC</title>
<p><i>typePtr-&gt;pointProc</i> is invoked by Tk to find out how close
a given point is to a canvas item.
Tk uses this procedure for purposes such as locating the item
under the mouse or finding the closest item to a given point.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemPointProc" scope="global">
typedef double Tk_ItemPointProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double *<i>pointPtr</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meaning.
<i>pointPtr</i> points to an array of two numbers giving
the x and y coordinates of a point.
<i>pointProc</i> must return a real value giving the distance
from the point to the item, or 0 if the point lies inside
the item.

</p>
</section>
<section>
<title>AREAPROC</title>
<p><i>typePtr-&gt;areaProc</i> is invoked by Tk to find out the relationship
between an item and a rectangular area.
It must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemAreaProc" scope="global">
typedef int Tk_ItemAreaProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double *<i>rectPtr</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meaning.
<i>rectPtr</i> points to an array of four real numbers;
the first two give the x and y coordinates of the upper left
corner of a rectangle, and the second two give the x and y
coordinates of the lower right corner.
<i>areaProc</i> must return -1 if the item lies entirely outside
the given area, 0 if it lies partially inside and partially
outside the area, and 1 if it lies entirely inside the area.

</p>
</section>
<section>
<title>POSTSCRIPTPROC</title>
<p><i>typePtr-&gt;postscriptProc</i> is invoked by Tk to generate
Postscript for an item during the <b>postscript</b> widget command.
If the type manager is not capable of generating Postscript then
<i>typePtr-&gt;postscriptProc</i> should be NULL.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemPostscriptProc" scope="global">
typedef int Tk_ItemPostscriptProc(
    Tcl_Interp *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>prepass</i>);
</syntax>
<p>The <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i> arguments all have
standard meanings;  <i>prepass</i> will be described below.
If <i>postscriptProc</i> completes successfully, it should append
Postscript for the item to the information in <i>interp-&gt;result</i>
(e.g. by calling <fun>Tcl_AppendResult</fun>, not <fun>Tcl_SetResult</fun>)
and return <b>TCL_OK</b>.
If an error occurs, <i>postscriptProc</i> should clear the result
and replace its contents with an error message;  then it should
return <b>TCL_ERROR</b>.
</p>
<p>Tk provides a collection of utility procedures to simplify
<i>postscriptProc</i>.
For example, <fun>Tk_CanvasPsColor</fun> will generate Postscript to set
the current color to a given Tk color and <fun>Tk_CanvasPsFont</fun> will
set up font information.
When generating Postscript, the type manager is free to change the
graphics state of the Postscript interpreter, since Tk places
<b>gsave</b> and <b>grestore</b> commands around the Postscript for
the item.
The type manager can use canvas x coordinates directly in its Postscript,
but it must call <fun>Tk_CanvasPsY</fun> to convert y coordinates from
the space of the canvas (where the origin is at the
upper left) to the space of Postscript (where the origin is at the
lower left).
</p>
<p>In order to generate Postscript that complies with the Adobe Document
Structuring Conventions, Tk actually generates Postscript in two passes.
It calls each item's <i>postscriptProc</i> in each pass.
The only purpose of the first pass is to collect font information
(which is done by <fun>Tk_CanvasPsFont</fun>);  the actual Postscript is
discarded.
Tk sets the <i>prepass</i> argument to <i>postscriptProc</i> to 1
during the first pass;  the type manager can use <i>prepass</i> to skip
all Postscript generation except for calls to <fun>Tk_CanvasPsFont</fun>.
During the second pass <i>prepass</i> will be 0, so the type manager
must generate complete Postscript.

</p>
</section>
<section>
<title>SCALEPROC</title>
<p><i>typePtr-&gt;scaleProc</i> is invoked by Tk to rescale a canvas item
during the <b cat="AMBIGUOUS widget cmd">scale</b> widget command.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemScaleProc" scope="global">
typedef void Tk_ItemScaleProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double <i>originX</i>,
    double <i>originY</i>,
    double <i>scaleX</i>,
    double <i>scaleY</i>);
</syntax>
<p>The <i>canvas</i> and <i>itemPtr</i> arguments have the usual meaning.
<i>originX</i> and <i>originY</i> specify an origin relative to which
the item is to be scaled, and <i>scaleX</i> and <i>scaleY</i> give the
x and y scale factors.
The item should adjust its coordinates so that a point in the item
that used to have coordinates <i>x</i> and <i>y</i> will have new
coordinates <i>x'</i> and <i>y'</i>, where
</p>
<example>
<i>x' = originX  + scaleX*(x-originX)
y' = originY + scaleY*(y-originY)</i>
</example>
<p><i>scaleProc</i> must also update the bounding box in the item's
header.

</p>
</section>
<section>
<title>TRANSLATEPROC</title>
<p><i>typePtr-&gt;translateProc</i> is invoked by Tk to translate a canvas item
during the <b>move</b> widget command.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemTranslateProc" scope="global">
typedef void Tk_ItemTranslateProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    double <i>deltaX</i>,
    double <i>deltaY</i>);
</syntax>
<p>The <i>canvas</i> and <i>itemPtr</i> arguments have the usual meaning,
and <i>deltaX</i> and <i>deltaY</i> give the amounts that should be
added to each x and y coordinate within the item.
The type manager should adjust the item's coordinates and
update the bounding box in the item's header.

</p>
</section>
<section>
<title>INDEXPROC</title>
<p><i>typePtr-&gt;indexProc</i> is invoked by Tk to translate a string
index specification into a numerical index, for example during the
<b>index</b> widget command.
It is only relevant for item types that support indexable text;
<i>typePtr-&gt;indexProc</i> may be specified as NULL for non-textual
item types.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemIndexProc" scope="global">
typedef int Tk_ItemIndexProc(
    Tcl_Interp *<i>interp</i>,
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    char <i>indexString</i>,
    int *<i>indexPtr</i>);
</syntax>
<p>The <i>interp</i>, <i>canvas</i>, and <i>itemPtr</i> arguments all
have the usual meaning.
<i>indexString</i> contains a textual description of an index,
and <i>indexPtr</i> points to an integer value that should be
filled in with a numerical index.
It is up to the type manager to decide what forms of index
are supported (e.g., numbers, <b>insert</b>,  <b>sel.first</b>,
<b>end</b>, etc.).
<i>indexProc</i> should return a Tcl completion code and set
<i>interp-&gt;result</i> in the event of an error.

</p>
</section>
<section>
<title>ICURSORPROC</title>
<p><i>typePtr-&gt;icursorProc</i> is invoked by Tk during
the <b>icursor</b> widget command to set the position of the
insertion cursor in a textual item.
It is only relevant for item types that support an insertion cursor;
<i>typePtr-&gt;icursorProc</i> may be specified as NULL for item types
that don't support an insertion cursor.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemCursorProc" scope="global">
typedef void Tk_ItemCursorProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>index</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meanings, and
<i>index</i> is an index into the item's text, as returned by a
previous call to <i>typePtr-&gt;insertProc</i>.
The type manager should position the insertion cursor in the
item just before the character given by <i>index</i>.
Whether or not to actually display the insertion cursor is
determined by other information provided by <fun>Tk_CanvasGetTextInfo</fun>.

</p>
</section>
<section>
<title>SELECTIONPROC</title>
<p><i>typePtr-&gt;selectionProc</i> is invoked by Tk during selection
retrievals;  it must return part or all of the selected text in
the item (if any).
It is only relevant for item types that support text;
<i>typePtr-&gt;selectionProc</i> may be specified as NULL for non-textual
item types.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemSelectionProc" scope="global">
typedef int Tk_ItemSelectionProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>offset</i>,
    char *<i>buffer</i>,
    int <i>maxBytes</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>offset</i> is an offset in bytes into the selection where 0 refers
to the first byte of the selection;  it identifies
the first character that is to be returned in this call.
<i>buffer</i> points to an area of memory in which to store the
requested bytes, and <i>maxBytes</i> specifies the maximum number
of bytes to return.
<i>selectionProc</i> should extract up to <i>maxBytes</i> characters
from the selection and copy them to <i>maxBytes</i>;  it should
return a count of the number of bytes actually copied, which may
be less than <i>maxBytes</i> if there aren't <i>offset+maxBytes</i> bytes
in the selection.

</p>
</section>
<section>
<title>INSERTPROC</title>
<p><i>typePtr-&gt;insertProc</i> is invoked by Tk during
the <b>insert</b> widget command to insert new text into a
canvas item.
It is only relevant for item types that support text;
<i>typePtr-&gt;insertProc</i> may be specified as NULL for non-textual
item types.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemInsertProc" scope="global">
typedef void Tk_ItemInsertProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>index</i>,
    char *<i>string</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>index</i> is an index into the item's text, as returned by a
previous call to <i>typePtr-&gt;insertProc</i>, and <i>string</i>
contains new text to insert just before the character given
by <i>index</i>.
The type manager should insert the text and recompute the bounding
box in the item's header.

</p>
</section>
<section>
<title>DCHARSPROC</title>
<p><i>typePtr-&gt;dCharsProc</i> is invoked by Tk during the <b>dchars</b>
widget command to delete a range of text from a canvas item.
It is only relevant for item types that support text;
<i>typePtr-&gt;dCharsProc</i> may be specified as NULL for non-textual
item types.
The procedure must match the following prototype:
</p>
<syntax cat="type" name="Tk_ItemDCharsProc" scope="global">
typedef void Tk_ItemDCharsProc(
    Tk_Canvas <i>canvas</i>,
    Tk_Item *<i>itemPtr</i>,
    int <i>first</i>,
    int <i>last</i>);
</syntax>
<p><i>canvas</i> and <i>itemPtr</i> have the usual meanings.
<i>first</i> and <i>last</i> give the indices of the first and last bytes
to be deleted, as returned by previous calls to <i>typePtr-&gt;indexProc</i>.
The type manager should delete the specified characters and update
the bounding box in the item's header.

</p>
</section>
<seealso>
<ref>Tk_CanvasPsY</ref>
<ref>Tk_CanvasTextInfo</ref>
<ref>Tk_CanvasTkwin</ref>
</seealso>
<keywords>
<keyword>canvas</keyword>
<keyword>focus</keyword>
<keyword>item type</keyword>
<keyword>selection</keyword>
<keyword>type manager</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtMathFnc" version="8.4" title="Tcl_CreateMathFunc">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtMathFnc.3,v 1.13 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_CreateMathFunc" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateMathFunc</name>
<name>Tcl_GetMathFuncInfo</name>
<name>Tcl_ListMathFuncs</name>
<desc>Define, query and enumerate math functions for expressions</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_CreateMathFunc</fun>(<m>interp</m>, <m>name</m>, <m>numArgs</m>, <m>argTypes</m>, <m>proc</m>, <m>clientData</m>)

int
<fun>Tcl_GetMathFuncInfo</fun>(<m>interp</m>, <m>name</m>, <m>numArgsPtr</m>, <m>argTypesPtr</m>, <m>procPtr</m>, <m>clientDataPtr</m>)

Tcl_Obj *
<fun>Tcl_ListMathFuncs</fun>(<m>interp</m>, <m>pattern</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which new function will be defined.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name for new function.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numArgs</name>
<argmode>in</argmode>
<desc>Number of arguments to new function;  also gives size of <i>argTypes</i> array.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ValueType</argtype>
<name name="argTypes">*argTypes</name>
<argmode>in</argmode>
<desc>Points to an array giving the permissible types for each argument to
function.
</desc>
</argdef>
<argdef>
<argtype>Tcl_MathProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure that implements the function.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i> when it is invoked.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="numArgsPtr">*numArgsPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will be set to contain the number of
arguments to the function.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ValueType</argtype>
<name name="argTypesPtr">**argTypesPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will be set to contain a pointer to an array
giving the permissible types for each argument to the function which
will need to be freed up using <i>Tcl_Free</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_MathProc</argtype>
<name name="procPtr">**procPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will be set to contain a pointer to the
implementation code for the function (or NULL if the function is
implemented directly in bytecode).
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="clientDataPtr">*clientDataPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will be set to contain the clientData
argument passed to <i>Tcl_CreateMathFunc</i> when the function was
created if the function is not implemented directly in bytecode.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>Pattern to match against function names so as to filter them (by
passing to <i>Tcl_StringMatch</i>), or NULL to not apply any filter.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl allows a number of mathematical functions to be used in
expressions, such as <b cat="mathfunc">sin</b>, <b cat="mathfunc">cos</b>, and <b cat="mathfunc">hypot</b>.
These functions are represented by commands in the namespace,
<b>tcl::mathfunc</b>.  The <fun>Tcl_CreateMathFunc</fun> function is
an obsolete way for applications to add additional functions
to those already provided by Tcl or to replace existing functions.
It should not be used by new applications, which should create
math functions using <fun>Tcl_CreateObjCommand</fun> to create a command
in the <b>tcl::mathfunc</b> namespace.
</p>
<p>In the <fun>Tcl_CreateMathFunc</fun> interface,
<i>Name</i> is the name of the function as it will appear in expressions.
If <i>name</i> doesn't already exist in the <b>::tcl::mathfunc</b>
namespace, then a new command is created in that namespace.
If <i>name</i> does exist, then the existing function is replaced.
<i>NumArgs</i> and <i>argTypes</i> describe the arguments to the function.
Each entry in the <i>argTypes</i> array must be
one of <b>TCL_INT</b>, <b>TCL_DOUBLE</b>, <b>TCL_WIDE_INT</b>,
or <b>TCL_EITHER</b> to indicate whether the corresponding argument must be an
integer, a double-precision floating value, a wide (64-bit) integer,
or any, respectively.
</p>
<p>Whenever the function is invoked in an expression Tcl will invoke
<i>proc</i>.  <i>Proc</i> should have arguments and result that match
the type <type>Tcl_MathProc</type>:
</p>
<syntax cat="type" name="Tcl_MathProc" scope="global">
typedef int Tcl_MathProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        Tcl_Value *<i>args</i>,
        Tcl_Value *<i>resultPtr</i>);
</syntax>
<p>When <i>proc</i> is invoked the <i>clientData</i> and <i>interp</i>
arguments will be the same as those passed to <fun>Tcl_CreateMathFunc</fun>.
<i>Args</i> will point to an array of <i>numArgs</i> Tcl_Value structures,
which describe the actual arguments to the function:
</p>
<syntax cat="type" name="Tcl_Value" scope="global">
typedef struct Tcl_Value {
        Tcl_ValueType <i>type</i>;
        long <i>intValue</i>;
        double <i>doubleValue</i>;
        Tcl_WideInt <i>wideValue</i>;
} Tcl_Value;
</syntax>
<p>The <i>type</i> field indicates the type of the argument and is
one of <b>TCL_INT</b>, <b>TCL_DOUBLE</b> or <b>TCL_WIDE_INT</b>.
It will match the <i>argTypes</i> value specified for the function unless
the <i>argTypes</i> value was <b>TCL_EITHER</b>. Tcl converts
the argument supplied in the expression to the type requested in
<i>argTypes</i>, if that is necessary.
Depending on the value of the <i>type</i> field, the <i>intValue</i>,
<i>doubleValue</i> or <i>wideValue</i>
field will contain the actual value of the argument.
</p>
<p><i>Proc</i> should compute its result and store it either as an integer
in <i>resultPtr-&gt;intValue</i> or as a floating value in
<i>resultPtr-&gt;doubleValue</i>.
It should set also <i>resultPtr-&gt;type</i> to one of
<b>TCL_INT</b>, <b>TCL_DOUBLE</b> or <b>TCL_WIDE_INT</b>
to indicate which value was set.
Under normal circumstances <i>proc</i> should return <b>TCL_OK</b>.
If an error occurs while executing the function, <i>proc</i> should
return <b>TCL_ERROR</b> and leave an error message in the interpreter's result.
</p>
<p><fun>Tcl_GetMathFuncInfo</fun> retrieves the values associated with
function <i>name</i> that were passed to a preceding
<fun>Tcl_CreateMathFunc</fun> call.  Normally, the return code is
<b>TCL_OK</b> but if the named function does not exist, <b>TCL_ERROR</b>
is returned and an error message is placed in the interpreter's
result.
</p>
<p>If an error did not occur, the array reference placed in the variable
pointed to by <i>argTypesPtr</i> is newly allocated, and should be
released by passing it to <fun>Tcl_Free</fun>.  Some functions (the
standard set implemented in the core, and those defined by placing
commands in the <b>tcl::mathfunc</b> namespace) do not have
argument type information; attempting to retrieve values for
them causes a NULL to be stored in the variable pointed to by 
<i>procPtr</i> and the variable pointed to by <i>clientDataPtr</i>
will not be modified.  The variable pointed to by <i>numArgsPointer</i>
will contain -1, and no argument types will be stored in the variable
pointed to by <i>argTypesPointer</i>.
</p>
<p><fun>Tcl_ListMathFuncs</fun> returns a Tcl object containing a list of all
the math functions defined in the interpreter whose name matches
<i>pattern</i>.  In the case of an error, NULL is returned and an error
message is left in the interpreter result, and otherwise the returned
object will have a reference count of zero.

</p>
</section>
<seealso>
<ref>expr(n)</ref>
<ref>info(n)</ref>
<ref>Tcl_CreateObjCommand(3)</ref>
<ref>Tcl_Free(3)</ref>
<ref>Tcl_NewListObj(3)</ref>
</seealso>
<keywords>
<keyword>expression</keyword>
<keyword>mathematical function</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtObjCmd" version="8.0" title="Tcl_CreateObjCommand">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtObjCmd.3,v 1.15 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CreateObjCommand" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateObjCommand</name>
<name>Tcl_DeleteCommand</name>
<name>Tcl_DeleteCommandFromToken</name>
<name>Tcl_GetCommandInfo</name>
<name>Tcl_GetCommandInfoFromToken</name>
<name>Tcl_SetCommandInfo</name>
<name>Tcl_SetCommandInfoFromToken</name>
<name>Tcl_GetCommandName</name>
<name>Tcl_GetCommandFullName</name>
<name>Tcl_GetCommandFromObj</name>
<desc>implement new commands in C</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Command
<fun>Tcl_CreateObjCommand</fun>(<m>interp</m>, <m>cmdName</m>, <m>proc</m>, <m>clientData</m>, <m>deleteProc</m>)

int
<fun>Tcl_DeleteCommand</fun>(<m>interp</m>, <m>cmdName</m>)

int
<fun>Tcl_DeleteCommandFromToken</fun>(<m>interp</m>, <m>token</m>)

int
<fun>Tcl_GetCommandInfo</fun>(<m>interp</m>, <m>cmdName</m>, <m>infoPtr</m>)

int
<fun>Tcl_SetCommandInfo</fun>(<m>interp</m>, <m>cmdName</m>, <m>infoPtr</m>)

int
<fun>Tcl_GetCommandInfoFromToken</fun>(<m>token</m>, <m>infoPtr</m>)

int
<fun>Tcl_SetCommandInfoFromToken</fun>(<m>token</m>, <m>infoPtr</m>)

const char *
<fun>Tcl_GetCommandName</fun>(<m>interp</m>, <m>token</m>)

void
<fun>Tcl_GetCommandFullName</fun>(<m>interp</m>, <m>token</m>, <m>objPtr</m>)

Tcl_Command
<fun>Tcl_GetCommandFromObj</fun>(<m>interp</m>, <m>objPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to create a new command or that contains a command.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="cmdName">*cmdName</name>
<argmode>in</argmode>
<desc>Name of command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ObjCmdProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Implementation of the new command: <i>proc</i> will be called whenever
<i>cmdName</i> is invoked as a command.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i> and <i>deleteProc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>Procedure to call before <i>cmdName</i> is deleted from the interpreter;
allows for command-specific cleanup. If NULL, then no procedure is
called before the command is deleted.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Command</argtype>
<name>token</name>
<argmode>in</argmode>
<desc>Token for command, returned by previous call to <fun>Tcl_CreateObjCommand</fun>.
The command must not have been deleted.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdInfo</argtype>
<name name="infoPtr">*infoPtr</name>
<argmode>in/out</argmode>
<desc>Pointer to structure containing various information about a
Tcl command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Object containing the name of a Tcl command.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateObjCommand</fun> defines a new command in <i>interp</i>
and associates it with procedure <i>proc</i>
such that whenever <i>name</i> is
invoked as a Tcl command (e.g., via a call to <fun>Tcl_EvalObjEx</fun>)
the Tcl interpreter will call <i>proc</i> to process the command.
</p>
<p><fun>Tcl_CreateObjCommand</fun> deletes any existing command
<i>name</i> already associated with the interpreter
(however see below for an exception where the existing command
is not deleted).
It returns a token that may be used to refer
to the command in subsequent calls to <fun>Tcl_GetCommandName</fun>.
If <i>name</i> contains any <b>::</b> namespace qualifiers,
then the command is added to the specified namespace;
otherwise the command is added to the global namespace.
If <fun>Tcl_CreateObjCommand</fun> is called for an interpreter that is in
the process of being deleted, then it does not create a new command
and it returns NULL.
<i>proc</i> should have arguments and result that match the type
<type>Tcl_ObjCmdProc</type>:
</p>
<syntax cat="type" name="Tcl_ObjCmdProc" scope="global">
typedef int Tcl_ObjCmdProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        int <i>objc</i>,
        Tcl_Obj *const <i>objv</i>[]);
</syntax>
<p>When <i>proc</i> is invoked, the <i>clientData</i> and <i>interp</i> parameters
will be copies of the <i>clientData</i> and <i>interp</i> arguments given to
<fun>Tcl_CreateObjCommand</fun>.  Typically, <i>clientData</i> points to an
application-specific data structure that describes what to do when the
command procedure is invoked. <i>Objc</i> and <i>objv</i> describe the
arguments to the command, <i>objc</i> giving the number of argument objects
(including the command name) and <i>objv</i> giving the values of the
arguments.  The <i>objv</i> array will contain <i>objc</i> values, pointing to
the argument objects.  Unlike <i>argv</i>[<i>argv</i>] used in a
string-based command procedure, <i>objv</i>[<i>objc</i>] will not contain NULL.
</p>
<p>Additionally, when <i>proc</i> is invoked, it must not modify the contents
of the <i>objv</i> array by assigning new pointer values to any element of the
array (for example, <i>objv</i>[<b>2</b>] = <b>NULL</b>) because this will
cause memory to be lost and the runtime stack to be corrupted.  The
<b>const</b> in the declaration of <i>objv</i> will cause ANSI-compliant
compilers to report any such attempted assignment as an error.  However,
it is acceptable to modify the internal representation of any individual
object argument.  For instance, the user may call
<fun>Tcl_GetIntFromObj</fun> on <i>objv</i>[<b>2</b>] to obtain the integer
representation of that object; that call may change the type of the object
that <i>objv</i>[<b>2</b>] points at, but will not change where
<i>objv</i>[<b>2</b>] points.
</p>
<p><i>proc</i> must return an integer code that is either <b>TCL_OK</b>,
<b>TCL_ERROR</b>, <b>TCL_RETURN</b>, <b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>.
See the Tcl overview man page
for details on what these codes mean.  Most normal commands will only
return <b>TCL_OK</b> or <b>TCL_ERROR</b>.
In addition, if <i>proc</i> needs to return a non-empty result,
it can call <fun>Tcl_SetObjResult</fun> to set the interpreter's result.
In the case of a <b>TCL_OK</b> return code this gives the result
of the command,
and in the case of <b>TCL_ERROR</b> this gives an error message.
Before invoking a command procedure,
<fun>Tcl_EvalObjEx</fun> sets interpreter's result to
point to an object representing an empty string, so simple
commands can return an empty result by doing nothing at all.
</p>
<p>The contents of the <i>objv</i> array belong to Tcl and are not
guaranteed to persist once <i>proc</i> returns: <i>proc</i> should
not modify them.
Call <fun>Tcl_SetObjResult</fun> if you want
to return something from the <i>objv</i> array.
</p>
<p>Ordinarily, <fun>Tcl_CreateObjCommand</fun> deletes any existing command
<i>name</i> already associated with the interpreter.
However, if the existing command was created by a previous call to
<fun>Tcl_CreateCommand</fun>,
<fun>Tcl_CreateObjCommand</fun> does not delete the command
but instead arranges for the Tcl interpreter to call the
<type>Tcl_ObjCmdProc</type> <i>proc</i> in the future.
The old string-based <type>Tcl_CmdProc</type> associated with the command
is retained and its address can be obtained by subsequent 
<fun>Tcl_GetCommandInfo</fun> calls. This is done for backwards compatibility.
</p>
<p><i>DeleteProc</i> will be invoked when (if) <i>name</i> is deleted.
This can occur through a call to <fun>Tcl_DeleteCommand</fun>,
<fun>Tcl_DeleteCommandFromToken</fun>, or <fun>Tcl_DeleteInterp</fun>,
or by replacing <i>name</i> in another call to <fun>Tcl_CreateObjCommand</fun>.
<i>DeleteProc</i> is invoked before the command is deleted, and gives the
application an opportunity to release any structures associated
with the command.  <i>DeleteProc</i> should have arguments and
result that match the type <type>Tcl_CmdDeleteProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdDeleteProc" scope="global">
typedef void Tcl_CmdDeleteProc(
        ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> argument will be the same as the <i>clientData</i>
argument passed to <fun>Tcl_CreateObjCommand</fun>.
</p>
<p><fun>Tcl_DeleteCommand</fun> deletes a command from a command interpreter.
Once the call completes, attempts to invoke <i>cmdName</i> in
<i>interp</i> will result in errors.
If <i>cmdName</i> isn't bound as a command in <i>interp</i> then
<fun>Tcl_DeleteCommand</fun> does nothing and returns -1;  otherwise
it returns 0.
There are no restrictions on <i>cmdName</i>:  it may refer to
a built-in command, an application-specific command, or a Tcl procedure.
If <i>name</i> contains any <b>::</b> namespace qualifiers,
the command is deleted from the specified namespace.
</p>
<p>Given a token returned by <fun>Tcl_CreateObjCommand</fun>,
<fun>Tcl_DeleteCommandFromToken</fun> deletes the command
from a command interpreter.
It will delete a command even if that command has been renamed.
Once the call completes, attempts to invoke the command in
<i>interp</i> will result in errors.
If the command corresponding to <i>token</i>
has already been deleted from <i>interp</i> then
<fun>Tcl_DeleteCommand</fun> does nothing and returns -1;
otherwise it returns 0.
</p>
<p><fun>Tcl_GetCommandInfo</fun> checks to see whether its <i>cmdName</i> argument
exists as a command in <i>interp</i>.
<i>cmdName</i> may include <b>::</b> namespace qualifiers
to identify a command in a particular namespace.
If the command is not found, then it returns 0.
Otherwise it places information about the command
in the <type>Tcl_CmdInfo</type> structure
pointed to by <i>infoPtr</i> and returns 1.
A <type>Tcl_CmdInfo</type> structure has the following fields:
</p>
<syntax cat="type" name="Tcl_CmdInfo" scope="global">
typedef struct Tcl_CmdInfo {
    int <i>isNativeObjectProc</i>;
    Tcl_ObjCmdProc *<i>objProc</i>;
    ClientData <i>objClientData</i>;
    Tcl_CmdProc *<i>proc</i>;
    ClientData <i>clientData</i>;
    Tcl_CmdDeleteProc *<i>deleteProc</i>;
    ClientData <i>deleteData</i>;
    Tcl_Namespace *<i>namespacePtr</i>;
} Tcl_CmdInfo;
</syntax>
<p>The <i>isNativeObjectProc</i> field has the value 1
if <fun>Tcl_CreateObjCommand</fun> was called to register the command;
it is 0 if only <fun>Tcl_CreateCommand</fun> was called.
It allows a program to determine whether it is faster to
call <i>objProc</i> or <i>proc</i>:
<i>objProc</i> is normally faster
if <i>isNativeObjectProc</i> has the value 1.
The fields <i>objProc</i> and <i>objClientData</i>
have the same meaning as the <i>proc</i> and <i>clientData</i>
arguments to <fun>Tcl_CreateObjCommand</fun>;
they hold information about the object-based command procedure
that the Tcl interpreter calls to implement the command.
The fields <i>proc</i> and <i>clientData</i>
hold information about the string-based command procedure
that implements the command.
If <fun>Tcl_CreateCommand</fun> was called for this command,
this is the procedure passed to it;
otherwise, this is a compatibility procedure
registered by <fun>Tcl_CreateObjCommand</fun>
that simply calls the command's
object-based procedure after converting its string arguments to Tcl objects.
The field <i>deleteData</i> is the ClientData value
to pass to <i>deleteProc</i>;  it is normally the same as
<i>clientData</i> but may be set independently using the
<fun>Tcl_SetCommandInfo</fun> procedure.
The field <i>namespacePtr</i> holds a pointer to the
Tcl_Namespace that contains the command.
</p>
<p><fun>Tcl_GetCommandInfoFromToken</fun> is identical to
<fun>Tcl_GetCommandInfo</fun> except that it uses a command token returned
from <fun>Tcl_CreateObjCommand</fun> in place of the command name.  If the
<i>token</i> parameter is NULL, it returns 0; otherwise, it returns 1
and fills in the structure designated by <i>infoPtr</i>.
</p>
<p><fun>Tcl_SetCommandInfo</fun> is used to modify the procedures and
ClientData values associated with a command.
Its <i>cmdName</i> argument is the name of a command in <i>interp</i>.
<i>cmdName</i> may include <b>::</b> namespace qualifiers
to identify a command in a particular namespace.
If this command does not exist then <fun>Tcl_SetCommandInfo</fun> returns 0.
Otherwise, it copies the information from <i>*infoPtr</i> to
Tcl's internal structure for the command and returns 1.
</p>
<p><fun>Tcl_SetCommandInfoFromToken</fun> is identical to
<fun>Tcl_SetCommandInfo</fun> except that it takes a command token as
returned by <fun>Tcl_CreateObjCommand</fun> instead of the command name.
If the <i>token</i> parameter is NULL, it returns 0.  Otherwise, it
copies the information from <i>*infoPtr</i> to Tcl's internal structure
for the command and returns 1.
</p>
<p>Note that <fun>Tcl_SetCommandInfo</fun> and
<fun>Tcl_SetCommandInfoFromToken</fun> both allow the ClientData for a
command's deletion procedure to be given a different value than the
ClientData for its command procedure.
</p>
<p>Note that neither <fun>Tcl_SetCommandInfo</fun> nor
<fun>Tcl_SetCommandInfoFromToken</fun> will change a command's namespace.
Use <fun>Tcl_Eval</fun> to call the <b cat="AMBIGUOUS ambiguous cmd">rename</b> command to do that.
</p>
<p><fun>Tcl_GetCommandName</fun> provides a mechanism for tracking commands
that have been renamed.
Given a token returned by <fun>Tcl_CreateObjCommand</fun>
when the command was created, <fun>Tcl_GetCommandName</fun> returns the
string name of the command.  If the command has been renamed since it
was created, then <fun>Tcl_GetCommandName</fun> returns the current name.
This name does not include any <b>::</b> namespace qualifiers.
The command corresponding to <i>token</i> must not have been deleted.
The string returned by <fun>Tcl_GetCommandName</fun> is in dynamic memory
owned by Tcl and is only guaranteed to retain its value as long as the
command isn't deleted or renamed;  callers should copy the string if
they need to keep it for a long time.
</p>
<p><fun>Tcl_GetCommandFullName</fun> produces the fully qualified name
of a command from a command token.  
The name, including all namespace prefixes,
is appended to the object specified by <i>objPtr</i>.
</p>
<p><fun>Tcl_GetCommandFromObj</fun> returns a token for the command
specified by the name in a <type>Tcl_Obj</type>.
The command name is resolved relative to the current namespace.
Returns NULL if the command is not found.
</p>
</section>
<seealso>
<ref>Tcl_CreateCommand</ref>
<ref>Tcl_ResetResult</ref>
<ref>Tcl_SetObjResult</ref>
</seealso>
<keywords>
<keyword>bind</keyword>
<keyword>command</keyword>
<keyword>create</keyword>
<keyword>delete</keyword>
<keyword>namespace</keyword>
<keyword>object</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtPhImgFmt" version="8.3" title="Tk_CreatePhotoImageFormat">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Australian National University
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     Author: Paul Mackerras (paulus@cs.anu.edu.au),
    	    Department of Computer Science,
    	    Australian National University.
    
     RCS: @(#) $Id: CrtPhImgFmt.3,v 1.7 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CreatePhotoImageFormat" section="3" date="8.3" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreatePhotoImageFormat</name>
<desc>define new file format for photo images</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreatePhotoImageFormat</fun>(<m>formatPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_PhotoImageFormat</argtype>
<name name="formatPtr">*formatPtr</name>
<argmode>in</argmode>
<desc>Structure that defines the new file format.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreatePhotoImageFormat</fun> is invoked to define a new file format
for image data for use with photo images.  The code that implements an
image file format is called an image file format handler, or
handler for short.  The photo image code
maintains a list of handlers that can be used to read and
write data to or from a file.  Some handlers may also
support reading image data from a string or converting image data to a
string format.
The user can specify which handler to use with the <b>-format</b>
image configuration option or the <b>-format</b> option to the
<b cat="AMBIGUOUS ambiguous cmd">read</b> and <b>write</b> photo image subcommands.
</p>
<p>An image file format handler consists of a collection of procedures
plus a Tk_PhotoImageFormat structure, which contains the name of the
image file format and pointers to six procedures provided by the
handler to deal with files and strings in this format.  The
Tk_PhotoImageFormat structure contains the following fields:
</p>
<syntax cat="type" name="Tk_PhotoImageFormat" scope="global">
typedef struct Tk_PhotoImageFormat {
    char *<i>name</i>;
    Tk_ImageFileMatchProc *<i>fileMatchProc</i>;
    Tk_ImageStringMatchProc *<i>stringMatchProc</i>;
    Tk_ImageFileReadProc *<i>fileReadProc</i>;
    Tk_ImageStringReadProc *<i>stringReadProc</i>;
    Tk_ImageFileWriteProc *<i>fileWriteProc</i>;
    Tk_ImageStringWriteProc *<i>stringWriteProc</i>;
} Tk_PhotoImageFormat;
</syntax>
<p>The handler need not provide implementations of all six procedures.
For example, the procedures that handle string data would not be
provided for a format in which the image data are stored in binary,
and could therefore contain null characters.  If any procedure is not
implemented, the corresponding pointer in the Tk_PhotoImageFormat
structure should be set to NULL.  The handler must provide the
<i>fileMatchProc</i> procedure if it provides the <i>fileReadProc</i>
procedure, and the <i>stringMatchProc</i> procedure if it provides the
<i>stringReadProc</i> procedure.

</p>
</section>
<section>
<title>PORTABILITY</title>
<p>In Tk 8.2 and earlier, a different interface was used. Tk 8.3 will
still support the old format handlers if the format name is in upper
case. If you still want to compile old format handlers with Tk8.3,
use the flag -DUSE_OLD_IMAGE. This will restore all function prototypes
to match the pre-8.3 situation.

</p>
</section>
<section>
<title>NAME</title>
<p><i>formatPtr-&gt;name</i> provides a name for the image type.
Once <fun>Tk_CreatePhotoImageFormat</fun> returns, this name may be used
in the <b>-format</b> photo image configuration and subcommand option.
The manual page for the photo image (photo(n)) describes how image
file formats are chosen based on their names and the value given to
the <b>-format</b> option. For new format handlers, the name should
be in lower case. Pre-8.3 format handlers are assumed to be in
upper case.

</p>
</section>
<section>
<title>FILEMATCHPROC</title>
<p><i>formatPtr-&gt;fileMatchProc</i> provides the address of a procedure for
Tk to call when it is searching for an image file format handler
suitable for reading data in a given file.
<i>formatPtr-&gt;fileMatchProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageFileMatchProc" scope="global">
typedef int Tk_ImageFileMatchProc(
    Tcl_Channel <i>chan</i>,
    const char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    int *<i>widthPtr</i>,
    int *<i>heightPtr</i>,
    Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>fileName</i> argument is the name of the file containing the
image data, which is open for reading as <i>chan</i>.  The
<i>format</i> argument contains the value given for the
<b>-format</b> option, or NULL if the option was not specified.
If the data in the file appears to be in the format supported by this
handler, the <i>formatPtr-&gt;fileMatchProc</i> procedure should store the
width and height of the image in *<i>widthPtr</i> and *<i>heightPtr</i>
respectively, and return 1.  Otherwise it should return 0.

</p>
</section>
<section>
<title>STRINGMATCHPROC</title>
<p><i>formatPtr-&gt;stringMatchProc</i> provides the address of a procedure for
Tk to call when it is searching for an image file format handler for
suitable for reading data from a given string.
<i>formatPtr-&gt;stringMatchProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageStringMatchProc" scope="global">
typedef int Tk_ImageStringMatchProc(
    Tcl_Obj *<i>data</i>,
    Tcl_Obj *<i>format</i>,
    int *<i>widthPtr</i>,
    int *<i>heightPtr</i>,
    Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>data</i> argument points to the object containing the image
data.  The <i>format</i> argument contains the value given for
the <b>-format</b> option, or NULL if the option was not specified.
If the data in the string appears to be in the format supported by
this handler, the <i>formatPtr-&gt;stringMatchProc</i> procedure should
store the width and height of the image in *<i>widthPtr</i> and
*<i>heightPtr</i> respectively, and return 1.  Otherwise it should
return 0.

</p>
</section>
<section>
<title>FILEREADPROC</title>
<p><i>formatPtr-&gt;fileReadProc</i> provides the address of a procedure for
Tk to call to read data from an image file into a photo image.
<i>formatPtr-&gt;fileReadProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageFileReadProc" scope="global">
typedef int Tk_ImageFileReadProc(
    Tcl_Interp *<i>interp</i>,
    Tcl_Channel <i>chan</i>,
    const char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    PhotoHandle <i>imageHandle</i>,
    int <i>destX</i>, int <i>destY</i>,
    int <i>width</i>, int <i>height</i>,
    int <i>srcX</i>, int <i>srcY</i>);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the command was
invoked to read the image; it should be used for reporting errors.
The image data is in the file named <i>fileName</i>, which is open for
reading as <i>chan</i>.  The <i>format</i> argument contains the
value given for the <b>-format</b> option, or NULL if the option was
not specified.  The image data in the file, or a subimage of it, is to
be read into the photo image identified by the handle
<i>imageHandle</i>.  The subimage of the data in the file is of
dimensions <i>width</i> x <i>height</i> and has its top-left corner at
coordinates (<i>srcX</i>,<i>srcY</i>).  It is to be stored in the photo
image with its top-left corner at coordinates
(<i>destX</i>,<i>destY</i>) using the <fun>Tk_PhotoPutBlock</fun> procedure.
The return value is a standard Tcl return value.

</p>
</section>
<section>
<title>STRINGREADPROC</title>
<p><i>formatPtr-&gt;stringReadProc</i> provides the address of a procedure for
Tk to call to read data from a string into a photo image.
<i>formatPtr-&gt;stringReadProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageStringReadProc" scope="global">
typedef int Tk_ImageStringReadProc(
    Tcl_Interp *<i>interp</i>,
    Tcl_Obj *<i>data</i>,
    Tcl_Obj *<i>format</i>,
    PhotoHandle <i>imageHandle</i>,
    int <i>destX</i>, int <i>destY</i>,
    int <i>width</i>, int <i>height</i>,
    int <i>srcX</i>, int <i>srcY</i>);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the command was
invoked to read the image; it should be used for reporting errors.
The <i>data</i> argument points to the image data in object form.
The <i>format</i> argument contains the
value given for the <b>-format</b> option, or NULL if the option was
not specified.  The image data in the string, or a subimage of it, is to
be read into the photo image identified by the handle
<i>imageHandle</i>.  The subimage of the data in the string is of
dimensions <i>width</i> x <i>height</i> and has its top-left corner at
coordinates (<i>srcX</i>,<i>srcY</i>).  It is to be stored in the photo
image with its top-left corner at coordinates
(<i>destX</i>,<i>destY</i>) using the <fun>Tk_PhotoPutBlock</fun> procedure.
The return value is a standard Tcl return value.

</p>
</section>
<section>
<title>FILEWRITEPROC</title>
<p><i>formatPtr-&gt;fileWriteProc</i> provides the address of a procedure for
Tk to call to write data from a photo image to a file.
<i>formatPtr-&gt;fileWriteProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageFileWriteProc" scope="global">
typedef int Tk_ImageFileWriteProc(
    Tcl_Interp *<i>interp</i>,
    const char *<i>fileName</i>,
    Tcl_Obj *<i>format</i>,
    Tk_PhotoImageBlock *<i>blockPtr</i>);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the command was
invoked to write the image; it should be used for reporting errors.
The image data to be written are in memory and are described by the
Tk_PhotoImageBlock structure pointed to by <i>blockPtr</i>; see the
manual page FindPhoto(3) for details.  The <i>fileName</i> argument
points to the string giving the name of the file in which to write the
image data.  The <i>format</i> argument contains the
value given for the <b>-format</b> option, or NULL if the option was
not specified.  The format string can contain extra characters
after the name of the format.  If appropriate, the
<i>formatPtr-&gt;fileWriteProc</i> procedure may interpret these
characters to specify further details about the image file.
The return value is a standard Tcl return value.

</p>
</section>
<section>
<title>STRINGWRITEPROC</title>
<p><i>formatPtr-&gt;stringWriteProc</i> provides the address of a procedure for
Tk to call to translate image data from a photo image into a string.
<i>formatPtr-&gt;stringWriteProc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageStringWriteProc" scope="global">
typedef int Tk_ImageStringWriteProc(
    Tcl_Interp *<i>interp</i>,
    Tcl_Obj *<i>format</i>,
    Tk_PhotoImageBlock *<i>blockPtr</i>);
</syntax>
<p>The <i>interp</i> argument is the interpreter in which the command was
invoked to convert the image; it should be used for reporting errors.
The image data to be converted are in memory and are described by the
Tk_PhotoImageBlock structure pointed to by <i>blockPtr</i>; see the
manual page FindPhoto(3) for details.  The data for the string
should be put in the interpreter <i>interp</i> result.
The <i>format</i> argument contains the
value given for the <b>-format</b> option, or NULL if the option was
not specified.  The format string can contain extra characters
after the name of the format.  If appropriate, the
<i>formatPtr-&gt;stringWriteProc</i> procedure may interpret these
characters to specify further details about the image file.
The return value is a standard Tcl return value.

</p>
</section>
<seealso>
<ref>Tk_FindPhoto</ref>
<ref>Tk_PhotoPutBlock</ref>
</seealso>
<keywords>
<keyword>photo image</keyword>
<keyword>image file</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtSelHdlr" title="Tk_CreateSelHandler" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtSelHdlr.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CreateSelHandler" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateSelHandler</name>
<name>Tk_DeleteSelHandler</name>
<desc>arrange to handle requests for a selection</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateSelHandler</fun>(<m>tkwin</m>, <m>selection</m>, <m>target</m>, <m>proc</m>, <m>clientData</m>, <m>format</m>)

<fun>Tk_DeleteSelHandler</fun>(<m>tkwin</m>, <m>selection</m>, <m>target</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window for which <i>proc</i> will provide selection information.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>selection</name>
<argmode>in</argmode>
<desc>The name of the selection for which <i>proc</i> will provide
selection information.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>target</name>
<argmode>in</argmode>
<desc>Form in which <i>proc</i> can provide the selection (e.g. STRING
or FILE_NAME).  Corresponds to <i>type</i> arguments in <cmd>selection</cmd>
commands.
</desc>
</argdef>
<argdef>
<argtype>Tk_SelectionProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever the selection is owned by <i>tkwin</i>
and the selection contents are requested in the format given by
<i>target</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>format</name>
<argmode>in</argmode>
<desc>If the selection requestor isn't in this process, <i>format</i> determines
the representation used to transmit the selection to its
requestor.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreateSelHandler</fun> arranges for a particular procedure
(<i>proc</i>) to be called whenever <i>selection</i> is owned by
<i>tkwin</i> and the selection contents are requested in the
form given by <i>target</i>. 
<i>Target</i> should be one of
the entries defined in the left column of Table 2 of the
X Inter-Client Communication Conventions Manual (ICCCM) or
any other form in which an application is willing to present
the selection.  The most common form is STRING.
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tk_SelectionProc</type>:
</p>
<syntax cat="type" name="Tk_SelectionProc" scope="global">
typedef int Tk_SelectionProc(
    ClientData <i>clientData</i>,
    int <i>offset</i>,
    char *<i>buffer</i>,
    int <i>maxBytes</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the
<i>clientData</i> argument given to <fun>Tk_CreateSelHandler</fun>.
Typically, <i>clientData</i> points to a data
structure containing application-specific information that is
needed to retrieve the selection.  <i>Offset</i> specifies an
offset position into the selection, <i>buffer</i> specifies a
location at which to copy information about the selection, and
<i>maxBytes</i> specifies the amount of space available at
<i>buffer</i>.  <i>Proc</i> should place a NULL-terminated string
at <i>buffer</i> containing <i>maxBytes</i> or fewer characters
(not including the terminating NULL), and it should return a
count of the number of non-NULL characters stored at
<i>buffer</i>.  If the selection no longer exists (e.g. it once
existed but the user deleted the range of characters containing
it), then <i>proc</i> should return -1.
</p>
<p>When transferring large selections, Tk will break them up into
smaller pieces (typically a few thousand bytes each) for more
efficient transmission.  It will do this by calling <i>proc</i>
one or more times, using successively higher values of <i>offset</i>
to retrieve successive portions of the selection.  If <i>proc</i>
returns a count less than <i>maxBytes</i> it means that the entire
remainder of the selection has been returned.  If <i>proc</i>'s return
value is <i>maxBytes</i> it means there may be additional information
in the selection, so Tk must make another call to <i>proc</i> to
retrieve the next portion.
</p>
<p><i>Proc</i> always returns selection information in the form of a
character string.  However, the ICCCM allows for information to
be transmitted from the selection owner to the selection requestor
in any of several formats, such as a string, an array of atoms, an
array of integers, etc.  The <i>format</i> argument to
<fun>Tk_CreateSelHandler</fun> indicates what format should be used to
transmit the selection to its requestor (see the middle column of
Table 2 of the ICCCM for examples).  If <i>format</i> is not
STRING, then Tk will take the value returned by <i>proc</i> and divided
it into fields separated by white space.  If <i>format</i> is ATOM,
then Tk will return the selection as an array of atoms, with each
field in <i>proc</i>'s result treated as the name of one atom.  For
any other value of <i>format</i>, Tk will return the selection as an
array of 32-bit values where each field of <i>proc</i>'s result is
treated as a number and translated to a 32-bit value.  In any event,
the <i>format</i> atom is returned to the selection requestor along
with the contents of the selection.
</p>
<p>If <fun>Tk_CreateSelHandler</fun> is called when there already exists a
handler for <i>selection</i> and <i>target</i> on <i>tkwin</i>, then the
existing handler is replaced with a new one.
</p>
<p><fun>Tk_DeleteSelHandler</fun> removes the handler given by <i>tkwin</i>,
<i>selection</i>, and <i>target</i>, if such a handler exists.
If there is no such handler then it has no effect.

</p>
</section>
<keywords>
<keyword>format</keyword>
<keyword>handler</keyword>
<keyword>selection</keyword>
<keyword>target</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtSlave" version="7.6" title="Tcl_CreateSlave">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtSlave.3,v 1.16 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_CreateSlave" section="3" date="7.6" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_IsSafe</name>
<name>Tcl_MakeSafe</name>
<name>Tcl_CreateSlave</name>
<name>Tcl_GetSlave</name>
<name>Tcl_GetMaster</name>
<name>Tcl_GetInterpPath</name>
<name>Tcl_CreateAlias</name>
<name>Tcl_CreateAliasObj</name>
<name>Tcl_GetAlias</name>
<name>Tcl_GetAliasObj</name>
<name>Tcl_ExposeCommand</name>
<name>Tcl_HideCommand</name>
<desc>manage multiple Tcl interpreters, aliases and hidden commands</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_IsSafe</fun>(<m>interp</m>)

int
<fun>Tcl_MakeSafe</fun>(<m>interp</m>)

Tcl_Interp *
<fun>Tcl_CreateSlave</fun>(<m>interp</m>, <m>slaveName</m>, <m>isSafe</m>)

Tcl_Interp *
<fun>Tcl_GetSlave</fun>(<m>interp</m>, <m>slaveName</m>)

Tcl_Interp *
<fun>Tcl_GetMaster</fun>(<m>interp</m>)

int
<fun>Tcl_GetInterpPath</fun>(<m>askingInterp</m>, <m>slaveInterp</m>)

int
<fun>Tcl_CreateAlias</fun>(<m>slaveInterp</m>, <m>slaveCmd</m>, <m>targetInterp</m>, <m>targetCmd</m>, <m>argc</m>, <m>argv</m>)

int
<fun>Tcl_CreateAliasObj</fun>(<m>slaveInterp</m>, <m>slaveCmd</m>, <m>targetInterp</m>, <m>targetCmd</m>, <m>objc</m>, <m>objv</m>)

int
<fun>Tcl_GetAlias</fun>(<m>interp</m>, <m>slaveCmd</m>, <m>targetInterpPtr</m>, <m>targetCmdPtr</m>, <m>argcPtr</m>, <m>argvPtr</m>)

int
<fun>Tcl_GetAliasObj</fun>(<m>interp</m>, <m>slaveCmd</m>, <m>targetInterpPtr</m>, <m>targetCmdPtr</m>, <m>objcPtr</m>, <m>objvPtr</m>)

int
<fun>Tcl_ExposeCommand</fun>(<m>interp</m>, <m>hiddenCmdName</m>, <m>cmdName</m>)

int
<fun>Tcl_HideCommand</fun>(<m>interp</m>, <m>cmdName</m>, <m>hiddenCmdName</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to execute the specified command.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="slaveName">*slaveName</name>
<argmode>in</argmode>
<desc>Name of slave interpreter to create or manipulate.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>isSafe</name>
<argmode>in</argmode>
<desc>If non-zero, a ``safe'' slave that is suitable for running untrusted code
is created, otherwise a trusted slave is created.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="slaveInterp">*slaveInterp</name>
<argmode>in</argmode>
<desc>Interpreter to use for creating the source command for an alias (see
below).
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="slaveCmd">*slaveCmd</name>
<argmode>in</argmode>
<desc>Name of source command for alias.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="targetInterp">*targetInterp</name>
<argmode>in</argmode>
<desc>Interpreter that contains the target command for an alias.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="targetCmd">*targetCmd</name>
<argmode>in</argmode>
<desc>Name of target command for alias in <i>targetInterp</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Count of additional arguments to pass to the alias command.
</desc>
</argdef>
<argdef>
<argtype>const char *const</argtype>
<name name="argv">*argv</name>
<argmode>in</argmode>
<desc>Vector of strings, the additional arguments to pass to the alias command.
This storage is owned by the caller.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>Count of additional object arguments to pass to the alias object command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objv">**objv</name>
<argmode>in</argmode>
<desc>Vector of Tcl_Obj structures, the additional object arguments to pass to
the alias object command.
This storage is owned by the caller.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="targetInterpPtr">**targetInterpPtr</name>
<argmode>in</argmode>
<desc>Pointer to location to store the address of the interpreter where a target
command is defined for an alias.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="targetCmdPtr">**targetCmdPtr</name>
<argmode>out</argmode>
<desc>Pointer to location to store the address of the name of the target command
for an alias.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="argcPtr">*argcPtr</name>
<argmode>out</argmode>
<desc>Pointer to location to store count of additional arguments to be passed to
the alias. The location is in storage owned by the caller.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argvPtr">***argvPtr</name>
<argmode>out</argmode>
<desc>Pointer to location to store a vector of strings, the additional arguments
to pass to an alias. The location is in storage owned by the caller, the
vector of strings is owned by the called function.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="objcPtr">*objcPtr</name>
<argmode>out</argmode>
<desc>Pointer to location to store count of additional object arguments to be
passed to the alias. The location is in storage owned by the caller.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objvPtr">***objvPtr</name>
<argmode>out</argmode>
<desc>Pointer to location to store a vector of Tcl_Obj structures, the additional
arguments to pass to an object alias command. The location is in storage
owned by the caller, the vector of Tcl_Obj structures is owned by the
called function.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="cmdName">*cmdName</name>
<argmode>in</argmode>
<desc>Name of an exposed command to hide or create.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="hiddenCmdName">*hiddenCmdName</name>
<argmode>in</argmode>
<desc>Name under which a hidden command is stored and with which it can be
exposed or invoked.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are intended for access to the multiple interpreter
facility from inside C programs. They enable managing multiple interpreters
in a hierarchical relationship, and the management of aliases, commands
that when invoked in one interpreter execute a command in another
interpreter. The return value for those procedures that return an <b cat="mathfunc">int</b>
is either <b>TCL_OK</b> or <b>TCL_ERROR</b>. If <b>TCL_ERROR</b> is returned
then the <b>result</b> field of the interpreter contains an error message.
</p>
<p><fun>Tcl_CreateSlave</fun> creates a new interpreter as a slave of <i>interp</i>.
It also creates a slave command named <i>slaveName</i> in <i>interp</i> which 
allows <i>interp</i> to manipulate the new slave. 
If <i>isSafe</i> is zero, the command creates a trusted slave in which Tcl
code has access to all the Tcl commands.
If it is <b>1</b>, the command creates a ``safe'' slave in which Tcl code
has access only to set of Tcl commands defined as ``Safe Tcl''; see the
manual entry for the Tcl <cmd>interp</cmd> command for details.
If the creation of the new slave interpreter failed, <b>NULL</b> is returned.
</p>
<p><fun>Tcl_IsSafe</fun> returns <b>1</b> if <i>interp</i> is ``safe'' (was created
with the <b>TCL_SAFE_INTERPRETER</b> flag specified),
<b>0</b> otherwise.
</p>
<p><fun>Tcl_MakeSafe</fun> marks <i>interp</i> as ``safe'', so that future
calls to <fun>Tcl_IsSafe</fun> will return 1.  It also removes all known
potentially-unsafe core functionality (both commands and variables)
from <i>interp</i>.  However, it cannot know what parts of an extension
or application are safe and does not make any attempt to remove those
parts, so safety is not guaranteed after calling <fun>Tcl_MakeSafe</fun>.
Callers will want to take care with their use of <fun>Tcl_MakeSafe</fun>
to avoid false claims of safety.  For many situations, <fun>Tcl_CreateSlave</fun>
may be a better choice, since it creates interpreters in a known-safe state.
</p>
<p><fun>Tcl_GetSlave</fun> returns a pointer to a slave interpreter of
<i>interp</i>. The slave interpreter is identified by <i>slaveName</i>.
If no such slave interpreter exists, <b>NULL</b> is returned.
</p>
<p><fun>Tcl_GetMaster</fun> returns a pointer to the master interpreter of
<i>interp</i>. If <i>interp</i> has no master (it is a
top-level interpreter) then <b>NULL</b> is returned.
</p>
<p><fun>Tcl_GetInterpPath</fun> sets the <i>result</i> field in <i>askingInterp</i>
to the relative path between <i>askingInterp</i> and <i>slaveInterp</i>;
<i>slaveInterp</i> must be a slave of <i>askingInterp</i>. If the computation
of the relative path succeeds, <b>TCL_OK</b> is returned, else
<b>TCL_ERROR</b> is returned and the <i>result</i> field in
<i>askingInterp</i> contains the error message.
</p>
<p><fun>Tcl_CreateAlias</fun> creates an object command named <i>slaveCmd</i> in
<i>slaveInterp</i> that when invoked, will cause the command <i>targetCmd</i>
to be invoked in <i>targetInterp</i>. The arguments specified by the strings
contained in <i>argv</i> are always prepended to any arguments supplied in the
invocation of <i>slaveCmd</i> and passed to <i>targetCmd</i>.
This operation returns <b>TCL_OK</b> if it succeeds, or <b>TCL_ERROR</b> if
it fails; in that case, an error message is left in the object result
of <i>slaveInterp</i>.
Note that there are no restrictions on the ancestry relationship (as
created by <fun>Tcl_CreateSlave</fun>) between <i>slaveInterp</i> and
<i>targetInterp</i>. Any two interpreters can be used, without any
restrictions on how they are related.
</p>
<p><fun>Tcl_CreateAliasObj</fun> is similar to <fun>Tcl_CreateAlias</fun> except 
that it takes a vector of objects to pass as additional arguments instead
of a vector of strings.
</p>
<p><fun>Tcl_GetAlias</fun> returns information about an alias <i>aliasName</i>
in <i>interp</i>. Any of the result fields can be <b>NULL</b>, in
which case the corresponding datum is not returned. If a result field is
non-<b>NULL</b>, the address indicated is set to the corresponding datum.
For example, if <i>targetNamePtr</i> is non-<b>NULL</b> it is set to a
pointer to the string containing the name of the target command.
</p>
<p><fun>Tcl_GetAliasObj</fun> is similar to <fun>Tcl_GetAlias</fun> except that it
returns a pointer to a vector of Tcl_Obj structures instead of a vector of
strings.
</p>
<p><fun>Tcl_ExposeCommand</fun> moves the command named <i>hiddenCmdName</i> from
the set of hidden commands to the set of exposed commands, putting
it under the name
<i>cmdName</i>. 
<i>HiddenCmdName</i> must be the name of an existing hidden
command, or the operation will return <b>TCL_ERROR</b> and leave an error
message in the <i>result</i> field in <i>interp</i>.
If an exposed command named <i>cmdName</i> already exists,
the operation returns <b>TCL_ERROR</b> and leaves an error message in the
object result of <i>interp</i>.
If the operation succeeds, it returns <b>TCL_OK</b>.
After executing this command, attempts to use <i>cmdName</i> in a call to
<fun>Tcl_Eval</fun> or with the Tcl <b cat="AMBIGUOUS ambiguous cmd">eval</b> command will again succeed.
</p>
<p><fun>Tcl_HideCommand</fun> moves the command named <i>cmdName</i> from the set of
exposed commands to the set of hidden commands, under the name
<i>hiddenCmdName</i>.
<i>CmdName</i> must be the name of an existing exposed
command, or the operation will return <b>TCL_ERROR</b> and leave an error
message in the object result of <i>interp</i>.
Currently both <i>cmdName</i> and <i>hiddenCmdName</i> must not contain
namespace qualifiers, or the operation will return <b>TCL_ERROR</b> and
leave an error message in the object result of <i>interp</i>.
The <i>CmdName</i> will be looked up in the global namespace, and not
relative to the current namespace, even if the current namespace is not the
global one.
If a hidden command whose name is <i>hiddenCmdName</i> already
exists, the operation also returns <b>TCL_ERROR</b> and the <i>result</i>
field in <i>interp</i> contains an error message.
If the operation succeeds, it returns <b>TCL_OK</b>.
After executing this command, attempts to use <i>cmdName</i> in a call to
<fun>Tcl_Eval</fun> or with the Tcl <b cat="AMBIGUOUS ambiguous cmd">eval</b> command will fail.
</p>
<p>For a description of the Tcl interface to multiple interpreters, see
<i>interp(n)</i>.
</p>
</section>
<seealso>
<ref>interp</ref>
</seealso>
<keywords>
<keyword>alias</keyword>
<keyword>command</keyword>
<keyword>exposed commands</keyword>
<keyword>hidden commands</keyword>
<keyword>interpreter</keyword>
<keyword>invoke</keyword>
<keyword>master</keyword>
<keyword>slave</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtTimerHdlr" title="Tcl_CreateTimerHandler" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtTimerHdlr.3,v 1.3 2004/09/06 09:44:56 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CreateTimerHandler" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateTimerHandler</name>
<name>Tcl_DeleteTimerHandler</name>
<desc>call a procedure at a given time</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_TimerToken
<fun>Tcl_CreateTimerHandler</fun>(<m>milliseconds</m>, <m>proc</m>, <m>clientData</m>)

<fun>Tcl_DeleteTimerHandler</fun>(<m>token</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>milliseconds</name>
<argmode>in</argmode>
<desc>How many milliseconds to wait before invoking <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_TimerProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke after <i>milliseconds</i> have elapsed.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_TimerToken</argtype>
<name>token</name>
<argmode>in</argmode>
<desc>Token for previously created timer handler (the return value
from some previous call to <fun>Tcl_CreateTimerHandler</fun>).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateTimerHandler</fun> arranges for <i>proc</i> to be
invoked at a time <i>milliseconds</i> milliseconds in the
future.
The callback to <i>proc</i> will be made by <fun>Tcl_DoOneEvent</fun>,
so <fun>Tcl_CreateTimerHandler</fun> is only useful in programs that
dispatch events through <fun>Tcl_DoOneEvent</fun> or through Tcl commands
such as <cmd>vwait</cmd>.
The call to <i>proc</i> may not be made at the exact time given by
<i>milliseconds</i>:  it will be made at the next opportunity
after that time.  For example, if <fun>Tcl_DoOneEvent</fun> isn't
called until long after the time has elapsed, or if there
are other pending events to process before the call to
<i>proc</i>, then the call to <i>proc</i> will be delayed.
</p>
<p><i>Proc</i> should have arguments and return value that match
the type <type>Tcl_TimerProc</type>:
</p>
<syntax cat="type" name="Tcl_TimerProc" scope="global">
typedef void Tcl_TimerProc(ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a
copy of the <i>clientData</i> argument given to
<fun>Tcl_CreateTimerHandler</fun> when the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information about
what to do in <i>proc</i>.
</p>
<p><fun>Tcl_DeleteTimerHandler</fun> may be called to delete a
previously created timer handler.  It deletes the handler
indicated by <i>token</i> so that no call to <i>proc</i>
will be made;  if that handler no longer exists
(e.g. because the time period has already elapsed and <i>proc</i>
has been invoked then <fun>Tcl_DeleteTimerHandler</fun> does nothing.
The tokens returned by <fun>Tcl_CreateTimerHandler</fun> never have
a value of NULL, so if NULL is passed to <fun>Tcl_DeleteTimerHandler</fun>
then the procedure does nothing.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>clock</keyword>
<keyword>handler</keyword>
<keyword>timer</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtTrace" title="Tcl_CreateTrace">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2002 by Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtTrace.3,v 1.10 2004/10/07 15:37:43 dkf Exp $
 -->
<?TROFF.TH title="Tcl_CreateTrace" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateTrace</name>
<name>Tcl_CreateObjTrace</name>
<name>Tcl_DeleteTrace</name>
<desc>arrange for command execution to be traced</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Trace
<fun>Tcl_CreateTrace</fun>(<m>interp</m>, <m>level</m>, <m>proc</m>, <m>clientData</m>)

Tcl_Trace
<fun>Tcl_CreateObjTrace</fun>(<m>interp</m>, <m>level</m>, <m>flags</m>, <m>objProc</m>, <m>clientData</m>, <m>deleteProc</m>)

<fun>Tcl_DeleteTrace</fun>(<m>interp</m>, <m>trace</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter containing command to be traced or untraced.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>level</name>
<argmode>in</argmode>
<desc>Only commands at or below this nesting level will be traced unless
0 is specified.  1 means
top-level commands only, 2 means top-level commands or those that are
invoked as immediate consequences of executing top-level commands
(procedure bodies, bracketed commands, etc.) and so on.
A value of 0 means that commands at any level are traced.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Flags governing the trace execution.  See below for details.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdObjTraceProc</argtype>
<name name="objProc">*objProc</name>
<argmode>in</argmode>
<desc>Procedure to call for each command that's executed.  See below for
details of the calling sequence.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdTraceProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to call for each command that's executed.  See below for
details on the calling sequence.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>objProc</i> or <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CmdObjTraceDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>Procedure to call when the trace is deleted.  See below for details of
the calling sequence.  A NULL pointer is permissible and results in no
callback when the trace is deleted.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Trace</argtype>
<name>trace</name>
<argmode>in</argmode>
<desc>Token for trace to be removed (return value from previous call
to <fun>Tcl_CreateTrace</fun>).
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_CreateObjTrace</fun> arranges for command tracing.  After it is
called, <i>objProc</i> will be invoked before the Tcl interpreter calls
any command procedure when evaluating commands in <i>interp</i>.
The return value from <fun>Tcl_CreateObjTrace</fun> is a token for the trace,
which may be passed to <fun>Tcl_DeleteTrace</fun> to remove the trace.
There may be many traces in effect simultaneously for the same
interpreter.
</p>
<p><i>objProc</i> should have arguments and result that match the type,
<type>Tcl_CmdObjTraceProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdObjTraceProc" scope="global">
typedef int <type>Tcl_CmdObjTraceProc</type>( 
        <b>ClientData</b> <i>clientData</i>,
        <type>Tcl_Interp</type>* <i>interp</i>,
        int <i>level</i>,
        const char *<i>command</i>,
        <b>Tcl_Command</b> <i>commandToken</i>,
        int <i>objc</i>,
        <type>Tcl_Obj</type> *const <i>objv</i>[] );
</syntax>
<p>The <i>clientData</i> and <i>interp</i> parameters are copies of the
corresponding arguments given to <fun>Tcl_CreateTrace</fun>.
<i>ClientData</i> typically points to an application-specific data
structure that describes what to do when <i>objProc</i> is invoked.  The
<i>level</i> parameter gives the nesting level of the command (1 for
top-level commands passed to <fun>Tcl_Eval</fun> by the application, 2 for
the next-level commands passed to <fun>Tcl_Eval</fun> as part of parsing or
interpreting level-1 commands, and so on). The <i>command</i> parameter
points to a string containing the text of the command, before any
argument substitution.  The <i>commandToken</i> parameter is a Tcl
command token that identifies the command to be invoked.  The token
may be passed to <fun>Tcl_GetCommandName</fun>,
<b>Tcl_GetCommandTokenInfo</b>, or <b>Tcl_SetCommandTokenInfo</b> to
manipulate the definition of the command. The <i>objc</i> and <i>objv</i>
parameters designate the final parameter count and parameter vector
that will be passed to the command, and have had all substitutions
performed.
</p>
<p>The <i>objProc</i> callback is expected to return a standard Tcl status
return code.  If this code is <b>TCL_OK</b> (the normal case), then
the Tcl interpreter will invoke the command.  Any other return code
is treated as if the command returned that status, and the command is
<i>not</i> invoked.
</p>
<p>The <i>objProc</i> callback must not modify <i>objv</i> in any way.  It
is, however, permissible to change the command by calling
<b>Tcl_SetCommandTokenInfo</b> prior to returning.  Any such change
takes effect immediately, and the command is invoked with the new
information.
</p>
<p>Tracing will only occur for commands at nesting level less than
or equal to the <i>level</i> parameter (i.e. the <i>level</i>
parameter to <i>objProc</i> will always be less than or equal to the
<i>level</i> parameter to <fun>Tcl_CreateTrace</fun>).
</p>
<p>Tracing has a significant effect on runtime performance because it
causes the bytecode compiler to refrain from generating in-line code
for Tcl commands such as <cmd>if</cmd> and <cmd>while</cmd> in order that they
may be traced.  If traces for the built-in commands are not required,
the <i>flags</i> parameter may be set to the constant value
<b>TCL_ALLOW_INLINE_COMPILATION</b>.  In this case, traces on built-in
commands may or may not result in trace callbacks, depending on the
state of the interpreter, but run-time performance will be improved
significantly.  (This functionality is desirable, for example, when
using <fun>Tcl_CreateObjTrace</fun> to implement an execution time
profiler.)
</p>
<p>Calls to <i>objProc</i> will be made by the Tcl parser immediately before
it calls the command procedure for the command (<i>cmdProc</i>).  This
occurs after argument parsing and substitution, so tracing for
substituted commands occurs before tracing of the commands
containing the substitutions.  If there is a syntax error in a
command, or if there is no command procedure associated with a
command name, then no tracing will occur for that command.  If a
string passed to Tcl_Eval contains multiple commands (bracketed, or
on different lines) then multiple calls to <i>objProc</i> will occur,
one for each command.
</p>
<p><fun>Tcl_DeleteTrace</fun> removes a trace, so that no future calls will be
made to the procedure associated with the trace.  After <fun>Tcl_DeleteTrace</fun>
returns, the caller should never again use the <i>trace</i> token.
</p>
<p>When <fun>Tcl_DeleteTrace</fun> is called, the interpreter invokes the
<i>deleteProc</i> that was passed as a parameter to
<fun>Tcl_CreateObjTrace</fun>.  The <i>deleteProc</i> must match the type,
<type>Tcl_CmdObjTraceDeleteProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdObjTraceDeleteProc" scope="global">
typedef void <type>Tcl_CmdObjTraceDeleteProc</type>( 
        <b>ClientData</b> <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> parameter will be the same as the
<i>clientData</i> parameter that was originally passed to
<fun>Tcl_CreateObjTrace</fun>.
</p>
<p><fun>Tcl_CreateTrace</fun> is an alternative interface for command tracing,
<i>not recommended for new applications</i>.  It is provided for backward
compatibility with code that was developed for older versions of the
Tcl interpreter.  It is similar to <fun>Tcl_CreateObjTrace</fun>, except
that its <i>proc</i> parameter should have arguments and result that
match the type <type>Tcl_CmdTraceProc</type>:
</p>
<syntax cat="type" name="Tcl_CmdTraceProc" scope="global">
typedef void Tcl_CmdTraceProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        int <i>level</i>,
        char *<i>command</i>,
        Tcl_CmdProc *<i>cmdProc</i>,
        ClientData <i>cmdClientData</i>,
        int <i>argc</i>,
        const char *<i>argv</i>[]);
</syntax>
<p>The parameters to the <i>proc</i> callback are similar to those of the
<i>objProc</i> callback above. The <i>commandToken</i> is
replaced with <i>cmdProc</i>, a pointer to the (string-based) command
procedure that will be invoked; and <i>cmdClientData</i>, the client
data that will be passed to the procedure.  The <i>objc</i> parameter
is replaced with an <i>argv</i> parameter, that gives the arguments to
the command as character strings.
<i>Proc</i> must not modify the <i>command</i> or <i>argv</i> strings.
</p>
<p>If a trace created with <fun>Tcl_CreateTrace</fun> is in effect, inline
compilation of Tcl commands such as <cmd>if</cmd> and <cmd>while</cmd> is always
disabled.  There is no notification when a trace created with
<fun>Tcl_CreateTrace</fun> is deleted.
There is no way to be notified when the trace created by
<fun>Tcl_CreateTrace</fun> is deleted.  There is no way for the <i>proc</i>
associated with a call to <fun>Tcl_CreateTrace</fun> to abort execution of
<i>command</i>.
</p>
</section>
<keywords>
<keyword>command</keyword>
<keyword>create</keyword>
<keyword>delete</keyword>
<keyword>interpreter</keyword>
<keyword>trace</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CrtWindow" version="4.2" title="Tk_CreateWindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: CrtWindow.3,v 1.8 2007/01/05 00:00:47 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_CreateWindow" section="3" date="4.2" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateWindow</name>
<name>Tk_CreateWindowFromPath</name>
<name>Tk_DestroyWindow</name>
<name>Tk_MakeWindowExist</name>
<desc>create or delete window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_CreateWindow</fun>(<m>interp</m>, <m>parent</m>, <m>name</m>, <m>topLevScreen</m>)

Tk_Window
<fun>Tk_CreateAnonymousWindow</fun>(<m>interp</m>, <m>parent</m>, <m>topLevScreen</m>)

Tk_Window
<fun>Tk_CreateWindowFromPath</fun>(<m>interp</m>, <m>tkwin</m>, <m>pathName</m>, <m>topLevScreen</m>)

<fun>Tk_DestroyWindow</fun>(<m>tkwin</m>)

<fun>Tk_MakeWindowExist</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>Tcl interpreter to use for error reporting.  If no error occurs,
then <i>*interp</i> isn't modified.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>parent</name>
<argmode>in</argmode>
<desc>Token for the window that is to serve as the logical parent of
the new window.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name to use for this window.  Must be unique among all children of
the same <i>parent</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="topLevScreen">*topLevScreen</name>
<argmode>in</argmode>
<desc>Has same format as <i>screenName</i>.  If NULL, then new window is
created as an internal window.  If non-NULL, new window is created as
a top-level window on screen <i>topLevScreen</i>.  If <i>topLevScreen</i>
is an empty string (``'') then new
window is created as top-level window of <i>parent</i>'s screen.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pathName">*pathName</name>
<argmode>in</argmode>
<desc>Name of new window, specified as path name within application
(e.g. <b>.a.b.c</b>).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures <fun>Tk_CreateWindow</fun>, 
<fun>Tk_CreateAnonymousWindow</fun>, and <fun>Tk_CreateWindowFromPath</fun>
are used to create new windows for
use in Tk-based applications.  Each of the procedures returns a token
that can be used to manipulate the window in other calls to the Tk
library.  If the window couldn't be created successfully, then NULL
is returned and <i>interp-&gt;result</i> is modified to hold an error
message.
</p>
<p>Tk supports two different kinds of windows:  internal
windows and top-level windows.
An internal window is an interior window of a Tk application, such as a
scrollbar or menu bar or button.  A top-level window is one that is
created as a child of a screen's root window, rather than as an
interior window, but which is logically part of some existing main
window.  Examples of top-level windows are pop-up menus and dialog boxes.
</p>
<p>New windows may be created by calling
<fun>Tk_CreateWindow</fun>.  If the <i>topLevScreen</i> argument is
NULL, then the new window will be an internal window.  If
<i>topLevScreen</i> is non-NULL, then the new window will be a
top-level window: <i>topLevScreen</i> indicates the name of
a screen and the new window will be created as a child of the
root window of <i>topLevScreen</i>.  In either case Tk will
consider the new window to be the logical child of <i>parent</i>:
the new window's path name will reflect this fact, options may
be specified for the new window under this assumption, and so on.
The only difference is that new X window for a top-level window
will not be a child of <i>parent</i>'s X window.  For example, a pull-down
menu's <i>parent</i> would be the button-like window used to invoke it,
which would in turn be a child of the menu bar window.  A dialog box might
have the application's main window as its parent.
</p>
<p><fun>Tk_CreateAnonymousWindow</fun> differs from <fun>Tk_CreateWindow</fun> in
that it creates an unnamed window.  This window will be manipulable
only using C interfaces, and will not be visible to Tcl scripts.  Both
interior windows and top-level windows may be created with
<fun>Tk_CreateAnonymousWindow</fun>.
</p>
<p><fun>Tk_CreateWindowFromPath</fun> offers an alternate way of specifying
new windows.  In <fun>Tk_CreateWindowFromPath</fun> the new
window is specified with a token for any window in the target
application (<i>tkwin</i>), plus a path name for the new window.
It produces the same effect as <fun>Tk_CreateWindow</fun> and allows
both top-level and internal windows to be created, depending on
the value of <i>topLevScreen</i>.  In calls to <fun>Tk_CreateWindowFromPath</fun>,
as in calls to <fun>Tk_CreateWindow</fun>, the parent of the new window
must exist at the time of the call, but the new window must not
already exist.
</p>
<p>The window creation procedures don't
actually issue the command to X to create a window.
Instead, they create a local data structure associated with
the window and defer the creation of the X window.
The window will actually be created by the first call to
<fun>Tk_MapWindow</fun>.  Deferred window creation allows various
aspects of the window (such as its size, background color,
etc.) to be modified after its creation without incurring
any overhead in the X server.  When the window is finally
mapped all of the window attributes can be set while creating
the window.
</p>
<p>The value returned by a window-creation procedure is not the
X token for the window (it can't be, since X hasn't been
asked to create the window yet).  Instead, it is a token
for Tk's local data structure for the window.  Most
of the Tk library procedures take Tk_Window tokens, rather
than X identifiers.  The actual
X window identifier can be retrieved from the local
data structure using the <fun>Tk_WindowId</fun> macro;  see
the manual entry for <fun>Tk_WindowId</fun> for details.
</p>
<p><fun>Tk_DestroyWindow</fun> deletes a window and all the data
structures associated with it, including any event handlers
created with <fun>Tk_CreateEventHandler</fun>.  In addition,
<fun>Tk_DestroyWindow</fun> will delete any children of <i>tkwin</i>
recursively (where children are defined in the Tk sense, consisting
of all windows that were created with the given window as <i>parent</i>).
If <i>tkwin</i> is an internal window, then event
handlers interested in destroy events
are invoked immediately.  If <i>tkwin</i> is a top-level or main window,
then the event handlers will be invoked later, after X has seen
the request and returned an event for it.
</p>
<p>If a window has been created
but hasn't been mapped, so no X window exists, it is
possible to force the creation of the X window by
calling <fun>Tk_MakeWindowExist</fun>.  This procedure issues
the X commands to instantiate the window given by <i>tkwin</i>.

</p>
</section>
<keywords>
<keyword>create</keyword>
<keyword>deferred creation</keyword>
<keyword>destroy</keyword>
<keyword>display</keyword>
<keyword>internal window</keyword>
<keyword>screen</keyword>
<keyword>top-level window</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="CUpVar" version="7.4" title="Tcl_UpVar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: UpVar.3,v 1.11 2006/10/09 23:38:56 msofer Exp $
 -->
<?TROFF.TH title="Tcl_UpVar" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_UpVar</name>
<name>Tcl_UpVar2</name>
<desc>link one variable to another</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<b>Tcl_UpVar(</b><m>interp</m>, <m>frameName</m>, <m>sourceName</m>, <m>destName</m>, <m>flags</m><b>)</b>

int
<b>Tcl_UpVar2(</b><m>interp</m>, <m>frameName</m>, <m>name1</m>, <m>name2</m>, <m>destName</m>, <m>flags</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter containing variables;  also used for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="frameName">*frameName</name>
<argmode>in</argmode>
<desc>Identifies the stack frame containing source variable.
May have any of the forms accepted by
the <cmd>upvar</cmd> command, such as <b>#0</b> or <b>1</b>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="sourceName">*sourceName</name>
<argmode>in</argmode>
<desc>Name of source variable, in the frame given by <i>frameName</i>.
May refer to a scalar variable or to an array variable with a
parenthesized index.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="destName">*destName</name>
<argmode>in</argmode>
<desc>Name of destination variable, which is to be linked to source
variable so that references to <i>destName</i>
refer to the other variable.  Must not currently exist except as
an upvar-ed variable.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>One of <b>TCL_GLOBAL_ONLY</b>, <b>TCL_NAMESPACE_ONLY</b> or 0;  if non-zero,
then <i>destName</i> is a global or namespace variable;  otherwise it is
local to the current procedure (or current namespace if no procedure is
active). 
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name1">*name1</name>
<argmode>in</argmode>
<desc>First part of source variable's name (scalar name, or name of array
without array index).
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name2">*name2</name>
<argmode>in</argmode>
<desc>If source variable is an element of an array, gives the index of the element.
For scalar source variables, is NULL.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_UpVar</fun> and <fun>Tcl_UpVar2</fun> provide the same functionality
as the <cmd>upvar</cmd> command:  they make a link from a source variable
to a destination variable, so that references to the destination are
passed transparently through to the source.
The name of the source variable may be specified either as a single
string such as <b>xyx</b> or <b>a(24)</b> (by calling <fun>Tcl_UpVar</fun>)
or in two parts where the array name has been separated from the
element name (by calling <fun>Tcl_UpVar2</fun>).
The destination variable name is specified in a single string;  it
may not be an array element.
</p>
<p>Both procedures return either <b>TCL_OK</b> or <b>TCL_ERROR</b>, and they
leave an error message in the interpreter's result if an error occurs.
</p>
<p>As with the <cmd>upvar</cmd> command, the source variable need not exist;
if it does exist, unsetting it later does not destroy the link.  The
destination variable may exist at the time of the call, but if so
it must exist as a linked variable.

</p>
</section>
<keywords>
<keyword>linked variable</keyword>
<keyword>upvar</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="cursors" version="8.3" title="cursors">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: cursors.n,v 1.4 2006/12/17 00:43:06 mdejong Exp $
 -->
<?TROFF.TH title="cursors" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>cursors</name>
<desc>mouse cursors available in Tk</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>The <b>-cursor</b> widget option allows a Tk programmer to change the
mouse cursor for a particular widget.  The cursor names recognized by
Tk on all platforms are:
</p>
<example>
X_cursor
arrow
based_arrow_down
based_arrow_up
boat
bogosity
bottom_left_corner
bottom_right_corner
bottom_side
bottom_tee
box_spiral
center_ptr
circle
clock
coffee_mug
cross
cross_reverse
crosshair
diamond_cross
dot
dotbox
double_arrow
draft_large
draft_small
draped_box
exchange
fleur
gobbler
gumby
hand1
hand2
heart
icon
iron_cross
left_ptr
left_side
left_tee
leftbutton
ll_angle
lr_angle
man
middlebutton
mouse
none
pencil
pirate
plus
question_arrow
right_ptr
right_side
right_tee
rightbutton
rtl_logo
sailboat
sb_down_arrow
sb_h_double_arrow
sb_left_arrow
sb_right_arrow
sb_up_arrow
sb_v_double_arrow
shuttle
sizing
spider
spraycan
star
target
tcross
top_left_arrow
top_left_corner
top_right_corner
top_side
top_tee
trek
ul_angle
umbrella
ur_angle
watch
xterm

The <b>none</b> cursor can be specified to eliminate the cursor.
</example>


</section>
<section>
<title>PORTABILITY ISSUES</title>


<dl>
<dle>
<dt><b>Windows</b></dt>
<dd>On Windows systems, the following cursors are mapped to native cursors:
<example>
arrow
center_ptr
crosshair
fleur
ibeam
icon
none
sb_h_double_arrow
sb_v_double_arrow
watch
xterm
</example><p>And the following additional cursors are available:
</p><example>
no
starting
size
size_ne_sw
size_ns
size_nw_se
size_we
uparrow
wait
</example>
</dd>
</dle>
<dle>
<dt><b>Macintosh</b></dt>
<dd>On Macintosh systems, the following cursors are mapped to native cursors:
<example>
arrow
cross
crosshair
ibeam
none
plus
watch
xterm
</example><p>And the following additional cursors are available:
</p><example>
text
cross-hair
</example>
</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>cursor</keyword>
<keyword>option</keyword>
</keywords>
</manpage>
<manpage cat="package" id="dde" title="dde" version="1.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
     Copyright (c) 2001 ActiveState Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: dde.n,v 1.17 2004/11/25 11:28:22 dkf Exp $
 -->
<?TROFF.TH title="dde" section="n" date="1.3" source="dde" manual="Tcl Bundled Packages" ?>
<namesection>
<name>dde</name>
<desc>Execute a Dynamic Data Exchange command</desc>
</namesection>
<synopsis>
<syntax>

<b>package require dde 1.3</b>

<b>dde servername</b> ?<b>-force</b>? ?<b>-handler</b> <m>proc</m>? ?<b>--</b>? ?<m>topic</m>?

<b>dde execute</b> ?<b>-async</b>? <m>service topic data</m>

<b>dde poke</b> <m>service topic item data</m>

<b>dde request</b> ?<b>-binary</b>? <m>service topic item</m>

<b>dde services</b> <m>service topic</m>

<b>dde eval</b> ?<b>-async</b>? <m>topic cmd</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command allows an application to send Dynamic Data Exchange (DDE)
command when running under Microsoft Windows. Dynamic Data Exchange is
a mechanism where applications can exchange raw data. Each DDE
transaction needs a <i>service name</i> and a <i>topic</i>. Both the
<i>service name</i> and <i>topic</i> are application defined; Tcl uses
the service name <b>TclEval</b>, while the topic name is the name of the
interpreter given by <b>dde servername</b>. Other applications have their
own <i>service names</i> and <i>topics</i>. For instance, Microsoft Excel
has the service name <b>Excel</b>.
</p>
</section>
<section>
<title>DDE COMMANDS</title>
<p>The following commands are a subset of the full Dynamic Data Exchange
set of commands.
</p>
<dl>
<dle>
<dt><b>dde servername</b> ?<b>-force</b>? ?<b>-handler</b> <m>proc</m>? ?<b>--</b>? ?<m>topic</m>?</dt>
<dd><b>dde servername</b> registers the interpreter as a DDE server with
the service name <b>TclEval</b> and the topic name specified by <i>topic</i>.
If no <i>topic</i> is given, <b>dde servername</b> returns the name
of the current topic or the empty string if it is not registered as a
service. If the given <i>topic</i> name is already in use, then a
suffix of the form ' #2' or ' #3' is appended to the name to make it
unique. The command's result will be the name actually used. The
<b>-force</b> option is used to force registration of precisely the
given <i>topic</i> name.
</dd>
</dle>
<dle>
<dt/>
<dd>The <b>-handler</b> option specifies a Tcl procedure that will be called to
process calls to the dde server. If the package has been loaded into a
safe interpreter then a <b>-handler</b> procedure must be defined. The
procedure is called with all the arguments provided by the remote
call.
</dd>
</dle>
<dle>
<dt><b>dde execute</b> ?<b>-async</b>? <m>service topic data</m></dt>
<dd><b>dde execute</b> takes the <i>data</i> and sends it to the server indicated
by <i>service</i> with the topic indicated by <i>topic</i>. Typically,
<i>service</i> is the name of an application, and <i>topic</i> is a file to
work on.  The <i>data</i> field is given to the remote application.
Typically, the application treats the <i>data</i> field as a script, and the
script is run in the application.  The <b>-async</b> option requests
asynchronous invocation.  The command returns an error message if the
script did not run, unless the <b>-async</b> flag was used, in which case
the command returns immediately with no error.
</dd>
</dle>
<dle>
<dt><b>dde poke</b> <m>service topic item data</m></dt>
<dd><b>dde poke</b> passes the <i>data</i> to the server indicated by
<i>service</i> using the <i>topic</i> and <i>item</i> specified.  Typically,
<i>service</i> is the name of an application.  <i>topic</i> is application
specific but can be a command to the server or the name of a file to work
on.  The <i>item</i> is also application specific and is often not used, but
it must always be non-null.  The <i>data</i> field is given to the remote
application.
</dd>
</dle>
<dle>
<dt><b>dde request</b> ?<b>-binary</b>? <m>service topic item</m></dt>
<dd><b>dde request</b> is typically used to get the value of something; the
value of a cell in Microsoft Excel or the text of a selection in
Microsoft Word. <i>service</i> is typically the name of an application,
<i>topic</i> is typically the name of the file, and <i>item</i> is
application-specific. The command returns the value of <i>item</i> as
defined in the application.  Normally this is interpreted to be a
string with terminating null.  If <b>-binary</b> is specified, the
result is returned as a byte array.
</dd>
</dle>
<dle>
<dt><b>dde services</b> <m>service topic</m></dt>
<dd><b>dde services</b> returns a list of service-topic pairs that
currently exist on the machine. If <i>service</i> and <i>topic</i> are
both empty strings ({}), then all service-topic pairs currently
available on the system are returned. If <i>service</i> is empty and
<i>topic</i> is not, then all services with the specified topic are
returned. If <i>service</i> is non-empty and <i>topic</i> is, all topics
for a given service are returned. If both are non-empty, if that
service-topic pair currently exists, it is returned; otherwise, an
empty string is returned.
</dd>
</dle>
<dle>
<dt><b>dde eval</b> ?<b>-async</b>? <m>topic cmd</m> ?<m>arg arg ...</m>?</dt>
<dd><b>dde eval</b> evaluates a command and its arguments using the interpreter
specified by <i>topic</i>. The DDE service must be the <b>TclEval</b>
service.  The <b>-async</b> option requests asynchronous invocation.  The
command returns an error message if the script did not run, unless the
<b>-async</b> flag was used, in which case the command returns immediately
with no error.  This command can be used to replace send on Windows.
</dd>
</dle>
</dl>
</section>
<section>
<title>DDE AND TCL</title>
<p>A Tcl interpreter always has a service name of <b>TclEval</b>.  Each
different interpreter of all running Tcl applications must be
given a unique
name specified by <b>dde servername</b>. Each interp is available as a
DDE topic only if the <b>dde servername</b> command was used to set the
name of the topic for each interp. So a <b>dde services TclEval {}</b>
command will return a list of service-topic pairs, where each of the
currently running interps will be a topic.
</p>
<p>When Tcl processes a <b>dde execute</b> command, the data for the
execute is run as a script in the interp named by the topic of the
<b>dde execute</b> command.
</p>
<p>When Tcl processes a <b>dde request</b> command, it returns the value of the
variable given in the dde command in the context of the interp named by the
dde topic. Tcl reserves the variable <b>$TCLEVAL$EXECUTE$RESULT</b> for
internal use, and <b>dde request</b> commands for that variable will give
unpredictable results.
</p>
<p>An external application which wishes to run a script in Tcl should have
that script store its result in a variable, run the <b>dde execute</b>
command, and the run <b>dde request</b> to get the value of the
variable.
</p>
<p>When using DDE, be careful to ensure that the event queue is flushed
using either <cmd>update</cmd> or <cmd>vwait</cmd>.  This happens by default
when using <b>wish</b> unless a blocking command is called (such as <cmd>exec</cmd>
without adding the <b>&amp;</b> to place the process in the background).
If for any reason the event queue is not flushed, DDE commands may
hang until the event queue is flushed.  This can create a deadlock
situation.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This asks Internet Explorer (which must already be running) to go to a
particularly important website:
</p>
<example>
package require dde
<b>dde execute</b> iexplore WWW_OpenURL http://www.tcl.tk/
</example>


</section>
<seealso>
<ref>tk(n)</ref>
<ref>winfo(n)</ref>
<ref>send(n)</ref>
</seealso>
<keywords>
<keyword>application</keyword>
<keyword>dde</keyword>
<keyword>name</keyword>
<keyword>remote execution</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DeleteImg" version="4.0" title="Tk_DeleteImage">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DeleteImg.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_DeleteImage" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_DeleteImage</name>
<desc>Destroy an image.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_DeleteImage</fun>(<m>interp</m>, <m>name</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter for which the image was created.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of the image.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_DeleteImage</fun> deletes the image given by <i>interp</i>
and <i>name</i>, if there is one.  All instances of that image
will redisplay as empty regions.  If the given image does not
exist then the procedure has no effect.

</p>
</section>
<keywords>
<keyword>delete image</keyword>
<keyword>image manager</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="destroy" title="destroy">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: destroy.n,v 1.3 2004/06/21 14:24:04 dkf Exp $
 -->
<?TROFF.TH title="destroy" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>destroy</name>
<desc>Destroy one or more windows</desc>
</namesection>
<synopsis>
<syntax>
<cmd>destroy</cmd> ?<m>window window ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command deletes the windows given by the
<i>window</i> arguments, plus all of their descendants.
If a <i>window</i> ``.'' is deleted then the entire application
will be destroyed.
The <i>window</i>s are destroyed in order, and if an error occurs
in destroying a window the command aborts without destroying the
remaining windows.
No error is returned if <i>window</i> does not exist.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Destroy all checkbuttons that are direct children of the given widget:
</p>
<example>
proc killCheckbuttonChildren {parent} {
   foreach w [winfo children $parent] {
      if {[winfo class $w] eq "Checkbutton"} {
         <cmd>destroy</cmd> $w
      }
   }
}
</example>


</section>
<keywords>
<keyword>application</keyword>
<keyword>destroy</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DetachPids" title="Tcl_DetachPids">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DetachPids.3,v 1.4 2004/10/07 14:44:32 dkf Exp $
 -->
<?TROFF.TH title="Tcl_DetachPids" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_DetachPids</name>
<name>Tcl_ReapDetachedProcs</name>
<name>Tcl_WaitPid</name>
<desc>manage child processes in background</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_DetachPids</fun>(<m>numPids</m>, <m>pidPtr</m>)

<fun>Tcl_ReapDetachedProcs</fun>()

Tcl_Pid
<fun>Tcl_WaitPid</fun>(<m>pid</m>, <m>statusPtr</m>, <m>options</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>numPids</name>
<argmode>in</argmode>
<desc>Number of process ids contained in the array pointed to by <i>pidPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="pidPtr">*pidPtr</name>
<argmode>in</argmode>
<desc>Address of array containing <i>numPids</i> process ids.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Pid</argtype>
<name>pid</name>
<argmode>in</argmode>
<desc>The id of the process (pipe) to wait for.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="statusPtr">*statusPtr</name>
<argmode>out</argmode>
<desc>The result of waiting on a process (pipe). Either 0 or ECHILD.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>options</name>
<argmode>in</argmode>
<desc>The options controlling the wait. WNOHANG specifies not to wait when
checking the process.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_DetachPids</fun> and <fun>Tcl_ReapDetachedProcs</fun> provide a
mechanism for managing subprocesses that are running in background.
These procedures are needed because the parent of a process must
eventually invoke the <b>waitpid</b> kernel call (or one of a few other
similar kernel calls) to wait for the child to exit.  Until the
parent waits for the child, the child's state cannot be completely
reclaimed by the system.  If a parent continually creates children
and doesn't wait on them, the system's process table will eventually
overflow, even if all the children have exited.
</p>
<p><fun>Tcl_DetachPids</fun> may be called to ask Tcl to take responsibility
for one or more processes whose process ids are contained in the
<i>pidPtr</i> array passed as argument.  The caller presumably
has started these processes running in background and doesn't
want to have to deal with them again.
</p>
<p><fun>Tcl_ReapDetachedProcs</fun> invokes the <b>waitpid</b> kernel call
on each of the background processes so that its state can be cleaned
up if it has exited.  If the process hasn't exited yet,
<fun>Tcl_ReapDetachedProcs</fun> doesn't wait for it to exit;  it will check again
the next time it is invoked.
Tcl automatically calls <fun>Tcl_ReapDetachedProcs</fun> each time the
<cmd>exec</cmd> command is executed, so in most cases it isn't necessary
for any code outside of Tcl to invoke <fun>Tcl_ReapDetachedProcs</fun>.
However, if you call <fun>Tcl_DetachPids</fun> in situations where the
<cmd>exec</cmd> command may never get executed, you may wish to call
<fun>Tcl_ReapDetachedProcs</fun> from time to time so that background
processes can be cleaned up.
</p>
<p><fun>Tcl_WaitPid</fun> is a thin wrapper around the facilities provided by
the operating system to wait on the end of a spawned process and to
check a whether spawned process is still running. It is used by
<fun>Tcl_ReapDetachedProcs</fun> and the channel system to portably access
the operating system.

</p>
</section>
<keywords>
<keyword>background</keyword>
<keyword>child</keyword>
<keyword>detach</keyword>
<keyword>process</keyword>
<keyword>wait</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="dialog" title="tk_dialog" version="4.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: dialog.n,v 1.3 2004/06/21 14:28:56 dkf Exp $
 -->
<?TROFF.TH title="tk_dialog" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_dialog</name>
<desc>Create modal dialog and wait for response</desc>
</namesection>
<synopsis>
<syntax>
<b>tk_dialog</b> <m>window title text bitmap default string string ...</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This procedure is part of the Tk script library.
Its arguments describe a dialog box:
</p>
<dl>
<dle>
<dt><m>window</m></dt>
<dd>Name of top-level window to use for dialog.  Any existing window
by this name is destroyed.
</dd>
</dle>
<dle>
<dt><m>title</m></dt>
<dd>Text to appear in the window manager's title bar for the dialog.
</dd>
</dle>
<dle>
<dt><m>text</m></dt>
<dd>Message to appear in the top portion of the dialog box.
</dd>
</dle>
<dle>
<dt><m>bitmap</m></dt>
<dd>If non-empty, specifies a bitmap to display in the top portion of
the dialog, to the left of the text.
If this is an empty string then no bitmap is displayed in the dialog.
</dd>
</dle>
<dle>
<dt><m>default</m></dt>
<dd>If this is an integer greater than or equal to zero, then it gives
the index of the button that is to be the default button for the dialog
(0 for the leftmost button, and so on).
If less than zero or an empty string then there won't be any default
button.
</dd>
</dle>
<dle>
<dt><m>string</m></dt>
<dd>There will be one button for each of these arguments.
Each <i>string</i> specifies text to display in a button,
in order from left to right.
</dd>
</dle>
</dl>
<p>After creating a dialog box, <b>tk_dialog</b> waits for the user to
select one of the buttons either by clicking on the button with the
mouse or by typing return to invoke the default button (if any).
Then it returns the index of the selected button:  0 for the leftmost
button, 1 for the button next to it, and so on.
If the dialog's window is destroyed before the user selects one
of the buttons, then -1 is returned.
</p>
<p>While waiting for the user to respond, <b>tk_dialog</b> sets a local
grab.  This prevents the user from interacting with the application
in any way except to invoke the dialog box.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
set reply [<b>tk_dialog</b> .foo "The Title" "Do you want to say yes?" \
        questhead 0 Yes No "I'm not sure"]
</example>


</section>
<seealso>
<ref>tk_messageBox(n)</ref>
</seealso>
<keywords>
<keyword>bitmap</keyword>
<keyword>dialog</keyword>
<keyword>modal</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="dict" version="8.5" title="dict">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: dict.n,v 1.12 2006/01/26 23:21:06 dkf Exp $
 -->
<?TROFF.TH title="dict" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>dict</name>
<desc>Manipulate dictionaries</desc>
</namesection>
<synopsis>
<syntax>
<b>dict</b> <m>option arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Performs one of several operations on dictionary values or variables
containing dictionary values (see the <ref refid="dictionary-values">DICTIONARY VALUES</ref> section
below for a description), depending on <i>option</i>.  The legal
<i>option</i>s (which may be abbreviated) are:
</p>
<dl>
<dle>
<dt><b>dict append</b> <m>dictionaryVariable key</m> ?<m>string ...</m>?</dt>
<dd>This appends the given string (or strings) to the value that the given
key maps to in the dictionary value contained in the given variable,
writing the resulting dictionary value back to that variable.
Non-existent keys are treated as if they map to an empty string.
</dd>
</dle>
<dle>
<dt><b>dict create</b> ?<m>key value ...</m>?</dt>
<dd>Create a new dictionary that contains each of the key/value mappings
listed as arguments (keys and values alternating, with each key being
followed by its associated value.)
</dd>
</dle>
<dle>
<dt><b>dict exists</b> <m>dictionaryValue key</m> ?<m>key ...</m>?</dt>
<dd>This returns a boolean value indicating whether the given key (or path
of keys through a set of nested dictionaries) exists in the given
dictionary value. This returns a true value exactly when <b>dict
get</b> on that path will succeed.
</dd>
</dle>
<dle>
<dt><b>dict filter</b> <m>dictionaryValue filterType arg</m> ?<m>arg ...</m>?</dt>
<dd>This takes a dictionary value and returns a new dictionary that
contains just those key/value pairs that match the specified filter
type (which may be abbreviated.)  Supported filter types are:
<dl>
<dle>
<dt><b>dict filter</b> <m>dictionaryValue</m> <b>key</b> <m>globPattern</m></dt>
<dd>The key rule only matches those key/value pairs whose keys match the
given pattern (in the style of <b>string match</b>.)
</dd>
</dle>
<dle>
<dt><b>dict filter</b> <m>dictionaryValue</m> <b>script {</b><m>keyVar valueVar</m><b>}</b> <m>script</m></dt>
<dd>The script rule tests for matching by assigning the key to the
<i>keyVar</i> and the value to the <i>valueVar</i>, and then evaluating
the given script which should return a boolean value (with the
key/value pair only being included in the result of the <b>dict
filter</b> when a true value is returned.)  Note that the first
argument after the rule selection word is a two-element list.  If the
<i>script</i> returns with a condition of <b>TCL_BREAK</b>, no further
key/value pairs are considered for inclusion in the resulting
dictionary, and a condition of <b>TCL_CONTINUE</b> is equivalent to a false
result. The order in which the key/value pairs are tested is undefined.
</dd>
</dle>
<dle>
<dt><b>dict filter</b> <m>dictionaryValue</m> <b>value</b> <m>globPattern</m></dt>
<dd>The value rule only matches those key/value pairs whose values match
the given pattern (in the style of <b>string match</b>.)
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>dict for {</b><m>keyVar valueVar</m><b>}</b> <m>dictionaryValue body</m></dt>
<dd>This command takes three arguments, the first a two-element list of
variable names (for the key and value respectively of each mapping in
the dictionary), the second the dictionary value to iterate across,
and the third a script to be evaluated for each mapping with the key
and value variables set appropriately (in the manner of <cmd>foreach</cmd>.)
The result of the command is an empty string. If any evaluation of the
body generates a <b>TCL_BREAK</b> result, no further pairs from the
dictionary will be iterated over and the <b>dict for</b> command will
terminate successfully immediately. If any evaluation of the body
generates a <b>TCL_CONTINUE</b> result, this shall be treated exactly like a
normal <b>TCL_OK</b> result.  The order of iteration is undefined.
</dd>
</dle>
<dle>
<dt><b>dict get</b> <m>dictionaryValue</m> ?<m>key ...</m>?</dt>
<dd>Given a dictionary value (first argument) and a key (second argument),
this will retrieve the value for that key. Where several keys are
supplied, the behaviour of the command shall be as if the result of
<b>dict get $dictVal $key</b> was passed as the first argument to
<b>dict get</b> with the remaining arguments as second (and possibly
subsequent) arguments. This facilitates lookups in nested
dictionaries. For example, the following two commands are equivalent:
<example>
dict get $dict foo bar spong
dict get [dict get [dict get $dict foo] bar] spong
</example><p>If no keys are provided, dict would return a list containing pairs of
elements in a manner similar to <b>array get</b>. That is, the first
element of each pair would be the key and the second element would be
the value for that key.

It is an error to attempt to retrieve a value for a key that is not
present in the dictionary.
</p></dd>
</dle>
<dle>
<dt><b>dict incr</b> <m>dictionaryVariable key</m> ?<m>increment</m>?</dt>
<dd>This adds the given increment value (an integer that defaults to 1 if
not specified) to the value that the given key maps to in the
dictionary value contained in the given variable, writing the
resulting dictionary value back to that variable. Non-existent keys
are treated as if they map to 0. It is an error to increment a value
for an existing key if that value is not an integer.
</dd>
</dle>
<dle>
<dt><b>dict info</b> <m>dictionaryValue</m></dt>
<dd>This returns information (intended for display to people) about the
given dictionary though the format of this data is dependent on the
implementation of the dictionary. For dictionaries that are
implemented by hash tables, it is expected that this will return the
string produced by <fun>Tcl_HashStats</fun>, similar to <b>array info</b>.
</dd>
</dle>
<dle>
<dt><b>dict keys</b> <m>dictionaryValue</m> ?<m>globPattern</m>?</dt>
<dd>Return a list of all keys in the given dictionary value. If a pattern
is supplied, only those keys that match it (according to the rules of
<b>string match</b>) will be returned. The returned keys will be in an
arbitrary implementation-specific order, though where no pattern is
supplied the i'th key returned by <b>dict keys</b> will be the key for
the i'th value returned by <b>dict values</b> applied to the same
dictionary value.
</dd>
</dle>
<dle>
<dt><b>dict lappend</b> <m>dictionaryVariable key</m> ?<m>value ...</m>?</dt>
<dd>This appends the given items to the list value that the given key maps
to in the dictionary value contained in the given variable, writing
the resulting dictionary value back to that variable. Non-existent
keys are treated as if they map to an empty list, and it is legal for
there to be no items to append to the list. It is an error for the
value that the key maps to to not be representable as a list.
</dd>
</dle>
<dle>
<dt><b>dict merge</b> ?<m>dictionaryValue ...</m>?</dt>
<dd>Return a dictionary that contains the contents of each of the
<i>dictionaryValue</i> arguments.  Where two (or more) dictionaries
contain a mapping for the same key, the resulting dictionary maps that
key to the value according to the last dictionary on the command line
containing a mapping for that key.
</dd>
</dle>
<dle>
<dt><b>dict remove</b> <m>dictionaryValue</m> ?<m>key ...</m>?</dt>
<dd>Return a new dictionary that is a copy of an old one passed in as
first argument except without mappings for each of the keys listed.
It is legal for there to be no keys to remove, and it also legal for
any of the keys to be removed to not be present in the input
dictionary in the first place.
</dd>
</dle>
<dle>
<dt><b>dict replace</b> <m>dictionaryValue</m> ?<m>key value ...</m>?</dt>
<dd>Return a new dictionary that is a copy of an old one passed in as
first argument except with some values different or some extra
key/value pairs added. It is legal for this command to be called with
no key/value pairs, but illegal for this command to be called with a
key but no value.
</dd>
</dle>
<dle>
<dt><b>dict set</b> <m>dictionaryVariable key</m> ?<m>key ...</m>? <m>value</m></dt>
<dd>This operation takes the name of a variable containing a dictionary
value and places an updated dictionary value in that variable
containing a mapping from the given key to the given value. When
multiple keys are present, this operation creates or updates a chain
of nested dictionaries.
</dd>
</dle>
<dle>
<dt><b>dict size</b> <m>dictionaryValue</m></dt>
<dd>Return the number of key/value mappings in the given dictionary value.
</dd>
</dle>
<dle>
<dt><b>dict unset</b> <m>dictionaryVariable key</m> ?<m>key ...</m>?</dt>
<dd>This operation (the companion to <b>dict set</b>) takes the name of a
variable containing a dictionary value and places an updated
dictionary value in that variable that does not contain a mapping for
the given key. Where multiple keys are present, this describes a path
through nested dictionaries to the mapping to remove. At least one key
must be specified, but the last key on the key-path need not exist.
All other components on the path must exist.
</dd>
</dle>
<dle>
<dt><b>dict update</b> <m>dictionaryVariable key varName</m> ?<m>key varName ...</m>? <m>body</m></dt>
<dd>Execute the Tcl script in <i>body</i> with the value for each <i>key</i>
(as found by reading the dictionary value in <i>dictionaryVariable</i>)
mapped to the variable <i>varName</i>. There may be multiple
<i>key</i>/<i>varName</i> pairs. If a <i>key</i> does not have a mapping,
that corresponds to an unset <i>varName</i>. When <i>body</i>
terminates, any changes made to the <i>varName</i>s is reflected back
to the dictionary within <i>dictionaryVariable</i> (unless
<i>dictionaryVariable</i> itself becomes unreadable, when all updates
are silently discarded), even if the result of <i>body</i> is an error
or some other kind of exceptional exit. The result of <b>dict
update</b> is (unless some kind of error occurs) the result of the
evaluation of <i>body</i>. Note that the mapping of values to variables
does not use traces; changes to the <i>dictionaryVariable</i>'s
contents only happen when <i>body</i> terminates.
</dd>
</dle>
<dle>
<dt><b>dict values</b> <m>dictionaryValue</m> ?<m>globPattern</m>?</dt>
<dd>Return a list of all values in the given dictionary value. If a
pattern is supplied, only those values that match it (according to the
rules of <b>string match</b>) will be returned. The returned values
will be in an arbitrary implementation-specific order, though where no
pattern is supplied the i'th key returned by <b>dict keys</b> will be
the key for the i'th value returned by <b>dict values</b> applied to
the same dictionary value.
</dd>
</dle>
<dle>
<dt><b>dict with</b> <m>dictionaryVariable</m> ?<m>key ...</m>? <m>body</m></dt>
<dd>Execute the Tcl script in <i>body</i> with the value for each key in
<i>dictionaryVariable</i> mapped (in a manner similarly to <b>dict
update</b>) to a variable with the same name. Where one or more
<i>key</i>s are available, these indicate a chain of nested
dictionaries, with the innermost dictionary being the one opened out
for the execution of <i>body</i>. As with <b>dict update</b>, making
<i>dictionaryVariable</i> unreadable will make the updates to the
dictionary be discarded, and this also happens if the contents of
<i>dictionaryVariable</i> are adjusted so that the chain of
dictionaries no longer exists. The result of <b>dict with</b> is
(unless some kind of error occurs) the result of the evaluation of
<i>body</i>. Note that the mapping of values to variables does not use
traces; changes to the <i>dictionaryVariable</i>'s contents only happen
when <i>body</i> terminates.
</dd>
</dle>
</dl>
</section>
<section id="dictionary-values">
<title>DICTIONARY VALUES</title>
<p>Dictionaries are values that contain an efficient (but <i>not</i>
order-preserving) mapping from arbitrary keys to arbitrary values.
They have a textual format that is exactly that of any list with an
even number of elements, with each mapping in the dictionary being
represented as two items in the list.  When a command takes a
dictionary and produces a new dictionary based on it (either returning
it or writing it back into the variable that the starting dictionary
was read from) there is <i>no</i> guarantee that the new dictionary
will have the same ordering of keys.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Constructing and using nested dictionaries:
</p>
<example>
# Data for one employee
<b>dict set</b> employeeInfo 12345-A forenames "Joe"
<b>dict set</b> employeeInfo 12345-A surname   "Schmoe"
<b>dict set</b> employeeInfo 12345-A street "147 Short Street"
<b>dict set</b> employeeInfo 12345-A city   "Springfield"
<b>dict set</b> employeeInfo 12345-A phone  "555-1234"
# Data for another employee
<b>dict set</b> employeeInfo 98372-J forenames "Anne"
<b>dict set</b> employeeInfo 98372-J surname   "Other"
<b>dict set</b> employeeInfo 98372-J street "32995 Oakdale Way"
<b>dict set</b> employeeInfo 98372-J city   "Springfield"
<b>dict set</b> employeeInfo 98372-J phone  "555-8765"
# The above data probably ought to come from a database...

# Print out some employee info
set i 0
puts "There are [<b>dict size</b> $employeeInfo] employees"
<b>dict for</b> {id info} $employeeInfo {
   puts "Employee #[incr i]: $id"
   <b>dict with</b> info {
      puts "   Name: $forenames $surname"
      puts "   Address: $street, $city"
      puts "   Telephone: $phone"
   }
}
# Another way to iterate and pick out names...
foreach id [<b>dict keys</b> $employeeInfo] {
   puts "Hello, [<b>dict get</b> $employeeInfo $id forenames]!"
}
</example>


<p>A localizable version of <b>string toupper</b>:
</p>
<example>
# Set up the basic C locale
set capital [<b>dict create</b> C [<b>dict create</b>]]
foreach c [split {abcdefghijklmnopqrstuvwxyz} ""] {
   <b>dict set</b> capital C $c [string toupper $c]
}

# English locales can luckily share the "C" locale
<b>dict set</b> capital en [<b>dict get</b> $capital C]
<b>dict set</b> capital en_US [<b>dict get</b> $capital C]
<b>dict set</b> capital en_GB [<b>dict get</b> $capital C]

# ... and so on for other supported languages ...

# Now get the mapping for the current locale and use it.
set upperCaseMap [<b>dict get</b> $capital $env(LANG)]
set upperCase [string map $upperCaseMap $string]
</example>


</section>
<seealso>
<ref>append(n)</ref>
<ref>array(n)</ref>
<ref>foreach(n)</ref>
<ref>incr(n)</ref>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>set(n)</ref>
</seealso>
<keywords>
<keyword>dictionary</keyword>
<keyword>create</keyword>
<keyword>update</keyword>
<keyword>lookup</keyword>
<keyword>iterate</keyword>
<keyword>filter</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DictObj" title="Tcl_DictObj" version="8.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DictObj.3,v 1.8 2004/10/07 15:15:36 dkf Exp $
 -->
<?TROFF.TH title="Tcl_DictObj" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewDictObj</name>
<name>Tcl_DictObjPut</name>
<name>Tcl_DictObjGet</name>
<name>Tcl_DictObjRemove</name>
<name>Tcl_DictObjSize</name>
<name>Tcl_DictObjFirst</name>
<name>Tcl_DictObjNext</name>
<name>Tcl_DictObjDone</name>
<name>Tcl_DictObjPutKeyList</name>
<name>Tcl_DictObjRemoveKeyList</name>
<desc>manipulate Tcl objects as dictionaries</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewDictObj</fun>()

int
<fun>Tcl_DictObjGet</fun>(<m>interp</m>, <m>dictPtr</m>, <m>keyPtr</m>, <m>valuePtrPtr</m>)

int
<fun>Tcl_DictObjPut</fun>(<m>interp</m>, <m>dictPtr</m>, <m>keyPtr</m>, <m>valuePtr</m>)

int
<fun>Tcl_DictObjRemove</fun>(<m>interp</m>, <m>dictPtr</m>, <m>keyPtr</m>)

int
<fun>Tcl_DictObjSize</fun>(<m>interp</m>, <m>dictPtr</m>, <m>sizePtr</m>)

int
<fun>Tcl_DictObjFirst</fun>(<m>interp</m>, <m>dictPtr</m>, <m>searchPtr</m>, <m>keyPtrPtr</m>, <m>valuePtrPtr</m>, <m>donePtr</m>)

void
<fun>Tcl_DictObjNext</fun>(<m>searchPtr</m>, <m>keyPtrPtr</m>, <m>valuePtrPtr</m>, <m>donePtr</m>)

void
<fun>Tcl_DictObjDone</fun>(<m>searchPtr</m>)

int
<fun>Tcl_DictObjPutKeyList</fun>(<m>interp</m>, <m>dictPtr</m>, <m>keyc</m>, <m>keyv</m>, <m>valuePtr</m>)

int
<fun>Tcl_DictObjRemoveKeyList</fun>(<m>interp</m>, <m>dictPtr</m>, <m>keyc</m>, <m>keyv</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>If an error occurs while converting an object to be a dictionary object,
an error message is left in the interpreter's result object
unless <i>interp</i> is NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="dictPtr">*dictPtr</name>
<argmode>in/out</argmode>
<desc>Points to the dictionary object to be manipulated.
If <i>dictPtr</i> does not already point to a dictionary object,
an attempt will be made to convert it to one.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="keyPtr">*keyPtr</name>
<argmode>in</argmode>
<desc>Points to the key for the key/value pair being manipulated within the
dictionary object.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="keyPtrPtr">**keyPtrPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will have the key from a key/value pair
placed within it.  May be NULL to indicate that the caller is not
interested in the key.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="valuePtr">*valuePtr</name>
<argmode>in</argmode>
<desc>Points to the value for the key/value pair being manipulate within the
dictionary object (or sub-object, in the case of
<fun>Tcl_DictObjPutKeyList</fun>.)
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="valuePtrPtr">**valuePtrPtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will have the value from a key/value pair
placed within it.  For <fun>Tcl_DictObjFirst</fun> and
<fun>Tcl_DictObjNext</fun>, this may be NULL to indicate that the caller is
not interested in the value.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="sizePtr">*sizePtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will have the number of key/value pairs
contained within the dictionary placed within it.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DictSearch</argtype>
<name name="searchPtr">*searchPtr</name>
<argmode>in/out</argmode>
<desc>Pointer to record to use to keep track of progress in enumerating all
key/value pairs in a dictionary.  The contents of the record will be
initialized by the call to <fun>Tcl_DictObjFirst</fun>.  If the enumerating
is to be terminated before all values in the dictionary have been
returned, the search record <i>must</i> be passed to
<fun>Tcl_DictObjDone</fun> to enable the internal locks to be released.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="donePtr">*donePtr</name>
<argmode>out</argmode>
<desc>Points to a variable that will have a non-zero value written into it
when the enumeration of the key/value pairs in a dictionary has
completed, and a zero otherwise.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>keyc</name>
<argmode>in</argmode>
<desc>Indicates the number of keys that will be supplied in the <i>keyv</i>
array.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *const</argtype>
<name name="keyv">*keyv</name>
<argmode>in</argmode>
<desc>Array of <i>keyc</i> pointers to objects that
<fun>Tcl_DictObjPutKeyList</fun> and <fun>Tcl_DictObjRemoveKeyList</fun> will
use to locate the key/value pair to manipulate within the
sub-dictionaries of the main dictionary object passed to them.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl dictionary objects have an internal representation that supports
efficient mapping from keys to values and which does not guarantee any
particular ordering of keys within the dictionary (the underlying
basic data-structure is a hash table created with <fun>Tcl_InitObjHashTable</fun>).
The procedures described in this man page are used to
create, modify, index, and iterate over dictionary objects from C code.
</p>
<p><fun>Tcl_NewDictObj</fun> creates a new, empty dictionary object.  The
string representation of the object will be invalid, and the reference
count of the object will be zero.
</p>
<p><fun>Tcl_DictObjGet</fun> looks up the given key within the given
dictionary and writes a pointer to the value associated with that key
into the variable pointed to by <i>valuePtrPtr</i>, or a NULL if the
key has no mapping within the dictionary.  The result of this
procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if the <i>dictPtr</i> cannot be
converted to a dictionary.
</p>
<p><fun>Tcl_DictObjPut</fun> updates the given dictionary so that the given
key maps to the given value; any key may exist at most once in any
particular dictionary.  The dictionary must not be shared, but the key
and value may be.  This procedure may increase the reference count of
both key and value if it proves necessary to store them.  Neither key
nor value should be NULL.  The result of this procedure is <b>TCL_OK</b>, or
<b>TCL_ERROR</b> if the <i>dictPtr</i> cannot be converted to a dictionary.
</p>
<p><fun>Tcl_DictObjRemove</fun> updates the given dictionary so that the given
key has no mapping to any value.  The dictionary must not be shared,
but the key may be.  The key actually stored in the dictionary will
have its reference count decremented if it was present.  It is not an
error if the key did not previously exist.  The result of this
procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if the <i>dictPtr</i> cannot be
converted to a dictionary.
</p>
<p><fun>Tcl_DictObjSize</fun> updates the given variable with the number of
key/value pairs currently in the given dictionary. The result of this
procedure is <b>TCL_OK</b>, or <b>TCL_ERROR</b> if the <i>dictPtr</i> cannot be
converted to a dictionary.
</p>
<p><fun>Tcl_DictObjFirst</fun> commences an iteration across all the key/value
pairs in the given dictionary, placing the key and value in the
variables pointed to by the <i>keyPtrPtr</i> and <i>valuePtrPtr</i>
arguments (which may be NULL to indicate that the caller is
uninterested in they key or variable respectively.)  The next
key/value pair in the dictionary may be retrieved with
<fun>Tcl_DictObjNext</fun>.  Concurrent updates of the dictionary's
internal representation will not modify the iteration processing
unless the dictionary is unshared, when this will trigger premature
termination of the iteration instead (which Tcl scripts cannot trigger
via the <b>dict</b> command.)  The <i>searchPtr</i> argument points to a
piece of context that is used to identify which particular iteration
is being performed, and is initialized by the call to
<fun>Tcl_DictObjFirst</fun>.  The <i>donePtr</i> argument points to a
variable that is updated to be zero of there are further key/value
pairs to be iterated over, or non-zero if the iteration is complete.
The order of iteration is implementation-defined.  If the
<i>dictPtr</i> argument cannot be converted to a dictionary,
<fun>Tcl_DictObjFirst</fun> returns <b>TCL_ERROR</b> and the iteration is not
commenced, and otherwise it returns <b>TCL_OK</b>.
</p>
<p>If the last call to <fun>Tcl_DictObjFirst</fun> or <fun>Tcl_DictObjNext</fun>
(for a particular <i>searchPtr</i>) set the variable indicated by the
<i>donePtr</i> argument to zero but no further key/value pairs are
desired from that particular iteration, the <i>searchPtr</i> argument
must be passed to <fun>Tcl_DictObjDone</fun> to release any internal locks
held by the searching process.  If <fun>Tcl_DictObjNext</fun> is called on
a particular <i>searchPtr</i> after <fun>Tcl_DictObjDone</fun> is called on
it, the variable pointed to by <i>donePtr</i> will always be set to 1
(and nothing else will happen). It is safe to call
<fun>Tcl_DictObjDone</fun> multiple times on the same <i>searchPtr</i>.
</p>
<p>The procedures <fun>Tcl_DictObjPutKeyList</fun> and
<fun>Tcl_DictObjRemoveKeyList</fun> are the close analogues of
<fun>Tcl_DictObjPut</fun> and <fun>Tcl_DictObjRemove</fun> respectively, except
that instead of working with a single dictionary, they are designed to
operate on a nested tree of dictionaries, with inner dictionaries
stored as values inside outer dictionaries.  The <i>keyc</i> and
<i>keyv</i> arguments specify a list of keys (with outermost keys
first) that acts as a path to the key/value pair to be affected.  Note
that there is no corresponding operation for reading a value for a
path as this is easy to construct from repeated use of
<fun>Tcl_DictObjGet</fun>. With <fun>Tcl_DictObjPutKeyList</fun>, nested
dictionaries are created for non-terminal keys where they do not
already exist. With <fun>Tcl_DictObjRemoveKeyList</fun>, all non-terminal
keys must exist and have dictionaries as their values.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Using the dictionary iteration interface to search determine if there
is a key that maps to itself:

</p>
<example>
Tcl_DictSearch search;
Tcl_Obj *key, *value;
int done;

/*
 * Assume interp and objPtr are parameters.  This is the
 * idiomatic way to start an iteration over the dictionary; it
 * sets a lock on the internal representation that ensures that
 * there are no concurrent modification issues when normal
 * reference count management is also used.  The lock is
 * released automatically when the loop is finished, but must
 * be released manually when an exceptional exit from the loop
 * is performed. However it is safe to try to release the lock
 * even if we've finished iterating over the loop.
 */
if (Tcl_DictObjFirst(interp, objPtr, &amp;search,
        &amp;key, &amp;value, &amp;done) != TCL_OK) {
    return TCL_ERROR;
}
for (; done ; Tcl_DictObjNext(&amp;search, &amp;key, &amp;value, &amp;done)) {
    /*
     * Note that strcmp() is not a good way of comparing
     * objects and is just used here for demonstration
     * purposes.
     */
    if (!strcmp(Tcl_GetString(key), Tcl_GetString(value))) {
        break;
    }
}
Tcl_DictObjDone(&amp;search);
Tcl_SetObjResult(interp, Tcl_NewBooleanObj(!done));
return TCL_OK;
</example>


</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_InitObjHashTable</ref>
</seealso>
<keywords>
<keyword>dict</keyword>
<keyword>dict object</keyword>
<keyword>dictionary</keyword>
<keyword>dictionary object</keyword>
<keyword>hash table</keyword>
<keyword>iteration</keyword>
<keyword>object</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DoOneEvent" title="Tcl_DoOneEvent" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DoOneEvent.3,v 1.3 2004/09/18 17:01:05 dkf Exp $
 -->
<?TROFF.TH title="Tcl_DoOneEvent" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_DoOneEvent</name>
<desc>wait for events and invoke event handlers</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_DoOneEvent</fun>(<m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>This parameter is normally zero.  It may be an OR-ed combination
of any of the following flag bits:  
<b>TCL_WINDOW_EVENTS</b>, <b>TCL_FILE_EVENTS</b>,
<b>TCL_TIMER_EVENTS</b>, <b>TCL_IDLE_EVENTS</b>, <b>TCL_ALL_EVENTS</b>,
or <b>TCL_DONT_WAIT</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is the entry point to Tcl's event loop; it is responsible for
waiting for events and dispatching event handlers created with
procedures such as <fun>Tk_CreateEventHandler</fun>, <fun>Tcl_CreateFileHandler</fun>,
<fun>Tcl_CreateTimerHandler</fun>, and <fun>Tcl_DoWhenIdle</fun>.
<fun>Tcl_DoOneEvent</fun> checks to see if
events are already present on the Tcl event queue; if so,
it calls the handler(s) for the first (oldest) event, removes it from
the queue, and returns.
If there are no events ready to be handled, then <fun>Tcl_DoOneEvent</fun>
checks for new events from all possible sources.
If any are found, it puts all of them on Tcl's event queue, calls
handlers for the first event on the queue, and returns.
If no events are found, <fun>Tcl_DoOneEvent</fun> checks for <fun>Tcl_DoWhenIdle</fun>
callbacks; if any are found, it invokes all of them and returns.
Finally, if no events or idle callbacks have been found, then
<fun>Tcl_DoOneEvent</fun> sleeps until an event occurs; then it adds any 
new events to the Tcl event queue, calls handlers for the first event,
and returns.
The normal return value is 1 to signify that some event
was processed (see below for other alternatives).
</p>
<p>If the <i>flags</i> argument to <fun>Tcl_DoOneEvent</fun> is non-zero,
it restricts the kinds of events that will be processed by
<fun>Tcl_DoOneEvent</fun>.
<i>Flags</i> may be an OR-ed combination of any of the following bits:
</p>
<dl>
<dle>
<dt><b>TCL_WINDOW_EVENTS</b> -</dt>
<dd>Process window system events.
</dd>
</dle>
<dle>
<dt><b>TCL_FILE_EVENTS</b> -</dt>
<dd>Process file events.
</dd>
</dle>
<dle>
<dt><b>TCL_TIMER_EVENTS</b> -</dt>
<dd>Process timer events.
</dd>
</dle>
<dle>
<dt><b>TCL_IDLE_EVENTS</b> -</dt>
<dd>Process idle callbacks.
</dd>
</dle>
<dle>
<dt><b>TCL_ALL_EVENTS</b> -</dt>
<dd>Process all kinds of events:  equivalent to OR-ing together all of the
above flags or specifying none of them.
</dd>
</dle>
<dle>
<dt><b>TCL_DONT_WAIT</b> -</dt>
<dd>Don't sleep:  process only events that are ready at the time of the
call.
</dd>
</dle>
</dl>
<p>If any of the flags <b>TCL_WINDOW_EVENTS</b>, <b>TCL_FILE_EVENTS</b>,
<b>TCL_TIMER_EVENTS</b>, or <b>TCL_IDLE_EVENTS</b> is set, then the only
events that will be considered are those for which flags are set.
Setting none of these flags is equivalent to the value
<b>TCL_ALL_EVENTS</b>, which causes all event types to be processed.
If an application has defined additional event sources with
<fun>Tcl_CreateEventSource</fun>, then additional <i>flag</i> values
may also be valid, depending on those event sources.
</p>
<p>The <b>TCL_DONT_WAIT</b> flag causes <fun>Tcl_DoOneEvent</fun> not to put
the process to sleep:  it will check for events but if none are found
then it returns immediately with a return value of 0 to indicate
that no work was done.
<fun>Tcl_DoOneEvent</fun> will also return 0 without doing anything if
the only alternative is to block forever (this can happen, for example,
if <i>flags</i> is <b>TCL_IDLE_EVENTS</b> and there are no
<fun>Tcl_DoWhenIdle</fun> callbacks pending, or if no event handlers or
timer handlers exist).
</p>
<p><fun>Tcl_DoOneEvent</fun> may be invoked recursively.  For example,
it is possible to invoke <fun>Tcl_DoOneEvent</fun> recursively
from a handler called by <fun>Tcl_DoOneEvent</fun>.  This sort
of operation is useful in some modal situations, such
as when a
notification dialog has been popped up and an application wishes to
wait for the user to click a button in the dialog before
doing anything else.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
<keyword>idle</keyword>
<keyword>timer</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DoubleObj" version="8.0" title="Tcl_DoubleObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DoubleObj.3,v 1.4 2006/04/25 17:15:25 dgp Exp $
 -->
<?TROFF.TH title="Tcl_DoubleObj" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewDoubleObj</name>
<name>Tcl_SetDoubleObj</name>
<name>Tcl_GetDoubleFromObj</name>
<desc>manipulate Tcl objects as floating-point values</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewDoubleObj</fun>(<m>doubleValue</m>)

<fun>Tcl_SetDoubleObj</fun>(<m>objPtr</m>, <m>doubleValue</m>)

int
<fun>Tcl_GetDoubleFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>doublePtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>double</argtype>
<name>doubleValue</name>
<argmode>in</argmode>
<desc>A double-precision floating-point value used to initialize or set a Tcl object.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>For <fun>Tcl_SetDoubleObj</fun>, this points to the object in which to store a
double value.
For <fun>Tcl_GetDoubleFromObj</fun>, this refers to the object
from which to retrieve a double value. 
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>When non-NULL, an error message is left here when double value retrieval fails.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Points to place to store the double value obtained from <i>objPtr</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are used to create, modify, and read Tcl objects that
hold double-precision floating-point values.
</p>
<p><fun>Tcl_NewDoubleObj</fun> creates and returns a new Tcl object initialized to
the double value <i>doubleValue</i>.  The returned Tcl object is unshared.
</p>
<p><fun>Tcl_SetDoubleObj</fun> sets the value of an existing Tcl object pointed to
by <i>objPtr</i> to the double value <i>doubleValue</i>.  The <i>objPtr</i>
argument must point to an unshared Tcl object.  Any attempt to set the value
of a shared Tcl object violates Tcl's copy-on-write policy.  Any existing
string representation or internal representation in the unshared Tcl object
will be freed as a consequence of setting the new value.
</p>
<p><fun>Tcl_GetDoubleFromObj</fun> attempts to retreive a double value from the
Tcl object <i>objPtr</i>.  If the attempt succeeds, then <b>TCL_OK</b> is
returned, and the double value is written to the storage pointed to by
<i>doublePtr</i>.  If the attempt fails, then <b>TCL_ERROR</b> is returned,
and if <i>interp</i> is non-NULL, an error message is left in <i>interp</i>.
The <type>Tcl_ObjType</type> of <i>objPtr</i> may be changed to make subsequent
calls to <fun>Tcl_GetDoubleFromObj</fun> more efficient. 
</p>
</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_GetObjResult</ref>
</seealso>
<keywords>
<keyword>double</keyword>
<keyword>double object</keyword>
<keyword>double type</keyword>
<keyword>internal representation</keyword>
<keyword>object</keyword>
<keyword>object type</keyword>
<keyword>string representation</keyword>
</keywords>
</manpage>
<manpage version="7.5" cat="fun" title="Tcl_DoWhenIdle" id="DoWhenIdle">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DoWhenIdle.3,v 1.2 1998/09/14 18:39:48 stanton Exp $
 -->
<?TROFF.TH title="Tcl_DoWhenIdle" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_DoWhenIdle</name>
<name>Tcl_CancelIdleCall</name>
<desc>invoke a procedure when there are no pending events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_DoWhenIdle</fun>(<m>proc</m>, <m>clientData</m>)

<fun>Tcl_CancelIdleCall</fun>(<m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_IdleProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_DoWhenIdle</fun> arranges for <i>proc</i> to be invoked
when the application becomes idle.  The application is
considered to be idle when <fun>Tcl_DoOneEvent</fun> has been
called, couldn't find any events to handle, and is about
to go to sleep waiting for an event to occur.  At this
point all pending <fun>Tcl_DoWhenIdle</fun> handlers are
invoked.  For each call to <fun>Tcl_DoWhenIdle</fun> there will
be a single call to <i>proc</i>;  after <i>proc</i> is
invoked the handler is automatically removed.
<fun>Tcl_DoWhenIdle</fun> is only usable in programs that
use <fun>Tcl_DoOneEvent</fun> to dispatch events.
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tcl_IdleProc</type>:
</p>
<syntax name="Tcl_IdleProc" cat="type" scope="global">
typedef void Tcl_IdleProc(ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the <i>clientData</i>
argument given to <fun>Tcl_DoWhenIdle</fun>.  Typically, <i>clientData</i>
points to a data structure containing application-specific information about
what <i>proc</i> should do.
</p>
<p><fun>Tcl_CancelIdleCall</fun>
may be used to cancel one or more previous
calls to <fun>Tcl_DoWhenIdle</fun>:  if there is a <fun>Tcl_DoWhenIdle</fun>
handler registered for <i>proc</i> and <i>clientData</i>, then it
is removed without invoking it.  If there is more than one
handler on the idle list that refers to <i>proc</i> and <i>clientData</i>,
all of the handlers are removed.  If no existing handlers match
<i>proc</i> and <i>clientData</i> then nothing happens.
</p>
<p><fun>Tcl_DoWhenIdle</fun> is most useful in situations where
(a) a piece of work will have to be done but (b) it's
possible that something will happen in the near future
that will change what has to be done or require something
different to be done.  <fun>Tcl_DoWhenIdle</fun> allows the
actual work to be deferred until all pending events have
been processed.  At this point the exact work to be done
will presumably be known and it can be done exactly once.
</p>
<p>For example, <fun>Tcl_DoWhenIdle</fun> might be used by an editor
to defer display updates until all pending commands have
been processed.  Without this feature, redundant redisplays
might occur in some situations, such as the processing of
a command file.
</p>
</section>
<section>
<title>BUGS</title>
<p>At present it is not safe for an idle callback to reschedule itself
continuously.  This will interact badly with certain features of Tk
that attempt to wait for all idle callbacks to complete.  If you would
like for an idle callback to reschedule itself continuously, it is
better to use a timer handler with a zero timeout period.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>defer</keyword>
<keyword>idle callback</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_DrawFocusHighlight" id="DrawFocHlt">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DrawFocHlt.3,v 1.3 2000/03/31 09:23:48 hobbs Exp $
 -->
<?TROFF.TH title="Tk_DrawFocusHighlight" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_DrawFocusHighlight</name>
<desc>draw the traversal highlight ring for a widget</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<b>Tk_DrawFocusHighlight(</b><m>tkwin</m>, <m>gc</m>, <m>width</m>, <m>drawable</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window for which the highlight is being drawn.  Used to retrieve
the window's dimensions, among other things.
</desc>
</argdef>
<argdef>
<argtype>GC</argtype>
<name>gc</name>
<argmode>in</argmode>
<desc>Graphics context to use for drawing the highlight.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of the highlight ring, in pixels.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>Drawable in which to draw the highlight;  usually an offscreen
pixmap for double buffering.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_DrawFocusHighlight</fun> is a utility procedure that draws the
traversal highlight ring for a widget.
It is typically invoked by widgets during redisplay.

</p>
</section>
<keywords>
<keyword>focus</keyword>
<keyword>traversal highlight</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DString" version="7.4" title="Tcl_DString">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: DString.3,v 1.13 2005/05/10 18:33:54 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_DString" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_DStringInit</name>
<name>Tcl_DStringAppend</name>
<name>Tcl_DStringAppendElement</name>
<name>Tcl_DStringStartSublist</name>
<name>Tcl_DStringEndSublist</name>
<name>Tcl_DStringLength</name>
<name>Tcl_DStringValue</name>
<name>Tcl_DStringSetLength</name>
<name>Tcl_DStringTrunc</name>
<name>Tcl_DStringFree</name>
<name>Tcl_DStringResult</name>
<name>Tcl_DStringGetResult</name>
<desc>manipulate dynamic strings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_DStringInit</fun>(<m>dsPtr</m>)

char *
<fun>Tcl_DStringAppend</fun>(<m>dsPtr</m>, <m>bytes</m>, <m>length</m>)

char *
<fun>Tcl_DStringAppendElement</fun>(<m>dsPtr</m>, <m>element</m>)

<fun>Tcl_DStringStartSublist</fun>(<m>dsPtr</m>)

<fun>Tcl_DStringEndSublist</fun>(<m>dsPtr</m>)

int
<fun>Tcl_DStringLength</fun>(<m>dsPtr</m>)

char *
<fun>Tcl_DStringValue</fun>(<m>dsPtr</m>)

<fun>Tcl_DStringSetLength</fun>(<m>dsPtr</m>, <m>newLength</m>)

<fun>Tcl_DStringTrunc</fun>(<m>dsPtr</m>, <m>newLength</m>)

<fun>Tcl_DStringFree</fun>(<m>dsPtr</m>)

<fun>Tcl_DStringResult</fun>(<m>interp</m>, <m>dsPtr</m>)

<fun>Tcl_DStringGetResult</fun>(<m>interp</m>, <m>dsPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="dsPtr">*dsPtr</name>
<argmode>in/out</argmode>
<desc>Pointer to structure that is used to manage a dynamic string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="bytes">*bytes</name>
<argmode>in</argmode>
<desc>Pointer to characters to append to dynamic string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="element">*element</name>
<argmode>in</argmode>
<desc>Pointer to characters to append as list element to dynamic string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>Number of bytes from <i>bytes</i> to add to dynamic string.  If -1,
add all characters up to null terminating character.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>newLength</name>
<argmode>in</argmode>
<desc>New length for dynamic string, not including null terminating
character.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>Interpreter whose result is to be set from or moved to the
dynamic string.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Dynamic strings provide a mechanism for building up arbitrarily long
strings by gradually appending information.  If the dynamic string is
short then there will be no memory allocation overhead;  as the string
gets larger, additional space will be allocated as needed.
</p>
<p><fun>Tcl_DStringInit</fun> initializes a dynamic string to zero length.
The Tcl_DString structure must have been allocated by the caller.
No assumptions are made about the current state of the structure;
anything already in it is discarded.
If the structure has been used previously, <fun>Tcl_DStringFree</fun> should
be called first to free up any memory allocated for the old
string.
</p>
<p><fun>Tcl_DStringAppend</fun> adds new information to a dynamic string,
allocating more memory for the string if needed.
If <i>length</i> is less than zero then everything in <i>bytes</i>
is appended to the dynamic string;  otherwise <i>length</i>
specifies the number of bytes to append.
<fun>Tcl_DStringAppend</fun> returns a pointer to the characters of
the new string.  The string can also be retrieved from the
<i>string</i> field of the Tcl_DString structure.
</p>
<p><fun>Tcl_DStringAppendElement</fun> is similar to <fun>Tcl_DStringAppend</fun>
except that it doesn't take a <i>length</i> argument (it appends
all of <i>element</i>) and it converts the string to a proper list element
before appending.
<fun>Tcl_DStringAppendElement</fun> adds a separator space before the
new list element unless the new list element is the first in a
list or sub-list (i.e. either the current string is empty, or it
contains the single character ``{'', or the last two characters of
the current string are `` {'').
<fun>Tcl_DStringAppendElement</fun> returns a pointer to the
characters of the new string.
</p>
<p><fun>Tcl_DStringStartSublist</fun> and <fun>Tcl_DStringEndSublist</fun> can be
used to create nested lists.
To append a list element that is itself a sublist, first
call <fun>Tcl_DStringStartSublist</fun>, then call <fun>Tcl_DStringAppendElement</fun>
for each of the elements in the sublist, then call
<fun>Tcl_DStringEndSublist</fun> to end the sublist.
<fun>Tcl_DStringStartSublist</fun> appends a space character if needed,
followed by an open brace;  <fun>Tcl_DStringEndSublist</fun> appends
a close brace.
Lists can be nested to any depth.
</p>
<p><fun>Tcl_DStringLength</fun> is a macro that returns the current length
of a dynamic string (not including the terminating null character).
<fun>Tcl_DStringValue</fun> is a  macro that returns a pointer to the
current contents of a dynamic string.
</p>
<p><fun>Tcl_DStringSetLength</fun> changes the length of a dynamic string.
If <i>newLength</i> is less than the string's current length, then
the string is truncated.
If <i>newLength</i> is greater than the string's current length,
then the string will become longer and new space will be allocated
for the string if needed.
However, <fun>Tcl_DStringSetLength</fun> will not initialize the new
space except to provide a terminating null character;  it is up to the
caller to fill in the new space.
<fun>Tcl_DStringSetLength</fun> does not free up the string's storage space
even if the string is truncated to zero length, so <fun>Tcl_DStringFree</fun>
will still need to be called.
</p>
<p><fun>Tcl_DStringTrunc</fun> changes the length of a dynamic string.
This procedure is now deprecated.  <fun>Tcl_DStringSetLength</fun>  should
be used instead.
</p>
<p><fun>Tcl_DStringFree</fun> should be called when you're finished using
the string.  It frees up any memory that was allocated for the string
and reinitializes the string's value to an empty string.
</p>
<p><fun>Tcl_DStringResult</fun> sets the result of <i>interp</i> to the value of
the dynamic string given by <i>dsPtr</i>.  It does this by moving
a pointer from <i>dsPtr</i> to the interpreter's result.
This saves the cost of allocating new memory and copying the string.
<fun>Tcl_DStringResult</fun> also reinitializes the dynamic string to
an empty string.
</p>
<p><fun>Tcl_DStringGetResult</fun> does the opposite of <fun>Tcl_DStringResult</fun>.
It sets the value of <i>dsPtr</i> to the result of <i>interp</i> and
it clears <i>interp</i>'s result.
If possible it does this by moving a pointer rather than by copying
the string.

</p>
</section>
<keywords>
<keyword>append</keyword>
<keyword>dynamic string</keyword>
<keyword>free</keyword>
<keyword>result</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="DumpActiveMemory" title="Tcl_DumpActiveMemory" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1999 Karl Lehenbauer and Mark Diekhans.
     Copyright (c) 2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: DumpActiveMemory.3,v 1.8 2004/10/07 15:15:36 dkf Exp $
 -->
<?TROFF.TH title="Tcl_DumpActiveMemory" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_DumpActiveMemory</name>
<name>Tcl_InitMemory</name>
<name>Tcl_ValidateAllMemory</name>
<desc>Validated memory allocation interface</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_DumpActiveMemory</fun>(<m>fileName</m>)

void
<fun>Tcl_InitMemory</fun>(<m>interp</m>)

void
<fun>Tcl_ValidateAllMemory</fun>(<m>fileName</m>, <m>line</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter in which to add commands.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="fileName">*fileName</name>
<argmode>in</argmode>
<desc>For <fun>Tcl_DumpActiveMemory</fun>, name of the file to which memory
information will be written.  For <fun>Tcl_ValidateAllMemory</fun>, name of
the file from which the call is being made (normally <b>__FILE__</b>).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>line</name>
<argmode>in</argmode>
<desc>Line number at which the call to <fun>Tcl_ValidateAllMemory</fun> is made
(normally <b>__LINE__</b>).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These functions provide access to Tcl memory debugging information.
They are only functional when Tcl has been compiled with
<b>TCL_MEM_DEBUG</b> defined at compile-time.  When <b>TCL_MEM_DEBUG</b>
is not defined, these functions are all no-ops.
</p>
<p><fun>Tcl_DumpActiveMemory</fun> will output a list of all currently
allocated memory to the specified file.  The information output for
each allocated block of memory is:  starting and ending addresses
(excluding guard zone), size, source file where <fun>ckalloc</fun> was
called to allocate the block and line number in that file.  It is
especially useful to call <fun>Tcl_DumpActiveMemory</fun> after the Tcl
interpreter has been deleted.
</p>
<p><fun>Tcl_InitMemory</fun> adds the Tcl <b>memory</b> command to the
interpreter given by <i>interp</i>.  <fun>Tcl_InitMemory</fun> is called
by <fun>Tcl_Main</fun>.
</p>
<p><fun>Tcl_ValidateAllMemory</fun> forces a validation of the guard zones of
all currently allocated blocks of memory.  Normally validation of a
block occurs when its freed, unless full validation is enabled, in
which case validation of all blocks occurs when <fun>ckalloc</fun> and
<fun>ckfree</fun> are called.  This function forces the validation to occur
at any point.

</p>
</section>
<seealso>
<ref>TCL_MEM_DEBUG</ref>
<ref>memory</ref>
</seealso>
<keywords>
<keyword>memory</keyword>
<keyword>debug</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="encoding" version="8.1" title="encoding">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998 by Scriptics Corporation.
     
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: encoding.n,v 1.8 2006/02/08 22:27:16 dkf Exp $
 -->
<?TROFF.TH title="encoding" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>encoding</name>
<desc>Manipulate encodings</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">encoding</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>INTRODUCTION</title>
<p>Strings in Tcl are encoded using 16-bit Unicode characters.  Different
operating system interfaces or applications may generate strings in
other encodings such as Shift-JIS.  The <b cat="AMBIGUOUS ambiguous cmd">encoding</b> command helps
to bridge the gap between Unicode and these other formats.
</p>
</section>
<section>
<title>DESCRIPTION</title>
<p>Performs one of several encoding related operations, depending on
<i>option</i>.  The legal <i>option</i>s are:
</p>
<commandlist>
<commanddef>
<command><b>encoding convertfrom</b> ?<m>encoding</m>? <m>data</m></command>
<desc>Convert <i>data</i> to Unicode from the specified <i>encoding</i>.  The
characters in <i>data</i> are treated as binary data where the lower
8-bits of each character is taken as a single byte.  The resulting
sequence of bytes is treated as a string in the specified
<i>encoding</i>.  If <i>encoding</i> is not specified, the current
system encoding is used.
</desc>
</commanddef>
<commanddef>
<command><b>encoding convertto</b> ?<m>encoding</m>? <m>string</m></command>
<desc>Convert <i>string</i> from Unicode to the specified <i>encoding</i>.
The result is a sequence of bytes that represents the converted
string.  Each byte is stored in the lower 8-bits of a Unicode
character.  If <i>encoding</i> is not specified, the current
system encoding is used.
</desc>
</commanddef>
<commanddef>
<command><b>encoding dirs</b> ?<m>directoryList</m>?</command>
<desc><new version="8.5">Tcl can load encoding data files from the file system that describe
additional encodings for it to work with. This command sets the search
path for <b>*.enc</b> encoding data files to the list of directories
<i>directoryList</i>. If <i>directoryList</i> is omitted then the
command returns the current list of directories that make up the
search path. It is an error for <i>directoryList</i> to not be a valid
list. If, when a search for an encoding data file is happening, an
element in <i>directoryList</i> does not refer to a readable,
searchable directory, that element is ignored.
</new></desc>
</commanddef>
<commanddef>
<command><b>encoding names</b></command>
<desc>Returns a list containing the names of all of the encodings that are
currently available. 
</desc>
</commanddef>
<commanddef>
<command><b>encoding system</b> ?<m>encoding</m>?</command>
<desc>Set the system encoding to <i>encoding</i>. If <i>encoding</i> is
omitted then the command returns the current system encoding.  The
system encoding is used whenever Tcl passes strings to system calls.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLE</title>
<p>It is common practice to write script files using a text editor that
produces output in the euc-jp encoding, which represents the ASCII
characters as singe bytes and Japanese characters as two bytes.  This
makes it easy to embed literal strings that correspond to non-ASCII
characters by simply typing the strings in place in the script.
However, because the <b cat="AMBIGUOUS ambiguous cmd">source</b> command always reads files using the
current system encoding, Tcl will only source such files correctly
when the encoding used to write the file is the same.  This tends not
to be true in an internationalized setting.  For example, if such a
file was sourced in North America (where the ISO8859-1 is normally
used), each byte in the file would be treated as a separate character
that maps to the 00 page in Unicode.  The resulting Tcl strings will
not contain the expected Japanese characters.  Instead, they will
contain a sequence of Latin-1 characters that correspond to the bytes
of the original string.  The <b cat="AMBIGUOUS ambiguous cmd">encoding</b> command can be used to
convert this string to the expected Japanese Unicode characters.  For
example,
</p>
<example>
set s [<b>encoding convertfrom</b> euc-jp "\xA4\xCF"]
</example>
<p>would return the Unicode string "\u306F", which is the Hiragana
letter HA.

</p>
</section>
<seealso>
<ref>Tcl_GetEncoding(3)</ref>
</seealso>
<keywords>
<keyword>encoding</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Ensemble" version="8.5" title="Tcl_Ensemble">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Ensemble.3,v 1.3 2006/10/18 18:46:59 dgp Exp $
     
     This documents the C API introduced in TIP#235
 -->
<?TROFF.TH title="Tcl_Ensemble" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateEnsemble</name>
<name>Tcl_FindEnsemble</name>
<name>Tcl_GetEnsembleFlags</name>
<name>Tcl_GetEnsembleMappingDict</name>
<name>Tcl_GetEnsembleNamespace</name>
<name>Tcl_GetEnsembleUnknownHandler</name>
<name>Tcl_GetEnsembleSubcommandList</name>
<name>Tcl_IsEnsemble</name>
<name>Tcl_SetEnsembleFlags</name>
<name>Tcl_SetEnsembleMappingDict</name>
<name>Tcl_SetEnsembleSubcommandList</name>
<name>Tcl_SetEnsembleUnknownHandler</name>
<desc>manipulate ensemble commands</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Command
<fun>Tcl_CreateEnsemble</fun>(<m>interp</m>, <m>name</m>, <m>namespacePtr</m>, <m>ensFlags</m>)

Tcl_Command
<fun>Tcl_FindEnsemble</fun>(<m>interp</m>, <m>cmdNameObj</m>, <m>flags</m>)

int
<fun>Tcl_IsEnsemble</fun>(<m>token</m>)

int
<fun>Tcl_GetEnsembleFlags</fun>(<m>interp</m>, <m>token</m>, <m>ensFlagsPtr</m>)

int
<fun>Tcl_SetEnsembleFlags</fun>(<m>interp</m>, <m>token</m>, <m>ensFlags</m>)

int
<fun>Tcl_GetEnsembleMappingDict</fun>(<m>interp</m>, <m>token</m>, <m>dictObjPtr</m>)

int
<fun>Tcl_SetEnsembleMappingDict</fun>(<m>interp</m>, <m>token</m>, <m>dictObj</m>)

int
<fun>Tcl_GetEnsembleSubcommandList</fun>(<m>interp</m>, <m>token</m>, <m>listObjPtr</m>)

int
<fun>Tcl_SetEnsembleSubcommandList</fun>(<m>interp</m>, <m>token</m>, <m>listObj</m>)

int
<fun>Tcl_GetEnsembleUnknownHandler</fun>(<m>interp</m>, <m>token</m>, <m>listObjPtr</m>)

int
<fun>Tcl_SetEnsembleUnknownHandler</fun>(<m>interp</m>, <m>token</m>, <m>listObj</m>)

int
<fun>Tcl_GetEnsembleNamespace</fun>(<m>interp</m>, <m>token</m>, <m>namespacePtrPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>The interpreter in which the ensemble is to be created or found. Also
where error result messages are written.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>The name of the ensemble command to be created.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Namespace</argtype>
<name name="namespacePtr">*namespacePtr</name>
<argmode>in</argmode>
<desc>The namespace to which the ensemble command is to be bound, or NULL
for the current namespace.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>ensFlags</name>
<argmode>in</argmode>
<desc>An ORed set of flag bits describing the basic configuration of the
ensemble. Currently only one bit has meaning, TCL_ENSEMBLE_PREFIX,
which is present when the ensemble command should also match
unambiguous prefixes of subcommands.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="cmdNameObj">*cmdNameObj</name>
<argmode>in</argmode>
<desc>A value holding the name of the ensemble command to look up.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>An ORed set of flag bits controlling the behavior of
<fun>Tcl_FindEnsemble</fun>. Currently only TCL_LEAVE_ERR_MSG is supported.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Command</argtype>
<name>token</name>
<argmode>in</argmode>
<desc>A normal command token that refers to an ensemble command, or which
you wish to use for testing as an ensemble command in <fun>Tcl_IsEnsemble</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="ensFlagsPtr">*ensFlagsPtr</name>
<argmode>out</argmode>
<desc>Pointer to a variable into which to write the current ensemble flag
bits; currently only the bit TCL_ENSEMBLE_PREFIX is defined.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="dictObj">*dictObj</name>
<argmode>in</argmode>
<desc>A dictionary value to use for the subcommand to implementation command
prefix mapping dictionary in the ensemble. May be NULL if the mapping
dictionary is to be removed.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="dictObjPtr">**dictObjPtr</name>
<argmode>out</argmode>
<desc>Pointer to a variable into which to write the current ensemble mapping
dictionary.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="listObj">*listObj</name>
<argmode>in</argmode>
<desc>A list value to use for the defined list of subcommands in the
dictionary or the unknown subcommmand handler command prefix. May be
NULL if the subcommand list or unknown handler are to be removed.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="listObjPtr">**listObjPtr</name>
<argmode>out</argmode>
<desc>Pointer to a variable into which to write the current defiend list of
subcommands or the current unknown handler prefix.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Namespace</argtype>
<name name="namespacePtrPtr">**namespacePtrPtr</name>
<argmode>out</argmode>
<desc>Pointer to a variable into which to write the handle of the namespace
to which the ensemble is bound.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>An ensemble is a command, bound to some namespace, which consists of a
collection of subcommands implemented by other Tcl commands. The first
argument to the ensemble command is always interpreted as a selector
that states what subcommand to execute.
</p>
<p>Ensembles are created using <fun>Tcl_CreateEnsemble</fun>, which takes four
arguments: the interpreter to work within, the name of the ensemble to
create, the namespace within the interpreter to bind the ensemble to,
and the default set of ensemble flags. The result of the function is
the command token for the ensemble, which may be used to further
configure the ensemble using the API descibed below in <b>ENSEMBLE
PROPERTIES</b>.
</p>
<p>Given the name of an ensemble command, the token for that command may
be retrieved using <fun>Tcl_FindEnsemble</fun>. If the given command name
(in <i>cmdNameObj</i>) does not refer to an ensemble command, the
result of the function is NULL and (if the TCL_LEAVE_ERR_MSG bit is
set in <i>flags</i>) an error message is left in the interpreter
result.
</p>
<p>A command token may be checked to see if it refers to an ensemble
using <fun>Tcl_IsEnsemble</fun>. This returns 1 if the token refers to an
ensemble, or 0 otherwise.
</p>
<subsection>
<title>ENSEMBLE PROPERTIES</title>
<p>Every ensemble has four read-write properties and a read-only
property. The properties are:
</p>
<dl>
<dle>
<dt><b>flags</b> (read-write)</dt>
<dd>The set of flags for the ensemble, expressed as a
bit-field. Currently, the only public flag is TCL_ENSEMBLE_PREFIX
which is set when unambiguous prefixes of subcommands are permitted to
be resolved to implementations as well as exact matches. The flags may
be read and written using <fun>Tcl_GetEnsembleFlags</fun> and
<fun>Tcl_SetEnsembleFlags</fun> respectively. The result of both of those
functions is a Tcl result code (TCL_OK, or TCL_ERROR if the token does
not refer to an ensemble).
</dd>
</dle>
<dle>
<dt><b>mapping dictionary</b> (read-write)</dt>
<dd>A dictionary containing a mapping from subcommand names to lists of
words to use as a command prefix (replacing the first two words of the
command which are the ensemble command itself and the subcommand
name), or NULL if every subcommand is to be mapped to the command with
the same unqualified name in the ensemble's bound namespace. Defaults
to NULL. May be read and written using
<fun>Tcl_GetEnsembleMappingDict</fun> and <fun>Tcl_SetEnsembleMappingDict</fun>
respectively. The result of both of those functions is a Tcl result
code (TCL_OK, or TCL_ERROR if the token does not refer to an
ensemble) and the dictionary obtained from
<fun>Tcl_GetEnsembleMappingDict</fun> should always be treated as immutable
even if it is unshared.
</dd>
</dle>
<dle>
<dt><b>subcommand list</b> (read-write)</dt>
<dd>A list of all the subcommand names for the ensemble, or NULL if this
is to be derived from either the keys of the mapping dictionary (see
above) or (if that is also NULL) from the set of commands exported by
the bound namespace. May be read and written using
<fun>Tcl_GetEnsembleSubcommandList</fun> and
<fun>Tcl_SetEnsembleSubcommandList</fun> respectively. The result of both
of those functions is a Tcl result code (TCL_OK, or TCL_ERROR if the
token does not refer to an ensemble) and the list obtained from
<fun>Tcl_GetEnsembleSubcommandList</fun> should alays be treated as
immutable even if it is unshared.
</dd>
</dle>
<dle>
<dt><b>unknown subcommand handler command prefix</b> (read-write)</dt>
<dd>A list of words to prepend on the front of any subcommand when the
subcommand is unknown to the ensemble (according to the current prefix
handling rule); see the <b>namespace ensemble</b> command for more
details. If NULL, the default behavior - generate a suitable error
message - will be used when an unknown subcommand is encountered. May
be read and written using <fun>Tcl_GetEnsembleUnknownHandler</fun> and
<fun>Tcl_SetEnsembleUnknownHandler</fun> respectively. The result of both
functions is a Tcl result code (TCL_OK, or TCL_ERROR if the token does
not refer to an ensemble) and the list obtained from
<fun>Tcl_GetEnsembleUnknownHandler</fun> should always be treated as
immutable even if it is unshared.
</dd>
</dle>
<dle>
<dt><b>bound namespace</b> (read-only)</dt>
<dd>The namespace to which the ensemble is bound; when the namespace is
deleted, so too will the ensemble, and this namespace is also the
namespace whose list of exported commands is used if both the mapping
dictionary and the subcommand list properties are NULL. May be read
using <fun>Tcl_GetEnsembleNamespace</fun> which returns a Tcl result code
(TCL_OK, or TCL_ERROR if the token does not refer to an ensemble).

</dd>
</dle>
</dl>
</subsection>
</section>
<seealso>
<ref>namespace(n)</ref>
<ref>Tcl_DeleteCommandFromToken(3)</ref>
</seealso>
</manpage>
<manpage cat="widget" id="entry" version="8.3" title="entry">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1998-2000 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: entry.n,v 1.16 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="entry" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>entry</name>
<desc>Create and manipulate entry widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">entry</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-exportselection</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-insertbackground</li>
<li>-insertborderwidth</li>
<li>-insertofftime</li>
<li>-insertontime</li>
<li>-insertwidth</li>
<li>-justify</li>
<li>-relief</li>
<li>-selectbackground</li>
<li>-selectborderwidth</li>
<li>-selectforeground</li>
<li>-takefocus</li>
<li>-textvariable</li>
<li>-xscrollcommand</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-disabledbackground</name>
<dbname>disabledBackground</dbname>
<dbclass>DisabledBackground</dbclass>
<desc>Specifies the background color to use when the entry is disabled.  If
this option is the empty string, the normal background color is used.
</desc>
</optiondef>
<optiondef>
<name>-disabledforeground</name>
<dbname>disabledForeground</dbname>
<dbclass>DisabledForeground</dbclass>
<desc>Specifies the foreground color to use when the entry is disabled.  If
this option is the empty string, the normal foreground color is used.
</desc>
</optiondef>
<optiondef>
<name name="-invalidcommand">-invalidcommand or -invcmd</name>
<dbname>invalidCommand</dbname>
<dbclass>InvalidCommand</dbclass>
<desc>Specifies a script to eval when <b>validateCommand</b> returns 0.
Setting it to {} disables this feature (the default).  The best use
of this option is to set it to <i>bell</i>.  See <b>Validation</b>
below for more information.
</desc>
</optiondef>
<optiondef>
<name>-readonlybackground</name>
<dbname>readonlyBackground</dbname>
<dbclass>ReadonlyBackground</dbclass>
<desc>Specifies the background color to use when the entry is readonly.  If
this option is the empty string, the normal background color is used.
</desc>
</optiondef>
<optiondef>
<name>-show</name>
<dbname>show</dbname>
<dbclass>Show</dbclass>
<desc>If this option is specified, then the true contents of the entry
are not displayed in the window.
Instead, each character in the entry's value will be displayed as
the first character in the value of this option, such as ``*''.
This is useful, for example, if the entry is to be used to enter
a password.
If characters in the entry are selected and copied elsewhere, the
information copied will be what is displayed, not the true contents
of the entry.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the entry:  <b>normal</b>,
<b>disabled</b>, or <b>readonly</b>.  If the entry is readonly, then the
value may not be changed using widget commands and no insertion cursor
will be displayed, even if the input focus is in the widget; the
contents of the widget may still be selected.  If the entry is
disabled, the value may not be changed, no insertion cursor will be
displayed, the contents will not be selectable, and the entry may
be displayed in a different color, depending on the values of the
<b>-disabledforeground</b> and <b>-disabledbackground</b> options.
</desc>
</optiondef>
<optiondef>
<name>-validate</name>
<dbname>validate</dbname>
<dbclass>Validate</dbclass>
<desc>Specifies the mode in which validation should operate: <b>none</b>,
<cmd>focus</cmd>, <b>focusin</b>, <b>focusout</b>, <b>key</b>, or <b>all</b>.
It defaults to <b>none</b>.  When you want validation, you must explicitly
state which mode you wish to use.  See <b>Validation</b> below for more.
</desc>
</optiondef>
<optiondef>
<name name="-validatecommand">-validatecommand or -vcmd</name>
<dbname>validateCommand</dbname>
<dbclass>ValidateCommand</dbclass>
<desc>Specifies a script to eval when you want to validate the input into
the entry widget.  Setting it to {} disables this feature (the default).
This command must return a valid Tcl boolean value.  If it returns 0 (or
the valid Tcl boolean equivalent) then it means you reject the new edition
and it will not occur and the <b>invalidCommand</b> will be evaluated if it
is set. If it returns 1, then the new edition occurs.
See <b>Validation</b> below for more information.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies an integer value indicating the desired width of the entry window,
in average-size characters of the widget's font.
If the value is less than or equal to zero, the widget picks a
size just large enough to hold its current text.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">entry</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into an entry widget.
Additional options, described above, may be specified on the
command line or in the option database
to configure aspects of the entry such as its colors, font,
and relief.  The <b cat="AMBIGUOUS widget cmd">entry</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>An entry is a widget that displays a one-line text string and
allows that string to be edited using widget commands described below, which
are typically bound to keystrokes and mouse actions.
When first created, an entry's string is empty.
A portion of the entry may be selected as described below.
If an entry is exporting its selection (see the <b>exportSelection</b>
option), then it will observe the standard X11 protocols for handling the
selection;  entry selections are available as type <b>STRING</b>.
Entries also observe the standard Tk rules for dealing with the
input focus.  When an entry has the input focus it displays an
<i>insertion cursor</i> to indicate where new characters will be
inserted.
</p>
<p>Entries are capable of displaying strings that are too long to
fit entirely within the widget's window.  In this case, only a
portion of the string will be displayed;  commands described below
may be used to change the view in the window.  Entries use
the standard <b>xScrollCommand</b> mechanism for interacting with
scrollbars (see the description of the <b>xScrollCommand</b> option
for details).  They also support scanning, as described below.
</p>
</section>
<section>
<title>VALIDATION</title>
<p>Validation works by setting the <b>validateCommand</b>
option to a script which will be evaluated according to the <b>validate</b>
option as follows:
</p>
<dl>
<dle>
<dt><b>none</b></dt>
<dd>Default.  This means no validation will occur.
</dd>
</dle>
<dle>
<dt><b>focus</b></dt>
<dd><b>validateCommand</b> will be called when the entry receives or
loses focus.
</dd>
</dle>
<dle>
<dt><b>focusin</b></dt>
<dd><b>validateCommand</b> will be called when the entry receives focus.
</dd>
</dle>
<dle>
<dt><b>focusout</b></dt>
<dd><b>validateCommand</b> will be called when the entry loses focus.
</dd>
</dle>
<dle>
<dt><b>key</b></dt>
<dd><b>validateCommand</b> will be called when the entry is edited.
</dd>
</dle>
<dle>
<dt><b>all</b></dt>
<dd><b>validateCommand</b> will be called for all above conditions.
</dd>
</dle>
</dl>
<p>It is possible to perform percent substitutions on the <b>validateCommand</b>
and <b>invalidCommand</b>,
just as you would in a <cmd>bind</cmd> script.  The following substitutions
are recognized:
</p>
<dl>
<dle>
<dt><b>%d</b></dt>
<dd>Type of action: 1 for <b>insert</b>, 0 for <b>delete</b>,
or -1 for focus, forced or textvariable validation.
</dd>
</dle>
<dle>
<dt><b>%i</b></dt>
<dd>Index of char string to be inserted/deleted, if any, otherwise -1.
</dd>
</dle>
<dle>
<dt><b>%P</b></dt>
<dd>The value of the entry if the edit is allowed.  If you are configuring the
entry widget to have a new textvariable, this will be the value of that
textvariable.
</dd>
</dle>
<dle>
<dt><b>%s</b></dt>
<dd>The current value of entry prior to editing.
</dd>
</dle>
<dle>
<dt><b>%S</b></dt>
<dd>The text string being inserted/deleted, if any, {} otherwise.
</dd>
</dle>
<dle>
<dt><b>%v</b></dt>
<dd>The type of validation currently set.
</dd>
</dle>
<dle>
<dt><b>%V</b></dt>
<dd>The type of validation that triggered the callback
(key, focusin, focusout, forced).
</dd>
</dle>
<dle>
<dt><b>%W</b></dt>
<dd>The name of the entry widget.
</dd>
</dle>
</dl>
<p>In general, the <b>textVariable</b> and <b>validateCommand</b> can be
dangerous to mix.  Any problems have been overcome so that using the
<b>validateCommand</b> will not interfere with the traditional behavior of
the entry widget.  Using the <b>textVariable</b> for read-only purposes will
never cause problems.  The danger comes when you try set the
<b>textVariable</b> to something that the <b>validateCommand</b> would not
accept, which causes <b>validate</b> to become <i>none</i> (the
<b>invalidCommand</b> will not be triggered).  The same happens
when an error occurs evaluating the <b>validateCommand</b>.
</p>
<p>Primarily, an error will occur when the <b>validateCommand</b> or
<b>invalidCommand</b> encounters an error in its script while evaluating or
<b>validateCommand</b> does not return a valid Tcl boolean value.  The
<b>validate</b> option will also set itself to <b>none</b> when you edit the
entry widget from within either the <b>validateCommand</b> or the
<b>invalidCommand</b>.  Such editions will override the one that was being
validated.  If you wish to edit the entry widget (for example set it to {})
during validation and still have the <b>validate</b> option set, you should
include the command
</p>
<example>
after idle {%W config -validate %v}
</example>
<p>in the <b>validateCommand</b> or <b>invalidCommand</b> (whichever one you
were editing the entry widget from).  It is also recommended to not set an
associated <b>textVariable</b> during validation, as that can cause the
entry widget to become out of sync with the <b>textVariable</b>.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">entry</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.
</p>
<p>Many of the widget commands for entries take one or more indices as
arguments.  An index specifies a particular character in the entry's
string, in any of the following ways:
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>Specifies the character as a numerical index, where 0 corresponds
to the first character in the string.
</dd>
</dle>
<dle>
<dt><b>anchor</b></dt>
<dd>Indicates the anchor point for the selection, which is set with the
<b>select from</b> and <b>select adjust</b> widget commands.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the character just after the last one in the entry's string.
This is equivalent to specifying a numerical index equal to the length
of the entry's string.
</dd>
</dle>
<dle>
<dt><b>insert</b></dt>
<dd>Indicates the character adjacent to and immediately following the
insertion cursor.
</dd>
</dle>
<dle>
<dt><b>sel.first</b></dt>
<dd>Indicates the first character in the selection.  It is an error to
use this form if the selection isn't in the entry window.
</dd>
</dle>
<dle>
<dt><b>sel.last</b></dt>
<dd>Indicates the character just after the last one in the selection.
It is an error to use this form if the selection isn't in the
entry window.
</dd>
</dle>
<dle>
<dt><b>@</b><m>number</m></dt>
<dd>In this form, <i>number</i> is treated as an x-coordinate in the
entry's window;  the character spanning that x-coordinate is used.
For example, ``<b>@0</b>'' indicates the left-most character in the
window.
</dd>
</dle>
</dl>
<p>Abbreviations may be used for any of the forms above, e.g. ``<b>e</b>''
or ``<b>sel.f</b>''.  In general, out-of-range indices are automatically
rounded to the nearest legal value.
</p>
<p>The following commands are possible for entry widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>index</m></dt>
<dd>Returns a list of four numbers describing the bounding box of the
character given by <i>index</i>.
The first two elements of the list give the x and y coordinates of
the upper-left corner of the screen area covered by the character
(in pixels relative to the widget) and the last two elements give
the width and height of the character, in pixels.
The bounding box may refer to a region outside the visible area
of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">entry</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">entry</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>first</m> ?<m>last</m>?</dt>
<dd>Delete one or more elements of the entry.
<i>First</i> is the index of the first character to delete, and
<i>last</i> is the index of the character just after the last
one to delete.
If <i>last</i> isn't specified it defaults to <i>first</i>+1,
i.e. a single character is deleted.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the entry's string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>icursor</b> <m>index</m></dt>
<dd>Arrange for the insertion cursor to be displayed just before the character
given by <i>index</i>.  Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the numerical index corresponding to <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index string</m></dt>
<dd>Insert the characters of <i>string</i> just before the character
indicated by <i>index</i>.  Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan</b> <m>option args</m></dt>
<dd>This command is used to implement scanning on entries.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>scan mark</b> <m>x</m></dt>
<dd>Records <i>x</i> and the current view in the entry window;  used in
conjunction with later <b>scan dragto</b> commands.  Typically this
command is associated with a mouse button press in the widget.  It
returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan dragto</b> <m>x</m></dt>
<dd>This command computes the difference between its <i>x</i> argument
and the <i>x</i> argument to the last <b>scan mark</b> command for
the widget.  It then adjusts the view left or right by 10 times the
difference in x-coordinates.  This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the entry at high speed through the window.  The return
value is an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection</b> <m>option arg</m></dt>
<dd>This command is used to adjust the selection within an entry.  It
has several forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>selection adjust</b> <m>index</m></dt>
<dd>Locate the end of the selection nearest to the character given by
<i>index</i>, and adjust that end of the selection to be at <i>index</i>
(i.e. including but not going beyond <i>index</i>).  The other
end of the selection is made the anchor point for future
<b>select to</b> commands.  If the selection
isn't currently in the entry, then a new selection is created to
include the characters between <i>index</i> and the most recent
selection anchor point, inclusive.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection clear</b></dt>
<dd>Clear the selection if it is currently in this widget.  If the
selection isn't in this widget then the command has no effect.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection from</b> <m>index</m></dt>
<dd>Set the selection anchor point to just before the character
given by <i>index</i>.  Doesn't change the selection.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection present</b></dt>
<dd>Returns 1 if there is are characters selected in the entry,
0 if nothing is selected.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection range</b> <m>start</m> <m>end</m></dt>
<dd>Sets the selection to include the characters starting with
the one indexed by <i>start</i> and ending with the one just
before <i>end</i>.
If <i>end</i> refers to the same character as <i>start</i> or an
earlier one, then the entry's selection is cleared.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection to</b> <m>index</m></dt>
<dd>If <i>index</i> is before the anchor point, set the selection
to the characters from <i>index</i> up to but not including
the anchor point.
If <i>index</i> is the same as the anchor point, do nothing.
If <i>index</i> is after the anchor point, set the selection
to the characters from the anchor point up to but not including
<i>index</i>.
The anchor point is determined by the most recent <b>select from</b>
or <b>select adjust</b> command in this widget.
If the selection isn't in this widget then a new selection is
created using the most recent anchor point specified for the widget.
Returns an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>validate</b></dt>
<dd>This command is used to force an evaluation of the <b>validateCommand</b>
independent of the conditions specified by the <b>validate</b> option.
This is done by temporarily setting the <b>validate</b> option to <b>all</b>.
It returns 0 or 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>args</m></dt>
<dd>This command is used to query and change the horizontal position of the
text in the widget's window.  It can take any of the following
forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the entry's text is off-screen to the left, the middle 40% is visible
in the window, and 40% of the text is off-screen to the right.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the character given by <i>index</i>
is displayed at the left edge of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that the character <i>fraction</i> of the
way through the text appears at the left edge of the window.
<i>Fraction</i> must be a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b> or an abbreviation
of one of these.
If <i>what</i> is <b>units</b>, the view adjusts left or right by
<i>number</i> average-width characters on the display;  if it is
<b>pages</b> then the view adjusts by <i>number</i> screenfuls.
If <i>number</i> is negative then characters farther to the left
become visible;  if it is positive then characters farther to the right
become visible.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for entries that give them
the following default behavior.
In the descriptions below, ``word'' refers to a contiguous group
of letters, digits, or ``_'' characters, or any single character
other than these.
</p>
<ol>
<li>Clicking mouse button 1 positions the insertion cursor
just before the character underneath the mouse cursor, sets the
input focus to this widget, and clears any selection in the widget.
Dragging with mouse button 1 strokes out a selection between
the insertion cursor and the character under the mouse.
</li>
<li>Double-clicking with mouse button 1 selects the word under the mouse
and positions the insertion cursor at the end of the word.
Dragging after a double click will stroke out a selection consisting
of whole words.
</li>
<li>Triple-clicking with mouse button 1 selects all of the text in the
entry and positions the insertion cursor at the end of the line.
</li>
<li>The ends of the selection can be adjusted by dragging with mouse
button 1 while the Shift key is down;  this will adjust the end
of the selection that was nearest to the mouse cursor when button
1 was pressed.
If the button is double-clicked before dragging then the selection
will be adjusted in units of whole words.
</li>
<li>Clicking mouse button 1 with the Control key down will position the
insertion cursor in the entry without affecting the selection.
</li>
<li>If any normal printing characters are typed in an entry, they are
inserted at the point of the insertion cursor.
</li>
<li>The view in the entry can be adjusted by dragging with mouse button 2.
If mouse button 2 is clicked without moving the mouse, the selection
is copied into the entry at the position of the mouse cursor.
</li>
<li>If the mouse is dragged out of the entry on the left or right sides
while button 1 is pressed, the entry will automatically scroll to
make more text visible (if there is more text off-screen on the side
where the mouse left the window).
</li>
<li>The Left and Right keys move the insertion cursor one character to the
left or right;  they also clear any selection in the entry and set
the selection anchor.
If Left or Right is typed with the Shift key down, then the insertion
cursor moves and the selection is extended to include the new character.
Control-Left and Control-Right move the insertion cursor by words, and
Control-Shift-Left and Control-Shift-Right move the insertion cursor
by words and also extend the selection.
Control-b and Control-f behave the same as Left and Right, respectively.
Meta-b and Meta-f behave the same as Control-Left and Control-Right,
respectively.
</li>
<li>The Home key, or Control-a, will move the insertion cursor to the
beginning of the entry and clear any selection in the entry.
Shift-Home moves the insertion cursor to the beginning of the entry
and also extends the selection to that point.
</li>
<li>The End key, or Control-e, will move the insertion cursor to the
end of the entry and clear any selection in the entry.
Shift-End moves the cursor to the end and extends the selection
to that point.
</li>
<li>The Select key and Control-Space set the selection anchor to the position
of the insertion cursor.  They don't affect the current selection.
Shift-Select and Control-Shift-Space adjust the selection to the
current position of the insertion cursor, selecting from the anchor
to the insertion cursor if there was not any selection previously.
</li>
<li>Control-/ selects all the text in the entry.
</li>
<li>Control-\ clears any selection in the entry.
</li>
<li>The F16 key (labelled Copy on many Sun workstations) or Meta-w
copies the selection in the widget to the clipboard, if there is a selection.
</li>
<li>The F20 key (labelled Cut on many Sun workstations) or Control-w
copies the selection in the widget to the clipboard and deletes
the selection.
If there is no selection in the widget then these keys have no effect.
</li>
<li>The F18 key (labelled Paste on many Sun workstations) or Control-y
inserts the contents of the clipboard at the position of the
insertion cursor.
</li>
<li>The Delete key deletes the selection, if there is one in the entry.
If there is no selection, it deletes the character to the right of
the insertion cursor.
</li>
<li>The BackSpace key and Control-h delete the selection, if there is one
in the entry.
If there is no selection, it deletes the character to the left of
the insertion cursor.
</li>
<li>Control-d deletes the character to the right of the insertion cursor.
</li>
<li>Meta-d deletes the word to the right of the insertion cursor.
</li>
<li>Control-k deletes all the characters to the right of the insertion
cursor.
</li>
<li>Control-t reverses the order of the two characters to the right of
the insertion cursor.
</li>
</ol>
<p>If the entry is disabled using the <b>-state</b> option, then the entry's
view can still be adjusted and text in the entry can still be selected,
but no insertion cursor will be displayed and no text modifications will
take place
except if the entry is linked to a variable using the <b>-textvariable</b>
option, in which case any changes to the variable are reflected by the
entry whatever the value of its <b>-state</b> option.
</p>
<p>The behavior of entries can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<seealso>
<ref>ttk_entry(n)</ref>
</seealso>
<keywords>
<keyword>entry</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Environment" version="7.5" title="Tcl_PutEnv">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Environment.3,v 1.6 2005/05/10 18:33:55 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_PutEnv" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_PutEnv</name>
<desc>procedures to manipulate the environment</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_PutEnv</fun>(<m>assignment</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char</argtype>
<name name="assignnment">*assignnment</name>
<argmode>in</argmode>
<desc>Info about environment variable in the format NAME=value.
The <i>assignment</i> argument is in the system encoding.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_PutEnv</fun> sets an environment variable. The information is
passed in a single string of the form NAME=value.  This procedure is
intended to be a stand-in for the UNIX <b>putenv</b> system call. All
Tcl-based applications using <b>putenv</b> should redefine it to
<fun>Tcl_PutEnv</fun> so that they will interface properly to the Tcl
runtime.

</p>
</section>
<keywords>
<keyword>environment</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="eof" title="eof" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: eof.n,v 1.6 2004/10/27 09:36:58 dkf Exp $
 -->
<?TROFF.TH title="eof" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>eof</name>
<desc>Check for end of file condition on channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>eof</cmd> <m>channelId</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns 1 if an end of file condition occurred during the most
recent input operation on <i>channelId</i> (such as <cmd>gets</cmd>),
0 otherwise.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>),
the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or
the result of a channel creation command provided by a Tcl extension.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Read and print out the contents of a file line-by-line:
</p>
<example>
set f [open somefile.txt]
while {1} {
    set line [gets $f]
    if {[<cmd>eof</cmd> $f]} {
        close $f
        break
    }
    puts "Read line: $line"
}
</example>
<p>Read and print out the contents of a file by fixed-size records:
</p>
<example>
set f [open somefile.dat]
fconfigure $f -translation binary
set recordSize 40
while {1} {
    set record [read $f $recordSize]
    if {[<cmd>eof</cmd> $f]} {
        close $f
        break
    }
    puts "Read record: $record"
}
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>open(n)</ref>
<ref>close(n)</ref>
<ref>fblocked(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>channel</keyword>
<keyword>end of file</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="error" title="error">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: error.n,v 1.9 2005/05/10 18:33:59 kennykb Exp $
 -->
<?TROFF.TH title="error" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>error</name>
<desc>Generate an error</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">error</b> <m>message</m> ?<m>info</m>? ?<m>code</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns a <b>TCL_ERROR</b> code, which causes command interpretation to be
unwound.  <i>Message</i> is a string that is returned to the application
to indicate what went wrong.
</p>
<p>The <b>-errorinfo</b> return option of an interpreter is used
to accumulate a stack trace of what was in progress when an
error occurred; as nested commands unwind,
the Tcl interpreter adds information to the <b>-errorinfo</b>
return option.  If the <i>info</i> argument is present, it is
used to initialize the <b>-errorinfo</b> return options and
the first increment of unwind information
will not be added by the Tcl interpreter.  
In other
words, the command containing the <b cat="AMBIGUOUS ambiguous cmd">error</b> command will not appear
in the stack trace; in its place will be <i>info</i>.
Historically, this feature had been most useful in conjunction
with the <cmd>catch</cmd> command:
if a caught error cannot be handled successfully, <i>info</i> can be used
to return a stack trace reflecting the original point of occurrence
of the error:
</p>
<example>
<b>catch {...} errMsg
set savedInfo $::errorInfo
...
error $errMsg $savedInfo</b>
</example>
<p>When working with Tcl 8.5 or later, the following code
should be used instead:
</p>
<example>
<b>catch {...} errMsg options
...
return -options $options $errMsg</b>
</example>
<p>If the <i>code</i> argument is present, then its value is stored
in the <b>-errorcode</b> return option.  The <b>-errorcode</b>
return option is intended to hold a machine-readable description
of the error in cases where such information is available; see
the <cmd>return</cmd> manual page for information on the proper format
for this option's value.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Generate an error if a basic mathematical operation fails:
</p>
<example>
if {1+2 != 3} {
    <b cat="AMBIGUOUS ambiguous cmd">error</b> "something is very wrong with addition"
}
</example>


</section>
<seealso>
<ref>catch(n)</ref>
<ref>return(n)</ref>
</seealso>
<keywords>
<keyword>error</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="eval" title="eval">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: eval.n,v 1.4 2002/08/28 14:46:50 dkf Exp $
 -->
<?TROFF.TH title="eval" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>eval</name>
<desc>Evaluate a Tcl script</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">eval</b> <m>arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>Eval</b> takes one or more arguments, which together comprise a Tcl
script containing one or more commands.
<b>Eval</b> concatenates all its arguments in the same
fashion as the <cmd>concat</cmd> command, passes the concatenated string to the
Tcl interpreter recursively, and returns the result of that
evaluation (or any error generated by it).
Note that the <b cat="AMBIGUOUS ambiguous cmd">list</b> command quotes sequences of words in such a
way that they are not further expanded by the <b cat="AMBIGUOUS ambiguous cmd">eval</b> command.

</p>
</section>
<seealso>
<ref>catch(n)</ref>
<ref>concat(n)</ref>
<ref>error(n)</ref>
<ref>list(n)</ref>
<ref>subst(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>concatenate</keyword>
<keyword>evaluate</keyword>
<keyword>script</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="event" version="8.3" title="event">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
     Copyright (c) 1998-2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: event.n,v 1.12 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="event" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>event</name>
<desc>Miscellaneous event facilities: define virtual events and generate events</desc>
</namesection>
<synopsis>
<syntax>
<cmd>event</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>event</cmd> command provides several facilities for dealing with
window system events, such as defining virtual events and synthesizing
events.  The command has several different forms, determined by the
first argument.  The following forms are currently supported:
</p>
<commandlist>
<commanddef>
<command><b>event add &lt;&lt;</b><m>virtual</m><b>&gt;&gt;</b> <m>sequence</m> ?<m>sequence ...</m>?</command>
<desc>Associates the virtual event <i>virtual</i> with the physical
event sequence(s) given by the <i>sequence</i> arguments, so that
the virtual event will trigger whenever any one of the <i>sequence</i>s
occurs.
<i>Virtual</i> may be any string value and <i>sequence</i> may have
any of the values allowed for the <i>sequence</i> argument to the
<cmd>bind</cmd> command.
If <i>virtual</i> is already defined, the new physical event sequences
add to the existing sequences for the event.
</desc>
</commanddef>
<commanddef>
<command><b>event delete &lt;&lt;</b><m>virtual</m><b>&gt;&gt;</b> ?<m>sequence</m> <m>sequence ...</m>?</command>
<desc>Deletes each of the <i>sequence</i>s from those associated with
the virtual event given by <i>virtual</i>.
<i>Virtual</i> may be any string value and <i>sequence</i> may have
any of the values allowed for the <i>sequence</i> argument to the
<cmd>bind</cmd> command.
Any <i>sequence</i>s not currently associated with <i>virtual</i>
are ignored.
If no <i>sequence</i> argument is provided, all physical event sequences
are removed for <i>virtual</i>, so that the virtual event will not
trigger anymore.
</desc>
</commanddef>
<commanddef>
<command><b>event generate</b> <m>window event</m> ?<m>option value option value ...</m>?</command>
<desc>Generates a window event and arranges for it to be processed just as if
it had come from the window system.
<i>Window</i> gives the path name of the window for which the event
will be generated; it may also be an identifier (such as returned by
<b>winfo id</b>) as long as it is for a window in the current application.
<i>Event</i> provides a basic description of
the event, such as <b>&lt;Shift-Button-2&gt;</b> or <b>&lt;&lt;Paste&gt;&gt;</b>.
If <i>Window</i> is empty the whole screen is meant, and coordinates
are relative to the screen.
<i>Event</i> may have any of the forms allowed for the <i>sequence</i>
argument of the <cmd>bind</cmd> command except that it must consist
of a single event pattern, not a sequence.
<i>Option-value</i> pairs may be used to specify additional
attributes of the event, such as the x and y mouse position;
see <ref refid="event-fields">EVENT FIELDS</ref> below.  If the <b>-when</b> option is not specified, the
event is processed immediately:  all of the handlers for the event
will complete before the <b>event generate</b> command returns.
If the <b>-when</b> option is specified then it determines when the
event is processed.  Certain events, such as key events, require
that the window has focus to receive the event properly.
</desc>
</commanddef>
<commanddef>
<command><b>event info</b> ?&lt;&lt;<m>virtual</m><b>&gt;&gt;</b>?</command>
<desc>Returns information about virtual events.
If the <b>&lt;&lt;</b><i>virtual</i><b>&gt;&gt;</b> argument is omitted, the return value
is a list of all the virtual events that are currently defined.
If <b>&lt;&lt;</b><i>virtual</i><b>&gt;&gt;</b> is specified then the return value is
a list whose elements are the physical event sequences currently
defined for the given virtual event;  if the virtual event is
not defined then an empty string is returned.
</desc>
</commanddef>
</commandlist>
</section>
<section id="event-fields">
<title>EVENT FIELDS</title>
<p>The following options are supported for the <b>event generate</b>
command.  These correspond to the ``%'' expansions
allowed in binding scripts for the <cmd>bind</cmd> command.
</p>
<dl>
<dle>
<dt><b>-above</b> <m>window</m></dt>
<dd><i>Window</i> specifies the <i>above</i> field for the event,
either as a window path name or as an integer window id.
Valid for <b cat="event">Configure</b> events.
Corresponds to the <b>%a</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-borderwidth</b> <m>size</m></dt>
<dd><i>Size</i> must be a screen distance;  it specifies the
<i>border_width</i> field for the event.
Valid for <b cat="event">Configure</b> events.
Corresponds to the <b>%B</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-button</b> <m>number</m></dt>
<dd><i>Number</i> must be an integer;  it specifies the <i>detail</i> field
for a <b cat="event">ButtonPress</b> or <b cat="event">ButtonRelease</b> event, overriding
any button  number provided in the base <i>event</i> argument.
Corresponds to the <b>%b</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-count</b> <m>number</m></dt>
<dd><i>Number</i> must be an integer;  it specifies the <i>count</i> field
for the event.  Valid for <b cat="event">Expose</b> events.
Corresponds to the <b>%c</b> substitution for binding scripts.
</dd>
</dle>
<dle version="8.5">
<dt><b>-data</b> <m>string</m></dt>
<dd><i>String</i> may be any value; it specifies the <i>user_data</i> field
for the event.  Only valid for virtual events.  Corresponds to the
<b>%d</b> substitution for virtual events in binding scripts.
</dd>
</dle>
<dle>
<dt><b>-delta</b> <m>number</m></dt>
<dd><i>Number</i> must be an integer;  it specifies the <i>delta</i> field
for the <b cat="event">MouseWheel</b> event.  The <i>delta</i> refers to the
direction and magnitude the mouse wheel was rotated.  Note the value
is not a screen distance but are units of motion in the mouse wheel.
Typically these values are multiples of 120.  For example, 120 should
scroll the text widget up 4 lines and -240 would scroll the text
widget down 8 lines.  Of course, other widgets may define different
behaviors for mouse wheel motion.  This field corresponds to the
<b>%D</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-detail</b> <m>detail</m></dt>
<dd><i>Detail</i> specifies the <i>detail</i> field for the event
and must be one of the following:
<?TROFF.RS?><?TABSTOPS 6c?><sl cols="2">
<li>NotifyAncestor</li>
<li>NotifyDetailNone</li>
<li>NotifyInferior</li>
<li>NotifyNonlinear</li>
<li>NotifyNonlinearVirtual</li>
<li>NotifyPointer</li>
<li>NotifyPointerRoot</li>
<li>NotifyVirtual</li>
</sl><p>Valid for <b cat="event">Enter</b>, <b cat="event">Leave</b>, <b cat="event">FocusIn</b> and
<b cat="event">FocusOut</b> events.
Corresponds to the <b>%d</b> substitution for binding scripts.
</p><?TROFF.RE?></dd>
</dle>
<dle>
<dt><b>-focus</b> <m>boolean</m></dt>
<dd><i>Boolean</i> must be a boolean value;  it specifies the <i>focus</i>
field for the event.
Valid for <b cat="event">Enter</b> and <b cat="event">Leave</b> events.
Corresponds to the <b>%f</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>size</m></dt>
<dd><i>Size</i> must be a screen distance;  it specifies the <i>height</i>
field for the event.  Valid for <b cat="event">Configure</b> events.
Corresponds to the <b>%h</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-keycode</b> <m>number</m></dt>
<dd><i>Number</i>  must be an integer;  it specifies the <i>keycode</i>
field for the event.
Valid for <b>KeyPress</b> and <b cat="event">KeyRelease</b> events.
Corresponds to the <b>%k</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-keysym</b> <m>name</m></dt>
<dd><i>Name</i> must be the name of a valid keysym, such as <b>g</b>,
<b>space</b>, or <b>Return</b>;  its corresponding
keycode value is used as the <i>keycode</i> field for event, overriding
any detail specified in the base <i>event</i> argument.
Valid for <b>KeyPress</b> and <b cat="event">KeyRelease</b> events.
Corresponds to the <b>%K</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-mode</b> <m>notify</m></dt>
<dd><i>Notify</i> specifies the <i>mode</i> field for the event and must be
one of <b>NotifyNormal</b>, <b>NotifyGrab</b>, <b>NotifyUngrab</b>, or
<b>NotifyWhileGrabbed</b>.
Valid for <b cat="event">Enter</b>, <b cat="event">Leave</b>, <b cat="event">FocusIn</b>, and
<b cat="event">FocusOut</b> events.
Corresponds to the <b>%m</b> substitution for binding scripts.  
</dd>
</dle>
<dle>
<dt><b>-override</b> <m>boolean</m></dt>
<dd><i>Boolean</i> must be a boolean value;  it specifies the
<i>override_redirect</i> field for the event.
Valid for <b cat="event">Map</b>, <b cat="event">Reparent</b>, and <b cat="event">Configure</b> events.
Corresponds to the <b>%o</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-place</b> <m>where</m></dt>
<dd><i>Where</i> specifies the <i>place</i> field for the event;  it must be
either <b>PlaceOnTop</b> or <b>PlaceOnBottom</b>.
Valid for <b cat="event">Circulate</b> events.
Corresponds to the <b>%p</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-root</b> <m>window</m></dt>
<dd><i>Window</i> must be either a window path name or an integer window
identifier;  it specifies the <i>root</i> field for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, and <b cat="event">Motion</b>
events.
Corresponds to the <b>%R</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-rootx</b> <m>coord</m></dt>
<dd><i>Coord</i> must be a screen distance;  it specifies the <i>x_root</i>
field for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, and <b cat="event">Motion</b>
events.  Corresponds to the <b>%X</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-rooty</b> <m>coord</m></dt>
<dd><i>Coord</i> must be a screen distance;  it specifies the <i>y_root</i>
field for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, and <b cat="event">Motion</b>
events.
Corresponds to the <b>%Y</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-sendevent</b> <m>boolean</m></dt>
<dd><i>Boolean</i> must be a boolean value;  it specifies the <i>send_event</i>
field for the event.  Valid for all events.  Corresponds to the
<b>%E</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-serial</b> <m>number</m></dt>
<dd><i>Number</i> must be an integer;  it specifies the <i>serial</i> field
for the event.  Valid for all events.
Corresponds to the <b>%#</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-state</b> <m>state</m></dt>
<dd><i>State</i> specifies the <i>state</i> field for the event.
For <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, and <b cat="event">Motion</b> events
it must be an integer value.
For <b cat="event">Visibility</b> events it must be one of <b>VisibilityUnobscured</b>, 
<b>VisibilityPartiallyObscured</b>, or <b>VisibilityFullyObscured</b>.
This option overrides any modifiers such as <b>Meta</b> or <b>Control</b>
specified in the base <i>event</i>.
Corresponds to the <b>%s</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-subwindow</b> <m>window</m></dt>
<dd><i>Window</i> specifies the <i>subwindow</i> field for the event, either
as a path name for a Tk widget or as an integer window identifier.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, and <b cat="event">Motion</b> events.
Similar to <b>%S</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-time</b> <m>integer</m></dt>
<dd><i>Integer</i> must be an integer value;  it specifies the <i>time</i> field
for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>, <b cat="event">Motion</b>,
and <b cat="event">Property</b> events.
Corresponds to the <b>%t</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-warp</b> <m>boolean</m></dt>
<dd><i>boolean</i> must be a boolean value;  it specifies whether
the screen pointer should be warped as well.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, and <b cat="event">Motion</b> events.  The pointer will
only warp to a window if it is mapped.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>size</m></dt>
<dd><i>Size</i> must be a screen distance;  it specifies the <i>width</i> field
for the event.
Valid for <b cat="event">Configure</b> events.
Corresponds to the <b>%w</b> substitution for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-when</b> <m>when</m></dt>
<dd><i>When</i> determines when the event will be processed;  it must have one
of the following values:
<dl>
<dle>
<dt><b>now</b></dt>
<dd>Process the event immediately, before the command returns.
This also happens if the <b>-when</b> option is omitted.
</dd>
</dle>
<dle>
<dt><b>tail</b></dt>
<dd>Place the event on Tcl's event queue behind any events already
queued for this application.
</dd>
</dle>
<dle>
<dt><b>head</b></dt>
<dd>Place the event at the front of Tcl's event queue, so that it
will be handled before any other events already queued.
</dd>
</dle>
<dle>
<dt><b>mark</b></dt>
<dd>Place the event at the front of Tcl's event queue but behind any
other events already queued with <b>-when mark</b>.
This option is useful when generating a series of events that should
be processed in order but at the front of the queue.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>-x</b> <m>coord</m></dt>
<dd><i>Coord</i> must be a screen distance;  it specifies the <i>x</i> field
for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Motion</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>,
<b cat="event">Expose</b>, <b cat="event">Configure</b>, <b cat="event">Gravity</b>, and <b cat="event">Reparent</b>
events.
Corresponds to the <b>%x</b> substitution for binding scripts.
If <i>Window</i> is empty the coordinate is relative to the
screen, and this option corresponds to the <b>%X</b> substitution
for binding scripts.
</dd>
</dle>
<dle>
<dt><b>-y</b> <m>coord</m></dt>
<dd><i>Coord</i> must be a screen distance;  it specifies the <i>y</i>
field for the event.
Valid for <b>KeyPress</b>, <b cat="event">KeyRelease</b>, <b cat="event">ButtonPress</b>,
<b cat="event">ButtonRelease</b>, <b cat="event">Motion</b>, <b cat="event">Enter</b>, <b cat="event">Leave</b>,
<b cat="event">Expose</b>, <b cat="event">Configure</b>, <b cat="event">Gravity</b>, and <b cat="event">Reparent</b>
events.
Corresponds to the <b>%y</b> substitution for binding scripts.
If <i>Window</i> is empty the coordinate is relative to the
screen, and this option corresponds to the <b>%Y</b> substitution
for binding scripts.
</dd>
</dle>
</dl>
<p>Any options that are not specified when generating an event are filled 
with the value 0, except for <i>serial</i>, which is filled with the 
next X event serial number.  
</p>
</section>
<section>
<title>PREDEFINED VIRTUAL EVENTS</title>
<p>Tk defines the following virtual events for the purposes of
notification:
</p>
<dl>
<dle>
<dt><b>&lt;&lt;AltUnderlined&gt;&gt;</b></dt>
<dd>This is sent to widget to notify it that the letter it has underlined
(as an accelerator indicator) with the <b>-underline</b> option has
been pressed in combination with the Alt key. The usual response to
this is to either focus into the widget (or some related widget) or to
invoke the widget.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;ListboxSelect&gt;&gt;</b></dt>
<dd>This is sent to a listbox when the set of selected item(s) in the
listbox is updated.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;MenuSelect&gt;&gt;</b></dt>
<dd>This is sent to a menu when the currently selected item in the menu
changes. It is intended for use with context-sensitive help systems.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Modified&gt;&gt;</b></dt>
<dd>This is sent to a text widget when the contents of the widget are
changed.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Selection&gt;&gt;</b></dt>
<dd>This is sent to a text widget when the selection in the widget is
changed.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;TraverseIn&gt;&gt;</b></dt>
<dd>This is sent to a widget when the focus enters the widget because of a
user-driven "tab to widget" action.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;TraverseOut&gt;&gt;</b></dt>
<dd>This is sent to a widget when the focus leaves the widget because of a
user-driven "tab to widget" action.
</dd>
</dle>
</dl>
<p>Tk defines the following virtual events for the purposes of unifying
bindings across multiple platforms. Users expect them to behave in the
following way:
</p>
<dl>
<dle>
<dt><b>&lt;&lt;Clear&gt;&gt;</b></dt>
<dd>Delete the currently selected widget contents.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Copy&gt;&gt;</b></dt>
<dd>Copy the currently selected widget contents to the clipboard.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Cut&gt;&gt;</b></dt>
<dd>Move the currently selected widget contents to the clipboard.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Paste&gt;&gt;</b></dt>
<dd>Replace the currently selected widget contents with the contents of
the clipboard.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;PasteSelection&gt;&gt;</b></dt>
<dd>Insert the contents of the selection at the mouse location. (This
event has meaningful <b>%x</b> and <b>%y</b> substitutions).
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;PrevWindow&gt;&gt;</b></dt>
<dd>Traverse to the previous window.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Redo&gt;&gt;</b></dt>
<dd>Redo one undone action.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;Undo&gt;&gt;</b></dt>
<dd>Undo the last action.
</dd>
</dle>
</dl>
</section>
<section>
<title>VIRTUAL EVENT EXAMPLES</title>
<p>In order for a virtual event binding to trigger, two things must
happen.  First, the virtual event must be defined with the
<b>event add</b> command.  Second, a binding must be created for
the virtual event with the <cmd>bind</cmd> command.
Consider the following virtual event definitions:
</p>
<example>
event add &lt;&lt;Paste&gt;&gt; &lt;Control-y&gt;
event add &lt;&lt;Paste&gt;&gt; &lt;Button-2&gt;
event add &lt;&lt;Save&gt;&gt; &lt;Control-X&gt;&lt;Control-S&gt;
event add &lt;&lt;Save&gt;&gt; &lt;Shift-F12&gt;
</example>
<p>In the <cmd>bind</cmd> command, a virtual event can be bound like any other
builtin event type as follows:
</p>
<example>
bind Entry &lt;&lt;Paste&gt;&gt; {%W insert [selection get]}
</example>
<p>The double angle brackets are used to specify that a virtual event is being
bound.  If the user types Control-y or presses button 2, or if
a <b>&lt;&lt;Paste&gt;&gt;</b> virtual event is synthesized with <b>event generate</b>,
then the <b>&lt;&lt;Paste&gt;&gt;</b> binding will be invoked.
</p>
<p>If a virtual binding has the exact same sequence as a separate
physical binding, then the physical binding will take precedence.
Consider the following example:
</p>
<example>
event add &lt;&lt;Paste&gt;&gt; &lt;Control-y&gt; &lt;Meta-Control-y&gt;
bind Entry &lt;Control-y&gt; {puts Control-y}
bind Entry &lt;&lt;Paste&gt;&gt; {puts Paste}
</example>
<p>When the user types Control-y the <b>&lt;Control-y&gt;</b> binding
will be invoked, because a physical event is considered
more specific than a virtual event, all other things being equal.
However, when the user types Meta-Control-y the
<b>&lt;&lt;Paste&gt;&gt;</b> binding will be invoked, because the
<b>Meta</b> modifier in the physical pattern associated with the 
virtual binding is more specific than the <b>&lt;Control-y</b>&gt; sequence for
the physical event.
</p>
<p>Bindings on a virtual event may be created before the virtual event exists.
Indeed, the virtual event never actually needs to be defined, for instance,
on platforms where the specific virtual event would meaningless or
ungeneratable.
</p>
<p>When a definition of a virtual event changes at run time, all windows
will respond immediately to the new definition.
Starting from the preceding example, if the following code is executed:
</p>
<example>
bind &lt;Entry&gt; &lt;Control-y&gt; {}
event add &lt;&lt;Paste&gt;&gt; &lt;Key-F6&gt;
</example>
<p>the behavior will change such in two ways.  First, the shadowed
<b>&lt;&lt;Paste&gt;&gt;</b> binding will emerge.
Typing Control-y will no longer invoke the <b>&lt;Control-y&gt;</b> binding, 
but instead invoke the virtual event <b>&lt;&lt;Paste&gt;&gt;</b>.  Second,
pressing the F6 key will now also invoke the <b>&lt;&lt;Paste&gt;&gt;</b> binding.

</p>
</section>
<seealso>
<ref>bind(n)</ref>
</seealso>
<keywords>
<keyword>event</keyword>
<keyword>binding</keyword>
<keyword>define</keyword>
<keyword>handle</keyword>
<keyword>virtual event</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="EventHndlr" title="Tk_CreateEventHandler">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: EventHndlr.3,v 1.5 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_CreateEventHandler" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateEventHandler</name>
<name>Tk_DeleteEventHandler</name>
<desc>associate procedure callback with an X event</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_CreateEventHandler</fun>(<m>tkwin</m>, <m>mask</m>, <m>proc</m>, <m>clientData</m>)

<fun>Tk_DeleteEventHandler</fun>(<m>tkwin</m>, <m>mask</m>, <m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which events may occur.
</desc>
</argdef>
<argdef>
<argtype>unsigned long</argtype>
<name>mask</name>
<argmode>in</argmode>
<desc>Bit-mask of events (such as <b>ButtonPressMask</b>)
for which <i>proc</i> should be called.
</desc>
</argdef>
<argdef>
<argtype>Tk_EventProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever an event in <i>mask</i> occurs
in the window given by <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_CreateEventHandler</fun> arranges for <i>proc</i> to be
invoked in the future whenever one of the event types specified
by <i>mask</i> occurs in the window specified by <i>tkwin</i>.
The callback to <i>proc</i> will be made by <fun>Tk_HandleEvent</fun>;
this mechanism only works in programs that dispatch events
through <fun>Tk_HandleEvent</fun> (or through other Tk procedures that
call <fun>Tk_HandleEvent</fun>, such as <b>Tk_DoOneEvent</b> or
<fun>Tk_MainLoop</fun>).
</p>
<p><i>Proc</i> should have arguments and result that match the
type <type>Tk_EventProc</type>:
</p>
<syntax cat="type" name="Tk_EventProc" scope="global">
typedef void Tk_EventProc(
    ClientData <i>clientData</i>,
    XEvent *<i>eventPtr</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the <i>clientData</i>
argument given to <fun>Tk_CreateEventHandler</fun> when the callback
was created.  Typically, <i>clientData</i> points to a data
structure containing application-specific information about
the window in which the event occurred.  <i>EventPtr</i> is
a pointer to the X event, which will be one of the ones
specified in the <i>mask</i> argument to <fun>Tk_CreateEventHandler</fun>.
</p>
<p><fun>Tk_DeleteEventHandler</fun> may be called to delete a
previously-created event handler:  it deletes the first handler
it finds that is associated with <i>tkwin</i> and matches the
<i>mask</i>, <i>proc</i>, and <i>clientData</i> arguments.  If
no such handler exists, then <fun>Tk_HandleEvent</fun> returns
without doing anything.  Although Tk supports it, it's probably
a bad idea to have more than one callback with the same <i>mask</i>,
<i>proc</i>, and <i>clientData</i> arguments.
When a window is deleted all of its handlers will be deleted
automatically;  in this case there is no need to call
<fun>Tk_DeleteEventHandler</fun>.
</p>
<p>If multiple handlers are declared for the same type of X event
on the same window, then the handlers will be invoked in the
order they were created.

</p>
</section>
<keywords>
<keyword>bind</keyword>
<keyword>callback</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="exec" title="exec" version="7.6">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: exec.n,v 1.7 2004/03/17 18:14:12 das Exp $
 -->
<?TROFF.TH title="exec" section="n" date="7.6" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>exec</name>
<desc>Invoke subprocess(es)</desc>
</namesection>
<synopsis>
<syntax>
<cmd>exec</cmd> ?<m>switches</m>? <m>arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command treats its arguments as the specification
of one or more subprocesses to execute.
The arguments take the form of a standard shell pipeline
where each <i>arg</i> becomes one word of a command, and
each distinct command becomes a subprocess.
</p>
<p>If the initial arguments to <cmd>exec</cmd> start with <b>-</b> then
they are treated as command-line switches and are not part
of the pipeline specification.  The following switches are
currently supported:
</p>
<dl>
<dle>
<dt><b>-keepnewline</b></dt>
<dd>Retains a trailing newline in the pipeline's output.
Normally a trailing newline will be deleted.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of switches.  The argument following this one will
be treated as the first <i>arg</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>If an <i>arg</i> (or pair of <i>arg</i>'s) has one of the forms
described below then it is used by <cmd>exec</cmd> to control the
flow of input and output among the subprocess(es).
Such arguments will not be passed to the subprocess(es).  In forms
such as ``&lt; <i>fileName</i>'' <i>fileName</i> may either be in a
separate argument from ``&lt;'' or in the same argument with no
intervening space (i.e. ``&lt;<i>fileName</i>'').
</p>
<dl>
<dle>
<dt>|</dt>
<dd>Separates distinct commands in the pipeline.  The standard output
of the preceding command will be piped into the standard input
of the next command.
</dd>
</dle>
<dle>
<dt>|&amp;</dt>
<dd>Separates distinct commands in the pipeline.  Both standard output
and standard error of the preceding command will be piped into
the standard input of the next command.
This form of redirection overrides forms such as 2&gt; and &gt;&amp;.
</dd>
</dle>
<dle>
<dt>&lt; <m>fileName</m></dt>
<dd>The file named by <i>fileName</i> is opened and used as the standard
input for the first command in the pipeline.
</dd>
</dle>
<dle>
<dt>&lt;@ <m>fileId</m></dt>
<dd><i>FileId</i> must be the identifier for an open file, such as the return
value from a previous call to <b cat="AMBIGUOUS ambiguous cmd">open</b>.
It is used as the standard input for the first command in the pipeline.
<i>FileId</i> must have been opened for reading.
</dd>
</dle>
<dle>
<dt>&lt;&lt; <m>value</m></dt>
<dd><i>Value</i> is passed to the first command as its standard input.
</dd>
</dle>
<dle>
<dt>&gt; <m>fileName</m></dt>
<dd>Standard output from the last command is redirected to the file named
<i>fileName</i>, overwriting its previous contents.
</dd>
</dle>
<dle>
<dt>2&gt; <m>fileName</m></dt>
<dd>Standard error from all commands in the pipeline is redirected to the
file named <i>fileName</i>, overwriting its previous contents.
</dd>
</dle>
<dle>
<dt>&gt;&amp; <m>fileName</m></dt>
<dd>Both standard output from the last command and standard error from all
commands are redirected to the file named <i>fileName</i>, overwriting
its previous contents.
</dd>
</dle>
<dle>
<dt>&gt;&gt; <m>fileName</m></dt>
<dd>Standard output from the last command is
redirected to the file named <i>fileName</i>, appending to it rather
than overwriting it.
</dd>
</dle>
<dle>
<dt>2&gt;&gt; <m>fileName</m></dt>
<dd>Standard error from all commands in the pipeline is
redirected to the file named <i>fileName</i>, appending to it rather
than overwriting it.
</dd>
</dle>
<dle>
<dt>&gt;&gt;&amp; <m>fileName</m></dt>
<dd>Both standard output from the last command and standard error from
all commands are redirected to the file named <i>fileName</i>,
appending to it rather than overwriting it.
</dd>
</dle>
<dle>
<dt>&gt;@ <m>fileId</m></dt>
<dd><i>FileId</i> must be the identifier for an open file, such as the return
value from a previous call to <b cat="AMBIGUOUS ambiguous cmd">open</b>.
Standard output from the last command is redirected to <i>fileId</i>'s
file, which must have been opened for writing.
</dd>
</dle>
<dle>
<dt>2&gt;@ <m>fileId</m></dt>
<dd><i>FileId</i> must be the identifier for an open file, such as the return
value from a previous call to <b cat="AMBIGUOUS ambiguous cmd">open</b>.
Standard error from all commands in the pipeline is
redirected to <i>fileId</i>'s file.
The file must have been opened for writing.
</dd>
</dle>
<dle>
<dt>&gt;&amp;@ <m>fileId</m></dt>
<dd><i>FileId</i> must be the identifier for an open file, such as the return
value from a previous call to <b cat="AMBIGUOUS ambiguous cmd">open</b>.
Both standard output from the last command and standard error from
all commands are redirected to <i>fileId</i>'s file.
The file must have been opened for writing.
</dd>
</dle>
</dl>
<p>If standard output has not been redirected then the <cmd>exec</cmd>
command returns the standard output from the last command
in the pipeline.
If any of the commands in the pipeline exit abnormally or
are killed or suspended, then <cmd>exec</cmd> will return an error
and the error message will include the pipeline's output followed by
error messages describing the abnormal terminations; the
<b cat="variable">errorCode</b> variable will contain additional information
about the last abnormal termination encountered.
If any of the commands writes to its standard error file and that
standard error isn't redirected,
then <cmd>exec</cmd> will return an error;  the error message
will include the pipeline's standard output, followed by messages
about abnormal terminations (if any), followed by the standard error
output.
</p>
<p>If the last character of the result or error message
is a newline then that character is normally deleted
from the result or error message.
This is consistent with other Tcl return values, which don't
normally end with newlines.
However, if <b>-keepnewline</b> is specified then the trailing
newline is retained.
</p>
<p>If standard input isn't redirected with ``&lt;'' or ``&lt;&lt;''
or ``&lt;@'' then the standard input for the first command in the
pipeline is taken from the application's current standard input.
</p>
<p>If the last <i>arg</i> is ``&amp;'' then the pipeline will be
executed in background.
In this case the <cmd>exec</cmd> command will return a list whose
elements are the process identifiers for all of the subprocesses
in the pipeline.
The standard output from the last command in the pipeline will
go to the application's standard output if it hasn't been
redirected, and error output from all of
the commands in the pipeline will go to the application's
standard error file unless redirected.
</p>
<p>The first word in each command is taken as the command name;
tilde-substitution is performed on it, and if the result contains
no slashes then the directories
in the PATH environment variable are searched for
an executable by the given name.
If the name contains a slash then it must refer to an executable
reachable from the current directory.
No ``glob'' expansion or other shell-like substitutions
are performed on the arguments to commands.

<?NEW?></p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<dl>
<dle>
<dt><b>Windows</b> (all versions)</dt>
<dd>Reading from or writing to a socket, using the ``<b>@</b> <i>fileId</i>''
notation, does not work.  When reading from a socket, a 16-bit DOS
application will hang and a 32-bit application will return immediately with
end-of-file.  When either type of application writes to a socket, the
information is instead sent to the console, if one is present, or is
discarded.
<p>The Tk console text widget does not provide real standard IO capabilities.
Under Tk, when redirecting from standard input, all applications will see an
immediate end-of-file; information redirected to standard output or standard
error will be discarded.  
</p><p>Either forward or backward slashes are accepted as path separators for
arguments to Tcl commands.  When executing an application, the path name
specified for the application may also contain forward or backward slashes
as path separators.  Bear in mind, however, that most Windows applications
accept arguments with forward slashes only as option delimiters and
backslashes only in paths.  Any arguments to an application that specify a
path name with forward slashes will not automatically be converted to use
the backslash character.  If an argument contains forward slashes as the
path separator, it may or may not be recognized as a path name, depending on
the program.  
</p><p>Additionally, when calling a 16-bit DOS or Windows 3.X application, all path
names must use the short, cryptic, path format (e.g., using ``applba~1.def''
instead of ``applbakery.default''), which can be obtained with the
<b>file attributes $fileName -shortname</b> command.
</p><p>Two or more forward or backward slashes in a row in a path refer to a
network path.  For example, a simple concatenation of the root directory
<b>c:/</b> with a subdirectory <b>/windows/system</b> will yield
<b>c://windows/system</b> (two slashes together), which refers to the mount
point called <b>system</b> on the machine called <b>windows</b> (and the
<b>c:/</b> is ignored), and is not equivalent to <b>c:/windows/system</b>,
which describes a directory on the current computer.  The <b>file join</b>
command should be used to concatenate path components.
</p><p>Note that there are two general types of Win32 console applications:
</p><ul>
<?CHECKME-UL?>
<li>1) CLI -- CommandLine Interface, simple stdio exchange. <b>netstat.exe</b> for
example.
</li>
<li>2) TUI -- Textmode User Interface, any application that accesses the console
API for doing such things as cursor movement, setting text color, detecting
key presses and mouse movement, etc...  An example would be <b>telnet.exe</b>
from Windows 2000.  These types of applications are not common in a windows
environment, but do exist.
</li>
</ul><p><cmd>exec</cmd> will not work well with TUI applications when a console is not
present, as is done when launching applications under wish.  It is desirable
to have console applications hidden and detached.  This is a designed-in
limitation as <cmd>exec</cmd> wants to communicate over pipes.  The Expect
extension addresses this issue when communication between a TUI application
is desired.
<br/></p></dd>
</dle>
<dle>
<dt><b>Windows NT</b></dt>
<dd>When attempting to execute an application, <cmd>exec</cmd> first searches for
the name as it was specified.  Then, in order, <b>.com</b>, <b>.exe</b>, and
<b>.bat</b> are appended to the end of the specified name and it searches
for the longer name.  If a directory name was not specified as part of the
application name, the following directories are automatically searched in
order when attempting to locate the application:
<ul>
<?CHECKME-UL?>
<li>The directory from which the Tcl executable was loaded.
</li>
<li>The current directory.
</li>
<li>The Windows NT 32-bit system directory.
</li>
<li>The Windows NT 16-bit system directory.
</li>
<li>The Windows NT home directory.
</li>
<li>The directories listed in the path.
</li>
</ul><br/><p>In order to execute the shell builtin commands like <b>dir</b> and <b>copy</b>,
the caller must prepend ``<b>cmd.exe /c</b> '' to the desired command.
<br/></p></dd>
</dle>
<dle>
<dt><b>Windows 95</b></dt>
<dd>When attempting to execute an application, <cmd>exec</cmd> first searches for
the name as it was specified.  Then, in order, <b>.com</b>, <b>.exe</b>, and
<b>.bat</b> are appended to the end of the specified name and it searches
for the longer name.  If a directory name was not specified as part of the
application name, the following directories are automatically searched in
order when attempting to locate the application:
<ul>
<?CHECKME-UL?>
<li>The directory from which the Tcl executable was loaded.
</li>
<li>The current directory.
</li>
<li>The Windows 95 system directory.
</li>
<li>The Windows 95 home directory.
</li>
<li>The directories listed in the path.
</li>
</ul><br/><p>In order to execute the shell builtin commands like <b>dir</b> and <b>copy</b>,
the caller must prepend ``<b>command.com /c</b> '' to the desired command.
<br/>Once a 16-bit DOS application has read standard input from a console and 
then quit, all subsequently run 16-bit DOS applications will see the 
standard input as already closed.  32-bit applications do not have this
problem and will run correctly, even after a 16-bit DOS application thinks 
that standard input is closed.  There is no known workaround for this bug
at this time.
<br/>Redirection between the <b>NUL:</b> device and a 16-bit application does not
always work.  When redirecting from <b>NUL:</b>, some applications may hang,
others will get an infinite stream of ``0x01'' bytes, and some will actually
correctly get an immediate end-of-file; the behavior seems to depend upon 
something compiled into the application itself.  When redirecting greater than
4K or so to <b>NUL:</b>, some applications will hang.  The above problems do not
happen with 32-bit applications.  
<br/>All DOS 16-bit applications are run synchronously.  All standard input from
a pipe to a 16-bit DOS application is collected into a temporary file; the
other end of the pipe must be closed before the 16-bit DOS application
begins executing.  All standard output or error from a 16-bit DOS
application to a pipe is collected into temporary files; the application
must terminate before the temporary files are redirected to the next stage
of the pipeline.  This is due to a workaround for a Windows 95 bug in the
implementation of pipes, and is how the standard Windows 95 DOS shell
handles pipes itself.
<br/>Certain applications, such as <b>command.com</b>, should not be executed
interactively.  Applications which directly access the console window,
rather than reading from their standard input and writing to their standard
output may fail, hang Tcl, or even hang the system if their own private
console window is not available to them.
</p></dd>
</dle>
<dle>
<dt><b>Unix</b>       </dt>
<dd>The <cmd>exec</cmd> command is fully functional and works as described.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>error(n)</ref>
<ref>open(n)</ref>
</seealso>
<keywords>
<keyword>execute</keyword>
<keyword>pipeline</keyword>
<keyword>redirection</keyword>
<keyword>subprocess</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="exit" title="exit">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: exit.n,v 1.7 2007/02/18 18:42:54 dkf Exp $
 -->
<?TROFF.TH title="exit" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>exit</name>
<desc>End the application</desc>
</namesection>
<synopsis>
<syntax>
<cmd>exit</cmd> ?<m>returnCode</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Terminate the process, returning <i>returnCode</i> to the
system as the exit status.
If <i>returnCode</i> isn't specified then it defaults
to 0.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Since non-zero exit codes are usually interpreted as error cases by
the calling process, the <cmd>exit</cmd> command is an important part of
signaling that something fatal has gone wrong. This code fragment is
useful in scripts to act as a general problem trap:
</p>
<example>
proc main {} {
    # ... put the real main code in here ...
}

if {[catch {main} msg options]} {
    puts stderr "unexpected script error: $msg"
    if {[info exist env(DEBUG)]} {
        puts stderr "---- BEGIN TRACE ----"
        puts stderr [dict get $options -errorinfo]
        puts stderr "---- END TRACE ----"
    }

    # Reserve code 1 for "expected" error exits...
    <cmd>exit</cmd> 2
}
</example>


</section>
<seealso>
<ref>exec(n)</ref>
</seealso>
<keywords>
<keyword>exit</keyword>
<keyword>process</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="expr" version="8.5" title="expr">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-2000 Sun Microsystems, Inc.
     Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org>. All rights reserved
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: expr.n,v 1.24 2007/02/18 18:42:54 dkf Exp $
 -->
<?TROFF.TH title="expr" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>expr</name>
<desc>Evaluate an expression</desc>
</namesection>
<synopsis>
<syntax>
<cmd>expr</cmd> <m>arg</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Concatenates <i>arg</i>s (adding separator spaces between them),
evaluates the result as a Tcl expression, and returns the value.
The operators permitted in Tcl expressions include a subset of
the operators permitted in C expressions.  For those operators
common to both Tcl and C, Tcl applies the same meaning and precedence
as the corresponding C operators.
Expressions almost always yield numeric results
(integer or floating-point values).
For example, the expression
</p>
<example>
<b>expr 8.2 + 6</b>
</example>
<p>evaluates to 14.2.
Tcl expressions differ from C expressions in the way that
operands are specified.  Also, Tcl expressions support
non-numeric operands and string comparisons, as well as some
additional operators not found in C.
</p>
<subsection>
<title>OPERANDS</title>
<p>A Tcl expression consists of a combination of operands, operators,
and parentheses.
White space may be used between the operands and operators and
parentheses; it is ignored by the expression's instructions.
Where possible, operands are interpreted as integer values.
<new version="8.5">Integer values may be specified in decimal (the normal case), in binary
(if the first two characters of the operand are <b>0b</b>), in octal
(if the first two characters of the operand are <b>0o</b>), or in hexadecimal
(if the first two characters of the operand are <b>0x</b>).  For
compatibility with older Tcl releases, an octal integer value is also
indicated simply when the first character of the operand is <b>0</b>,
whether or not the second character is also <b>o</b>.
If an operand does not have one of the integer formats given
above, then it is treated as a floating-point number if that is
possible.  Floating-point numbers may be specified in any of several
common formats making use of the decimal digits, the decimal point <b>.</b>,
the characters <b>e</b> or <b>E</b> indicating scientific notation, and
the sign characters <b>+</b> or <b>-</b>.  For example, all of the
following are valid floating-point numbers:  2.1, 3., 6e4, 7.91e+16.
Also recognized as floating point values are the strings <b>Inf</b>
and <b>NaN</b> making use of any case for each character.
</new>If no numeric interpretation is possible (note that all literal
operands that are not numeric or boolean must be quoted with either
braces or with double quotes), then an operand is left as a string
(and only a limited set of operators may be applied to it).
</p>
<p>Operands may be specified in any of the following ways:
</p>
<ol>
<li>As a numeric value, either integer or floating-point.
</li>
<li>As a boolean value, using any form understood by <b>string is boolean</b>.
</li>
<li>As a Tcl variable, using standard <b>$</b> notation.
The variable's value will be used as the operand.
</li>
<li>As a string enclosed in double-quotes.
The expression parser will perform backslash, variable, and
command substitutions on the information between the quotes,
and use the resulting value as the operand
</li>
<li>As a string enclosed in braces.
The characters between the open brace and matching close brace
will be used as the operand without any substitutions.
</li>
<li>As a Tcl command enclosed in brackets.
The command will be executed and its result will be used as
the operand.
</li>
<li>As a mathematical function whose arguments have any of the above
forms for operands, such as <b>sin($x)</b>.  See <ref refid="math-functions">MATH FUNCTIONS</ref> below for
a discussion of how mathematical functions are handled.
</li>
</ol>
<p>Where the above substitutions occur (e.g. inside quoted strings), they
are performed by the expression's instructions.
However, the command parser may already have performed one round of
substitution before the expression processor was called.
As discussed below, it is usually best to enclose expressions
in braces to prevent the command parser from performing substitutions
on the contents.
</p>
<p>For some examples of simple expressions, suppose the variable
<b>a</b> has the value 3 and
the variable <b>b</b> has the value 6.
Then the command on the left side of each of the lines below
will produce the value on the right side of the line:
</p>
<example>
<?TABSTOPS 6c?><cmd>expr</cmd> 3.1 + $a	<i>6.1</i>
<cmd>expr</cmd> 2 + "$a.$b"	<i>5.6</i>
<cmd>expr</cmd> 4*[llength "6 2"]	<i>8</i>
<cmd>expr</cmd> {{word one} &lt; "word $a"}	<i>0</i>
</example>
</subsection>
<subsection>
<title>OPERATORS</title>
<p>The valid operators are listed below, grouped in decreasing order
of precedence:
</p>
<dl>
<dle>
<dt><b>-  +  ~  !</b></dt>
<dd>Unary minus, unary plus, bit-wise NOT, logical NOT.  None of these operators
may be applied to string operands, and bit-wise NOT may be
applied only to integers.
</dd>
</dle>
<dle>
<dt><b>**</b></dt>
<dd><new version="8.5">Exponentiation.  Valid for any numeric operands.
</new></dd>
</dle>
<dle>
<dt><b>*  /  %</b></dt>
<dd>Multiply, divide, remainder.  None of these operators may be
applied to string operands, and remainder may be applied only
to integers.
The remainder will always have the same sign as the divisor and
an absolute value smaller than the divisor.
</dd>
</dle>
<dle>
<dt><b>+  -</b></dt>
<dd>Add and subtract.  Valid for any numeric operands.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;  &gt;&gt;</b></dt>
<dd>Left and right shift.  Valid for integer operands only.
A right shift always propagates the sign bit.
</dd>
</dle>
<dle>
<dt><b>&lt;  &gt;  &lt;=  &gt;=</b></dt>
<dd>Boolean less, greater, less than or equal, and greater than or equal.
Each operator produces 1 if the condition is true, 0 otherwise.
These operators may be applied to strings as well as numeric operands,
in which case string comparison is used.
</dd>
</dle>
<dle>
<dt><b>==  !=</b></dt>
<dd>Boolean equal and not equal.  Each operator produces a zero/one result.
Valid for all operand types.
</dd>
</dle>
<dle>
<dt><b>eq  ne</b></dt>
<dd>Boolean string equal and string not equal.  Each operator produces a
zero/one result.  The operand types are interpreted only as strings.
</dd>
</dle>
<dle>
<dt><b>in  ni</b></dt>
<dd><new version="8.5">List containment and negated list containment.  Each operator produces
a zero/one result and treats its first argument as a string and its
second argument as a Tcl list.  The <b>in</b> operator indicates
whether the first argument is a member of the second argument list;
the <b>ni</b> operator inverts the sense of the result.
</new></dd>
</dle>
<dle>
<dt><b>&amp;</b></dt>
<dd>Bit-wise AND.  Valid for integer operands only.
</dd>
</dle>
<dle>
<dt><b>^</b></dt>
<dd>Bit-wise exclusive OR.  Valid for integer operands only.
</dd>
</dle>
<dle>
<dt><b>|</b></dt>
<dd>Bit-wise OR.  Valid for integer operands only.
</dd>
</dle>
<dle>
<dt><b>&amp;&amp;</b></dt>
<dd>Logical AND.  Produces a 1 result if both operands are non-zero,
0 otherwise.
Valid for boolean and numeric (integers or floating-point) operands only.
</dd>
</dle>
<dle>
<dt><b>||</b></dt>
<dd>Logical OR.  Produces a 0 result if both operands are zero, 1 otherwise.
Valid for boolean and numeric (integers or floating-point) operands only.
</dd>
</dle>
<dle>
<dt><m>x</m><b>?</b><m>y</m><b>:</b><m>z</m></dt>
<dd>If-then-else, as in C.  If <i>x</i>
evaluates to non-zero, then the result is the value of <i>y</i>.
Otherwise the result is the value of <i>z</i>.
The <i>x</i> operand must have a boolean or numeric value.
</dd>
</dle>
</dl>
<p>See the C manual for more details on the results
produced by each operator.
<new version="8.5">The exponentiation operator promotes types like the multiply and
divide operators, and produces a result that is the same as the output
of the <b cat="mathfunc">pow</b> function (after any type conversions.)
</new>All of the binary operators group left-to-right within the same
precedence level.  For example, the command
</p>
<example>
<cmd>expr</cmd> {4*2 &lt; 7}
</example>
<p>returns 0.
</p>
<p>The <b>&amp;&amp;</b>, <b>||</b>, and <b>?:</b> operators have ``lazy
evaluation'', just as in C, 
which means that operands are not evaluated if they are
not needed to determine the outcome.  For example, in the command
</p>
<example>
<b>expr {$v ? [a] : [b]}</b>
</example>
<p>only one of <b>[a]</b> or <b>[b]</b> will actually be evaluated,
depending on the value of <b>$v</b>.  Note, however, that this is
only true if the entire expression is enclosed in braces;  otherwise
the Tcl parser will evaluate both <b>[a]</b> and <b>[b]</b> before
invoking the <cmd>expr</cmd> command.
</p>
</subsection>
<subsection id="math-functions">
<title>MATH FUNCTIONS</title>
<p><?NEW 8.5?>When the expression parser encounters a mathematical function
such as <b>sin($x)</b>, it replaces it with a call to an ordinary
Tcl function in the <b>tcl::mathfunc</b> namespace.  The processing
of an expression such as:
</p>
<example>
<b>expr {sin($x+$y)}</b>
</example>
<p>is the same in every way as the processing of:
</p>
<example>
<b>expr {[tcl::mathfunc::sin [expr {$x+$y}]]}</b>
</example>
<p>The executor will search for <b>tcl::mathfunc::sin</b> using the usual
rules for resolving functions in namespaces. Either
<b>::tcl::mathfunc::sin</b> or <b>[namespace
current]::tcl::mathfunc::sin</b> will satisfy the request, and others
may as well (depending on the current <b>namespace path</b> setting).
</p>
<p>See the <b>mathfunc</b>(n) manual page for the math functions that are
available by default.
</p>
</subsection>
<?ENDNEW CONFUSED 8.5?>
<subsection>
<title>TYPES, OVERFLOW, AND PRECISION</title>
<p><new version="8.5">All internal computations involving integers are done calling on the
LibTomMath multiple precision integer library as required so that all
integer calculations are performed exactly.  Note that in Tcl releases
prior to 8.5, integer calculations were performed with one of the C types
<i>long int</i> or <i>Tcl_WideInt</i>, causing implicit range truncation
in those calculations where values overflowed the range of those types.
Any code that relied on these implicit truncations will need to explicitly
add <b>int()</b> or <b>wide()</b> function calls to expressions at the points
where such truncation is required to take place.
</new></p>
<p>All internal computations involving floating-point are
done with the C type <i>double</i>.
When converting a string to floating-point, exponent overflow is
detected and results in the <i>double</i> value of <b>Inf</b> or
<b>-Inf</b> as appropriate.  Floating-point overflow and underflow
are detected to the degree supported by the hardware, which is generally
pretty reliable.
</p>
<p>Conversion among internal representations for integer, floating-point,
and string operands is done automatically as needed.
For arithmetic computations, integers are used until some
floating-point number is introduced, after which floating-point is used.
For example,
</p>
<example>
<cmd>expr</cmd> {5 / 4}
</example>
<p>returns 1, while
</p>
<example>
<cmd>expr</cmd> {5 / 4.0}
<cmd>expr</cmd> {5 / ( [string length "abcd"] + 0.0 )}
</example>
<p>both return 1.25.
Floating-point values are always returned with a ``<b>.</b>''
or an <b>e</b> so that they will not look like integer values.  For
example,
</p>
<example>
<cmd>expr</cmd> {20.0/5.0}
</example>
<p>returns <b>4.0</b>, not <b>4</b>.
</p>
</subsection>
<subsection>
<title>STRING OPERATIONS</title>
<p>String values may be used as operands of the comparison operators,
although the expression evaluator tries to do comparisons as integer
or floating-point when it can,
except in the case of the <b>eq</b> and <b>ne</b> operators.
If one of the operands of a comparison is a string and the other
has a numeric value, a canonical string representation of the numeric
operand value is generated to compare with the string operand.
Canonical string representation for integer values is a decimal string
format.  Canonical string representation for floating-point values
is that produced by the <b>%g</b> format specifier of Tcl's
<b cat="AMBIGUOUS ambiguous cmd">format</b> command.  For example, the commands
</p>
<example>
<b>expr {"0x03" &gt; "2"}</b>
<b>expr {"0y" &lt; "0x12"}</b>
</example>
<p>both return 1.  The first comparison is done using integer
comparison, and the second is done using string comparison after
the second operand is converted to the string <b>18</b>.
Because of Tcl's tendency to treat values as numbers whenever
possible, it isn't generally a good idea to use operators like <b>==</b>
when you really want string comparison and the values of the
operands could be arbitrary;  it's better in these cases to use
the <b>eq</b> or <b>ne</b> operators, or the <b cat="AMBIGUOUS ambiguous cmd">string</b> command instead.
</p>
</subsection>
</section>
<section>
<title>PERFORMANCE CONSIDERATIONS</title>
<p>Enclose expressions in braces for the best speed and the smallest
storage requirements.
This allows the Tcl bytecode compiler to generate the best code.
</p>
<p>As mentioned above, expressions are substituted twice:
once by the Tcl parser and once by the <cmd>expr</cmd> command.
For example, the commands
</p>
<example>
<b>set a 3</b>
<b>set b {$a + 2}</b>
<b>expr $b*4</b>
</example>
<p>return 11, not a multiple of 4.
This is because the Tcl parser will first substitute <b>$a + 2</b> for
the variable <b>b</b>,
then the <cmd>expr</cmd> command will evaluate the expression <b>$a + 2*4</b>.
</p>
<p>Most expressions do not require a second round of substitutions.
Either they are enclosed in braces or, if not,
their variable and command substitutions yield numbers or strings
that don't themselves require substitutions.
However, because a few unbraced expressions 
need two rounds of substitutions,
the bytecode compiler must emit
additional instructions to handle this situation.
The most expensive code is required for
unbraced expressions that contain command substitutions.
These expressions must be implemented by generating new code
each time the expression is executed.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Define a procedure that computes an "interesting" mathematical
function:
</p>
<example>
proc tcl::mathfunc::calc {x y} {
    <cmd>expr</cmd> { ($x**2 - $y**2) / exp($x**2 + $y**2) }
}
</example>
<p>Convert polar coordinates into cartesian coordinates:
</p>
<example>
# convert from ($radius,$angle)
set x [<cmd>expr</cmd> { $radius * cos($angle) }]
set y [<cmd>expr</cmd> { $radius * sin($angle) }]
</example>
<p>Convert cartesian coordinates into polar coordinates:
</p>
<example>
# convert from ($x,$y)
set radius [<cmd>expr</cmd> { hypot($y, $x) }]
set angle  [<cmd>expr</cmd> { atan2($y, $x) }]
</example>
<p>Print a message describing the relationship of two string values to
each other:
</p>
<example>
puts "a and b are [<cmd>expr</cmd> {$a eq $b ? {equal} : {different}}]"
</example>
<p>Set a variable to whether an environment variable is both defined at
all and also set to a true boolean value:
</p>
<example>
set isTrue [<cmd>expr</cmd> {
    [info exists ::env(SOME_ENV_VAR)] &amp;&amp;
    [string is true -strict $::env(SOME_ENV_VAR)]
}]
</example>
<p>Generate a random integer in the range 0..99 inclusive:
</p>
<example>
set randNum [<cmd>expr</cmd> { int(100 * rand()) }]
</example>


</section>
<seealso>
<ref>array(n)</ref>
<ref>for(n)</ref>
<ref>if(n)</ref>
<ref>mathfunc(n)</ref>
<ref>namespace(n)</ref>
<ref>proc(n)</ref>
<ref>string(n)</ref>
<ref>Tcl(n)</ref>
<ref>while(n)</ref>
</seealso>
<keywords>
<keyword>arithmetic</keyword>
<keyword>boolean</keyword>
<keyword>compare</keyword>
<keyword>expression</keyword>
<keyword>fuzzy comparison</keyword>
</keywords>
<section>
<title>COPYRIGHT</title>
<p>Copyright (c) 1993 The Regents of the University of California.
<br/>Copyright (c) 1994-2000 Sun Microsystems Incorporated.
<br/>Copyright (c) 2005 by Kevin B. Kenny &lt;kennykb@acm.org&gt;. All rights reserved.
</p>
</section>
</manpage>
<manpage cat="fun" id="ExprLong" version="7.0" title="Tcl_ExprLong">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ExprLong.3,v 1.11 2005/05/10 18:33:55 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_ExprLong" section="3" date="7.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_ExprLong</name>
<name>Tcl_ExprDouble</name>
<name>Tcl_ExprBoolean</name>
<name>Tcl_ExprString</name>
<desc>evaluate an expression</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_ExprLong</fun>(<m>interp</m>, <m>expr</m>, <m>longPtr</m>)

int
<fun>Tcl_ExprDouble</fun>(<m>interp</m>, <m>expr</m>, <m>doublePtr</m>)

int
<fun>Tcl_ExprBoolean</fun>(<m>interp</m>, <m>expr</m>, <m>booleanPtr</m>)

int
<fun>Tcl_ExprString</fun>(<m>interp</m>, <m>expr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in whose context to evaluate <i>expr</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="expr">*expr</name>
<argmode>in</argmode>
<desc>Expression to be evaluated.  
</desc>
</argdef>
<argdef>
<argtype>long</argtype>
<name name="longPtr">*longPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the integer value of the
expression.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the floating-point value of the
expression.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="booleanPtr">*booleanPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the 0/1 boolean value of the
expression.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These four procedures all evaluate the expression
given by the <i>expr</i> argument
and return the result in one of four different forms.
The expression can have any of the forms accepted by the <cmd>expr</cmd> command.
Note that these procedures have been largely replaced by the
object-based procedures <fun>Tcl_ExprLongObj</fun>, <fun>Tcl_ExprDoubleObj</fun>,
<fun>Tcl_ExprBooleanObj</fun>, and <fun>Tcl_ExprObj</fun>.
Those object-based procedures evaluate an expression held in a Tcl object
instead of a string.
The object argument can retain an internal representation
that is more efficient to execute.
</p>
<p>The <i>interp</i> argument refers to an interpreter used to
evaluate the expression (e.g. for variables and nested Tcl
commands) and to return error information.
</p>
<p>For all of these procedures the return value is a standard
Tcl result: <b>TCL_OK</b> means the expression was successfully
evaluated, and <b>TCL_ERROR</b> means that an error occurred while
evaluating the expression.
If <b>TCL_ERROR</b> is returned then
the interpreter's result will hold a message describing the error.
If an error occurs while executing a Tcl command embedded in
the expression then that error will be returned.
</p>
<p>If the expression is successfully evaluated, then its value is
returned in one of four forms, depending on which procedure
is invoked.
<fun>Tcl_ExprLong</fun> stores an integer value at <i>*longPtr</i>.
If the expression's actual value is a floating-point number,
then it is truncated to an integer.
If the expression's actual value is a non-numeric string then
an error is returned.
</p>
<p><fun>Tcl_ExprDouble</fun> stores a floating-point value at <i>*doublePtr</i>.
If the expression's actual value is an integer, it is converted to
floating-point.
If the expression's actual value is a non-numeric string then
an error is returned.
</p>
<p><fun>Tcl_ExprBoolean</fun> stores a 0/1 integer value at <i>*booleanPtr</i>.
If the expression's actual value is an integer or floating-point
number, then they store 0 at <i>*booleanPtr</i> if
the value was zero and 1 otherwise.
If the expression's actual value is a non-numeric string then
it must be one of the values accepted by <fun>Tcl_GetBoolean</fun>
such as ``yes'' or ``no'', or else an error occurs.
</p>
<p><fun>Tcl_ExprString</fun> returns the value of the expression as a
string stored in the interpreter's result.

</p>
</section>
<seealso>
<ref>Tcl_ExprLongObj</ref>
<ref>Tcl_ExprDoubleObj</ref>
<ref>Tcl_ExprBooleanObj</ref>
<ref>Tcl_ExprObj</ref>
</seealso>
<keywords>
<keyword>boolean</keyword>
<keyword>double</keyword>
<keyword>evaluate</keyword>
<keyword>expression</keyword>
<keyword>integer</keyword>
<keyword>object</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ExprLongObj" version="8.0" title="Tcl_ExprLongObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ExprLongObj.3,v 1.5 2005/05/10 18:33:55 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_ExprLongObj" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_ExprLongObj</name>
<name>Tcl_ExprDoubleObj</name>
<name>Tcl_ExprBooleanObj</name>
<name>Tcl_ExprObj</name>
<desc>evaluate an expression</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_ExprLongObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>longPtr</m>)

int
<fun>Tcl_ExprDoubleObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>doublePtr</m>)

int
<fun>Tcl_ExprBooleanObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>booleanPtr</m>)

int
<fun>Tcl_ExprObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>resultPtrPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in whose context to evaluate <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Pointer to an object containing the expression to evaluate.
</desc>
</argdef>
<argdef>
<argtype>long</argtype>
<name name="longPtr">*longPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the integer value of the
expression.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the floating-point value of the
expression.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="booleanPtr">*booleanPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the 0/1 boolean value of the
expression.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="resultPtrPtr">**resultPtrPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store a pointer to the object
that is the result of the expression.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These four procedures all evaluate an expression, returning
the result in one of four different forms.
The expression is given by the <i>objPtr</i> argument, and it
can have any of the forms accepted by the <cmd>expr</cmd> command.
</p>
<p>The <i>interp</i> argument refers to an interpreter used to
evaluate the expression (e.g. for variables and nested Tcl
commands) and to return error information.
</p>
<p>For all of these procedures the return value is a standard
Tcl result: <b>TCL_OK</b> means the expression was successfully
evaluated, and <b>TCL_ERROR</b> means that an error occurred while
evaluating the expression.
If <b>TCL_ERROR</b> is returned,
then a message describing the error
can be retrieved using <fun>Tcl_GetObjResult</fun>.
If an error occurs while executing a Tcl command embedded in
the expression then that error will be returned.
</p>
<p>If the expression is successfully evaluated, then its value is
returned in one of four forms, depending on which procedure
is invoked.
<fun>Tcl_ExprLongObj</fun> stores an integer value at <i>*longPtr</i>.
If the expression's actual value is a floating-point number,
then it is truncated to an integer.
If the expression's actual value is a non-numeric string then
an error is returned.
</p>
<p><fun>Tcl_ExprDoubleObj</fun> stores a floating-point value at <i>*doublePtr</i>.
If the expression's actual value is an integer, it is converted to
floating-point.
If the expression's actual value is a non-numeric string then
an error is returned.
</p>
<p><fun>Tcl_ExprBooleanObj</fun> stores a 0/1 integer value at <i>*booleanPtr</i>.
If the expression's actual value is an integer or floating-point
number, then they store 0 at <i>*booleanPtr</i> if
the value was zero and 1 otherwise.
If the expression's actual value is a non-numeric string then
it must be one of the values accepted by <fun>Tcl_GetBoolean</fun>
such as ``yes'' or ``no'', or else an error occurs.
</p>
<p>If <fun>Tcl_ExprObj</fun> successfully evaluates the expression,
it stores a pointer to the Tcl object
containing the expression's value at <i>*resultPtrPtr</i>.
In this case, the caller is responsible for calling
<fun>Tcl_DecrRefCount</fun> to decrement the object's reference count
when it is finished with the object.

</p>
</section>
<seealso>
<ref>Tcl_ExprLong</ref>
<ref>Tcl_ExprDouble</ref>
<ref>Tcl_ExprBoolean</ref>
<ref>Tcl_ExprString</ref>
<ref>Tcl_GetObjResult</ref>
</seealso>
<keywords>
<keyword>boolean</keyword>
<keyword>double</keyword>
<keyword>evaluate</keyword>
<keyword>expression</keyword>
<keyword>integer</keyword>
<keyword>object</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="fblocked" version="7.5" title="fblocked">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: fblocked.n,v 1.8 2005/05/10 18:33:59 kennykb Exp $
 -->
<?TROFF.TH title="fblocked" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>fblocked</name>
<desc>Test whether the last input operation exhausted all available input</desc>
</namesection>
<synopsis>
<syntax>
<cmd>fblocked</cmd> <m>channelId</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>fblocked</cmd> command returns 1 if the most recent input operation
on <i>channelId</i> returned less information than requested because all
available input was exhausted.
For example, if <cmd>gets</cmd> is invoked when there are only three
characters available for input and no end-of-line sequence, <cmd>gets</cmd>
returns an empty string and a subsequent call to <cmd>fblocked</cmd> will
return 1.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>),
the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or
the result of a channel creation command provided by a Tcl extension.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>The <cmd>fblocked</cmd> command is particularly useful when writing network
servers, as it allows you to write your code in a line-by-line style
without preventing the servicing of other connections.  This can be
seen in this simple echo-service:
</p>
<example>
# This is called whenever a new client connects to the server
proc connect {chan host port} {
    set clientName [format &lt;%s:%d&gt; $host $port]
    puts "connection from $clientName"
    fconfigure $chan -blocking 0 -buffering line
    fileevent $chan readable [list echoLine $chan $clientName]
}

# This is called whenever either at least one byte of input
# data is available, or the channel was closed by the client.
proc echoLine {chan clientName} {
    gets $chan line
    if {[eof $chan]} {
        puts "finishing connection from $clientName"
        close $chan
    } elseif {![<cmd>fblocked</cmd> $chan]} {
        # Didn't block waiting for end-of-line
        puts "$clientName - $line"
        puts $chan $line
    }
}

# Create the server socket and enter the event-loop to wait
# for incoming connections...
socket -server connect 12345
vwait forever
</example>


</section>
<seealso>
<ref>gets(n)</ref>
<ref>open(n)</ref>
<ref>read(n)</ref>
<ref>socket(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>nonblocking</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="fconfigure" title="fconfigure" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: fconfigure.n,v 1.9 2004/03/17 18:14:12 das Exp $
 -->
<?TROFF.TH title="fconfigure" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>fconfigure</name>
<desc>Set and get options on a channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>fconfigure</cmd> <m>channelId</m>
<cmd>fconfigure</cmd> <m>channelId</m> <m>name</m>
<cmd>fconfigure</cmd> <m>channelId</m> <m>name value</m> ?<m>name value ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>fconfigure</cmd> command sets and retrieves options for channels.
</p>
<p><i>ChannelId</i> identifies the channel for which to set or query an
option and must refer to an open channel such as a Tcl standard
channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>), the return
value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or the result
of a channel creation command provided by a Tcl extension.
</p>
<p>If no <i>name</i> or <i>value</i> arguments are supplied, the command
returns a list containing alternating option names and values for the channel.
If <i>name</i> is supplied but no <i>value</i> then the command returns
the current value of the given option.
If one or more pairs of <i>name</i> and <i>value</i> are supplied, the
command sets each of the named options to the corresponding <i>value</i>;
in this case the return value is an empty string.
</p>
<p>The options described below are supported for all channels. In addition,
each channel type may add options that only it supports. See the manual
entry for the command that creates each type of channels for the options
that that specific type of channel supports. For example, see the manual
entry for the <cmd>socket</cmd> command for its additional options.
</p>
<dl>
<dle>
<dt><b>-blocking</b> <m>boolean</m></dt>
<dd>The <b>-blocking</b> option determines whether I/O operations on the
channel can cause the process to block indefinitely.
The value of the option must be a proper boolean value.
Channels are normally in blocking mode;  if a channel is placed into
nonblocking mode it will affect the operation of the <cmd>gets</cmd>,
<b cat="AMBIGUOUS ambiguous cmd">read</b>, <cmd>puts</cmd>, <b cat="AMBIGUOUS ambiguous cmd">flush</b>, and <cmd>close</cmd> commands;
see the documentation for those commands for details.
For nonblocking mode to work correctly, the application must be
using the Tcl event loop (e.g. by calling <fun>Tcl_DoOneEvent</fun> or
invoking the <cmd>vwait</cmd> command).
</dd>
</dle>
<dle>
<dt><b>-buffering</b> <m>newValue</m></dt>
<dd>If <i>newValue</i> is <b>full</b> then the I/O system will buffer output
until its internal buffer is full or until the <b cat="AMBIGUOUS ambiguous cmd">flush</b> command is
invoked. If <i>newValue</i> is <b cat="canvasitemtype">line</b>, then the I/O system will
automatically flush output for the channel whenever a newline character
is output. If <i>newValue</i> is <b>none</b>, the I/O system will flush
automatically after every output operation.  The default is for
<b>-buffering</b> to be set to <b>full</b> except for channels that
connect to terminal-like devices; for these channels the initial setting
is <b cat="canvasitemtype">line</b>.  Additionally, <b>stdin</b> and <b>stdout</b> are
initially set to <b cat="canvasitemtype">line</b>, and <b>stderr</b> is set to <b>none</b>.
</dd>
</dle>
<dle>
<dt><b>-buffersize</b> <m>newSize</m></dt>
<dd><i>Newvalue</i> must be an integer; its value is used to set the size of
buffers, in bytes, subsequently allocated for this channel to store input
or output. <i>Newvalue</i> must be between ten and one million, allowing
buffers of ten to one million bytes in size.
</dd>
</dle>
<dle>
<dt><b>-encoding</b> <m>name</m></dt>
<dd>This option is used to specify the encoding of the channel, so that the data
can be converted to and from Unicode for use in Tcl.  For instance, in
order for Tcl to read characters from a Japanese file in <b>shiftjis</b>
and properly process and display the contents, the encoding would be set
to <b>shiftjis</b>.  Thereafter, when reading from the channel, the bytes in
the Japanese file would be converted to Unicode as they are read.
Writing is also supported - as Tcl strings are written to the channel they
will automatically be converted to the specified encoding on output.
<p>If a file contains pure binary data (for instance, a JPEG image), the
encoding for the channel should be configured to be <b cat="AMBIGUOUS ambiguous cmd">binary</b>.  Tcl
will then assign no interpretation to the data in the file and simply read or
write raw bytes.  The Tcl <b cat="AMBIGUOUS ambiguous cmd">binary</b> command can be used to manipulate this
byte-oriented data.
</p><p>The default encoding for newly opened channels is the same platform- and
locale-dependent system encoding used for interfacing with the operating
system.  
</p></dd>
</dle>
<dle>
<dt><b>-eofchar</b> <m>char</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-eofchar</b> <b>{</b><m>inChar outChar</m><b>}</b></dt>
<dd>This option supports DOS file systems that use Control-z (\x1a) as an
end of file marker.  If <i>char</i> is not an empty string, then this
character signals end-of-file when it is encountered during input.  For
output, the end-of-file character is output when the channel is closed.
If <i>char</i> is the empty string, then there is no special end of file
character marker.  For read-write channels, a two-element list specifies
the end of file marker for input and output, respectively.  As a
convenience, when setting the end-of-file character for a read-write
channel you can specify a single value that will apply to both reading
and writing.  When querying the end-of-file character of a read-write
channel, a two-element list will always be returned.  The default value
for <b>-eofchar</b> is the empty string in all cases except for files
under Windows.  In that case the <b>-eofchar</b> is Control-z (\x1a) for
reading and the empty string for writing.
</dd>
</dle>
<dle>
<dt><b>-translation</b> <m>mode</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-translation</b> <b>{</b><m>inMode outMode</m><b>}</b> </dt>
<dd>In Tcl scripts the end of a line is always represented using a single
newline character (\n).  However, in actual files and devices the end of
a line may be represented differently on different platforms, or even for
different devices on the same platform.  For example, under UNIX newlines
are used in files, whereas carriage-return-linefeed sequences are
normally used in network connections.  On input (i.e., with <cmd>gets</cmd>
and <b cat="AMBIGUOUS ambiguous cmd">read</b>) the Tcl I/O system automatically translates the external
end-of-line representation into newline characters.  Upon output (i.e.,
with <cmd>puts</cmd>), the I/O system translates newlines to the external
end-of-line representation.  The default translation mode, <b>auto</b>,
handles all the common cases automatically, but the <b>-translation</b>
option provides explicit control over the end of line translations.
<p>The value associated with <b>-translation</b> is a single item for
read-only and write-only channels.  The value is a two-element list for
read-write channels; the read translation mode is the first element of
the list, and the write translation mode is the second element.  As a
convenience, when setting the translation mode for a read-write channel
you can specify a single value that will apply to both reading and
writing.  When querying the translation mode of a read-write channel, a
two-element list will always be returned.  The following values are
currently supported:
</p><dl>
<dle>
<dt><b>auto</b></dt>
<dd>As the input translation mode, <b>auto</b> treats any of newline
(<b>lf</b>), carriage return (<b>cr</b>), or carriage return followed by a
newline (<b>crlf</b>) as the end of line representation.  The end of line
representation can even change from line-to-line, and all cases are
translated to a newline.  As the output translation mode, <b>auto</b>
chooses a platform specific representation; for sockets on all platforms
Tcl chooses <b>crlf</b>, for all Unix flavors, it chooses <b>lf</b>, and
for the various flavors of Windows it chooses <b>crlf</b>.  The default
setting for <b>-translation</b> is <b>auto</b> for both input and output.
</dd>
</dle>
<dle>
<dt><b>binary</b> </dt>
<dd>No end-of-line translations are performed.  This is nearly identical to
<b>lf</b> mode, except that in addition <b cat="AMBIGUOUS ambiguous cmd">binary</b> mode also sets the
end-of-file character to the empty string (which disables it) and sets the
encoding to <b cat="AMBIGUOUS ambiguous cmd">binary</b> (which disables encoding filtering).  See the
description of <b>-eofchar</b> and <b>-encoding</b> for more information.
</dd>
</dle>
<dle>
<dt><b>cr</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
single carriage return character.  As the input translation mode,
<b>cr</b> mode converts carriage returns to newline characters.  As the
output translation mode, <b>cr</b> mode translates newline characters to
carriage returns.
</dd>
</dle>
<dle>
<dt><b>crlf</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
carriage return character followed by a linefeed character.  As the input
translation mode, <b>crlf</b> mode converts carriage-return-linefeed
sequences to newline characters.  As the output translation mode,
<b>crlf</b> mode translates newline characters to carriage-return-linefeed
sequences.  This mode is typically used on Windows platforms and for
network connections.
</dd>
</dle>
<dle>
<dt><b>lf</b></dt>
<dd>The end of a line in the underlying file or device is represented by a
single newline (linefeed) character.  In this mode no translations occur
during either input or output.  This mode is typically used on UNIX
platforms.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>STANDARD CHANNELS</title>
<p>The Tcl standard channels (<b>stdin</b>, <b>stdout</b>, and <b>stderr</b>)
can be configured through this command like every other channel opened
by the Tcl library. Beyond the standard options described above they
will also support any special option according to their current type.
If, for example, a Tcl application is started by the <b>inet</b>
super-server common on Unix system its Tcl standard channels will be
sockets and thus support the socket options.

</p>
</section>
<seealso>
<ref>close(n)</ref>
<ref>flush(n)</ref>
<ref>gets(n)</ref>
<ref>open(n)</ref>
<ref>puts(n)</ref>
<ref>read(n)</ref>
<ref>socket(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>buffering</keyword>
<keyword>carriage return</keyword>
<keyword>end of line</keyword>
<keyword>flushing</keyword>
<keyword>linemode</keyword>
<keyword>newline</keyword>
<keyword>nonblocking</keyword>
<keyword>platform</keyword>
<keyword>translation</keyword>
<keyword>encoding</keyword>
<keyword>filter</keyword>
<keyword>byte array</keyword>
<keyword>binary</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="fcopy" version="8.0" title="fcopy">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: fcopy.n,v 1.9 2007/01/29 16:51:38 dgp Exp $
 -->
<?TROFF.TH title="fcopy" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>fcopy</name>
<desc>Copy data from one channel to another</desc>
</namesection>
<synopsis>
<syntax>
<cmd>fcopy</cmd> <m>inchan</m> <m>outchan</m> ?<b>-size</b> <m>size</m>? ?<b>-command</b> <m>callback</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>fcopy</cmd> command copies data from one I/O channel, <i>inchan</i> to another I/O channel, <i>outchan</i>.
The <cmd>fcopy</cmd> command leverages the buffering in the Tcl I/O system to
avoid extra copies and to avoid buffering too much data in
main memory when copying large files to slow destinations like
network sockets.
</p>
<p>The <cmd>fcopy</cmd> 
command transfers data from <i>inchan</i> until end of file
or <i>size</i> bytes have been 
transferred. If no <b>-size</b> argument is given,
then the copy goes until end of file.
All the data read from <i>inchan</i> is copied to <i>outchan</i>.
Without the <b>-command</b> option, <cmd>fcopy</cmd> blocks until the copy is complete
and returns the number of bytes written to <i>outchan</i>.
</p>
<p>The <b>-command</b> argument makes <cmd>fcopy</cmd> work in the background.
In this case it returns immediately and the <i>callback</i> is invoked
later when the copy completes.
The <i>callback</i> is called with
one or two additional 
arguments that indicates how many bytes were written to <i>outchan</i>.
If an error occurred during the background copy, the second argument is the
error string associated with the error.
With a background copy,
it is not necessary to put <i>inchan</i> or <i>outchan</i> into
non-blocking mode; the <cmd>fcopy</cmd> command takes care of that automatically.
However, it is necessary to enter the event loop by using
the <cmd>vwait</cmd> command or by using Tk.
</p>
<p>You are not allowed to do other I/O operations with
<i>inchan</i> or <i>outchan</i> during a background <cmd>fcopy</cmd>.
If either <i>inchan</i> or <i>outchan</i> get closed
while the copy is in progress, the current copy is stopped
and the command callback is <i>not</i> made.
If <i>inchan</i> is closed,
then all data already queued for <i>outchan</i> is written out.
</p>
<p>Note that <i>inchan</i> can become readable during a background copy.
You should turn off any <cmd>fileevent</cmd> handlers during a background
copy so those handlers do not interfere with the copy.
Any I/O attempted by a <cmd>fileevent</cmd> handler will get a "channel busy" error.
</p>
<p><b>Fcopy</b> translates end-of-line sequences in <i>inchan</i> and <i>outchan</i>
according to the <b>-translation</b> option
for these channels.
See the manual entry for <cmd>fconfigure</cmd> for details on the
<b>-translation</b> option.
The translations mean that the number of bytes read from <i>inchan</i>
can be different than the number of bytes written to <i>outchan</i>.
Only the number of bytes written to <i>outchan</i> is reported,
either as the return value of a synchronous <cmd>fcopy</cmd> or
as the argument to the callback for an asynchronous <cmd>fcopy</cmd>.
</p>
<p><b>Fcopy</b> obeys the encodings and character translations configured
for the channels. This
means that the incoming characters are converted internally first
UTF-8 and then into the encoding of the channel <cmd>fcopy</cmd> writes
to. See the manual entry for <cmd>fconfigure</cmd> for details on the
<b>-encoding</b> and <b>-translation</b> options. No conversion is
done if both channels are
set to encoding "binary" and have matching translations. If only the
output channel is set to
encoding "binary" the system will write the internal UTF-8
representation of the incoming characters. If only the input channel
is set to encoding "binary" the system will assume that the incoming
bytes are valid UTF-8 characters and convert them according to the
output encoding. The behaviour of the system for bytes which are not
valid UTF-8 characters is undefined in this case.

</p>
</section>
<section>
<title>EXAMPLES</title>
<p>The first example transfers the contents of one channel exactly to
another. Note that when copying one file to another, it is better to
use <b>file copy</b> which also copies file metadata (e.g. the file
access permissions) where possible.
</p>
<DISPLAY>fconfigure $in -translation binary
fconfigure $out -translation binary
<cmd>fcopy</cmd> $in $out
</DISPLAY>
<p>This second example shows how the callback gets
passed the number of bytes transferred.
It also uses vwait to put the application into the event loop.
Of course, this simplified example could be done without the command 
callback.
</p>
<DISPLAY>proc Cleanup {in out bytes {error {}}} {
    global total
    set total $bytes
    close $in
    close $out
    if {[string length $error] != 0} {
	# error occurred during the copy
    }
}
set in [open $file1]
set out [socket $server $port]
<cmd>fcopy</cmd> $in $out -command [list Cleanup $in $out]
vwait total
</DISPLAY>
<p>The third example copies in chunks and tests for end of file
in the command callback
</p>
<DISPLAY>proc CopyMore {in out chunk bytes {error {}}} {
    global total done
    incr total $bytes
    if {([string length $error] != 0) || [eof $in]} {
	set done $total
	close $in
	close $out
    } else {
	<cmd>fcopy</cmd> $in $out -command [list CopyMore $in $out $chunk] \
	    -size $chunk
    }
}
set in [open $file1]
set out [socket $server $port]
set chunk 1024
set total 0
<cmd>fcopy</cmd> $in $out -command [list CopyMore $in $out $chunk] -size $chunk
vwait done
</DISPLAY>


</section>
<seealso>
<ref>eof(n)</ref>
<ref>fblocked(n)</ref>
<ref>fconfigure(n)</ref>
<ref>file(n)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>channel</keyword>
<keyword>end of line</keyword>
<keyword>end of file</keyword>
<keyword>nonblocking</keyword>
<keyword>read</keyword>
<keyword>translation</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="file" version="8.3" title="file">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: file.n,v 1.43 2007/04/05 14:08:40 dkf Exp $
 -->
<?TROFF.TH title="file" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>file</name>
<desc>Manipulate file names and attributes</desc>
</namesection>
<synopsis>
<syntax>
<cmd>file</cmd> <m>option</m> <m>name</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command provides several operations on a file's name or attributes.
<i>Name</i> is the name of a file; if it starts with a tilde, then tilde
substitution is done before executing the command (see the manual entry for
<b>filename</b> for details).  <i>Option</i> indicates what to do with the
file name.  Any unique abbreviation for <i>option</i> is acceptable.  The
valid options are:
</p>
<commandlist>
<commanddef>
<command><b>file atime</b> <m>name</m> ?<b>time</b>?</command>
<desc>Returns a decimal string giving the time at which file <i>name</i> was last
accessed.  If <i>time</i> is specified, it is an access time to set
for the file.  The time is measured in the standard POSIX fashion as
seconds from a fixed starting time (often January 1, 1970).  If the file
doesn't exist or its access time cannot be queried or set then an error is
generated.  On Windows, FAT file systems do not support access time.
</desc>
</commanddef>
<commanddef>
<command><b>file attributes</b> <m>name</m></command>
<desc/>
</commanddef>
<commanddef>
<command><b>file attributes</b> <m>name</m> ?<b>option</b>?</command>
<desc/>
</commanddef>
<commanddef>
<command><b>file attributes</b> <m>name</m> ?<b>option value option value...</b>?</command>
<desc><p>This subcommand returns or sets platform specific values associated
with a file. The first form returns a list of the platform specific
flags and their values. The second form returns the value for the
specific option. The third form sets one or more of the values. The
values are as follows:
</p><p>On Unix, <b>-group</b> gets or sets the group name for the file. A group id
can be given to the command, but it returns a group name. <b>-owner</b> gets
or sets the user name of the owner of the file. The command returns the
owner name, but the numerical id can be passed when setting the
owner. <b>-permissions</b> sets or retrieves the octal code that chmod(1)
uses.  This command does also has limited support for setting using the
symbolic attributes for chmod(1), of the form [ugo]?[[+-=][rwxst],[...]],
where multiple symbolic attributes can be separated by commas (example:
<b>u+s,go-rw</b> add sticky bit for user, remove read and write
permissions for group and other).  A simplified <b>ls</b> style string,
of the form rwxrwxrwx (must be 9 characters), is also supported
(example: <b>rwxr-xr-t</b> is equivalent to 01755).
On versions of Unix supporting file flags, <b>-readonly</b> gives the
value or sets or clears the readonly attribute of the file,
i.e. the user immutable flag <b>uchg</b> to chflags(1).
</p><p>On Windows, <b>-archive</b> gives the value or sets or clears the
archive attribute of the file. <b>-hidden</b> gives the value or sets
or clears the hidden attribute of the file. <b>-longname</b> will
expand each path element to its long version. This attribute cannot be
set. <b>-readonly</b> gives the value or sets or clears the readonly
attribute of the file. <b>-shortname</b> gives a string where every
path element is replaced with its short (8.3) version of the
name. This attribute cannot be set. <b>-system</b> gives or sets or
clears the value of the system attribute of the file.
</p><p>On Mac OS X and Darwin, <b>-creator</b> gives or sets the
Finder creator type of the file. <b>-hidden</b> gives or sets or clears
the hidden attribute of the file. <b>-readonly</b> gives or sets or
clears the readonly attribute of the file. <b>-rsrclength</b> gives
the length of the resource fork of the file, this attribute can only be
set to the value 0, which results in the resource fork being stripped
off the file.
</p></desc>
</commanddef>
<commanddef>
<command><b>file channels ?</b><m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified, returns a list of names of all
registered open channels in this interpreter.  If <i>pattern</i> is
specified, only those names matching <i>pattern</i> are returned.  Matching
is determined using the same rules as for <b>string match</b>.
</desc>
</commanddef>
<commanddef>
<command><b>file copy</b> ?<b>-force</b>? ?<b>--</b>? <m>source</m> <m>target</m></command>
<desc/>
</commanddef>
<commanddef>
<command><b>file copy</b> ?<b>-force</b>? ?<b>--</b>? <m>source</m> ?<m>source</m> ...? <m>targetDir</m></command>
<desc><p>The first form makes a copy of the file or directory <i>source</i> under
the pathname <i>target</i>. If <i>target</i> is an existing directory,
then the second form is used.  The second form makes a copy inside
<i>targetDir</i> of each <i>source</i> file listed.  If a directory is
specified as a <i>source</i>, then the contents of the directory will be
recursively copied into <i>targetDir</i>. Existing files will not be
overwritten unless the <b>-force</b> option is specified (when Tcl will
also attempt to adjust permissions on the destination file or directory
if that is necessary to allow the copy to proceed).  When copying
within a single filesystem, <i>file copy</i> will copy soft links (i.e.
the links themselves are copied, not the things they point to).  Trying
to overwrite a non-empty directory, overwrite a directory with a file,
or overwrite a file with a directory will all result in errors even if
<i>-force</i> was specified.  Arguments are processed in the order
specified, halting at the first error, if any.  A <b>--</b> marks
the end of switches; the argument following the <b>--</b> will be
treated as a <i>source</i> even if it starts with a <b>-</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>file delete</b> ?<b>-force</b>? ?<b>--</b>? <m>pathname</m> ?<m>pathname</m> ... ?</command>
<desc>Removes the file or directory specified by each <i>pathname</i>
argument.  Non-empty directories will be removed only if the
<b>-force</b> option is specified.  When operating on symbolic links,
the links themselves will be deleted, not the objects they point to.
Trying to delete a non-existent file is not considered an error.
Trying to delete a read-only file will cause the file to be deleted,
even if the <b>-force</b> flags is not specified.  If the <b>-force</b>
option is specified on a directory, Tcl will attempt both to change
permissions and move the current directory 'pwd' out of the given path
if that is necessary to allow the deletion to proceed.  Arguments are
processed in the order specified, halting at the first error, if any.
A <b>--</b> marks the end of switches; the argument following the
<b>--</b> will be treated as a <i>pathname</i> even if it starts with
a <b>-</b>.
</desc>
</commanddef>
<commanddef>
<command><b>file dirname</b> <m>name</m></command>
<desc>Returns a name comprised of all of the path components in <i>name</i>
excluding the last element.  If <i>name</i> is a relative file name and
only contains one path element, then returns ``<b>.</b>''.  If <i>name</i>
refers to a root directory, then the root directory is returned.  For
example,
<example>
<b>file dirname c:/</b>
</example><p>returns <b>c:/</b>. 
</p><p>Note that tilde substitution will only be
performed if it is necessary to complete the command. For example,
</p><example>
<b>file dirname ~/src/foo.c</b>
</example><p>returns <b>~/src</b>, whereas
</p><example>
<b>file dirname ~</b>
</example><p>returns <b>/home</b> (or something similar).
</p></desc>
</commanddef>
<commanddef>
<command><b>file executable</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> is executable by the current user,
<b>0</b> otherwise.  
</desc>
</commanddef>
<commanddef>
<command><b>file exists</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> exists and the current user has
search privileges for the directories leading to it, <b>0</b> otherwise.
</desc>
</commanddef>
<commanddef>
<command><b>file extension</b> <m>name</m></command>
<desc>Returns all of the characters in <i>name</i> after and including the last
dot in the last element of <i>name</i>.  If there is no dot in the last
element of <i>name</i> then returns the empty string.
</desc>
</commanddef>
<commanddef>
<command><b>file isdirectory</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> is a directory, <b>0</b> otherwise.
</desc>
</commanddef>
<commanddef>
<command><b>file isfile</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> is a regular file, <b>0</b> otherwise.
</desc>
</commanddef>
<commanddef>
<command><b>file join</b> <m>name</m> ?<m>name ...</m>?</command>
<desc>Takes one or more file names and combines them, using the correct path
separator for the current platform.  If a particular <i>name</i> is
relative, then it will be joined to the previous file name argument.
Otherwise, any earlier arguments will be discarded, and joining will
proceed from the current argument.  For example,
<example>
<b>file join a b /foo bar</b>
</example><p>returns <b>/foo/bar</b>.
</p><p>Note that any of the names can contain separators, and that the result
is always canonical for the current platform: <b>/</b> for Unix and
Windows.
</p></desc>
</commanddef>
<commanddef>
<command><b>file link ?</b><m>-linktype</m>? <m>linkName</m> ?<m>target</m>?</command>
<desc>If only one argument is given, that argument is assumed to be
<i>linkName</i>, and this command returns the value of the link given by
<i>linkName</i> (i.e. the name of the file it points to).  If
<i>linkName</i> isn't a link or its value cannot be read (as, for example,
seems to be the case with hard links, which look just like ordinary
files), then an error is returned.
If 2 arguments are given, then these are assumed to be <i>linkName</i>
and <i>target</i>. If <i>linkName</i> already exists, or if <i>target</i>
doesn't exist, an error will be returned.  Otherwise, Tcl creates a new
link called <i>linkName</i> which points to the existing filesystem
object at <i>target</i> (which is also the returned value), where the
type of the link is platform-specific (on Unix a symbolic link will be
the default).  This is useful for the case where the user wishes to
create a link in a cross-platform way, and doesn't care what type of
link is created.
If the user wishes to make a link of a specific type only, (and signal an
error if for some reason that is not possible), then the optional
<i>-linktype</i> argument should be given.  Accepted values for
<i>-linktype</i> are "-symbolic" and "-hard".
On Unix, symbolic links can be made to relative paths, and those paths
must be relative to the actual <i>linkName</i>'s location (not to the
cwd), but on all other platforms where relative links are not supported,
target paths will always be converted to absolute, normalized form
before the link is created (and therefore relative paths are interpreted
as relative to the cwd).  Furthermore, "~user" paths are always expanded
to absolute form.  When creating links on filesystems that either do not
support any links, or do not support the specific type requested, an
error message will be returned.  In particular Windows 95, 98 and ME do
not support any links at present, but most Unix platforms support both
symbolic and hard links (the latter for files only) and Windows
NT/2000/XP (on NTFS drives) support symbolic
directory links and hard file links.
</desc>
</commanddef>
<commanddef>
<command><b>file lstat</b> <m>name varName</m></command>
<desc>Same as <b>stat</b> option (see below) except uses the <i>lstat</i>
kernel call instead of <i>stat</i>.  This means that if <i>name</i>
refers to a symbolic link the information returned in <i>varName</i>
is for the link rather than the file it refers to.  On systems that
don't support symbolic links this option behaves exactly the same
as the <b>stat</b> option.
</desc>
</commanddef>
<commanddef>
<command><b>file mkdir</b> <m>dir</m> ?<m>dir</m> ...?</command>
<desc>Creates each directory specified.  For each pathname <i>dir</i> specified,
this command will create all non-existing parent directories as
well as <i>dir</i> itself.  If an existing directory is specified, then
no action is taken and no error is returned.  Trying to overwrite an existing
file with a directory will result in an error.  Arguments are processed in
the order specified, halting at the first error, if any.
</desc>
</commanddef>
<commanddef>
<command><b>file mtime</b> <m>name</m> ?<m>time</m>?</command>
<desc>Returns a decimal string giving the time at which file <i>name</i> was last
modified.  If <i>time</i> is specified, it is a modification time to set for
the file (equivalent to Unix <b>touch</b>).  The time is measured in the
standard POSIX fashion as seconds from a fixed starting time (often January
1, 1970).  If the file doesn't exist or its modified time cannot be queried
or set then an error is generated.
</desc>
</commanddef>
<commanddef>
<command><b>file nativename</b> <m>name</m></command>
<desc>Returns the platform-specific name of the file. This is useful if the
filename is needed to pass to a platform-specific call, such as exec
under Windows.
</desc>
</commanddef>
<commanddef>
<command><b>file normalize</b> <m>name</m></command>
<desc><p>Returns a unique normalized path representation for the file-system
object (file, directory, link, etc), whose string value can be used as a
unique identifier for it.  A normalized path is an absolute path which has
all '../', './' removed.  Also it is one which is in the ``standard''
format for the native platform.  On Unix, this means the segments
leading up to the path must be free of symbolic links/aliases (but the
very last path component may be a symbolic link), and on Windows it also
means we want the long form with that form's case-dependence (which
gives us a unique, case-dependent path).  The one exception concerning the
last link in the path is necessary, because Tcl or the user may wish to
operate on the actual symbolic link itself (for example 'file delete', 'file
rename', 'file copy' are defined to operate on symbolic links, not on the
things that they point to).
</p></desc>
</commanddef>
<commanddef>
<command><b>file owned</b> <m>name</m> </command>
<desc>Returns <b>1</b> if file <i>name</i> is owned by the current user, <b>0</b>
otherwise.
</desc>
</commanddef>
<commanddef>
<command><b>file pathtype</b> <m>name</m></command>
<desc>Returns one of <b>absolute</b>, <b>relative</b>, <b>volumerelative</b>. If
<i>name</i> refers to a specific file on a specific volume, the path type will
be <b>absolute</b>. If <i>name</i> refers to a file relative to the current
working directory, then the path type will be <b>relative</b>. If <i>name</i>
refers to a file relative to the current working directory on a specified
volume, or to a specific file on the current working volume, then the path
type is <b>volumerelative</b>.
</desc>
</commanddef>
<commanddef>
<command><b>file readable</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> is readable by the current user,
<b>0</b> otherwise. 
</desc>
</commanddef>
<commanddef>
<command><b>file readlink</b> <m>name</m></command>
<desc>Returns the value of the symbolic link given by <i>name</i> (i.e. the name
of the file it points to).  If <i>name</i> isn't a symbolic link or its
value cannot be read, then an error is returned.  On systems that don't
support symbolic links this option is undefined.
</desc>
</commanddef>
<commanddef>
<command><b>file rename</b> ?<b>-force</b>? ?<b>--</b>? <m>source</m> <m>target</m></command>
<desc/>
</commanddef>
<commanddef>
<command><b>file rename</b> ?<b>-force</b>? ?<b>--</b>? <m>source</m> ?<m>source</m> ...? <m>targetDir</m></command>
<desc><p>The first form takes the file or directory specified by pathname
<i>source</i> and renames it to <i>target</i>, moving the file if the
pathname <i>target</i> specifies a name in a different directory.  If
<i>target</i> is an existing directory, then the second form is used.
The second form moves each <i>source</i> file or directory into the
directory <i>targetDir</i>. Existing files will not be overwritten
unless the <b>-force</b> option is specified.  When operating inside a
single filesystem, Tcl will rename symbolic links rather than the
things that they point to.  Trying to overwrite a non-empty directory,
overwrite a directory with a file, or a file with a directory will all
result in errors.  Arguments are processed in the order specified,
halting at the first error, if any.  A <b>--</b> marks the end of
switches; the argument following the <b>--</b> will be treated as a
<i>source</i> even if it starts with a <b>-</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>file rootname</b> <m>name</m></command>
<desc>Returns all of the characters in <i>name</i> up to but not including the
last ``.'' character in the last component of name.  If the last
component of <i>name</i> doesn't contain a dot, then returns <i>name</i>.
</desc>
</commanddef>
<commanddef>
<command><b>file separator</b> ?<m>name</m>?</command>
<desc>If no argument is given, returns the character which is used to separate 
path segments for native files on this platform.  If a path is given,
the filesystem responsible for that path is asked to return its
separator character.  If no file system accepts <i>name</i>, an error
is generated.
</desc>
</commanddef>
<commanddef>
<command><b>file size</b> <m>name</m></command>
<desc>Returns a decimal string giving the size of file <i>name</i> in bytes.  If
the file doesn't exist or its size cannot be queried then an error is
generated.
</desc>
</commanddef>
<commanddef>
<command><b>file split</b> <m>name</m></command>
<desc>Returns a list whose elements are the path components in <i>name</i>.  The
first element of the list will have the same path type as <i>name</i>.
All other elements will be relative.  Path separators will be discarded
unless they are needed ensure that an element is unambiguously relative.
For example, under Unix
<example>
file split /foo/~bar/baz
</example><p>returns <b>/  foo  ./~bar  baz</b> to ensure that later commands
that use the third component do not attempt to perform tilde
substitution.
</p></desc>
</commanddef>
<commanddef>
<command><b>file stat</b>  <m>name varName</m></command>
<desc>Invokes the <b>stat</b> kernel call on <i>name</i>, and uses the variable
given by <i>varName</i> to hold information returned from the kernel call.
<i>VarName</i> is treated as an array variable, and the following elements
of that variable are set: <b>atime</b>, <b>ctime</b>, <b>dev</b>, <b>gid</b>,
<b>ino</b>, <b>mode</b>, <b>mtime</b>, <b>nlink</b>, <b>size</b>, <b>type</b>,
<b>uid</b>.  Each element except <b>type</b> is a decimal string with the
value of the corresponding field from the <b>stat</b> return structure;
see the manual entry for <b>stat</b> for details on the meanings of the
values.  The <b>type</b> element gives the type of the file in the same
form returned by the command <b>file type</b>.  This command returns an
empty string.
</desc>
</commanddef>
<commanddef>
<command><b>file system</b> <m>name</m></command>
<desc>Returns a list of one or two elements, the first of which is the name of
the filesystem to use for the file, and the second, if given, an
arbitrary string representing the filesystem-specific nature or type of
the location within that filesystem.  If a filesystem only supports one
type of file, the second element may not be supplied.  For example the
native files have a first element 'native', and a second element which
when given is a platform-specific type name for the file's system
(e.g. 'NTFS', 'FAT', on Windows).  A generic virtual file system might return
the list 'vfs ftp' to represent a file on a remote ftp site mounted as a
virtual filesystem through an extension called 'vfs'.  If the file does
not belong to any filesystem, an error is generated.
</desc>
</commanddef>
<commanddef>
<command><b>file tail</b> <m>name</m></command>
<desc>Returns all of the characters in the last filesystem component of
<i>name</i>.  Any trailing directory separator in <i>name</i> is ignored.
If <i>name</i> contains no separators then returns <i>name</i>.  So, 
<b>file tail a/b</b>, <b>file tail a/b/</b> and <b>file tail b</b> all
return <b>b</b>.
</desc>
</commanddef>
<commanddef>
<command><b>file type</b> <m>name</m></command>
<desc>Returns a string giving the type of file <i>name</i>, which will be one of
<cmd>file</cmd>, <b>directory</b>, <b>characterSpecial</b>, <b>blockSpecial</b>,
<b>fifo</b>, <b>link</b>, or <cmd>socket</cmd>.
</desc>
</commanddef>
<commanddef>
<command><b>file volumes</b></command>
<desc>Returns the absolute paths to the volumes mounted on the system, as a
proper Tcl list.  Without any virtual filesystems mounted as root
volumes, on UNIX, the command will always return "/", since all
filesystems are locally mounted.
On Windows, it will return a list of the available local drives
(e.g. {a:/ c:/}).  If any virtual filesystem has mounted additional
volumes, they will be in the returned list.
</desc>
</commanddef>
<commanddef>
<command><b>file writable</b> <m>name</m></command>
<desc>Returns <b>1</b> if file <i>name</i> is writable by the current user,
<b>0</b> otherwise.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<dl>
<dle>
<dt><b>Unix</b>       </dt>
<dd>These commands always operate using the real user and group identifiers,
not the effective ones. 
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLES</title>
<p>This procedure shows how to search for C files in a given directory
that have a correspondingly-named object file in the current
directory:
</p>
<example>
proc findMatchingCFiles {dir} {
   set files {}
   switch $::tcl_platform(platform) {
      windows {
         set ext .obj
      }
      unix {
         set ext .o
      }
   }
   foreach file [glob -nocomplain -directory $dir *.c] {
      set objectFile [<b>file tail</b> [<b>file rootname</b> $file]]$ext
      if {[<b>file exists</b> $objectFile]} {
         lappend files $file
      }
   }
   return $files
}
</example>
<p>Rename a file and leave a symbolic link pointing from the old location
to the new place:
</p>
<example>
set oldName foobar.txt
set newName foo/bar.txt
# Make sure that where we're going to move to exists...
if {![<b>file isdirectory</b> [<b>file dirname</b> $newName]]} {
   <b>file mkdir</b> [<b>file dirname</b> $newName]
}
<b>file rename</b> $oldName $newName
<b>file link</b> -symbolic $oldName $newName
</example>


</section>
<seealso>
<ref>chan(n)</ref>
<ref>close(n)</ref>
<ref>eof(n)</ref>
<ref>fblocked(n)</ref>
<ref>filename(n)</ref>
<ref>flush(n)</ref>
<ref>gets(n)</ref>
<ref>open(n)</ref>
<ref>seek(n)</ref>
<ref>tell(n)</ref>
</seealso>
<keywords>
<keyword>attributes</keyword>
<keyword>copy files</keyword>
<keyword>delete files</keyword>
<keyword>directory</keyword>
<keyword>file</keyword>
<keyword>move files</keyword>
<keyword>name</keyword>
<keyword>rename files</keyword>
<keyword>stat</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="fileevent" version="7.5" title="fileevent">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: fileevent.n,v 1.9 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="fileevent" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>fileevent</name>
<desc>Execute a script when a channel becomes readable or writable</desc>
</namesection>
<synopsis>
<syntax>
<cmd>fileevent</cmd> <m>channelId</m> <b>readable</b> ?<m>script</m>?

<cmd>fileevent</cmd> <m>channelId</m> <b>writable</b> ?<m>script</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is used to create <i>file event handlers</i>.  A file event
handler is a binding between a channel and a script, such that the script
is evaluated whenever the channel becomes readable or writable.  File event
handlers are most commonly used to allow data to be received from another
process on an event-driven basis, so that the receiver can continue to
interact with the user while waiting for the data to arrive.  If an
application invokes <cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">read</b> on a blocking channel when
there is no input data available, the process will block; until the input
data arrives, it will not be able to service other events, so it will
appear to the user to ``freeze up''.  With <cmd>fileevent</cmd>, the process can
tell when data is present and only invoke <cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">read</b> when
they won't block.
</p>
<p>The <i>channelId</i> argument to <cmd>fileevent</cmd> refers to an open
channel such as a Tcl standard channel (<b>stdin</b>, <b>stdout</b>,
or <b>stderr</b>), the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b>
or <cmd>socket</cmd>, or the result of a channel creation command provided
by a Tcl extension.
</p>
<p>If the <i>script</i> argument is specified, then <cmd>fileevent</cmd>
creates a new event handler:  <i>script</i> will be evaluated
whenever the channel becomes readable or writable (depending on the
second argument to <cmd>fileevent</cmd>).
In this case <cmd>fileevent</cmd> returns an empty string.
The <b>readable</b> and <b>writable</b> event handlers for a file
are independent, and may be created and deleted separately.
However, there may be at most one <b>readable</b> and one <b>writable</b>
handler for a file at a given time in a given interpreter.
If <cmd>fileevent</cmd> is called when the specified handler already
exists in the invoking interpreter, the new script replaces the old one.
</p>
<p>If the <i>script</i> argument is not specified, <cmd>fileevent</cmd>
returns the current script for <i>channelId</i>, or an empty string
if there is none.
If the <i>script</i> argument is specified as an empty string
then the event handler is deleted, so that no script will be invoked.
A file event handler is also deleted automatically whenever
its channel is closed or its interpreter is deleted.
</p>
<p>A channel is considered to be readable if there is unread data
available on the underlying device.
A channel is also considered to be readable if there is unread
data in an input buffer, except in the special case where the
most recent attempt to read from the channel was a <cmd>gets</cmd>
call that could not find a complete line in the input buffer.
This feature allows a file to be read a line at a time in nonblocking mode
using events.
A channel is also considered to be readable if an end of file or
error condition is present on the underlying file or device.
It is important for <i>script</i> to check for these conditions
and handle them appropriately;  for example, if there is no special
check for end of file, an infinite loop may occur where <i>script</i>
reads no data, returns, and is immediately invoked again.
</p>
<p>A channel is considered to be writable if at least one byte of data
can be written to the underlying file or device without blocking,
or if an error condition is present on the underlying file or device.
</p>
<p>Event-driven I/O works best for channels that have been
placed into nonblocking mode with the <cmd>fconfigure</cmd> command.
In blocking mode, a <cmd>puts</cmd> command may block if you give it
more data than the underlying file or device can accept, and a
<cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">read</b> command will block if you attempt to read
more data than is ready;  no events will be processed while the
commands block.
In nonblocking mode <cmd>puts</cmd>, <b cat="AMBIGUOUS ambiguous cmd">read</b>, and <cmd>gets</cmd> never block.
See the documentation for the individual commands for information
on how they handle blocking and nonblocking channels.
</p>
<p>The script for a file event is executed at global level (outside the
context of any Tcl procedure) in the interpreter in which the
<cmd>fileevent</cmd> command was invoked.
If an error occurs while executing the script then the
command registered with <b>interp bgerror</b> is used to report the error.
In addition, the file event handler is deleted if it ever returns
an error;  this is done in order to prevent infinite loops due to
buggy handlers.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>In this setup <b>GetData</b> will be called with the channel as an
argument whenever $chan becomes readable.
</p>
<example>
proc GetData {chan} {
    if {![eof $chan]} {
        puts [gets $chan]
    }
}

<cmd>fileevent</cmd> $chan readable [list GetData $chan]
</example>


</section>
<section>
<title>CREDITS</title>
<p><cmd>fileevent</cmd> is based on the <b>addinput</b> command created
by Mark Diekhans.

</p>
</section>
<seealso>
<ref>fconfigure(n)</ref>
<ref>gets(n)</ref>
<ref>interp(n)</ref>
<ref>puts(n)</ref>
<ref>read(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>asynchronous I/O</keyword>
<keyword>blocking</keyword>
<keyword>channel</keyword>
<keyword>event handler</keyword>
<keyword>nonblocking</keyword>
<keyword>readable</keyword>
<keyword>script</keyword>
<keyword>writable.</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="filename" version="7.5" title="filename">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: filename.n,v 1.14 2006/05/24 10:31:27 dkf Exp $
 -->
<?TROFF.TH title="filename" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>filename</name>
<desc>File name conventions supported by Tcl commands</desc>
</namesection>
<section>
<title>INTRODUCTION</title>
<p>All Tcl commands and C procedures that take file names as arguments
expect the file names to be in one of three forms, depending on the
current platform.  On each platform, Tcl supports file names in the
standard forms(s) for that platform.  In addition, on all platforms,
Tcl supports a Unix-like syntax intended to provide a convenient way
of constructing simple file names.  However, scripts that are intended
to be portable should not assume a particular form for file names.
Instead, portable scripts must use the <b>file split</b> and <b>file
join</b> commands to manipulate file names (see the <cmd>file</cmd> manual
entry for more details).

</p>
</section>
<section>
<title>PATH TYPES</title>
<p>File names are grouped into three general types based on the starting point
for the path used to specify the file: absolute, relative, and
volume-relative.  Absolute names are completely qualified, giving a path to
the file relative to a particular volume and the root directory on that
volume.  Relative names are unqualified, giving a path to the file relative 
to the current working directory.  Volume-relative names are partially
qualified, either giving the path relative to the root directory on the
current volume, or relative to the current directory of the specified
volume.  The <b>file pathtype</b> command can be used to determine the
type of a given path.

</p>
</section>
<section>
<title>PATH SYNTAX</title>
<p>The rules for native names depend on the value reported in the Tcl
array element <b>tcl_platform(platform)</b>:
</p>
<dl>
<dle>
<dt><b>unix</b></dt>
<dd>On Unix and Apple MacOS X platforms, Tcl uses path names where the
components are separated by slashes.  Path names may be relative or
absolute, and file names may contain any character other than slash.
The file names <b>.</b> and <b>..</b> are special and refer to the
current directory and the parent of the current directory respectively.
Multiple adjacent slash characters are interpreted as a single
separator.  Any number of trailing slash characters at the end of a
path are simply ignored, so the paths <b>foo</b>, <b>foo/</b> and
<b>foo//</b> are all identical, and in particular <b>foo/</b> does not
necessarily mean a directory is being referred.
</dd>
</dle>
</dl>
<p>The following examples illustrate various forms of path
names:
</p>
<dl>
<dle>
<dt><b>/</b></dt>
<dd>Absolute path to the root directory.
</dd>
</dle>
<dle>
<dt><b>/etc/passwd</b></dt>
<dd>Absolute path to the file named <b>passwd</b> in the directory
<b>etc</b> in the root directory.
</dd>
</dle>
<dle>
<dt><b>.</b></dt>
<dd>Relative path to the current directory.
</dd>
</dle>
<dle>
<dt><b>foo</b></dt>
<dd>Relative path to the file <b>foo</b> in the current directory.
</dd>
</dle>
<dle>
<dt><b>foo/bar</b></dt>
<dd>Relative path to the file <b>bar</b> in the directory <b>foo</b> in the
current directory.
</dd>
</dle>
<dle>
<dt><b>../foo</b></dt>
<dd>Relative path to the file <b>foo</b> in the directory above the current
directory. 
</dd>
</dle>
</dl>
<dl>
<dle>
<dt><b>windows</b></dt>
<dd>On Microsoft Windows platforms, Tcl supports both drive-relative and UNC
style names.  Both <b>/</b> and <b>\</b> may be used as directory separators
in either type of name.  Drive-relative names consist of an optional drive
specifier followed by an absolute or relative path.  UNC paths follow the
general form <b>\\servername\sharename\path\file</b>, but must at
the very least contain the server and share components, i.e. 
<b>\\servername\sharename</b>.  In both forms,
the file names <b>.</b> and <b>..</b> are special and refer to the current
directory and the parent of the current directory respectively.  The
following examples illustrate various forms of path names:
<dl>
<dle>
<dt><b>\\Host\share/file</b></dt>
<dd>Absolute UNC path to a file called <cmd>file</cmd> in the root directory of
the export point <b>share</b> on the host <b>Host</b>.  Note that
repeated use of <b>file dirname</b> on this path will give
<b>//Host/share</b>, and will never give just <b>//Host</b>.
</dd>
</dle>
<dle>
<dt><b>c:foo</b></dt>
<dd>Volume-relative path to a file <b>foo</b> in the current directory on drive
<b>c</b>.
</dd>
</dle>
<dle>
<dt><b>c:/foo</b></dt>
<dd>Absolute path to a file <b>foo</b> in the root directory of drive
<b>c</b>.
</dd>
</dle>
<dle>
<dt><b>foo\bar</b></dt>
<dd>Relative path to a file <b>bar</b> in the <b>foo</b> directory in the current
directory on the current volume.
</dd>
</dle>
<dle>
<dt><b>\foo</b></dt>
<dd>Volume-relative path to a file <b>foo</b> in the root directory of the current
volume.
</dd>
</dle>
<dle>
<dt><b>\\foo</b></dt>
<dd>Volume-relative path to a file <b>foo</b> in the root directory of the current
volume.  This is not a valid UNC path, so the assumption is that the
extra backslashes are superfluous.
</dd>
</dle>
</dl>
</dd>
</dle>
</dl>
</section>
<section>
<title>TILDE SUBSTITUTION</title>
<p>In addition to the file name rules described above, Tcl also supports
<i>csh</i>-style tilde substitution.  If a file name starts with a tilde,
then the file name will be interpreted as if the first element is
replaced with the location of the home directory for the given user.  If
the tilde is followed immediately by a separator, then the <b>$HOME</b>
environment variable is substituted.  Otherwise the characters between
the tilde and the next separator are taken as a user name, which is used
to retrieve the user's home directory for substitution.  This works on
Unix, MacOS X and Windows (except very old releases).
</p>
<p>Old Windows platforms do not support tilde substitution when a user name
follows the tilde.  On these platforms, attempts to use a tilde followed
by a user name will generate an error that the user does not exist when
Tcl attempts to interpret that part of the path or otherwise access the
file.  The behaviour of these paths when not trying to interpret them is
the same as on Unix.  File names that have a tilde without a user name
will be correctly substituted using the <b>$HOME</b> environment
variable, just like for Unix.

</p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<p>Not all file systems are case sensitive, so scripts should avoid code
that depends on the case of characters in a file name.  In addition,
the character sets allowed on different devices may differ, so scripts
should choose file names that do not contain special characters like:
<b>&lt;&gt;:?"/\|</b>.  The safest approach is to use names consisting of
alphanumeric characters only.  Care should be taken with filenames
which contain spaces (common on Windows systems) and
filenames where the backslash is the directory separator (Windows
native path names).  Also Windows 3.1 only supports file
names with a root of no more than 8 characters and an extension of no
more than 3 characters.
</p>
<p>On Windows platforms there are file and path length restrictions. 
Complete paths or filenames longer than about 260 characters will lead
to errors in most file operations.
</p>
<p>Another Windows peculiarity is that any number of trailing dots '.'  in
filenames are totally ignored, so, for example, attempts to create a
file or directory with a name "foo." will result in the creation of a
file/directory with name "foo".  This fact is reflected in the
results of 'file normalize'.  Furthermore, a file name consisting only
of dots '.........' or dots with trailing characters '.....abc' is
illegal.
</p>
</section>
<seealso>
<ref>file(n)</ref>
<ref>glob(n)</ref>
</seealso>
<keywords>
<keyword>current directory</keyword>
<keyword>absolute file name</keyword>
<keyword>relative file name</keyword>
<keyword>volume-relative file name</keyword>
<keyword>portability</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="FileSystem" version="8.4" title="Filesystem">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 Vincent Darley
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: FileSystem.3,v 1.57 2006/10/18 18:46:59 dgp Exp $
 -->
<?TROFF.TH title="Filesystem" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_FSRegister</name>
<name>Tcl_FSUnregister</name>
<name>Tcl_FSData</name>
<name>Tcl_FSMountsChanged</name>
<name>Tcl_FSGetFileSystemForPath</name>
<name>Tcl_FSGetPathType</name>
<name>Tcl_FSCopyFile</name>
<name>Tcl_FSCopyDirectory</name>
<name>Tcl_FSCreateDirectory</name>
<name>Tcl_FSDeleteFile</name>
<name>Tcl_FSRemoveDirectory</name>
<name>Tcl_FSRenameFile</name>
<name>Tcl_FSListVolumes</name>
<name>Tcl_FSEvalFile</name>
<name>Tcl_FSEvalFileEx</name>
<name>Tcl_FSLoadFile</name>
<name>Tcl_FSMatchInDirectory</name>
<name>Tcl_FSLink</name>
<name>Tcl_FSLstat</name>
<name>Tcl_FSUtime</name>
<name>Tcl_FSFileAttrsGet</name>
<name>Tcl_FSFileAttrsSet</name>
<name>Tcl_FSFileAttrStrings</name>
<name>Tcl_FSStat</name>
<name>Tcl_FSAccess</name>
<name>Tcl_FSOpenFileChannel</name>
<name>Tcl_FSGetCwd</name>
<name>Tcl_FSChdir</name>
<name>Tcl_FSPathSeparator</name>
<name>Tcl_FSJoinPath</name>
<name>Tcl_FSSplitPath</name>
<name>Tcl_FSEqualPaths</name>
<name>Tcl_FSGetNormalizedPath</name>
<name>Tcl_FSJoinToPath</name>
<name>Tcl_FSConvertToPathType</name>
<name>Tcl_FSGetInternalRep</name>
<name>Tcl_FSGetTranslatedPath</name>
<name>Tcl_FSGetTranslatedStringPath</name>
<name>Tcl_FSNewNativePath</name>
<name>Tcl_FSGetNativePath</name>
<name>Tcl_FSFileSystemInfo</name>
<name>Tcl_AllocStatBuf</name>
<desc>procedures to interact with any filesystem</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_FSRegister</fun>(<m>clientData</m>, <m>fsPtr</m>)

int
<fun>Tcl_FSUnregister</fun>(<m>fsPtr</m>)

ClientData
<fun>Tcl_FSData</fun>(<m>fsPtr</m>)

void
<fun>Tcl_FSMountsChanged</fun>(<m>fsPtr</m>)

Tcl_Filesystem*
<fun>Tcl_FSGetFileSystemForPath</fun>(<m>pathPtr</m>)

Tcl_PathType
<fun>Tcl_FSGetPathType</fun>(<m>pathPtr</m>)

int
<fun>Tcl_FSCopyFile</fun>(<m>srcPathPtr</m>, <m>destPathPtr</m>)

int
<fun>Tcl_FSCopyDirectory</fun>(<m>srcPathPtr</m>, <m>destPathPtr</m>, <m>errorPtr</m>)

int
<fun>Tcl_FSCreateDirectory</fun>(<m>pathPtr</m>)

int
<fun>Tcl_FSDeleteFile</fun>(<m>pathPtr</m>)

int
<fun>Tcl_FSRemoveDirectory</fun>(<m>pathPtr</m>, <m>int recursive</m>, <m>errorPtr</m>)

int
<fun>Tcl_FSRenameFile</fun>(<m>srcPathPtr</m>, <m>destPathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSListVolumes</fun>(<m>void</m>)

<new version="8.5">int
<fun>Tcl_FSEvalFileEx</fun>(<m>interp</m>, <m>pathPtr</m>, <m>encodingName</m>)
</new>
int
<fun>Tcl_FSEvalFile</fun>(<m>interp</m>, <m>pathPtr</m>)

int
<fun>Tcl_FSLoadFile</fun>(<m>interp</m>, <m>pathPtr</m>, <m>sym1</m>, <m>sym2</m>, <m>proc1Ptr</m>, <m>proc2Ptr</m>, <m>handlePtr</m>, <m>unloadProcPtr</m>)

int
<fun>Tcl_FSMatchInDirectory</fun>(<m>interp</m>, <m>resultPtr</m>, <m>pathPtr</m>, <m>pattern</m>, <m>types</m>)

Tcl_Obj*
<fun>Tcl_FSLink</fun>(<m>linkNamePtr</m>, <m>toPtr</m>, <m>linkAction</m>)

int
<fun>Tcl_FSLstat</fun>(<m>pathPtr</m>, <m>statPtr</m>)

int
<fun>Tcl_FSUtime</fun>(<m>pathPtr</m>, <m>tval</m>)

int
<fun>Tcl_FSFileAttrsGet</fun>(<m>interp</m>, <m>int index</m>, <m>pathPtr</m>, <m>objPtrRef</m>)

int
<fun>Tcl_FSFileAttrsSet</fun>(<m>interp</m>, <m>int index</m>, <m>pathPtr</m>, <m>Tcl_Obj *objPtr</m>)

const char**
<fun>Tcl_FSFileAttrStrings</fun>(<m>pathPtr</m>, <m>objPtrRef</m>)

int
<fun>Tcl_FSStat</fun>(<m>pathPtr</m>, <m>statPtr</m>)

int
<fun>Tcl_FSAccess</fun>(<m>pathPtr</m>, <m>mode</m>)

Tcl_Channel
<fun>Tcl_FSOpenFileChannel</fun>(<m>interp</m>, <m>pathPtr</m>, <m>modeString</m>, <m>permissions</m>)

Tcl_Obj*
<fun>Tcl_FSGetCwd</fun>(<m>interp</m>)

int
<fun>Tcl_FSChdir</fun>(<m>pathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSPathSeparator</fun>(<m>pathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSJoinPath</fun>(<m>listObj</m>, <m>elements</m>)

Tcl_Obj*
<fun>Tcl_FSSplitPath</fun>(<m>pathPtr</m>, <m>lenPtr</m>)

int
<fun>Tcl_FSEqualPaths</fun>(<m>firstPtr</m>, <m>secondPtr</m>)

Tcl_Obj*
<fun>Tcl_FSGetNormalizedPath</fun>(<m>interp</m>, <m>pathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSJoinToPath</fun>(<m>basePtr</m>, <m>objc</m>, <m>objv</m>)

int
<fun>Tcl_FSConvertToPathType</fun>(<m>interp</m>, <m>pathPtr</m>)

ClientData
<fun>Tcl_FSGetInternalRep</fun>(<m>pathPtr</m>, <m>fsPtr</m>)

Tcl_Obj *
<fun>Tcl_FSGetTranslatedPath</fun>(<m>interp</m>, <m>pathPtr</m>)

const char *
<fun>Tcl_FSGetTranslatedStringPath</fun>(<m>interp</m>, <m>pathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSNewNativePath</fun>(<m>fsPtr</m>, <m>clientData</m>)

const char *
<fun>Tcl_FSGetNativePath</fun>(<m>pathPtr</m>)

Tcl_Obj*
<fun>Tcl_FSFileSystemInfo</fun>(<m>pathPtr</m>)

Tcl_StatBuf*
<fun>Tcl_AllocStatBuf</fun>()
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Filesystem</argtype>
<name name="fsPtr">*fsPtr</name>
<argmode>in</argmode>
<desc>Points to a structure containing the addresses of procedures that
can be called to perform the various filesystem operations.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="pathPtr">*pathPtr</name>
<argmode>in</argmode>
<desc>The path represented by this object is used for the operation in
question.  If the object does not already have an internal <b>path</b>
representation, it will be converted to have one.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="srcPathPtr">*srcPathPtr</name>
<argmode>in</argmode>
<desc>As for <i>pathPtr</i>, but used for the source file for a copy or
rename operation.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="destPathPtr">*destPathPtr</name>
<argmode>in</argmode>
<desc>As for <i>pathPtr</i>, but used for the destination filename for a copy or
rename operation.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="encodingName">*encodingName</name>
<argmode>in</argmode>
<desc>The encoding of the data stored in the
file identified by <i>pathPtr</i> and to be evaluted.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>Only files or directories matching this pattern will be returned.
</desc>
</argdef>
<argdef>
<argtype>Tcl_GlobTypeData</argtype>
<name name="types">*types</name>
<argmode>in</argmode>
<desc>Only files or directories matching the type descriptions contained in
this structure will be returned.  This parameter may be NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use either for results, evaluation, or reporting error
messages.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>The native description of the path object to create.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="firstPtr">*firstPtr</name>
<argmode>in</argmode>
<desc>The first of two path objects to compare.  The object may be converted
to <b>path</b> type.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="secondPtr">*secondPtr</name>
<argmode>in</argmode>
<desc>The second of two path objects to compare.  The object may be converted
to <b>path</b> type.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="listObj">*listObj</name>
<argmode>in</argmode>
<desc>The list of path elements to operate on with a <b cat="AMBIGUOUS ambiguous cmd">join</b> operation.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>elements</name>
<argmode>in</argmode>
<desc>If non-negative, the number of elements in the <i>listObj</i> which should
be joined together.  If negative, then all elements are joined.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="errorPtr">**errorPtr</name>
<argmode>out</argmode>
<desc>In the case of an error, filled with an object containing the name of
the file which caused an error in the various copy/rename operations.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtrRef">**objPtrRef</name>
<argmode>out</argmode>
<desc>Filled with an object containing the result of the operation.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="resultPtr">*resultPtr</name>
<argmode>out</argmode>
<desc>Pre-allocated object in which to store (using
<fun>Tcl_ListObjAppendElement</fun>) the list of
files or directories which are successfully matched.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mode</name>
<argmode>in</argmode>
<desc>Mask consisting of one or more of R_OK, W_OK, X_OK and F_OK.  R_OK,
W_OK and X_OK request checking whether the file exists and  has  read,
write and  execute  permissions, respectively.  F_OK just requests
checking for the existence of the file.
</desc>
</argdef>
<argdef>
<argtype>Tcl_StatBuf</argtype>
<name name="statPtr">*statPtr</name>
<argmode>out</argmode>
<desc>The structure that contains the result of a stat or lstat operation.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="sym1">*sym1</name>
<argmode>in</argmode>
<desc>Name of a procedure to look up in the file's symbol table
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="sym2">*sym2</name>
<argmode>in</argmode>
<desc>Name of a procedure to look up in the file's symbol table
</desc>
</argdef>
<argdef>
<argtype>Tcl_PackageInitProc</argtype>
<name name="proc1Ptr">**proc1Ptr</name>
<argmode>out</argmode>
<desc>Filled with the init function for this code.
</desc>
</argdef>
<argdef>
<argtype>Tcl_PackageInitProc</argtype>
<name name="proc2Ptr">**proc2Ptr</name>
<argmode>out</argmode>
<desc>Filled with the safe-init function for this code.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="clientDataPtr">*clientDataPtr</name>
<argmode>out</argmode>
<desc>Filled with the clientData value to pass to this code's unload
function when it is called.
</desc>
</argdef>
<argdef>
<argtype>Tcl_LoadHandle</argtype>
<name name="handlePtr">*handlePtr</name>
<argmode>out</argmode>
<desc>Filled with an abstract token representing the loaded file.
</desc>
</argdef>
<argdef>
<argtype>Tcl_FSUnloadFileProc</argtype>
<name name="unloadProcPtr">**unloadProcPtr</name>
<argmode>out</argmode>
<desc>Filled with the function to use to unload this piece of code.
</desc>
</argdef>
<argdef>
<argtype>utimbuf</argtype>
<name name="tval">*tval</name>
<argmode>in</argmode>
<desc>The access and modification times in this structure are read and
used to set those values for a given file.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="modeString">*modeString</name>
<argmode>in</argmode>
<desc>Specifies how the file is to be accessed.  May have any of the values
allowed for the <i>mode</i> argument to the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b> command.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>permissions</name>
<argmode>in</argmode>
<desc>POSIX-style permission flags such as 0644.  If a new file is created, these
permissions will be set on the created file.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="lenPtr">*lenPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, filled with the number of elements in the split path.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="basePtr">*basePtr</name>
<argmode>in</argmode>
<desc>The base path on to which to join the given elements.  May be NULL.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>The number of elements in <i>objv</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *const</argtype>
<name name="objv">objv[]</name>
<argmode>in</argmode>
<desc>The elements to join to the given base path.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="linkNamePtr">*linkNamePtr</name>
<argmode>in</argmode>
<desc>The name of the link to be created or read.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="toPtr">*toPtr</name>
<argmode>in</argmode>
<desc>What the link called <i>linkNamePtr</i> should be linked to, or NULL if
the symbolic link specified by <i>linkNamePtr</i> is to be read.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>linkAction</name>
<argmode>in</argmode>
<desc>OR-ed combination of flags indicating what kind of link should be
created (will be ignored if <i>toPtr</i> is NULL). Valid bits to set
are <b>TCL_CREATE_SYMBOLIC_LINK</b> and <b>TCL_CREATE_HARD_LINK</b>.
When both flags are set and the underlying filesystem can do either,
symbolic links are preferred.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>There are several reasons for calling the <b>Tcl_FS</b> API functions
(e.g. <fun>Tcl_FSAccess</fun> and <fun>Tcl_FSStat</fun>)
rather than calling system level functions like <b>access</b> and
<b>stat</b> directly.  First, they will work cross-platform, so an
extension which calls them should work unmodified on Unix and
Windows.  Second, the Windows implementation of some of these functions
fixes some bugs in the system level calls.  Third, these function calls
deal with any 'Utf to platform-native' path conversions which may be
required (and may cache the results of such conversions for greater
efficiency on subsequent calls).  Fourth, and perhaps most importantly,
all of these functions are 'virtual filesystem aware'.  Any virtual
filesystem (VFS for short) which has been registered (through
<fun>Tcl_FSRegister</fun>) may reroute file access to alternative
media or access methods.  This means that all of these functions (and
therefore the corresponding <cmd>file</cmd>, <cmd>glob</cmd>, <cmd>pwd</cmd>, <cmd>cd</cmd>,
<b cat="AMBIGUOUS ambiguous cmd">open</b>, etc.  Tcl commands) may be operate on 'files' which are not
native files in the native filesystem.  This also means that any Tcl
extension which accesses the filesystem (FS for short) through this API is
automatically 'virtual filesystem aware'.  Of course, if an extension
accesses the native filesystem directly (through platform-specific
APIs, for example), then Tcl cannot intercept such calls.
</p>
<p>If appropriate VFSes have been registered, the 'files' may, to give two
examples, be remote (e.g. situated on a remote ftp server) or archived
(e.g. lying inside a .zip archive).  Such registered filesystems provide
a lookup table of functions to implement all or some of the functionality
listed here.  Finally, the <fun>Tcl_FSStat</fun> and <fun>Tcl_FSLstat</fun> calls
abstract away from what the 'struct stat' buffer is actually
declared to be, allowing the same code to be used both on systems with
and systems without support for files larger than 2GB in size.
</p>
<p>The <b>Tcl_FS</b> API is objectified and may cache internal
representations and other path-related strings (e.g. the current working
directory).  One side-effect of this is that one must not pass in objects
with a reference count of zero to any of these functions.  If such calls were
handled, they might result
in memory leaks (under some circumstances, the filesystem code may wish
to retain a reference to the passed in object, and so one must not assume
that after any of these calls return, the object still has a reference count of
zero - it may have been incremented) or in a direct segmentation fault
(or other memory access error)
due to the object being freed part way through the complex object
manipulation required to ensure that the path is fully normalized and
absolute for filesystem determination.  The practical lesson to learn
from this is that
</p>
<example>
Tcl_Obj *path = Tcl_NewStringObj(...);
Tcl_FS<i>Whatever</i>(path);
Tcl_DecrRefCount(path);
</example>
<p>is wrong, and may cause memory errors. The <i>path</i> must have its
reference count incremented before passing it in, or
decrementing it.  For this reason, objects with a reference count of zero are
considered not to be valid filesystem paths and calling any Tcl_FS API
function with such an object will result in no action being taken.
</p>
<subsection>
<title>FS API FUNCTIONS</title>
<p><fun>Tcl_FSCopyFile</fun> attempts to copy the file given by <i>srcPathPtr</i> to the
path name given by <i>destPathPtr</i>.  If the two paths given lie in the same
filesystem (according to <fun>Tcl_FSGetFileSystemForPath</fun>) then that
filesystem's 'copy file' function is called (if it is non-NULL).
Otherwise the function returns -1 and sets the <b>errno</b> global C
variable to the 'EXDEV'
POSIX error code (which signifies a 'cross-domain link').
</p>
<p><fun>Tcl_FSCopyDirectory</fun> attempts to copy the directory given by <i>srcPathPtr</i> to the
path name given by <i>destPathPtr</i>.  If the two paths given lie in the same
filesystem (according to <fun>Tcl_FSGetFileSystemForPath</fun>) then that
filesystem's 'copy file' function is called (if it is non-NULL).
Otherwise the function returns -1 and sets the <b>errno</b> global C
variable to the 'EXDEV'
POSIX error code (which signifies a 'cross-domain link').
</p>
<p><fun>Tcl_FSCreateDirectory</fun> attempts to create the directory given by
<i>pathPtr</i> by calling the owning filesystem's 'create directory'
function.
</p>
<p><fun>Tcl_FSDeleteFile</fun> attempts to delete the file given by
<i>pathPtr</i> by calling the owning filesystem's 'delete file'
function.
</p>
<p><fun>Tcl_FSRemoveDirectory</fun> attempts to remove the directory given by
<i>pathPtr</i> by calling the owning filesystem's 'remove directory'
function.
</p>
<p><fun>Tcl_FSRenameFile</fun> attempts to rename the file or directory given by
<i>srcPathPtr</i> to the path name given by <i>destPathPtr</i>.  If the two paths
given lie in the same filesystem (according to
<fun>Tcl_FSGetFileSystemForPath</fun>) then that filesystem's 'rename file'
function is called (if it is non-NULL).  Otherwise the function returns -1
and sets the <b>errno</b> global C variable to the 'EXDEV' POSIX error
code (which signifies a 'cross-domain link').
</p>
<p><fun>Tcl_FSListVolumes</fun> calls each filesystem which has a non-NULL 'list
volumes' function and asks them to return their list of root volumes.  It
accumulates the return values in a list which is returned to the
caller (with a reference count of 0).
</p>
<p><new version="8.5"><fun>Tcl_FSEvalFileEx</fun> reads the file given by <i>pathPtr</i> using
the encoding identified by <i>encodingName</i> and evaluates
its contents as a Tcl script.  It returns the same information as
<fun>Tcl_EvalObjEx</fun>.
If <i>encodingName</i> is NULL, the system encoding is used for
reading the file contents.
If the file couldn't be read then a Tcl error is returned to describe
why the file couldn't be read.
The eofchar for files is '\32' (^Z) for all platforms.
If you require a ``^Z'' in code for string comparison, you can use
``\032'' or ``\u001a'', which will be safely substituted by the Tcl
interpreter into ``^Z''.
<fun>Tcl_FSEvalFile</fun> is a simpler version of
<fun>Tcl_FSEvalFileEx</fun> that always uses the system encoding
when reading the file.
</new></p>
<p><fun>Tcl_FSLoadFile</fun> dynamically loads a binary code file into memory and
returns the addresses of two procedures within that file, if they are
defined.  The appropriate function for the filesystem to which <i>pathPtr</i>
belongs will be called.  If that filesystem does not implement this
function (most virtual filesystems will not, because of OS limitations
in dynamically loading binary code), Tcl will attempt to copy the file
to a temporary directory and load that temporary file.
</p>
<p>Returns a standard Tcl completion code.  If an error occurs, an error
message is left in the <i>interp</i>'s result.
</p>
<p><fun>Tcl_FSMatchInDirectory</fun> is used by the globbing code to search a
directory for all files which match a given pattern.  The appropriate
function for the filesystem to which <i>pathPtr</i> belongs will be called.
</p>
<p>The return value is a standard Tcl result indicating whether an error
occurred in globbing.  Error messages are placed in interp (unless 
interp is NULL, which is allowed), but good results are placed in the 
resultPtr given.
</p>
<p>Note that the <cmd>glob</cmd> code implements recursive patterns internally, so
this function will only ever be passed simple patterns, which can be
matched using the logic of <b>string match</b>.  To handle recursion, Tcl
will call this function frequently asking only for directories to be
returned.  A special case of being called with a NULL pattern indicates
that the path needs to be checked only for the correct type.
</p>
<p><fun>Tcl_FSLink</fun> replaces the library version of <b>readlink</b>, and
extends it to support the creation of links.  The appropriate function
for the filesystem to which <i>linkNamePtr</i> belongs will be called.
</p>
<p>If the <i>toPtr</i> is NULL, a 'read link' action is performed.  The result
is a Tcl_Obj specifying the contents of the symbolic link given by
<i>linkNamePtr</i>, or NULL if the link could not be read.  The result is owned
by the caller, which should call Tcl_DecrRefCount when the result is no
longer needed.  If the <i>toPtr</i> is not NULL, Tcl should create a link
of one of the types passed in in the <i>linkAction</i> flag.  This flag is
an ORed combination of <b>TCL_CREATE_SYMBOLIC_LINK</b> and <b>TCL_CREATE_HARD_LINK</b>.
Where a choice exists (i.e. more than one flag is passed in), the Tcl
convention is to prefer symbolic links.  When a link is successfully
created, the return value should be <i>toPtr</i> (which is therefore
already owned by the caller).  If unsuccessful, NULL is returned.
</p>
<p><fun>Tcl_FSLstat</fun> fills the stat structure <i>statPtr</i> with information
about the specified file.  You do not need any access rights to the
file to get this information but you need search rights to all
directories named in the path leading to the file.  The stat structure
includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
</p>
<p>If <i>path</i> exists, <fun>Tcl_FSLstat</fun> returns 0 and the stat structure
is filled with data.  Otherwise, -1 is returned, and no stat info is
given.
</p>
<p><fun>Tcl_FSUtime</fun> replaces the library version of utime.
</p>
<p>This returns 0 on success and -1 on error (as per the <b>utime</b>
documentation).  If successful, the function
will update the 'atime' and 'mtime' values of the file given.
</p>
<p><fun>Tcl_FSFileAttrsGet</fun> implements read access for the hookable <b>file
attributes</b> subcommand.  The appropriate function for the filesystem to
which <i>pathPtr</i> belongs will be called.
</p>
<p>If the result is <b>TCL_OK</b>, then an object was placed in
<i>objPtrRef</i>, which
will only be temporarily valid (unless <fun>Tcl_IncrRefCount</fun> is called).
</p>
<p><fun>Tcl_FSFileAttrsSet</fun> implements write access for the hookable <b>file
attributes</b> subcommand.  The appropriate function for the filesystem to
which <i>pathPtr</i> belongs will be called.
</p>
<p><fun>Tcl_FSFileAttrStrings</fun> implements part of the hookable <b>file
attributes</b> subcommand.  The appropriate function for the filesystem
to which <i>pathPtr</i> belongs will be called.
</p>
<p>The called procedure may either return an array of strings, or may
instead return NULL and place a Tcl list into the given <i>objPtrRef</i>.  Tcl
will take that list and first increment its reference count before using it.
On completion of that use, Tcl will decrement its reference count.  Hence if
the list should be disposed of by Tcl when done, it should have a
reference count of zero, and if the list should not be disposed of, the
filesystem should ensure it retains a reference count to the object.
</p>
<p><fun>Tcl_FSAccess</fun> checks whether the process would be allowed to read,
write or test for existence of the file (or other filesystem object)
whose name is <i>pathname</i>.   If <i>pathname</i> is a symbolic link on Unix,
then permissions of the file referred by this symbolic link are
tested.
</p>
<p>On success (all requested permissions granted), zero is returned.  On
error (at least one bit in mode asked for a permission that is denied,
or some other error occurred), -1 is returned.
</p>
<p><fun>Tcl_FSStat</fun> fills the stat structure <i>statPtr</i> with information
about the specified file.  You do not need any access rights to the
file to get this information but you need search rights to all
directories named in the path leading to the file.  The stat structure
includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
</p>
<p>If <i>path</i> exists, <fun>Tcl_FSStat</fun> returns 0 and the stat structure
is filled with data.  Otherwise, -1 is returned, and no stat info is
given.
</p>
<p><fun>Tcl_FSOpenFileChannel</fun> opens a file specified by <i>pathPtr</i> and
returns a channel handle that can be used to perform input and output on
the file. This API is modeled after the <b>fopen</b> procedure of
the Unix standard I/O library.
The syntax and meaning of all arguments is similar to those
given in the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b> command when opening a file.
If an error occurs while opening the channel, <fun>Tcl_FSOpenFileChannel</fun>
returns NULL and records a POSIX error code that can be
retrieved with <fun>Tcl_GetErrno</fun>.
In addition, if <i>interp</i> is non-NULL, <fun>Tcl_FSOpenFileChannel</fun>
leaves an error message in <i>interp</i>'s result after any error.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>, described below.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.
</p>
<p><fun>Tcl_FSGetCwd</fun> replaces the library version of <b>getcwd</b>.
</p>
<p>It returns the Tcl library's current working directory.  This may be
different to the native platform's working directory, which happens when
the current working directory is not in the native filesystem.
</p>
<p>The result is a pointer to a Tcl_Obj specifying the current directory,
or NULL if the current directory could not be determined.  If NULL is
returned, an error message is left in the <i>interp</i>'s result.
</p>
<p>The result already has its reference count incremented for the caller.  When
it is no longer needed, that reference count should be decremented.  This is
needed for thread-safety purposes, to allow multiple threads to access
this and related functions, while ensuring the results are always
valid.
</p>
<p><fun>Tcl_FSChdir</fun> replaces the library version of <b>chdir</b>.  The path is
normalized and then passed to the filesystem which claims it.  If that
filesystem does not implement this function, Tcl will fallback to a
combination of <b>stat</b> and <b>access</b> to check whether the directory
exists and has appropriate permissions.
</p>
<p>For results, see <b>chdir</b> documentation.  If successful, we keep a
record of the successful path in <i>cwdPathPtr</i> for subsequent calls to
<fun>Tcl_FSGetCwd</fun>.
</p>
<p><fun>Tcl_FSPathSeparator</fun> returns the separator character to be used for
most specific element of the path specified by <i>pathPtr</i> (i.e. the last
part of the path).
</p>
<p>The separator is returned as a Tcl_Obj containing a string of length
1.  If the path is invalid, NULL is returned.
</p>
<p><fun>Tcl_FSJoinPath</fun> takes the given Tcl_Obj, which must be a valid
list (which is allowed to have a reference count of zero), and returns the path
object given by considering the first <i>elements</i> elements as valid path
segments (each path segment may be a complete path, a partial path or
just a single possible directory or file name).  If any path segment is
actually an absolute path, then all prior path segments are discarded.
If <i>elements</i> is less than 0, we use the entire list.
</p>
<p>It is possible that the returned object is actually an element
of the given list, so the caller should be careful to increment the
reference count of the result before freeing the list.
</p>
<p>The returned object, typically with a reference count of zero (but it
could be shared
under some conditions), contains the joined path.  The caller must
add a reference count to the object before using it.  In particular, the
returned object could be an element of the given list, so freeing the
list might free the object prematurely if no reference count has been taken.
If the number of elements is zero, then the returned object will be
an empty-string Tcl_Obj.
</p>
<p><fun>Tcl_FSSplitPath</fun> takes the given Tcl_Obj, which should be a valid path,
and returns a Tcl list object containing each segment of that path as
an element.
It returns a list object with a reference count of zero.  If the
passed in <i>lenPtr</i> is non-NULL, the variable it points to will be
updated to contain the number of elements in the returned list.
</p>
<p><fun>Tcl_FSEqualPaths</fun> tests whether the two paths given represent the same
filesystem object
</p>
<p>It returns 1 if the paths are equal, and 0 if they are different.  If
either path is NULL, 0 is always returned.
</p>
<p><fun>Tcl_FSGetNormalizedPath</fun> this important function attempts to extract
from the given Tcl_Obj a unique normalized path representation, whose
string value can be used as a unique identifier for the file.
</p>
<p>It returns the normalized path object, owned by Tcl, or NULL if the path
was invalid or could otherwise not be successfully converted.
Extraction of absolute, normalized paths is very efficient (because the
filesystem operates on these representations internally), although the
result when the filesystem contains numerous symbolic links may not be
the most user-friendly version of a path.  The return value is owned by
Tcl and has a lifetime equivalent to that of the <i>pathPtr</i> passed in
(unless that is a relative path, in which case the normalized path
object may be freed any time the cwd changes) - the caller can of
course increment the refCount if it wishes to maintain a copy for longer.
</p>
<p><fun>Tcl_FSJoinToPath</fun> takes the given object, which should usually be a
valid path or NULL, and joins onto it the array of paths segments
given.
</p>
<p>Returns object, typically with refCount of zero (but it could be shared
under some conditions), containing the joined path.  The caller must
add a refCount to the object before using it.  If any of the objects
passed into this function (pathPtr or path elements) have a refCount
of zero, they will be freed when this function returns.
</p>
<p><fun>Tcl_FSConvertToPathType</fun> tries to convert the given Tcl_Obj to a valid
Tcl path type, taking account of the fact that the cwd may have changed
even if this object is already supposedly of the correct type.
The filename may begin with "~" (to indicate current user's home
directory) or "~&lt;user&gt;" (to indicate any user's home directory).
</p>
<p>If the conversion succeeds (i.e. the object is a valid path in one of
the current filesystems), then <b>TCL_OK</b> is returned.  Otherwise
<b>TCL_ERROR</b> is returned, and an error message may
be left in the interpreter.
</p>
<p><fun>Tcl_FSGetInternalRep</fun> extracts the internal representation of a given
path object, in the given filesystem.  If the path object belongs to a
different filesystem, we return NULL. If the internal representation is
currently NULL, we attempt to generate it, by calling the filesystem's
<type>Tcl_FSCreateInternalRepProc</type>.
</p>
<p>Returns NULL or a valid internal path representation.  This internal
representation is cached, so that repeated calls to this function will
not require additional conversions.
</p>
<p><fun>Tcl_FSGetTranslatedPath</fun> attempts to extract the translated path
from the given Tcl_Obj.
</p>
<p>If the translation succeeds (i.e. the object is a valid path), then it is
returned.  Otherwise NULL will be returned, and an error message may be
left in the interpreter.  A "translated" path is one which contains no
"~" or "~user" sequences (these have been expanded to their current
representation in the filesystem).  The object returned is owned by the
caller, which must store it or call Tcl_DecrRefCount to ensure memory is
freed.  This function is of little practical use, and
<fun>Tcl_FSGetNormalizedPath</fun> or <b>Tcl_GetNativePath</b> are usually
better functions to use for most purposes.
</p>
<p><fun>Tcl_FSGetTranslatedStringPath</fun> does the same as
<fun>Tcl_FSGetTranslatedPath</fun>, but returns a character string or NULL.
The string returned is dynamically allocated and owned by the caller,
which must store it or call <fun>ckfree</fun> to ensure it is freed.  Again,
<fun>Tcl_FSGetNormalizedPath</fun> or <b>Tcl_GetNativePath</b> are usually
better functions to use for most purposes.
</p>
<p><fun>Tcl_FSNewNativePath</fun> performs something like the reverse of the
usual obj-&gt;path-&gt;nativerep conversions.  If some code retrieves a path
in native form (from, e.g. <b>readlink</b> or a native dialog), and that path
is to be used at the Tcl level, then calling this function is an
efficient way of creating the appropriate path object type.
</p>
<p>The resulting object is a pure 'path' object, which will only receive
a Utf-8 string representation if that is required by some Tcl code.
</p>
<p><fun>Tcl_FSGetNativePath</fun> is for use by the Win/Unix native
filesystems, so that they can easily retrieve the native (char* or
TCHAR*) representation of a path.  This function is a convenience
wrapper around <fun>Tcl_FSGetInternalRep</fun>, and assumes the native
representation is string-based.  It may be desirable in the future to
have non-string-based native representations (for example, on MacOSX, a
representation using a fileSpec of FSRef structure would probably be
more efficient).  On Windows a full Unicode representation would allow
for paths of unlimited length.  Currently the representation is simply a
character string which may contain either the relative path or a
complete, absolute normalized path in the native encoding (complex
conditions dictate which of these will be provided, so neither can be
relied upon, unless the path is known to be absolute).  If you need a
native path which must be absolute, then you should ask for the native
version of a normalized path.  If for some reason a non-absolute,
non-normalized version of the path is needed, that must be constructed
separately (e.g. using <fun>Tcl_FSGetTranslatedPath</fun>).
</p>
<p>The native representation is cached so that repeated calls to this
function will not require additional conversions.  The return value is
owned by Tcl and has a lifetime equivalent to that of the <i>pathPtr</i>
passed in (unless that is a relative path, in which case the native
representation may be freed any time the cwd changes).
</p>
<p><fun>Tcl_FSFileSystemInfo</fun> returns a list of two elements.  The first
element is the name of the filesystem (e.g. "native" or "vfs" or "zip"
or "prowrap", perhaps), and the second is the particular type of the
given path within that filesystem (which is filesystem dependent).  The
second element may be empty if the filesystem does not provide a
further categorization of files.
</p>
<p>A valid list object is returned, unless the path object is not
recognized, when NULL will be returned.
</p>
<p><fun>Tcl_FSGetFileSystemForPath</fun> returns the a pointer to the
<type>Tcl_Filesystem</type> which accepts this path as valid.
</p>
<p>If no filesystem will accept the path, NULL is returned.
</p>
<p><fun>Tcl_FSGetPathType</fun> determines whether the given path is relative
to the current directory, relative to the current volume, or
absolute.
</p>
<p>It returns one of <b>TCL_PATH_ABSOLUTE</b>, <b>TCL_PATH_RELATIVE</b>, or
<b>TCL_PATH_VOLUME_RELATIVE</b>
</p>
<p><fun>Tcl_AllocStatBuf</fun> allocates a <i>Tcl_StatBuf</i> on the system
heap (which may be deallocated by being passed to <fun>ckfree</fun>.)  This
allows extensions to invoke <fun>Tcl_FSStat</fun> and <b>Tcl_FSLStat</b>
without being dependent on the size of the buffer.  That in turn
depends on the flags used to build Tcl.
</p>
</subsection>
</section>
<section>
<title>THE VIRTUAL FILESYSTEM API</title>
<p>A filesystem provides a <type>Tcl_Filesystem</type> structure that contains
pointers to functions that implement the various operations on a
filesystem; these operations are invoked as needed by the generic
layer, which generally occurs through the functions listed above.
</p>
<p>The <type>Tcl_Filesystem</type> structures are manipulated using the following
methods.
</p>
<p><fun>Tcl_FSRegister</fun> takes a pointer to a filesystem structure and an
optional piece of data to associated with that filesystem.  On calling
this function, Tcl will attach the filesystem to the list of known
filesystems, and it will become fully functional immediately.  Tcl does
not check if the same filesystem is registered multiple times (and in
general that is not a good thing to do).  <b>TCL_OK</b> will be returned.
</p>
<p><fun>Tcl_FSUnregister</fun> removes the given filesystem structure from
the list of known filesystems, if it is known, and returns <b>TCL_OK</b>.  If
the filesystem is not currently registered, <b>TCL_ERROR</b> is returned.
</p>
<p><fun>Tcl_FSData</fun> will return the ClientData associated with the given
filesystem, if that filesystem is registered.  Otherwise it will
return NULL.
</p>
<p><fun>Tcl_FSMountsChanged</fun> is used to inform the Tcl's core that
the set of mount points for the given (already registered) filesystem
have changed, and that cached file representations may therefore no
longer be correct.
</p>
<subsection>
<title>THE TCL_FILESYSTEM STRUCTURE</title>
<p>The <type>Tcl_Filesystem</type> structure contains the following fields:
</p>
<syntax cat="type" name="Tcl_Filesystem" scope="global">
typedef struct Tcl_Filesystem {
    const char *<i>typeName</i>;
    int <i>structureLength</i>;
    Tcl_FSVersion <i>version</i>;
    Tcl_FSPathInFilesystemProc *<i>pathInFilesystemProc</i>;
    Tcl_FSDupInternalRepProc *<i>dupInternalRepProc</i>;
    Tcl_FSFreeInternalRepProc *<i>freeInternalRepProc</i>;
    Tcl_FSInternalToNormalizedProc *<i>internalToNormalizedProc</i>;
    Tcl_FSCreateInternalRepProc *<i>createInternalRepProc</i>;
    Tcl_FSNormalizePathProc *<i>normalizePathProc</i>;
    Tcl_FSFilesystemPathTypeProc *<i>filesystemPathTypeProc</i>;
    Tcl_FSFilesystemSeparatorProc *<i>filesystemSeparatorProc</i>;
    Tcl_FSStatProc *<i>statProc</i>;
    Tcl_FSAccessProc *<i>accessProc</i>;
    Tcl_FSOpenFileChannelProc *<i>openFileChannelProc</i>;
    Tcl_FSMatchInDirectoryProc *<i>matchInDirectoryProc</i>;
    Tcl_FSUtimeProc *<i>utimeProc</i>;
    Tcl_FSLinkProc *<i>linkProc</i>;
    Tcl_FSListVolumesProc *<i>listVolumesProc</i>;
    Tcl_FSFileAttrStringsProc *<i>fileAttrStringsProc</i>;
    Tcl_FSFileAttrsGetProc *<i>fileAttrsGetProc</i>;
    Tcl_FSFileAttrsSetProc *<i>fileAttrsSetProc</i>;
    Tcl_FSCreateDirectoryProc *<i>createDirectoryProc</i>;
    Tcl_FSRemoveDirectoryProc *<i>removeDirectoryProc</i>;
    Tcl_FSDeleteFileProc *<i>deleteFileProc</i>;
    Tcl_FSCopyFileProc *<i>copyFileProc</i>;
    Tcl_FSRenameFileProc *<i>renameFileProc</i>;
    Tcl_FSCopyDirectoryProc *<i>copyDirectoryProc</i>;
    Tcl_FSLstatProc *<i>lstatProc</i>;
    Tcl_FSLoadFileProc *<i>loadFileProc</i>;
    Tcl_FSGetCwdProc *<i>getCwdProc</i>;
    Tcl_FSChdirProc *<i>chdirProc</i>;
} Tcl_Filesystem;
</syntax>
<p>Except for the first three fields in this structure which contain
simple data elements, all entries contain addresses of functions called
by the generic filesystem layer to perform the complete range of
filesystem related actions.
</p>
<p>The many functions in this structure are broken down into three
categories: infrastructure functions (almost all of which must be
implemented), operational functions (which must be implemented if a
complete filesystem is provided), and efficiency functions (which need
only be implemented if they can be done so efficiently, or if they have
side-effects which are required by the filesystem; Tcl has less
efficient emulations it can fall back on).  It is important to note
that, in the current version of Tcl, most of these fallbacks are only
used to handle commands initiated in Tcl, not in C. What this means is,
that if a <b>file rename</b> command is issued in Tcl, and the relevant
filesystem(s) do not implement their <i>Tcl_FSRenameFileProc</i>, Tcl's
core will instead fallback on a combination of other filesystem
functions (it will use <i>Tcl_FSCopyFileProc</i> followed by
<i>Tcl_FSDeleteFileProc</i>, and if <i>Tcl_FSCopyFileProc</i> is not
implemented there is a further fallback).  However, if a
<i>Tcl_FSRenameFileProc</i> command is issued at the C level, no such
fallbacks occur.  This is true except for the last four entries in the
filesystem table (<b>lstat</b>, <b cat="AMBIGUOUS ambiguous cmd">load</b>, <b>getcwd</b> and <b>chdir</b>)
for which fallbacks do in fact occur at the C level.
</p>
<p>Any functions which take path names in Tcl_Obj form take
those names in UTF-8 form.  The filesystem infrastructure API is
designed to support efficient, cached conversion of these UTF-8 paths
to other native representations.
</p>
</subsection>
<subsection>
<title>EXAMPLE FILESYSTEM DEFINITION</title>
<p>Here is the filesystem lookup table used by the "vfs" extension which
allows filesystem actions to be implemented in Tcl.
</p>
<example>
static Tcl_Filesystem vfsFilesystem = {
    "tclvfs",
    sizeof(Tcl_Filesystem),
    TCL_FILESYSTEM_VERSION_1,
    &amp;VfsPathInFilesystem,
    &amp;VfsDupInternalRep,
    &amp;VfsFreeInternalRep,
    /* No internal to normalized, since we don't create
     * any pure 'internal' Tcl_Obj path representations */
    NULL,
    /* No create native rep function, since we don't use
     * it and don't choose to support uses of
     * Tcl_FSNewNativePath */
    NULL,
    /* Normalize path isn't needed - we assume paths only
     * have one representation */
    NULL,
    &amp;VfsFilesystemPathType,
    &amp;VfsFilesystemSeparator,
    &amp;VfsStat,
    &amp;VfsAccess,
    &amp;VfsOpenFileChannel,
    &amp;VfsMatchInDirectory,
    &amp;VfsUtime,
    /* We choose not to support symbolic links inside our
     * VFS's */
    NULL,
    &amp;VfsListVolumes,
    &amp;VfsFileAttrStrings,
    &amp;VfsFileAttrsGet,
    &amp;VfsFileAttrsSet,
    &amp;VfsCreateDirectory,
    &amp;VfsRemoveDirectory,
    &amp;VfsDeleteFile,
    /* No copy file; use the core fallback mechanism */
    NULL,
    /* No rename file; use the core fallback mechanism */
    NULL,
    /* No copy directory; use the core fallback mechanism */
    NULL,
    /* Core will use stat for lstat */
    NULL,
    /* No load; use the core fallback mechansism */
    NULL,
    /* We don't need a getcwd or chdir; the core's own
     * internal value is suitable */
    NULL,
    NULL
};
</example>
</subsection>
</section>
<section>
<title>FILESYSTEM INFRASTRUCTURE</title>
<p>These fields contain basic information about the filesystem structure
and addresses of functions which are used to associate
a particular filesystem with a file path, and deal with the internal
handling of path representations, for example copying and freeing such
representations.
</p>
<subsection>
<title>TYPENAME</title>
<p>The <i>typeName</i> field contains a null-terminated string that
identifies the type of the filesystem implemented, e.g.
``native'' or ``zip'' or ```vfs''.
</p>
</subsection>
<subsection>
<title>STRUCTURE LENGTH</title>
<p>The <i>structureLength</i> field is generally implemented as
<i>sizeof(Tcl_Filesystem)</i>, and is there to allow easier
binary backwards compatibility if the size of the structure
changes in a future Tcl release.
</p>
</subsection>
<subsection>
<title>VERSION</title>
<p>The <i>version</i> field should be set to <b>TCL_FILESYSTEM_VERSION_1</b>.
</p>
</subsection>
<subsection>
<title>PATHINFILESYSTEMPROC</title>
<p>The <i>pathInFilesystemProc</i> field contains the address of a function
which is called to determine whether a given path object belongs to this
filesystem or not.  Tcl will only call the rest of the filesystem
functions with a path for which this function has returned <b>TCL_OK</b>.
If the path does not belong, -1 should be returned (the behaviour of Tcl
for any other return value is not defined).  If <b>TCL_OK</b> is returned,
then the optional <i>clientDataPtr</i> output parameter can be used to
return an internal (filesystem specific) representation of the path,
which will be cached inside the path object, and may be retrieved
efficiently by the other filesystem functions.  Tcl will simultaneously
cache the fact that this path belongs to this filesystem.  Such caches
are invalidated when filesystem structures are added or removed from
Tcl's internal list of known filesystems.
</p>
<syntax cat="type" name="Tcl_FSPathInFilesystemProc" scope="global">
typedef int Tcl_FSPathInFilesystemProc(
        Tcl_Obj *<i>pathPtr</i>,
        ClientData *<i>clientDataPtr</i>);
</syntax>
</subsection>
<subsection>
<title>DUPINTERNALREPPROC</title>
<p>This function makes a copy of a path's internal representation, and is
called when Tcl needs to duplicate a path object.  If NULL, Tcl will
simply not copy the internal representation, which may then need to be
regenerated later.
</p>
<syntax cat="type" name="Tcl_FSDupInternalRepProc" scope="global">
typedef ClientData Tcl_FSDupInternalRepProc(
        ClientData <i>clientData</i>);
</syntax>
</subsection>
<subsection>
<title>FREEINTERNALREPPROC</title>
<p>Free the internal representation.  This must be implemented if internal
representations need freeing (i.e. if some memory is allocated when an
internal representation is generated), but may otherwise be NULL.
</p>
<syntax cat="type" name="Tcl_FSFreeInternalRepProc" scope="global">
typedef void Tcl_FSFreeInternalRepProc(
        ClientData <i>clientData</i>);
</syntax>
</subsection>
<subsection>
<title>INTERNALTONORMALIZEDPROC</title>
<p>Function to convert internal representation to a normalized path.  Only
required if the filesystem creates pure path objects with no string/path
representation.  The return value is a Tcl object whose string
representation is the normalized path.
</p>
<example>
typedef Tcl_Obj* Tcl_FSInternalToNormalizedProc(
        ClientData <i>clientData</i>);
</example>
</subsection>
<subsection>
<title>CREATEINTERNALREPPROC</title>
<p>Function to take a path object, and calculate an internal
representation for it, and store that native representation in the
object.  May be NULL if paths have no internal representation, or if
the <i>Tcl_FSPathInFilesystemProc</i> for this filesystem always
immediately creates an internal representation for paths it accepts.
</p>
<syntax cat="type" name="Tcl_FSCreateInternalRepProc" scope="global">
typedef ClientData Tcl_FSCreateInternalRepProc(
        Tcl_Obj *<i>pathPtr</i>);
</syntax>
</subsection>
<subsection>
<title>NORMALIZEPATHPROC</title>
<p>Function to normalize a path.  Should be implemented for all
filesystems which can have multiple string representations for the same
path object.  In Tcl, every 'path' must have a single unique 'normalized'
string representation.  Depending on the filesystem,
there may be more than one unnormalized string representation which
refers to that path (e.g. a relative path, a path with different
character case if the filesystem is case insensitive, a path contain a
reference to a home directory such as '~', a path containing symbolic
links, etc).  If the very last component in the path is a symbolic
link, it should not be converted into the object it points to (but
its case or other aspects should be made unique).  All other path
components should be converted from symbolic links.  This one
exception is required to agree with Tcl's semantics with <b>file
delete</b>, <b>file rename</b>, <b>file copy</b> operating on symbolic links.
This function may be called with <i>nextCheckpoint</i> either
at the beginning of the path (i.e. zero), at the end of the path, or
at any intermediate file separator in the path.  It will never
point to any other arbitrary position in the path. In the last of
the three valid cases, the implementation can assume that the path
up to and including the file separator is known and normalized.
</p>
<syntax cat="type" name="Tcl_FSNormalizePathProc" scope="global">
typedef int Tcl_FSNormalizePathProc(
        Tcl_Interp *<i>interp</i>,
        Tcl_Obj *<i>pathPtr</i>,
        int <i>nextCheckpoint</i>);
</syntax>
</subsection>
</section>
<section>
<title>FILESYSTEM OPERATIONS</title>
<p>The fields in this section of the structure contain addresses of
functions which are called to carry out the basic filesystem
operations.  A filesystem which expects to be used with the complete
standard Tcl command set must implement all of these.  If some of
them are not implemented, then certain Tcl commands may fail when
operating on paths within that filesystem.  However, in some instances
this may be desirable (for example, a read-only filesystem should not
implement the last four functions, and a filesystem which does not
support symbolic links need not implement the <b>readlink</b> function,
etc.  The Tcl core expects filesystems to behave in this way).
</p>
<subsection>
<title>FILESYSTEMPATHTYPEPROC</title>
<p>Function to determine the type of a path in this filesystem.  May be
NULL, in which case no type information will be available to users of
the filesystem.  The 'type' is used only for informational purposes,
and should be returned as the string representation of the Tcl_Obj
which is returned.  A typical return value might be "networked", "zip"
or "ftp".  The Tcl_Obj result is owned by the filesystem and so Tcl will
increment the refCount of that object if it wishes to retain a reference
to it.
</p>
<example>
typedef Tcl_Obj* Tcl_FSFilesystemPathTypeProc(
        Tcl_Obj *<i>pathPtr</i>);
</example>
</subsection>
<subsection>
<title>FILESYSTEMSEPARATORPROC</title>
<p>Function to return the separator character(s) for this filesystem.
This need only be implemented if the filesystem wishes to use a
different separator than the standard string "/".  Amongst other
uses, it is returned by the <b>file separator</b> command.  The
return value should be an object with refCount of zero.
</p>
<example>
typedef Tcl_Obj* Tcl_FSFilesystemSeparatorProc(
        Tcl_Obj *<i>pathPtr</i>);
</example>
</subsection>
<subsection>
<title>STATPROC</title>
<p>Function to process a <fun>Tcl_FSStat</fun> call.  Must be implemented for any
reasonable filesystem, since many Tcl level commands depend crucially
upon it (e.g. <b>file atime</b>, <b>file isdirectory</b>, <b>file size</b>,
<cmd>glob</cmd>).
</p>
<syntax cat="type" name="Tcl_FSStatProc" scope="global">
typedef int Tcl_FSStatProc(
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_StatBuf *<i>statPtr</i>);
</syntax>
<p>The <type>Tcl_FSStatProc</type> fills the stat structure <i>statPtr</i> with
information about the specified file.  You do not need any access
rights to the file to get this information but you need search rights
to all directories named in the path leading to the file.  The stat
structure includes info regarding device, inode (always 0 on Windows),
privilege mode, nlink (always 1 on Windows), user id (always 0 on
Windows), group id (always 0 on Windows), rdev (same as device on
Windows), size, last access time, last modification time, and creation
time.
</p>
<p>If the file represented by <i>pathPtr</i> exists, the
<type>Tcl_FSStatProc</type> returns 0 and the stat structure is filled with
data.  Otherwise, -1 is returned, and no stat info is given.
</p>
</subsection>
<subsection>
<title>ACCESSPROC</title>
<p>Function to process a <fun>Tcl_FSAccess</fun> call.  Must be implemented for
any reasonable filesystem, since many Tcl level commands depend crucially
upon it (e.g. <b>file exists</b>, <b>file readable</b>).
</p>
<syntax cat="type" name="Tcl_FSAccessProc" scope="global">
typedef int Tcl_FSAccessProc(
        Tcl_Obj *<i>pathPtr</i>,
        int <i>mode</i>);
</syntax>
<p>The <type>Tcl_FSAccessProc</type> checks whether the process would be allowed
to read, write or test for existence of the file (or other filesystem
object) whose name is in <i>pathPtr</i>.  If the pathname refers to a
symbolic link, then the
permissions of the file referred by this symbolic link should be tested.
</p>
<p>On success (all requested permissions granted), zero is returned.  On
error (at least one bit in mode asked for a permission that is denied,
or some other  error occurred), -1 is returned.
</p>
</subsection>
<subsection>
<title>OPENFILECHANNELPROC</title>
<p>Function to process a <fun>Tcl_FSOpenFileChannel</fun> call.  Must be
implemented for any reasonable filesystem, since any operations
which require open or accessing a file's contents will use it
(e.g. <b cat="AMBIGUOUS ambiguous cmd">open</b>, <b cat="AMBIGUOUS ambiguous cmd">encoding</b>, and many Tk commands).
</p>
<syntax cat="type" name="Tcl_FSOpenFileChannelProc" scope="global">
typedef Tcl_Channel Tcl_FSOpenFileChannelProc(
        Tcl_Interp *<i>interp</i>,
        Tcl_Obj *<i>pathPtr</i>,
        int <i>mode</i>,
        int <i>permissions</i>);
</syntax>
<p>The <type>Tcl_FSOpenFileChannelProc</type> opens a file specified by
<i>pathPtr</i> and returns a channel handle that can be used to perform
input and output on the file.  This API is modeled after the <b>fopen</b>
procedure of the Unix standard I/O library.  The syntax and meaning of
all arguments is similar to those given in the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b> command
when opening a file, where the <i>mode</i> argument is a combination of
the POSIX flags O_RDONLY, O_WRONLY, etc.  If an error occurs while
opening the channel, the <type>Tcl_FSOpenFileChannelProc</type> returns NULL and
records a POSIX error code that can be retrieved with <fun>Tcl_GetErrno</fun>.
In addition, if <i>interp</i> is non-NULL, the
<type>Tcl_FSOpenFileChannelProc</type> leaves an error message in <i>interp</i>'s
result after any error.
</p>
<p>The newly created channel is not registered in the supplied
interpreter; to register it, use <fun>Tcl_RegisterChannel</fun>. If one of
the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it
as a replacement for the standard channel.
</p>
</subsection>
<subsection>
<title>MATCHINDIRECTORYPROC</title>
<p>Function to process a <fun>Tcl_FSMatchInDirectory</fun> call.  If not
implemented, then glob and recursive copy functionality will be lacking
in the filesystem (and this may impact commands like <b>encoding names</b>
which use glob functionality internally).
</p>
<syntax cat="type" name="Tcl_FSMatchInDirectoryProc" scope="global">
typedef int Tcl_FSMatchInDirectoryProc(
        Tcl_Interp* <i>interp</i>,
        Tcl_Obj *<i>resultPtr</i>,
        Tcl_Obj *<i>pathPtr</i>,
        const char *<i>pattern</i>,
        Tcl_GlobTypeData *<i>types</i>);
</syntax>
<p>The function should return all files or directories (or other filesystem
objects) which match the given pattern and accord with the <i>types</i>
specification given.  There are two ways in which this function may be
called.  If <i>pattern</i> is NULL, then <i>pathPtr</i> is a full path
specification of a single file or directory which should be checked for
existence and correct type.  Otherwise, <i>pathPtr</i> is a directory, the
contents of which the function should search for files or directories
which have the correct type.  In either case, <i>pathPtr</i> can be
assumed to be both non-NULL and non-empty.  It is not currently
documented whether <i>pathPtr</i> will have a file separator at its end of
not, so code should be flexible to both possibilities.
</p>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the matching process.  Error messages are placed in
<i>interp</i>, unless <i>interp</i> in NULL in which case no error
message need be generated; on a <b>TCL_OK</b> result, results should be 
added to the <i>resultPtr</i> object given (which can be assumed to be a 
valid unshared Tcl list).  The matches added
to <i>resultPtr</i> should include any path prefix given in <i>pathPtr</i>
(this usually means they will be absolute path specifications).
Note that if no matches are found, that simply leads to an empty
result; errors are only signaled for actual file or filesystem
problems which may occur during the matching process.
</p>
<p>The <type>Tcl_GlobTypeData</type> structure passed in the <i>types</i> 
parameter contains the following fields:
</p>
<syntax cat="type" name="Tcl_GlobTypeData" scope="global">
typedef struct Tcl_GlobTypeData {
        /* Corresponds to bcdpfls as in 'find -t' */
        int <i>type</i>;
        /* Corresponds to file permissions */
        int <i>perm</i>;
        /* Acceptable mac type */
        Tcl_Obj *<i>macType</i>;
        /* Acceptable mac creator */
        Tcl_Obj *<i>macCreator</i>;
} Tcl_GlobTypeData;
</syntax>
<p>There are two specific cases which it is important to handle correctly,
both when <i>types</i> is non-NULL. The two cases are when <i>types-&gt;types
&amp; TCL_GLOB_TYPE_DIR</i> or <i>types-&gt;types &amp; TCL_GLOB_TYPE_MOUNT</i> are
true (and in particular when the other flags are false).  In the first of
these cases, the function must list the contained directories.  Tcl uses
this to implement recursive globbing, so it is critical that filesystems
implement directory matching correctly.  In the second of these cases,
with <b>TCL_GLOB_TYPE_MOUNT</b>, the filesystem must list the mount points
which lie within the given <i>pathPtr</i> (and in this case, <i>pathPtr</i>
need not lie within the same filesystem - different to all other cases in
which this function is called).  Support for this is critical if Tcl is
to have seamless transitions between from one filesystem to another.
</p>
</subsection>
<subsection>
<title>UTIMEPROC</title>
<p>Function to process a <fun>Tcl_FSUtime</fun> call.  Required to allow setting
(not reading) of times with <b>file mtime</b>, <b>file atime</b> and the
open-r/open-w/fcopy implementation of <b>file copy</b>.
</p>
<syntax cat="type" name="Tcl_FSUtimeProc" scope="global">
typedef int Tcl_FSUtimeProc(
        Tcl_Obj *<i>pathPtr</i>,
        struct utimbuf *<i>tval</i>);
</syntax>
<p>The access and modification times of the file specified by <i>pathPtr</i>
should be changed to the values given in the <i>tval</i> structure.
</p>
<p>The return value should be 0 on success and -1 on an error, as
with the system <b>utime</b>.
</p>
</subsection>
<subsection>
<title>LINKPROC</title>
<p>Function to process a <fun>Tcl_FSLink</fun> call.  Should be implemented
only if the filesystem supports links, and may otherwise be NULL.
</p>
<example>
typedef Tcl_Obj* Tcl_FSLinkProc(
        Tcl_Obj *<i>linkNamePtr</i>,
        Tcl_Obj *<i>toPtr</i>,
        int <i>linkAction</i>);
</example>
<p>If <i>toPtr</i> is NULL, the function is being asked to read the
contents of a link.  The result is a Tcl_Obj specifying the contents of
the link given by <i>linkNamePtr</i>, or NULL if the link could
not be read.  The result is owned by the caller (and should therefore
have its ref count incremented before being returned).  Any callers
should call Tcl_DecrRefCount on this result when it is no longer needed.
If <i>toPtr</i> is not NULL, the function should attempt to create a link.
The result in this case should be <i>toPtr</i> if the link was successful
and NULL otherwise.  In this case the result is not owned by the caller
(i.e. no ref count manipulation on either end is needed). See
the documentation for <fun>Tcl_FSLink</fun> for the correct interpretation
of the <i>linkAction</i> flags.
</p>
</subsection>
<subsection>
<title>LISTVOLUMESPROC</title>
<p>Function to list any filesystem volumes added by this filesystem.
Should be implemented only if the filesystem adds volumes at the head
of the filesystem, so that they can be returned by <b>file volumes</b>.
</p>
<example>
typedef Tcl_Obj* Tcl_FSListVolumesProc(void);
</example>
<p>The result should be a list of volumes added by this filesystem, or
NULL (or an empty list) if no volumes are provided.  The result object
is considered to be owned by the filesystem (not by Tcl's core), but
should be given a refCount for Tcl.  Tcl will use the contents of the
list and then decrement that refCount.  This allows filesystems to
choose whether they actually want to retain a 'master list' of volumes
or not (if not, they generate the list on the fly and pass it to Tcl
with a refCount of 1 and then forget about the list, if yes, then
they simply increment the refCount of their master list and pass it
to Tcl which will copy the contents and then decrement the count back
to where it was).
</p>
<p>Therefore, Tcl considers return values from this proc to be read-only.
</p>
</subsection>
<subsection>
<title>FILEATTRSTRINGSPROC</title>
<p>Function to list all attribute strings which are valid for this
filesystem.  If not implemented the filesystem will not support
the <b>file attributes</b> command.  This allows arbitrary additional
information to be attached to files in the filesystem.  If it is
not implemented, there is no need to implement the <b>get</b> and <b cat="AMBIGUOUS ambiguous cmd">set</b>
methods.
</p>
<example>
typedef const char** Tcl_FSFileAttrStringsProc(
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_Obj** <i>objPtrRef</i>);
</example>
<p>The called function may either return an array of strings, or may
instead return NULL and place a Tcl list into the given <i>objPtrRef</i>.  Tcl
will take that list and first increment its reference count before using it.
On completion of that use, Tcl will decrement its reference count.  Hence if
the list should be disposed of by Tcl when done, it should have a
reference count of zero, and if the list should not be disposed of, the
filesystem should ensure it returns an object with a refererence count
of at least one.
</p>
</subsection>
<subsection>
<title>FILEATTRSGETPROC</title>
<p>Function to process a <fun>Tcl_FSFileAttrsGet</fun> call, used by <b>file
attributes</b>.
</p>
<syntax cat="type" name="Tcl_FSFileAttrsGetProc" scope="global">
typedef int Tcl_FSFileAttrsGetProc(
        Tcl_Interp *<i>interp</i>,
        int <i>index</i>,
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_Obj **<i>objPtrRef</i>);
</syntax>
<p>Returns a standard Tcl return code.  The attribute value retrieved,
which corresponds to the <i>index</i>'th element in the list returned by
the <b>Tcl_FSFileAttrStringsProc</b>, is a Tcl_Obj placed in <i>objPtrRef</i> (if
<b>TCL_OK</b> was returned) and is likely to have a reference count of zero.  Either
way we must either store it somewhere (e.g. the Tcl result), or
Incr/Decr its reference count to ensure it is properly freed.
</p>
</subsection>
<subsection>
<title>FILEATTRSSETPROC</title>
<p>Function to process a <fun>Tcl_FSFileAttrsSet</fun> call, used by <b>file
attributes</b>.  If the filesystem is read-only, there is no need
to implement this.
</p>
<syntax cat="type" name="Tcl_FSFileAttrsSetProc" scope="global">
typedef int Tcl_FSFileAttrsSetProc(
        Tcl_Interp *<i>interp</i>,
        int <i>index</i>,
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_Obj *<i>objPtr</i>);
</syntax>
<p>The attribute value of the <i>index</i>'th element in the list returned by
the Tcl_FSFileAttrStringsProc should be set to the <i>objPtr</i> given.
</p>
</subsection>
<subsection>
<title>CREATEDIRECTORYPROC</title>
<p>Function to process a <fun>Tcl_FSCreateDirectory</fun> call.  Should be
implemented unless the FS is read-only.
</p>
<syntax cat="type" name="Tcl_FSCreateDirectoryProc" scope="global">
typedef int Tcl_FSCreateDirectoryProc(
        Tcl_Obj *<i>pathPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, a new directory should have
been added to the filesystem in the location specified by
<i>pathPtr</i>.
</p>
</subsection>
<subsection>
<title>REMOVEDIRECTORYPROC</title>
<p>Function to process a <fun>Tcl_FSRemoveDirectory</fun> call.  Should be
implemented unless the FS is read-only.
</p>
<syntax cat="type" name="Tcl_FSRemoveDirectoryProc" scope="global">
typedef int Tcl_FSRemoveDirectoryProc(
        Tcl_Obj *<i>pathPtr</i>,
        int <i>recursive</i>,
        Tcl_Obj **<i>errorPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, the directory specified by
<i>pathPtr</i> should have been removed from the filesystem.  If the
<i>recursive</i> flag is given, then a non-empty directory should be
deleted without error.  If this flag is not given, then and the
directory is non-empty a POSIX 'EEXIST' error should be signalled.  If an
error does occur, the name of the file or directory which caused the
error should be placed in <i>errorPtr</i>.
</p>
</subsection>
<subsection>
<title>DELETEFILEPROC</title>
<p>Function to process a <fun>Tcl_FSDeleteFile</fun> call.  Should be implemented
unless the FS is read-only.
</p>
<syntax cat="type" name="Tcl_FSDeleteFileProc" scope="global">
typedef int Tcl_FSDeleteFileProc(
        Tcl_Obj *<i>pathPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the process.  If successful, the file specified by
<i>pathPtr</i> should have been removed from the filesystem.  Note that,
if the filesystem supports symbolic links, Tcl will always call this
function and not Tcl_FSRemoveDirectoryProc when needed to delete them
(even if they are symbolic links to directories).
</p>
</subsection>
</section>
<section>
<title>FILESYSTEM EFFICIENCY</title>
<p>These functions need not be implemented for a particular filesystem
because the core has a fallback implementation available. See each
individual description for the consequences of leaving the field NULL.
</p>
<subsection>
<title>LSTATPROC</title>
<p>Function to process a <fun>Tcl_FSLstat</fun> call.  If not implemented, Tcl
will attempt to use the <i>statProc</i> defined above instead.  Therefore
it need only be implemented if a filesystem can differentiate between
<b>stat</b> and <b>lstat</b> calls.
</p>
<syntax cat="type" name="Tcl_FSLstatProc" scope="global">
typedef int Tcl_FSLstatProc(
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_StatBuf *<i>statPtr</i>);
</syntax>
<p>The behavior of this function is very similar to that of the
<type>Tcl_FSStatProc</type> defined above, except that if it is applied
to a symbolic link, it returns information about the link, not
about the target file.
</p>
</subsection>
<subsection>
<title>COPYFILEPROC</title>
<p>Function to process a <fun>Tcl_FSCopyFile</fun> call.  If not implemented Tcl
will fall back on <b cat="AMBIGUOUS ambiguous cmd">open</b>-r, <b cat="AMBIGUOUS ambiguous cmd">open</b>-w and <cmd>fcopy</cmd> as a
copying mechanism.
Therefore it need only be implemented if the filesystem can perform
that action more efficiently.
</p>
<syntax cat="type" name="Tcl_FSCopyFileProc" scope="global">
typedef int Tcl_FSCopyFileProc(
        Tcl_Obj *<i>srcPathPtr</i>,
        Tcl_Obj *<i>destPathPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the copying process.  Note that, <i>destPathPtr</i> is the
name of the file which should become the copy of <i>srcPathPtr</i>. It
is never the name of a directory into which <i>srcPathPtr</i> could be
copied (i.e. the function is much simpler than the Tcl level <b>file
copy</b> subcommand).  Note that,
if the filesystem supports symbolic links, Tcl will always call this
function and not <i>copyDirectoryProc</i> when needed to copy them
(even if they are symbolic links to directories).  Finally, if the
filesystem determines it cannot support the <b>file copy</b> action,
calling <b>Tcl_SetErrno(EXDEV)</b> and returning a non-<b>TCL_OK</b>
result will tell Tcl to use its standard fallback mechanisms.
</p>
</subsection>
<subsection>
<title>RENAMEFILEPROC</title>
<p>Function to process a <fun>Tcl_FSRenameFile</fun> call.  If not implemented,
Tcl will fall back on a copy and delete mechanism.  Therefore it need
only be implemented if the filesystem can perform that action more
efficiently.
</p>
<syntax cat="type" name="Tcl_FSRenameFileProc" scope="global">
typedef int Tcl_FSRenameFileProc(
        Tcl_Obj *<i>srcPathPtr</i>,
        Tcl_Obj *<i>destPathPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the renaming process.  If the
filesystem determines it cannot support the <b>file rename</b> action,
calling <b>Tcl_SetErrno(EXDEV)</b> and returning a non-<b>TCL_OK</b>
result will tell Tcl to use its standard fallback mechanisms.
</p>
</subsection>
<subsection>
<title>COPYDIRECTORYPROC</title>
<p>Function to process a <fun>Tcl_FSCopyDirectory</fun> call.  If not
implemented, Tcl will fall back on a recursive <b>file mkdir</b>, <b>file copy</b>
mechanism.  Therefore it need only be implemented if the filesystem can
perform that action more efficiently.
</p>
<syntax cat="type" name="Tcl_FSCopyDirectoryProc" scope="global">
typedef int Tcl_FSCopyDirectoryProc(
        Tcl_Obj *<i>srcPathPtr</i>,
        Tcl_Obj *<i>destPathPtr</i>,
        Tcl_Obj **<i>errorPtr</i>);
</syntax>
<p>The return value is a standard Tcl result indicating whether an error
occurred in the copying process.  If an error does occur, the name of
the file or directory which caused the error should be placed in
<i>errorPtr</i>. Note that, <i>destPathPtr</i> is the name of the
directory-name which should become the mirror-image of
<i>srcPathPtr</i>. It is not the name of a directory into which
<i>srcPathPtr</i> should be copied (i.e. the function is much simpler
than the Tcl level <b>file copy</b> subcommand).  Finally, if the
filesystem determines it cannot support the directory copy action,
calling <b>Tcl_SetErrno(EXDEV)</b> and returning a non-<b>TCL_OK</b>
result will tell Tcl to use its standard fallback mechanisms.
</p>
</subsection>
<subsection>
<title>LOADFILEPROC</title>
<p>Function to process a <fun>Tcl_FSLoadFile</fun> call.  If not implemented, Tcl
will fall back on a copy to native-temp followed by a <fun>Tcl_FSLoadFile</fun> on
that temporary copy.  Therefore it need only be implemented if the
filesystem can load code directly, or it can be implemented simply to
return <b>TCL_ERROR</b> to disable load functionality in this filesystem
entirely.
</p>
<syntax cat="type" name="Tcl_FSLoadFileProc" scope="global">
typedef int Tcl_FSLoadFileProc(
        Tcl_Interp *<i>interp</i>,
        Tcl_Obj *<i>pathPtr</i>,
        Tcl_LoadHandle *<i>handlePtr</i>,
        Tcl_FSUnloadFileProc *<i>unloadProcPtr</i>);
</syntax>
<p>Returns a standard Tcl completion code.  If an error occurs, an error
message is left in the <i>interp</i>'s result.  The function dynamically loads a
binary code file into memory.  On a successful load, the <i>handlePtr</i>
should be filled with a token for the dynamically loaded file, and the
<i>unloadProcPtr</i> should be filled in with the address of a procedure.
The unload procedure will be called with the given <b>Tcl_LoadHandle</b> as its
only parameter when Tcl needs to unload the file.  For example, for the
native filesystem, the <b>Tcl_LoadHandle</b> returned is currently a token
which can be used in the private <b>TclpFindSymbol</b> to access functions
in the new code.  Each filesystem is free to define the
<b>Tcl_LoadHandle</b> as it requires.  Finally, if the
filesystem determines it cannot support the file load action,
calling <b>Tcl_SetErrno(EXDEV)</b> and returning a non-<b>TCL_OK</b>
result will tell Tcl to use its standard fallback mechanisms.
</p>
</subsection>
<subsection>
<title>UNLOADFILEPROC</title>
<p>Function to unload a previously successfully loaded file.  If load was
implemented, then this should also be implemented, if there is any
cleanup action required.
</p>
<syntax cat="type" name="Tcl_FSUnloadFileProc" scope="global">
typedef void Tcl_FSUnloadFileProc(
        Tcl_LoadHandle <i>loadHandle</i>);
</syntax>
</subsection>
<subsection>
<title>GETCWDPROC</title>
<p>Function to process a <fun>Tcl_FSGetCwd</fun> call.  Most filesystems need not
implement this.  It will usually only be called once, if <b>getcwd</b> is
called before <b>chdir</b>.  May be NULL.
</p>
<example>
typedef Tcl_Obj* Tcl_FSGetCwdProc(
        Tcl_Interp *<i>interp</i>);
</example>
<p>If the filesystem supports a native notion of a current working
directory (which might perhaps change independent of Tcl), this
function should return that cwd as the result, or NULL if the current
directory could not be determined (e.g. the user does not have
appropriate permissions on the cwd directory).  If NULL is returned, an
error message is left in the <i>interp</i>'s result.
</p>
</subsection>
<subsection>
<title>CHDIRPROC</title>
<p>Function to process a <fun>Tcl_FSChdir</fun> call.  If filesystems do not
implement this, it will be emulated by a series of directory access
checks.  Otherwise, virtual filesystems which do implement it need only
respond with a positive return result if the <i>pathPtr</i> is a valid,
accessible directory in their filesystem.  They need not remember the
result, since that will be automatically remembered for use by
<fun>Tcl_FSGetCwd</fun>.
Real filesystems should carry out the correct action (i.e. call the
correct system <b>chdir</b> API).
</p>
<syntax cat="type" name="Tcl_FSChdirProc" scope="global">
typedef int Tcl_FSChdirProc(
        Tcl_Obj *<i>pathPtr</i>);
</syntax>
<p>The <type>Tcl_FSChdirProc</type> changes the applications current working
directory to the value specified in <i>pathPtr</i>. The function returns
-1 on error or 0 on success.

</p>
</subsection>
</section>
<seealso>
<ref>cd(n)</ref>
<ref>file(n)</ref>
<ref>load(n)</ref>
<ref>open(n)</ref>
<ref>pwd(n)</ref>
<ref>unload(n)</ref>
</seealso>
<keywords>
<keyword>stat</keyword>
<keyword>access</keyword>
<keyword>filesystem</keyword>
<keyword>vfs</keyword>
<keyword>virtual</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="FindExec" title="Tcl_FindExecutable" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: FindExec.3,v 1.7 2004/10/07 15:15:38 dkf Exp $
 -->
<?TROFF.TH title="Tcl_FindExecutable" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_FindExecutable</name>
<name>Tcl_GetNameOfExecutable</name>
<desc>identify or return the name of the binary file containing the application</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_FindExecutable</fun>(<m>argv0</m>)

const char *
<fun>Tcl_GetNameOfExecutable</fun>()
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>char</argtype>
<name name="argv0">*argv0</name>
<argmode>in</argmode>
<desc>The first command-line argument to the program, which gives the
application's name.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <fun>Tcl_FindExecutable</fun> procedure computes the full path name of
the executable file from which the application was invoked and saves
it for Tcl's internal use.
The executable's path name is needed for several purposes in
Tcl.  For example, it is needed on some platforms in the
implementation of the <b cat="AMBIGUOUS ambiguous cmd">load</b> command.
It is also returned by the <b>info nameofexecutable</b> command.
</p>
<p>On UNIX platforms this procedure is typically invoked as the very
first thing in the application's main program;  it must be passed
<i>argv[0]</i> as its argument.  It is important not to change the
working directory before the invocation.
<fun>Tcl_FindExecutable</fun> uses <i>argv0</i>
along with the <b>PATH</b> environment variable to find the
application's executable, if possible.  If it fails to find
the binary, then future calls to <b>info nameofexecutable</b>
will return an empty string.
</p>
<p><fun>Tcl_GetNameOfExecutable</fun> simply returns a pointer to the
internal full path name of the executable file as computed by
<fun>Tcl_FindExecutable</fun>.  This procedure call is the C API
equivalent to the <b>info nameofexecutable</b> command.  NULL
is returned if the internal full path name has not been
computed or unknown.

</p>
</section>
<keywords>
<keyword>binary</keyword>
<keyword>executable file</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="FindPhoto" version="8.0" title="Tk_FindPhoto">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Australian National University
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     Author: Paul Mackerras (paulus@cs.anu.edu.au),
    	    Department of Computer Science,
    	    Australian National University.
    
     RCS: @(#) $Id: FindPhoto.3,v 1.10 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_FindPhoto" section="3" date="8.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_FindPhoto</name>
<name>Tk_PhotoPutBlock</name>
<name>Tk_PhotoPutZoomedBlock</name>
<name>Tk_PhotoGetImage</name>
<name>Tk_PhotoBlank</name>
<name>Tk_PhotoExpand</name>
<name>Tk_PhotoGetSize</name>
<name>Tk_PhotoSetSize</name>
<desc>manipulate the image data stored in a photo image.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_PhotoHandle
<fun>Tk_FindPhoto</fun>(<m>interp</m>, <m>imageName</m>)

<new version="8.5">int
<fun>Tk_PhotoPutBlock</fun>(<m>interp</m>, <m>handle</m>, <m>blockPtr</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>\
compRule</m>)

int
<fun>Tk_PhotoPutZoomedBlock</fun>(<m>interp</m>, <m>handle</m>, <m>blockPtr</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>\
zoomX</m>, <m>zoomY</m>, <m>subsampleX</m>, <m>subsampleY</m>, <m>compRule</m>)
</new>
int
<fun>Tk_PhotoGetImage</fun>(<m>handle</m>, <m>blockPtr</m>)

void
<fun>Tk_PhotoBlank</fun>(<m>handle</m>)

<new version="8.5">int
<fun>Tk_PhotoExpand</fun>(<m>interp</m>, <m>handle</m>, <m>width</m>, <m>height</m>)
</new>
void
<fun>Tk_PhotoGetSize</fun>(<m>handle</m>, <m>widthPtr</m>, <m>heightPtr</m>)

<new version="8.5">int
<fun>Tk_PhotoSetSize</fun>(<m>interp. handle</m>, <m>width</m>, <m>height</m>)
</new></syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which image was created and in which error reporting is
to be done.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="imageName">*imageName</name>
<argmode>in</argmode>
<desc>Name of the photo image.
</desc>
</argdef>
<argdef>
<argtype>Tk_PhotoHandle</argtype>
<name>handle</name>
<argmode>in</argmode>
<desc>Opaque handle identifying the photo image to be affected.
</desc>
</argdef>
<argdef>
<argtype>Tk_PhotoImageBlock</argtype>
<name name="blockPtr">*blockPtr</name>
<argmode>in</argmode>
<desc>Specifies the address and storage layout of image data.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>Specifies the X coordinate where the top-left corner of the block is
to be placed within the image.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Specifies the Y coordinate where the top-left corner of the block is
to be placed within the image.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Specifies the width of the image area to be affected (for
<fun>Tk_PhotoPutBlock</fun>) or the desired image width (for
<fun>Tk_PhotoExpand</fun> and <fun>Tk_PhotoSetSize</fun>).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>compRule</name>
<argmode>in</argmode>
<desc>Specifies the compositing rule used when combining transparent pixels
in a block of data with a photo image.  Must be one of
<b>TK_PHOTO_COMPOSITE_OVERLAY</b> (which puts the block of data over the top
of the existing photo image, with the previous contents showing
through in the transparent bits) or <b>TK_PHOTO_COMPOSITE_SET</b> (which
discards the existing photo image contents in the rectangle covered by
the data block.)
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Specifies the height of the image area to be affected (for
<fun>Tk_PhotoPutBlock</fun>) or the desired image height (for
<fun>Tk_PhotoExpand</fun> and <fun>Tk_PhotoSetSize</fun>).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="widthPtr">*widthPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the image width.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="heightPtr">*heightPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store the image height.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>subsampleX</name>
<argmode>in</argmode>
<desc>Specifies the subsampling factor in the X direction for input
image data.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>subsampleY</name>
<argmode>in</argmode>
<desc>Specifies the subsampling factor in the Y direction for input
image data.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>zoomX</name>
<argmode>in</argmode>
<desc>Specifies the zoom factor to be applied in the X direction to pixels
being written to the photo image.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>zoomY</name>
<argmode>in</argmode>
<desc>Specifies the zoom factor to be applied in the Y direction to pixels
being written to the photo image.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_FindPhoto</fun> returns an opaque handle that is used to identify a
particular photo image to the other procedures.  The parameter is the
name of the image, that is, the name specified to the <b>image create
photo</b> command, or assigned by that command if no name was specified.
</p>
<p><fun>Tk_PhotoPutBlock</fun> is used to supply blocks of image data to be
displayed.  The call affects an area of the image of size
<i>width</i> x <i>height</i> pixels, with its top-left corner at
coordinates (<i>x</i>,<i>y</i>).  All of <i>width</i>, <i>height</i>,
<i>x</i>, and <i>y</i> must be non-negative.
If part of this area lies outside the
current bounds of the image, the image will be expanded to include the
area, unless the user has specified an explicit image size with the
<b>-width</b> and/or <b>-height</b> widget configuration options
(see photo(n)); in that
case the area is silently clipped to the image boundaries.
</p>
<p>The <i>block</i> parameter is a pointer to a
<type>Tk_PhotoImageBlock</type> structure, defined as follows:
</p>
<syntax cat="type" name="Tk_PhotoImageBlock" scope="global">
typedef struct {
    unsigned char *<i>pixelPtr</i>;
    int <i>width</i>;
    int <i>height</i>;
    int <i>pitch</i>;
    int <i>pixelSize</i>;
    int <i>offset[4]</i>;
} Tk_PhotoImageBlock;
</syntax>
<p>The <i>pixelPtr</i> field points to the first pixel, that is, the
top-left pixel in the block.
The <i>width</i> and <i>height</i> fields specify the dimensions of the
block of pixels.  The <i>pixelSize</i> field specifies the address
difference between two horizontally adjacent pixels.  Often it is 3
or 4, but it can have any value.  The <i>pitch</i> field specifies the
address difference between two vertically adjacent pixels.  The
<i>offset</i> array contains the offsets from the address of a pixel
to the addresses of the bytes containing the red, green, blue and alpha
(transparency) components.  These are normally 0, 1, 2 and 3, but can
have other values, e.g., for images that are stored as separate red,
green and blue planes.
</p>
<p>The <i>compRule</i> parameter to <fun>Tk_PhotoPutBlock</fun> specifies a
compositing rule that says what to do with transparent pixels.  The
value <b>TK_PHOTO_COMPOSITE_OVERLAY</b> says that the previous contents of
the photo image should show through, and the value
<b>TK_PHOTO_COMPOSITE_SET</b> says that the previous contents of the photo
image should be completely ignored, and the values from the block be
copied directly across.  The behavior in Tk8.3 and earlier was
equivalent to having <b>TK_PHOTO_COMPOSITE_OVERLAY</b> as a compositing rule.
</p>
<p>The value given for the <i>width</i> and <i>height</i> parameters to
<fun>Tk_PhotoPutBlock</fun> do not have to correspond to the values specified
in <i>block</i>.  If they are smaller, <fun>Tk_PhotoPutBlock</fun> extracts a
sub-block from the image data supplied.  If they are larger, the data
given are replicated (in a tiled fashion) to fill the specified area.
These rules operate independently in the horizontal and vertical
directions.
</p>
<p><new version="8.5"><fun>Tk_PhotoPutBlock</fun> normally returns <b>TCL_OK</b>, though if it cannot
allocate sufficient memory to hold the resulting image, <b>TCL_ERROR</b> is
returned instead and, if the <i>interp</i> argument is non-NULL, an
error message is placed in the interpreter's result.
</new></p>
<p><fun>Tk_PhotoPutZoomedBlock</fun> works like <fun>Tk_PhotoPutBlock</fun> except that
the image can be reduced or enlarged for display.  The
<i>subsampleX</i> and <i>subsampleY</i> parameters allow the size of the
image to be reduced by subsampling.
<fun>Tk_PhotoPutZoomedBlock</fun> will use only pixels from the input image
whose X coordinates are multiples of <i>subsampleX</i>, and whose Y
coordinates are multiples of <i>subsampleY</i>.  For example, an image
of 512x512 pixels can be reduced to 256x256 by setting
<i>subsampleX</i> and <i>subsampleY</i> to 2.
</p>
<p>The <i>zoomX</i> and <i>zoomY</i> parameters allow the image to be
enlarged by pixel replication.  Each pixel of the (possibly subsampled)
input image will be written to a block <i>zoomX</i> pixels wide and
<i>zoomY</i> pixels high of the displayed image.  Subsampling and
zooming can be used together for special effects.
</p>
<p><fun>Tk_PhotoGetImage</fun> can be used to retrieve image data from a photo
image.  <fun>Tk_PhotoGetImage</fun> fills
in the structure pointed to by the <i>blockPtr</i> parameter with values
that describe the address and layout of the image data that the
photo image has stored internally.  The values are valid
until the image is destroyed or its size is changed.
<fun>Tk_PhotoGetImage</fun> returns 1 for compatibility with the
corresponding procedure in the old photo widget.
</p>
<p><fun>Tk_PhotoBlank</fun> blanks the entire area of the
photo image.  Blank areas of a photo image are transparent.
</p>
<p><fun>Tk_PhotoExpand</fun> requests that the widget's image be expanded to be
at least <i>width</i> x <i>height</i> pixels in size.  The width and/or
height are unchanged if the user has specified an explicit image width
or height with the <b>-width</b> and/or <b>-height</b> configuration
options, respectively.
If the image data
are being supplied in many small blocks, it is more efficient to use
<fun>Tk_PhotoExpand</fun> or <fun>Tk_PhotoSetSize</fun> at the beginning rather than
allowing the image to expand in many small increments as image blocks
are supplied.
</p>
<p><new version="8.5"><fun>Tk_PhotoExpand</fun> normally returns <b>TCL_OK</b>, though if it cannot
allocate sufficient memory to hold the resulting image, <b>TCL_ERROR</b> is
returned instead and, if the <i>interp</i> argument is non-NULL, an
error message is placed in the interpreter's result.
</new></p>
<p><fun>Tk_PhotoSetSize</fun> specifies the size of the image, as if the user
had specified the given <i>width</i> and <i>height</i> values to the
<b>-width</b> and <b>-height</b> configuration options.  A value of
zero for <i>width</i> or <i>height</i> does not change the image's width
or height, but allows the width or height to be changed by subsequent
calls to <fun>Tk_PhotoPutBlock</fun>, <fun>Tk_PhotoPutZoomedBlock</fun> or
<fun>Tk_PhotoExpand</fun>.
</p>
<p><new version="8.5"><fun>Tk_PhotoSetSize</fun> normally returns <b>TCL_OK</b>, though if it cannot
allocate sufficient memory to hold the resulting image, <b>TCL_ERROR</b> is
returned instead and, if the <i>interp</i> argument is non-NULL, an
error message is placed in the interpreter's result.
</new></p>
<p><fun>Tk_PhotoGetSize</fun> returns the dimensions of the image in
*<i>widthPtr</i> and *<i>heightPtr</i>.

</p>
</section>
<section>
<title>PORTABILITY</title>
<p>In Tk 8.3 and earlier, <fun>Tk_PhotoPutBlock</fun> and
<fun>Tk_PhotoPutZoomedBlock</fun> had different signatures. If you want to
compile code that uses the old interface against 8.4 without updating
your code, compile it with the flag
-DUSE_COMPOSITELESS_PHOTO_PUT_BLOCK.  Code linked using Stubs against
older versions of Tk will continue to work.
</p>
<p><new version="8.5">In Tk 8.4, <fun>Tk_PhotoPutBlock</fun>, <fun>Tk_PhotoPutZoomedBlock</fun>,
<fun>Tk_PhotoExpand</fun> and <fun>Tk_PhotoSetSize</fun> did not take an
<i>interp</i> argument or return any result code.  If insufficient
memory was available for an image, Tk would panic.  This behaviour is
still supported if you compile your extension with the additional flag
-DUSE_PANIC_ON_PHOTO_ALLOC_FAILURE.  Code linked using Stubs against
older versions of Tk will continue to work.
</new>
</p>
</section>
<section>
<title>CREDITS</title>
<p>The code for the photo image type was developed by Paul Mackerras,
based on his earlier photo widget code.

</p>
</section>
<keywords>
<keyword>photo</keyword>
<keyword>image</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="flush" version="7.5" title="flush">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: flush.n,v 1.8 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="flush" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>flush</name>
<desc>Flush buffered output for a channel</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">flush</b> <m>channelId</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Flushes any output that has been buffered for <i>channelId</i>.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdout</b> or <b>stderr</b>), the return
value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or the result
of a channel creation command provided by a Tcl extension.  The
channel must have been opened for writing.
</p>
<p>If the channel is in blocking mode the command does not return until all the
buffered output has been flushed to the channel. If the channel is in
nonblocking mode, the command may return before all buffered output has been
flushed; the remainder will be flushed in the background as fast as the
underlying file or device is able to absorb it.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Prompt for the user to type some information in on the console:
</p>
<example>
puts -nonewline "Please type your name: "
<b cat="AMBIGUOUS ambiguous cmd">flush</b> stdout
gets stdin name
puts "Hello there, $name!"
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>open(n)</ref>
<ref>socket(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>buffer</keyword>
<keyword>channel</keyword>
<keyword>flush</keyword>
<keyword>nonblocking</keyword>
<keyword>output</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="focus" title="focus" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: focus.n,v 1.4 2004/06/21 19:39:54 dkf Exp $
 -->
<?TROFF.TH title="focus" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>focus</name>
<desc>Manage the input focus</desc>
</namesection>
<synopsis>
<syntax>
<cmd>focus</cmd>
<cmd>focus</cmd> <m>window</m>
<cmd>focus</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>focus</cmd> command is used to manage the Tk input focus.
At any given time, one window on each display is designated as
the <i>focus window</i>;  any key press or key release events for the
display are sent to that window.
It is normally up to the window manager to redirect the focus among the
top-level windows of a display.  For example, some window managers
automatically set the input focus to a top-level window whenever
the mouse enters it;  others redirect the input focus only when
the user clicks on a window.
Usually the window manager will set the focus
only to top-level windows, leaving it up to the application to
redirect the focus among the children of the top-level.
</p>
<p>Tk remembers one focus window for each top-level (the most recent
descendant of that top-level to receive the focus);  when the window
manager gives the focus
to a top-level, Tk automatically redirects it to the remembered
window.  Within a top-level Tk uses an <i>explicit</i> focus model
by default.  Moving the mouse within a top-level does not normally
change the focus;  the focus changes only when a widget
decides explicitly to claim the focus (e.g., because of a button
click), or when the user types a key such as Tab that moves the
focus.
</p>
<p>The Tcl procedure <b>tk_focusFollowsMouse</b> may be invoked to
create an <i>implicit</i> focus model:  it reconfigures Tk so that
the focus is set to a window whenever the mouse enters it.
The Tcl procedures <b>tk_focusNext</b> and <b>tk_focusPrev</b>
implement a focus order among the windows of a top-level;  they
are used in the default bindings for Tab and Shift-Tab, among other
things.
</p>
<p>The <cmd>focus</cmd> command can take any of the following forms:
</p>
<commandlist>
<commanddef>
<command><b>focus</b></command>
<desc>Returns the path name of the focus window on the display containing
the application's main window,  or an empty string if no window in
this application has the focus on that display.   Note:  it is
better to specify the display explicitly using <b>-displayof</b>
(see below) so that the code will work in applications using multiple
displays.
</desc>
</commanddef>
<commanddef>
<command><b>focus</b> <m>window</m></command>
<desc>If the application currently has the input focus on <i>window</i>'s
display, this command resets the input focus for <i>window</i>'s display
to <i>window</i> and returns an empty string.
If the application doesn't currently have the  input focus on
<i>window</i>'s display, <i>window</i> will be remembered as the focus
for its top-level;  the next time the focus arrives at the top-level,
Tk will redirect it to <i>window</i>.
If <i>window</i> is an empty string then the command does nothing.
</desc>
</commanddef>
<commanddef>
<command><b>focus -displayof</b> <m>window</m></command>
<desc>Returns the name of the focus window on the display containing <i>window</i>.
If the focus window for <i>window</i>'s display isn't in this
application, the return value is an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>focus -force</b> <m>window</m></command>
<desc>Sets the focus of <i>window</i>'s display to <i>window</i>, even if
the application doesn't currently have the input focus for the display.
This command should be used sparingly, if at all.
In normal usage, an application should not claim the focus for
itself;  instead, it should wait for the window manager to give it
the focus.
If <i>window</i> is an empty string then the command does nothing.
</desc>
</commanddef>
<commanddef>
<command><b>focus -lastfor</b> <m>window</m></command>
<desc>Returns the name of the most recent window to have the input focus
among all the windows in the same top-level as <i>window</i>.
If no window in that top-level has ever had the input focus, or
if the most recent focus window has been deleted, then the name
of the top-level is returned.  The return value is the window that
will receive the input focus the next time the window manager gives
the focus to the top-level.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>QUIRKS</title>
<p>When an internal window receives the input focus, Tk doesn't actually
set the X focus to that window;  as far as X is concerned, the focus
will stay on the top-level window containing the window with the focus.
However, Tk generates FocusIn and FocusOut events just as if the X
focus were on the internal window.   This approach gets around a
number of problems that would occur if the X focus were actually moved;
the fact that the X focus is on the top-level is invisible unless
you use C code to query the X server directly.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>To make a window that only participates in the focus traversal ring
when a variable is set, add the following bindings to the widgets
<i>before</i> and <i>after</i> it in that focus ring:
</p>
<example>
button .before -text "Before"
button .middle -text "Middle"
button .after  -text "After"
checkbutton .flag -variable traverseToMiddle -takefocus 0
pack .flag -side left
pack .before .middle .after
bind .before &lt;Tab&gt; {
   if {!$traverseToMiddle} {
      <cmd>focus</cmd> .after
      break
   }
}
bind .after &lt;Shift-Tab&gt; {
   if {!$traverseToMiddle} {
      <cmd>focus</cmd> .before
      break
   }
}
<cmd>focus</cmd> .before
</example>


</section>
<keywords>
<keyword>events</keyword>
<keyword>focus</keyword>
<keyword>keyboard</keyword>
<keyword>top-level</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="cmd" title="tk_focusNext" id="focusNext">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: focusNext.n,v 1.2 1998/09/14 18:22:56 stanton Exp $
 -->
<?TROFF.TH title="tk_focusNext" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_focusNext</name>
<name>tk_focusPrev</name>
<name>tk_focusFollowsMouse</name>
<desc>Utility procedures for managing the input focus.</desc>
</namesection>
<synopsis>
<syntax>
<b>tk_focusNext</b> <m>window</m>

<b>tk_focusPrev</b> <m>window</m>

<b>tk_focusFollowsMouse</b>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>tk_focusNext</b> is a utility procedure used for keyboard traversal.
It returns the ``next'' window after <i>window</i> in focus order.
The focus order is determined by
the stacking order of windows and the structure of the window hierarchy.
Among siblings, the focus order is the same as the stacking order, with the
lowest window being first.
If a window has children, the window is visited first, followed by
its children (recursively), followed by its next sibling.
Top-level windows other than <i>window</i> are skipped, so that
<b>tk_focusNext</b> never returns a window in a different top-level
from <i>window</i>.
</p>
<p>After computing the next window, <b>tk_focusNext</b> examines the
window's <b>-takefocus</b> option to see whether it should be skipped.
If so, <b>tk_focusNext</b> continues on to the next window in the focus
order, until it eventually finds a window that will accept the focus
or returns back to <i>window</i>.
</p>
<p><b>tk_focusPrev</b> is similar to <b>tk_focusNext</b> except that it
returns the window just before <i>window</i> in the focus order.
</p>
<p><b>tk_focusFollowsMouse</b> changes the focus model for the application
to an implicit one where the window under the mouse gets the focus.
After this procedure is called, whenever the mouse enters a window
Tk will automatically give it the input focus.
The <cmd>focus</cmd> command may be used to move the focus to a window
other than the one under the mouse, but as soon as the mouse moves
into a new window the focus will jump to that window.
Note: at present there is no built-in support for returning the
application to an explicit focus model;  to do this you'll have
to write a script that deletes the bindings created by
<b>tk_focusFollowsMouse</b>.

</p>
</section>
<keywords>
<keyword>focus</keyword>
<keyword>keyboard traversal</keyword>
<keyword>top-level</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="font" version="8.0" title="font">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: font.n,v 1.9 2006/12/01 20:14:23 kennykb Exp $
 -->
<?TROFF.TH title="font" section="n" date="8.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>font</name>
<desc>Create and inspect fonts.</desc>
</namesection>
<synopsis>
<syntax>
<cmd>font</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>font</cmd> command provides several facilities for dealing with
fonts, such as defining named fonts and inspecting the actual attributes of
a font.  The command has several different forms, determined by the
first argument.  The following forms are currently supported:
</p>
<commandlist>
<commanddef>
<command><b>font actual</b> <m>font</m> ?<b>-displayof</b> <m>window</m>? ?<m>option</m>? ?<b>--</b>? ?<m>char</m>?</command>
<desc>Returns information about the actual attributes that are obtained when
<i>font</i> is used on <i>window</i>'s display; the actual attributes obtained
may differ from the attributes requested due to platform-dependant
limitations, such as the availability of font families and pointsizes.
<i>font</i> is a font description; see <ref refid="font-descriptions">FONT DESCRIPTIONS</ref> below.  If the
<i>window</i> argument is omitted, it defaults to the main window.  If
<i>option</i> is specified, returns the value of that attribute; if it is
omitted, the return value is a list of all the attributes and their values.
See <ref refid="font-options">FONT OPTIONS</ref> below for a list of the possible attributes.  If the
<i>char</i> argument is supplied, it must be a single character. The font
attributes returned will be those of the specific font used to render
that character, which will be different from the base font if the base
font does not contain the given character.  If <i>char</i> may be a hyphen, it
should be preceded by <b>--</b> to distinguish it from a misspelt <i>option</i>.
</desc>
</commanddef>
<commanddef>
<command><b>font configure</b> <m>fontname</m> ?<m>option</m>? ?<m>value option value ...</m>?  </command>
<desc>Query or modify the desired attributes for the named font called
<i>fontname</i>.  If no <i>option</i> is specified, returns a list describing
all the options and their values for <i>fontname</i>.  If a single <i>option</i> 
is specified with no <i>value</i>, then returns the current value of that
attribute.  If one or more <i>option</i>-<i>value</i> pairs are specified,
then the command modifies the given named font to have the given values; in
this case, all widgets using that font will redisplay themselves using the
new attributes for the font.  See <ref refid="font-options">FONT OPTIONS</ref> below for a list of the
possible attributes.
</desc>
</commanddef>
<commanddef>
<command><b>font create</b> ?<m>fontname</m>? ?<m>option value ...</m>?</command>
<desc>Creates a new named font and returns its name.  <i>fontname</i> specifies the
name for the font; if it is omitted, then Tk generates a new name of the
form <cmd>font</cmd><i>x</i>, where <i>x</i> is an integer.  There may be any number
of <i>option</i>-<i>value</i> pairs, which provide the desired attributes for
the new named font.  See <ref refid="font-options">FONT OPTIONS</ref> below for a list of the possible
attributes.
</desc>
</commanddef>
<commanddef>
<command><b>font delete</b> <m>fontname</m> ?<m>fontname ...</m>?</command>
<desc>Delete the specified named fonts.  If there are widgets using the named font,
the named font won't actually be deleted until all the instances are
released.  Those widgets will continue to display using the last known values
for the named font.  If a deleted named font is subsequently recreated with
another call to <b>font create</b>, the widgets will use the new named font
and redisplay themselves using the new attributes of that font.
</desc>
</commanddef>
<commanddef>
<command><b>font families</b> ?<b>-displayof</b> <m>window</m>?</command>
<desc>The return value is a list of the case-insensitive names of all font families 
that exist on <i>window</i>'s display.  If the <i>window</i> argument is
omitted, it defaults to the main window.
</desc>
</commanddef>
<commanddef>
<command><b>font measure</b> <m>font</m> ?<b>-displayof</b> <m>window</m>? <m>text</m> </command>
<desc>Measures the amount of space the string <i>text</i> would use in the given
<i>font</i> when displayed in <i>window</i>.  <i>font</i> is a font description;
see <ref refid="font-descriptions">FONT DESCRIPTIONS</ref> below.  If the <i>window</i> argument is omitted, it
defaults to the main window.  The return value is the total width in pixels
of <i>text</i>, not including the extra pixels used by highly exaggerated
characters such as cursive ``f''.  If the string contains newlines or tabs,
those characters are not expanded or treated specially when measuring the
string.
</desc>
</commanddef>
<commanddef>
<command><b>font metrics</b> <m>font</m> ?<b>-displayof</b> <m>window</m>? ?<m>option</m>?</command>
<desc>Returns information about the metrics (the font-specific data), for
<i>font</i> when it is used on <i>window</i>'s display.  <i>font</i> is a font
description; see <ref refid="font-descriptions">FONT DESCRIPTIONS</ref> below.  If the <i>window</i> argument is
omitted, it defaults to the main window.  If <i>option</i> is specified,
returns the value of that metric; if it is omitted, the return value is a 
list of all the metrics and their values.  See <ref refid="font-metrics">FONT METRICS</ref> below for a list
of the possible metrics.
</desc>
</commanddef>
<commanddef>
<command><b>font names</b></command>
<desc>The return value is a list of all the named fonts that are currently defined.
</desc>
</commanddef>
</commandlist>
</section>
<section id="font-descriptions">
<title>FONT DESCRIPTIONS</title>
<p>The following formats are accepted as a font description anywhere
<i>font</i> is specified as an argument above; these same forms are also
permitted when specifying the <b>-font</b> option for widgets.
</p>
<dl>
<dle>
<dt>[1] <m>fontname</m> </dt>
<dd>The name of a named font, created using the <b>font create</b> command.  When
a widget uses a named font, it is guaranteed that this will never cause an
error, as long as the named font exists, no matter what potentially invalid
or meaningless set of attributes the named font has.  If the named font
cannot be displayed with exactly the specified attributes, some other close
font will be substituted automatically.
</dd>
</dle>
<dle>
<dt>[2] <m>systemfont</m></dt>
<dd>The platform-specific name of a font, interpreted by the graphics server.
This also includes, under X, an XLFD (see [4]) for which a single ``<b>*</b>''
character was used to elide more than one field in the middle of the
name.  See <ref refid="platform-specific-issues">PLATFORM-SPECIFIC ISSUES</ref> for a list of the system fonts.
</dd>
</dle>
<dle>
<dt>[3] <m>family</m> ?<m>size</m>? ?<m>style</m>? ?<m>style ...</m>?</dt>
<dd>A properly formed list whose first element is the desired font
<i>family</i> and whose optional second element is the desired <i>size</i>.
The interpretation of the <i>size</i> attribute follows the same rules
described for <b>-size</b> in FONT OPTIONS below.  Any additional optional
arguments following the <i>size</i> are font <i>style</i>s.  Possible values
for the <i>style</i> arguments are as follows:
<?TROFF.RS?><?TABSTOPS 3c 6c 9c?><sl cols="4">
<li>bold</li>
<li>italic</li>
<li>normal</li>
<li>overstrike</li>
<li>roman</li>
<li>underline</li>
</sl><?TROFF.RE?></dd>
</dle>
<dle>
<dt>[4] X-font names (XLFD)</dt>
<dd>A Unix-centric font name of the form
<i>-foundry-family-weight-slant-setwidth-addstyle-pixel-point-resx-resy-spacing-width-charset-encoding</i>.
The ``<b>*</b>'' character may be used to skip individual fields that the
user does not care about.  There must be exactly one ``<b>*</b>'' for each
field skipped, except that a ``<b>*</b>'' at the end of the XLFD skips any
remaining fields; the shortest valid XLFD is simply ``<b>*</b>'', signifying
all fields as defaults.  Any fields that were skipped are given default
values.  For compatibility, an XLFD always chooses a font of the specified
pixel size (not point size); although this interpretation is not strictly
correct, all existing applications using XLFDs assumed that one ``point''
was in fact one pixel and would display incorrectly (generally larger) if
the correct size font were actually used.
</dd>
</dle>
<dle>
<dt>[5] <m>option value</m> ?<m>option value ...</m>?</dt>
<dd>A properly formed list of <i>option</i>-<i>value</i> pairs that specify
the desired attributes of the font, in the same format used when defining
a named font; see <ref refid="font-options">FONT OPTIONS</ref> below.
</dd>
</dle>
</dl>
<p>When font description <i>font</i> is used, the system attempts to parse the
description according to each of the above five rules, in the order specified.
Cases [1] and [2] must match the name of an existing named font or of a
system font.  Cases [3], [4], and [5] are accepted on all
platforms and the closest available font will be used.  In some situations
it may not be possible to find any close font (e.g., the font family was
a garbage value); in that case, some system-dependant default font is
chosen.  If the font description does not match any of the above patterns,
an error is generated.  
</p>
</section>
<section id="font-metrics">
<title>FONT METRICS</title>
<p>The following options are used by the <b>font metrics</b> command to query
font-specific data determined when the font was created.  These properties are
for the whole font itself and not for individual characters drawn in that
font.  In the following definitions, the ``baseline'' of a font is the 
horizontal line where the bottom of most letters line up; certain letters, 
such as lower-case ``g'' stick below the baseline.
</p>
<dl>
<dle>
<dt><b>-ascent</b>         </dt>
<dd>The amount in pixels that the tallest letter sticks up above the baseline of
the font, plus any extra blank space added by the designer of the font.
</dd>
</dle>
<dle>
<dt><b>-descent</b>         </dt>
<dd>The largest amount in pixels that any letter sticks down below the baseline
of the font, plus any extra blank space added by the designer of the font.
</dd>
</dle>
<dle>
<dt><b>-linespace</b></dt>
<dd>Returns how far apart vertically in pixels two lines of text using the same
font should be placed so that none of the characters in one line overlap any
of the characters in the other line.  This is generally the sum of the ascent
above the baseline line plus the descent below the baseline.
</dd>
</dle>
<dle>
<dt><b>-fixed</b>           </dt>
<dd>Returns a boolean flag that is ``<b>1</b>'' if this is a fixed-width font,
where each normal character is the same width as all the other
characters, or is ``<b>0</b>'' if this is a proportionally-spaced font, where 
individual characters have different widths.  The widths of control 
characters, tab characters, and other non-printing characters are not 
included when calculating this value.
</dd>
</dle>
</dl>
</section>
<section id="font-options">
<title>FONT OPTIONS</title>
<p>The following options are supported on all platforms, and are used when
constructing a named font or when specifying a font using style [5] as
above:
</p>
<dl>
<dle>
<dt><b>-family</b> <m>name</m> </dt>
<dd>The case-insensitive font family name.  Tk guarantees to support the font
families named <b>Courier</b> (a monospaced ``typewriter'' font), <b>Times</b>
(a serifed ``newspaper'' font), and <b>Helvetica</b> (a sans-serif
``European'' font).  The most closely matching native font family will
automatically be substituted when one of the above font families is used.
The <i>name</i> may also be the name of a native, platform-specific font
family; in that case it will work as desired on one platform but may not
display correctly on other platforms.  If the family is unspecified or 
unrecognized, a platform-specific default font will be chosen.
</dd>
</dle>
<dle>
<dt><b>-size</b> <m>size</m></dt>
<dd>The desired size of the font.  If the <i>size</i> argument is a positive
number, it is interpreted as a size in points.  If <i>size</i> is a negative
number, its absolute value is interpreted as a size in pixels.  If a
font cannot be displayed at the specified size, a nearby size will be
chosen.  If <i>size</i> is unspecified or zero, a platform-dependent default
size will be chosen.  
<p>Sizes should normally be specified in points so the application will remain
the same ruler size on the screen, even when changing screen resolutions or
moving scripts across platforms.  However, specifying pixels is useful in
certain circumstances such as when a piece of text must line up with respect
to a fixed-size bitmap.  The mapping between points and pixels is set when
the application starts, based on properties of the installed monitor, but it
can be overridden by calling the <b>tk scaling</b> command.
</p></dd>
</dle>
<dle>
<dt><b>-weight</b> <m>weight</m> </dt>
<dd>The nominal thickness of the characters in the font.  The value
<b>normal</b> specifies a normal weight font, while <b>bold</b> specifies a
bold font.  The closest available weight to the one specified will
be chosen.  The default weight is <b>normal</b>.
</dd>
</dle>
<dle>
<dt><b>-slant</b> <m>slant</m></dt>
<dd>The amount the characters in the font are slanted away from the
vertical.  Valid values for slant are <b>roman</b> and <b>italic</b>.
A roman font is the normal, upright appearance of a font, while 
an italic font is one that is tilted some number of degrees from upright.
The closest available slant to the one specified will be chosen.
The default slant is <b>roman</b>.
</dd>
</dle>
<dle>
<dt><b>-underline</b> <m>boolean</m></dt>
<dd>The value is a boolean flag that specifies whether characters in this
font should be underlined.  The default value for underline is <b>false</b>.
</dd>
</dle>
<dle>
<dt><b>-overstrike</b> <m>boolean</m> </dt>
<dd>The value is a boolean flag that specifies whether a horizontal line should
be drawn through the middle of characters in this font.  The default value
for overstrike is <b>false</b>.
</dd>
</dle>
</dl>
</section>
<section id="platform-specific-issues">
<title>PLATFORM-SPECIFIC ISSUES</title>
<p>The following named system fonts are supported:
</p>
<dl>
<dle>
<dt>X Windows:</dt>
<dd>All valid X font names, including those listed by xlsfonts(1), are available.
</dd>
</dle>
<dle>
<dt>MS Windows:</dt>
<dd><?TABSTOPS 3c 6c?><sl cols="3">
<li>ansi</li>
<li>ansifixed</li>
<li>device</li>
<li>oemfixed</li>
<li>system</li>
<li>systemfixed</li>
</sl></dd>
</dle>
<dle>
<dt>Macintosh:</dt>
<dd><?TABSTOPS 3c 6c?><sl cols="3">
<li>application</li>
<li>system</li>
</sl></dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<p>Fill a text widget with lots of font demonstrators, one for every font
family installed on your system:
</p>
<example>
pack [text .t -wrap none] -fill both -expand 1
set count 0
set tabwidth 0
foreach family [lsort -dictionary [<b>font families</b>]] {
    .t tag configure f[incr count] -font [list $family 10]
    .t insert end ${family}:\t {} \
            "This is a simple sampler\n" f$count
    set w [<b>font measure</b> [.t cget -font] ${family}:]
    if {$w+5 &gt; $tabwidth} {
        set tabwidth [expr {$w+5}]
        .t configure -tabs $tabwidth
    }
}
</example>


</section>
<seealso>
<ref>options(n)</ref>
</seealso>
<keywords>
<keyword>font</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="FontId" version="8.0" title="Tk_FontId">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: FontId.3,v 1.6 2005/04/22 21:32:23 georgeps Exp $
 -->
<?TROFF.TH title="Tk_FontId" section="3" date="8.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_FontId</name>
<name>Tk_GetFontMetrics</name>
<name>Tk_PostscriptFontName</name>
<desc>accessor functions for 
fonts</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Font
<b>Tk_FontId(</b><m>tkfont</m><b>)</b>

void
<b>Tk_GetFontMetrics(</b><m>tkfont</m>, <m>fmPtr</m><b>)</b>

int
<b>Tk_PostscriptFontName(</b><m>tkfont</m>, <m>dsPtr</m><b>)</b>

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Font</argtype>
<name>tkfont</name>
<argmode>in</argmode>
<desc>Opaque font token being queried.  Must have been returned by a previous
call to <fun>Tk_GetFont</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tk_FontMetrics</argtype>
<name name="fmPtr">*fmPtr</name>
<argmode>out</argmode>
<desc>Pointer to structure in which the font metrics for <i>tkfont</i> will
be stored.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="dsPtr">*dsPtr</name>
<argmode>out</argmode>
<desc>Pointer to an initialized <type>Tcl_DString</type> to which the name of the
Postscript font that corresponds to <i>tkfont</i> will be appended.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Given a <i>tkfont</i>, <fun>Tk_FontId</fun> returns the token that should be
selected into an XGCValues structure in order to construct a graphics
context that can be used to draw text in the specified font.  
</p>
<p><fun>Tk_GetFontMetrics</fun> computes the ascent, descent, and linespace of the
<i>tkfont</i> in pixels and stores those values in the structure pointer to by
<i>fmPtr</i>.  These values can be used in computations such as to space
multiple lines of text, to align the baselines of text in different
fonts, and to vertically align text in a given region.  See the
documentation for the <cmd>font</cmd> command for definitions of the terms
ascent, descent, and linespace, used in font metrics.  
</p>
<p><fun>Tk_PostscriptFontName</fun> maps a <i>tkfont</i> to the corresponding
Postscript font name that should be used when printing.  The return value
is the size in points of the <i>tkfont</i> and the Postscript font name is
appended to <i>dsPtr</i>.  <i>DsPtr</i> must refer to an initialized
<type>Tcl_DString</type>.  Given a ``reasonable'' Postscript printer, the
following screen font families should print correctly:
</p>
<dl>
<dle>
<dt/>
<dd><b>Avant Garde</b>, <b>Arial</b>, <b>Bookman</b>, <b>Courier</b>, 
<b>Courier New</b>, <b>Geneva</b>, <b>Helvetica</b>, <b>Monaco</b>,
<b>New Century Schoolbook</b>, <b>New York</b>, <b>Palatino</b>, <b>Symbol</b>,
<b>Times</b>, <b>Times New Roman</b>, <b>Zapf Chancery</b>, and 
<b>Zapf Dingbats</b>.
</dd>
</dle>
</dl>
<p>Any other font families may not print correctly because the computed
Postscript font name may be incorrect or not exist on the printer.
</p>
</section>
<section>
<title>DATA STRUCTURES</title>
<p>The Tk_FontMetrics data structure is used by Tk_GetFontMetrics to return 
information about a font and is defined as follows:
</p>
<syntax cat="type" name="Tk_FontMetrics" scope="global">
typedef struct Tk_FontMetrics {
    int ascent;
    int descent;
    int linespace;
} Tk_FontMetrics;
</syntax>
<p>The <i>ascent</i> field is the amount in pixels that the tallest
letter sticks up above the baseline, plus any extra blank space added
by the designer of the font.
</p>
<p>The <i>descent</i> is the largest amount in pixels that any letter
sticks below the baseline, plus any extra blank space added by the
designer of the font.
</p>
<p>The <i>linespace</i> is the sum of the ascent and descent.  How far
apart two lines of text in the same font should be placed so that none
of the characters in one line overlap any of the characters in the
other line.
</p>
</section>
<keywords>
<keyword>font</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="for" title="for">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: for.n,v 1.5 2004/10/27 12:53:22 dkf Exp $
 -->
<?TROFF.TH title="for" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>for</name>
<desc>``For'' loop</desc>
</namesection>
<synopsis>
<syntax>
<cmd>for</cmd> <m>start test next body</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>For</b> is a looping command, similar in structure to the C
<cmd>for</cmd> statement.  The <i>start</i>, <i>next</i>, and
<i>body</i> arguments must be Tcl command strings, and <i>test</i>
is an expression string.
The <cmd>for</cmd> command first invokes the Tcl interpreter to
execute <i>start</i>.  Then it repeatedly evaluates <i>test</i> as
an expression; if the result is non-zero it invokes the Tcl
interpreter on <i>body</i>, then invokes the Tcl interpreter on <i>next</i>,
then repeats the loop.  The command terminates when <i>test</i> evaluates
to 0.  If a <cmd>continue</cmd> command is invoked within <i>body</i> then
any remaining commands in the current execution of <i>body</i> are skipped;
processing continues by invoking the Tcl interpreter on <i>next</i>, then
evaluating <i>test</i>, and so on.  If a <cmd>break</cmd> command is invoked
within <i>body</i>
or <i>next</i>,
then the <cmd>for</cmd> command will
return immediately.
The operation of <cmd>break</cmd> and <cmd>continue</cmd> are similar to the
corresponding statements in C.
<b>For</b> returns an empty string.
</p>
<p>Note: <i>test</i> should almost always be enclosed in braces.  If not,
variable substitutions will be made before the <cmd>for</cmd>
command starts executing, which means that variable changes
made by the loop body will not be considered in the expression.
This is likely to result in an infinite loop.  If <i>test</i> is
enclosed in braces, variable substitutions are delayed until the
expression is evaluated (before
each loop iteration), so changes in the variables will be visible.
See below for an example:
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Print a line for each of the integers from 0 to 10:
</p>
<example>
for {set x 0} {$x&lt;10} {incr x} {
   puts "x is $x"
}
</example>
<p>Either loop infinitely or not at all because the expression being
evaluated is actually the constant, or even generate an error!  The
actual behaviour will depend on whether the variable <i>x</i> exists
before the <cmd>for</cmd> command is run and whether its value is a value
that is less than or greater than/equal to ten, and this is because
the expression will be substituted before the <cmd>for</cmd> command is
executed.
</p>
<example>
for {set x 0} $x&lt;10 {incr x} {
   puts "x is $x"
}
</example>
<p>Print out the powers of two from 1 to 1024:
</p>
<example>
for {set x 1} {$x&lt;=1024} {set x [expr {$x * 2}]} {
   puts "x is $x"
}
</example>


</section>
<seealso>
<ref>break</ref>
<ref>continue</ref>
<ref>foreach</ref>
<ref>while</ref>
</seealso>
<keywords>
<keyword>for</keyword>
<keyword>iteration</keyword>
<keyword>looping</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="foreach" title="foreach">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: foreach.n,v 1.8 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="foreach" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>foreach</name>
<desc>Iterate over all elements in one or more lists</desc>
</namesection>
<synopsis>
<syntax>
<cmd>foreach</cmd> <m>varname list body</m>

<cmd>foreach</cmd> <m>varlist1 list1</m> ?<m>varlist2 list2 ...</m>? <m>body</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>foreach</cmd> command implements a loop where the loop
variable(s) take on values from one or more lists.
In the simplest case there is one loop variable, <i>varname</i>,
and one list, <i>list</i>, that is a list of values to assign to <i>varname</i>.
The <i>body</i> argument is a Tcl script.
For each element of <i>list</i> (in order
from first to last), <cmd>foreach</cmd> assigns the contents of the
element to <i>varname</i> as if the <cmd>lindex</cmd> command had been used
to extract the element, then calls the Tcl interpreter to execute
<i>body</i>.
</p>
<p>In the general case there can be more than one value list
(e.g., <i>list1</i> and <i>list2</i>),
and each value list can be associated with a list of loop variables
(e.g., <i>varlist1</i> and <i>varlist2</i>).
During each iteration of the loop
the variables of each <i>varlist</i> are assigned
consecutive values from the corresponding <i>list</i>.
Values in each <i>list</i> are used in order from first to last,
and each value is used exactly once.
The total number of loop iterations is large enough to use
up all the values from all the value lists.
If a value list does not contain enough
elements for each of its loop variables in each iteration,
empty values are used for the missing elements.
</p>
<p>The <cmd>break</cmd> and <cmd>continue</cmd> statements may be
invoked inside <i>body</i>, with the same effect as in the <cmd>for</cmd>
command.  <b>Foreach</b> returns an empty string.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>This loop prints every value in a list together with the square and
cube of the value:
</p>
<example>
<?TABSTOPS 3i?>set values {1 3 5 7 2 4 6 8}	;# Odd numbers first, for fun!
puts "Value\tSquare\tCube"	;# Neat-looking header
<cmd>foreach</cmd> x $values {	;# Now loop and print...
    puts " $x\t [expr {$x**2}]\t [expr {$x**3}]"
}
</example>
<p>The following loop uses i and j as loop variables to iterate over
pairs of elements of a single list.
</p>
<example>
set x {}
<cmd>foreach</cmd> {i j} {a b c d e f} {
    lappend x $j $i
}
# The value of x is "b a d c f e"
# There are 3 iterations of the loop.
</example>
<p>The next loop uses i and j to iterate over two lists in parallel.
</p>
<example>
set x {}
<cmd>foreach</cmd> i {a b c} j {d e f g} {
    lappend x $i $j
}
# The value of x is "a d b e c f {} g"
# There are 4 iterations of the loop.
</example>
<p>The two forms are combined in the following example.
</p>
<example>
set x {}
<cmd>foreach</cmd> i {a b c} {j k} {d e f g} {
    lappend x $i $j $k
}
# The value of x is "a d e b f g c {} {}"
# There are 3 iterations of the loop.
</example>


</section>
<seealso>
<ref>for(n)</ref>
<ref>while(n)</ref>
<ref>break(n)</ref>
<ref>continue(n)</ref>
</seealso>
<keywords>
<keyword>foreach</keyword>
<keyword>iteration</keyword>
<keyword>list</keyword>
<keyword>looping</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="format" version="8.1" title="format">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: format.n,v 1.14 2006/06/14 14:59:03 dkf Exp $
 -->
<?TROFF.TH title="format" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>format</name>
<desc>Format a string in the style of sprintf</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">format</b> <m>formatString</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>INTRODUCTION</title>
<p>This command generates a formatted string in a fashion similar to the
ANSI C <b>sprintf</b> procedure.
<i>FormatString</i> indicates how to format the result, using
<b>%</b> conversion specifiers as in <b>sprintf</b>, and the additional
arguments, if any, provide values to be substituted into the result.
The return value from <b cat="AMBIGUOUS ambiguous cmd">format</b> is the formatted string.
</p>
</section>
<section>
<title>DETAILS ON FORMATTING</title>
<p>The command operates by scanning <i>formatString</i> from left to right. 
Each character from the format string is appended to the result
string unless it is a percent sign.
If the character is a <b>%</b> then it is not copied to the result string.
Instead, the characters following the <b>%</b> character are treated as
a conversion specifier.
The conversion specifier controls the conversion of the next successive
<i>arg</i> to a particular format and the result is appended to 
the result string in place of the conversion specifier.
If there are multiple conversion specifiers in the format string,
then each one controls the conversion of one additional <i>arg</i>.
The <b cat="AMBIGUOUS ambiguous cmd">format</b> command must be given enough <i>arg</i>s to meet the needs
of all of the conversion specifiers in <i>formatString</i>.
</p>
<p>Each conversion specifier may contain up to six different parts:
an XPG3 position specifier,
a set of flags, a minimum field width, a precision, a size modifier,
and a conversion character.
Any of these fields may be omitted except for the conversion character.
The fields that are present must appear in the order given above.
The paragraphs below discuss each of these fields in turn.
</p>
<p>If the <b>%</b> is followed by a decimal number and a <b>$</b>, as in
``<b>%2$d</b>'', then the value to convert is not taken from the
next sequential argument.
Instead, it is taken from the argument indicated by the number,
where 1 corresponds to the first <i>arg</i>.
If the conversion specifier requires multiple arguments because
of <b>*</b> characters in the specifier then
successive arguments are used, starting with the argument
given by the number.
This follows the XPG3 conventions for positional specifiers.
If there are any positional specifiers in <i>formatString</i>
then all of the specifiers must be positional.
</p>
<p>The second portion of a conversion specifier may contain any of the
following flag characters, in any order:
</p>
<dl>
<dle>
<dt><b>-</b></dt>
<dd>Specifies that the converted argument should be left-justified 
in its field (numbers are normally right-justified with leading 
spaces if needed).
</dd>
</dle>
<dle>
<dt><b>+</b></dt>
<dd>Specifies that a number should always be printed with a sign, 
even if positive.
</dd>
</dle>
<dle>
<dt><m>space</m></dt>
<dd>Specifies that a space should be added to the beginning of the 
number if the first character isn't a sign.
</dd>
</dle>
<dle>
<dt><b>0</b></dt>
<dd>Specifies that the number should be padded on the left with 
zeroes instead of spaces.
</dd>
</dle>
<dle>
<dt><b>#</b></dt>
<dd>Requests an alternate output form. For <b>o</b> and <b>O</b>
conversions it guarantees that the first digit is always <b>0</b>.
For <b>x</b> or <b>X</b> conversions, <b>0x</b> or <b>0X</b> (respectively)
will be added to the beginning of the result unless it is zero.
For all floating-point conversions (<b>e</b>, <b>E</b>, <b>f</b>,
<b>g</b>, and <b>G</b>) it guarantees that the result always 
has a decimal point.
For <b>g</b> and <b>G</b> conversions it specifies that 
trailing zeroes should not be removed.
</dd>
</dle>
</dl>
<p>The third portion of a conversion specifier is a decimal number giving a
minimum field width for this conversion.
It is typically used to make columns line up in tabular printouts.
If the converted argument contains fewer characters than the
minimum field width then it will be padded so that it is as wide
as the minimum field width.
Padding normally occurs by adding extra spaces on the left of the
converted argument, but the <b>0</b> and <b>-</b> flags 
may be used to specify padding with zeroes on the left or with
spaces on the right, respectively.
If the minimum field width is specified as <b>*</b> rather than
a number, then the next argument to the <b cat="AMBIGUOUS ambiguous cmd">format</b> command
determines the minimum field width; it must be an integer value.
</p>
<p>The fourth portion of a conversion specifier is a precision,
which consists of a period followed by a number.
The number is used in different ways for different conversions.
For <b>e</b>, <b>E</b>, and <b>f</b> conversions it specifies the number
of digits to appear to the right of the decimal point.
For <b>g</b> and <b>G</b> conversions it specifies the total number
of digits to appear, including those on both sides of the decimal
point (however, trailing zeroes after the decimal point will still
be omitted unless the <b>#</b> flag has been specified).
For integer conversions, it specifies a minimum number of digits
to print (leading zeroes will be added if necessary).
For <b>s</b> conversions it specifies the maximum number of characters to be 
printed; if the string is longer than this then the trailing characters will be dropped.
If the precision is specified with <b>*</b> rather than a number
then the next argument to the <b cat="AMBIGUOUS ambiguous cmd">format</b> command determines the precision;
it must be a numeric string.
</p>
<p>The fifth part of a conversion specifier is a size modifier,
which must be <b>ll</b>, <b>h</b>, or <b>l</b>.
If it is <b>ll</b> it specifies that an integer value is taken
without truncation for conversion to a formatted substring.
If it is <b>h</b> it specifies that an integer value is
truncated to a 16-bit range before converting.  This option is rarely useful.
If it is <b>l</b> it specifies that the integer value is 
truncated to the same range as that produced by the <b>wide()</b>
function of the <cmd>expr</cmd> command (at least a 64-bit range).
If neither <b>h</b> nor <b>l</b> are present, the integer value is
truncated to the same range as that produced by the <b>int()</b>
function of the <cmd>expr</cmd> command (at least a 32-bit range, but
determined by the value of <b>tcl_platform(wordSize)</b>).
</p>
<p>The last thing in a conversion specifier is an alphabetic character
that determines what kind of conversion to perform.
The following conversion characters are currently supported:
</p>
<dl>
<dle>
<dt><b>d</b></dt>
<dd>Convert integer to signed decimal string.
</dd>
</dle>
<dle>
<dt><b>u</b></dt>
<dd>Convert integer to unsigned decimal string.
</dd>
</dle>
<dle>
<dt><b>i</b></dt>
<dd>Convert integer to signed decimal string (equivalent to <b>d</b>).
</dd>
</dle>
<dle>
<dt><b>o</b></dt>
<dd>Convert integer to unsigned octal string.
</dd>
</dle>
<dle>
<dt><b>x</b> or <b>X</b></dt>
<dd>Convert integer to unsigned hexadecimal string, using digits
``0123456789abcdef'' for <b>x</b> and ``0123456789ABCDEF'' for <b>X</b>).
</dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>Convert integer to the Unicode character it represents.
</dd>
</dle>
<dle>
<dt><b>s</b></dt>
<dd>No conversion; just insert string.
</dd>
</dle>
<dle>
<dt><b>f</b></dt>
<dd>Convert number to signed decimal string of 
the form <i>xx.yyy</i>, where the number of <i>y</i>'s is determined by 
the precision (default: 6).
If the precision is 0 then no decimal point is output.
</dd>
</dle>
<dle>
<dt><b>e</b> or <b>E</b></dt>
<dd>Convert number to scientific notation in the 
form <i>x.yyy</i><b>e&#177;</b><i>zz</i>, where the number of <i>y</i>'s is determined 
by the precision (default: 6).
If the precision is 0 then no decimal point is output.
If the <b>E</b> form is used then <b>E</b> is 
printed instead of <b>e</b>.
</dd>
</dle>
<dle>
<dt><b>g</b> or <b>G</b></dt>
<dd>If the exponent is less than -4 or greater than or equal to the 
precision, then convert number as for <b>%e</b> or 
<b>%E</b>.
Otherwise convert as for <b>%f</b>.
Trailing zeroes and a trailing decimal point are omitted.
</dd>
</dle>
<dle>
<dt><b>%</b></dt>
<dd>No conversion: just insert <b>%</b>.
</dd>
</dle>
</dl>
</section>
<section>
<title>DIFFERENCES FROM ANSI SPRINTF</title>
<p>The behavior of the format command is the same as the
ANSI C <b>sprintf</b> procedure except for the following
differences:
</p>
<ol>
<li><b>%p</b> and <b>%n</b> specifiers are not supported.
</li>
<li>For <b>%c</b> conversions the argument must be an integer value,
which will then be converted to the corresponding character value.
</li>
<li>The size modifiers are ignored when formatting floating-point values.
The <b>ll</b> modifier has no <b>sprintf</b> counterpart.
</li>
</ol>
</section>
<section>
<title>EXAMPLES</title>
<p>Convert the numeric value of a UNICODE character to the character
itself:
</p>
<example>
set value 120
set char [<b cat="AMBIGUOUS ambiguous cmd">format</b> %c $value]
</example>
<p>Convert the output of <cmd>time</cmd> into seconds to an accuracy of
hundredths of a second:
</p>
<example>
set us [lindex [time $someTclCode] 0]
puts [<b cat="AMBIGUOUS ambiguous cmd">format</b> "%.2f seconds to execute" [expr {$us / 1e6}]]
</example>
<p>Create a packed X11 literal color specification:
</p>
<example>
# Each color-component should be in range (0..255)
set color [<b cat="AMBIGUOUS ambiguous cmd">format</b> "#%02x%02x%02x" $r $g $b]
</example>
<p>Use XPG3 format codes to allow reordering of fields (a technique that
is often used in localized message catalogs; see <b>msgcat</b>) without
reordering the data values passed to <b cat="AMBIGUOUS ambiguous cmd">format</b>:
</p>
<example>
set fmt1 "Today, %d shares in %s were bought at $%.2f each"
puts [<b cat="AMBIGUOUS ambiguous cmd">format</b> $fmt1 123 "Global BigCorp" 19.37]

set fmt2 "Bought %2\$s equity ($%3$.2f x %1\$d) today"
puts [<b cat="AMBIGUOUS ambiguous cmd">format</b> $fmt2 123 "Global BigCorp" 19.37]
</example>
<p>Print a small table of powers of three:
</p>
<example>
# Set up the column widths
set w1 5
set w2 10

# Make a nice header (with separator) for the table first
set sep +-[string repeat - $w1]-+-[string repeat - $w2]-+
puts $sep
puts [<b cat="AMBIGUOUS ambiguous cmd">format</b> "| %-*s | %-*s |" $w1 "Index" $w2 "Power"]
puts $sep

# Print the contents of the table
set p 1
for {set i 0} {$i&lt;=20} {incr i} {
   puts [<b cat="AMBIGUOUS ambiguous cmd">format</b> "| %*d | %*ld |" $w1 $i $w2 $p]
   set p [expr {wide($p) * 3}]
}

# Finish off by printing the separator again
puts $sep
</example>


</section>
<seealso>
<ref>scan(n)</ref>
<ref>sprintf(3)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>conversion specifier</keyword>
<keyword>format</keyword>
<keyword>sprintf</keyword>
<keyword>string</keyword>
<keyword>substitution</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="frame" version="8.4" title="frame">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: frame.n,v 1.6 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="frame" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>frame</name>
<desc>Create and manipulate frame widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">frame</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-borderwidth</li>
<li>-cursor</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-background</name>
<dbname>background</dbname>
<dbclass>Background</dbclass>
<desc>This option is the same as the standard <b>background</b> option
except that its value may also be specified as an empty string.
In this case, the widget will display no background or border, and
no colors will be consumed from its colormap for its background
and border.
</desc>
</optiondef>
<optiondef>
<name>-class</name>
<dbname>class</dbname>
<dbclass>Class</dbclass>
<desc>Specifies a class for the window.
This class will be used when querying the option database for
the window's other options, and it will also be used later for
other purposes such as bindings.
The <b>class</b> option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-colormap</name>
<dbname>colormap</dbname>
<dbclass>Colormap</dbclass>
<desc>Specifies a colormap to use for the window.
The value may be either <b>new</b>, in which case a new colormap is
created for the window and its children, or the name of another
window (which must be on the same screen and have the same visual
as <i>pathName</i>), in which case the new window will use the colormap
from the specified window.
If the <b>colormap</b> option is not specified, the new window
uses the same colormap as its parent.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-container</name>
<dbname>container</dbname>
<dbclass>Container</dbclass>
<desc>The value must be a boolean.  If true, it means that this window will
be used as a container in which some other application will be embedded
(for example, a Tk toplevel can be embedded using the <b>-use</b> option).
The window will support the appropriate window manager protocols for
things like geometry requests.  The window should not have any
children of its own in this application.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the desired height for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.  If this option is less than or equal
to zero then the window will not request any size at all.  Note that this
sets the total height of the frame, any <b>-borderwidth</b> or similar is
not added.  Normally <b>-height</b> should not be used if a propagating
geometry manager, such as <cmd>grid</cmd> or <cmd>pack</cmd>, is used within the
frame since the geometry manager will override the height of the frame.
</desc>
</optiondef>
<optiondef>
<name>-visual</name>
<dbname>visual</dbname>
<dbclass>Visual</dbclass>
<desc>Specifies visual information for the new window in any of the
forms accepted by <fun>Tk_GetVisual</fun>.
If this option is not specified, the new window will use the same
visual as its parent.
The <b>visual</b> option may not be modified with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired width for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.  If this option is less than or equal
to zero then the window will not request any size at all.  Note that this
sets the total width of the frame, any <b>-borderwidth</b> or similar is
not added.  Normally <b>-width</b> should not be used if a propagating
geometry manager, such as <cmd>grid</cmd> or <cmd>pack</cmd>, is used within the
frame since the geometry manager will override the width of the frame.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">frame</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a frame widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the frame such as its background color
and relief.  The <b cat="AMBIGUOUS widget cmd">frame</b> command returns the
path name of the new window.
</p>
<p>A frame is a simple widget.  Its primary purpose is to act as a
spacer or container for complex window layouts.  The only features
of a frame are its background color and an optional 3-D border to make the
frame appear raised or sunken.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">frame</b> command creates a new Tcl command whose
name is the same as the path name of the frame's window.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>PathName</i> is the name of the command, which is the same as
the frame widget's path name.  <i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for frame widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">frame</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? <m>?value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">frame</b>
command.

</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>When a new frame is created, it has no default event bindings:
frames are not intended to be interactive.

</p>
</section>
<seealso>
<ref>labelframe(n)</ref>
<ref>toplevel(n)</ref>
<ref>ttk_frame(n)</ref>
</seealso>
<keywords>
<keyword>frame</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_FreeXId" id="FreeXId">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: FreeXId.3,v 1.4 1999/04/21 21:53:21 rjohnson Exp $
 -->
<?TROFF.TH title="Tk_FreeXId" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_FreeXId</name>
<desc>make X resource identifier available for reuse</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<b>Tk_FreeXId(</b><m>display</m>, <m>id</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which <i>id</i> was allocated.
</desc>
</argdef>
<argdef>
<argtype>XID</argtype>
<name>id</name>
<argmode>in</argmode>
<desc>Identifier of X resource (window, font, pixmap, cursor, graphics
context, or colormap) that is no longer in use.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The default allocator for resource identifiers provided by Xlib is very
simple-minded and does not allow resource identifiers to be re-used.
If a long-running application reaches the end of the resource id
space, it will generate an X protocol error and crash.
Tk replaces the default id allocator with its own allocator, which
allows identifiers to be reused.
In order for this to work, <fun>Tk_FreeXId</fun> must be called to
tell the allocator about resources that have been freed.
Tk automatically calls <fun>Tk_FreeXId</fun> whenever it frees a
resource, so if you use procedures like <fun>Tk_GetFont</fun>,
<fun>Tk_GetGC</fun>, and <fun>Tk_GetPixmap</fun> then you need not call
<fun>Tk_FreeXId</fun>.
However, if you allocate resources directly from Xlib, for example
by calling <b>XCreatePixmap</b>, then you should call <fun>Tk_FreeXId</fun>
when you call the corresponding Xlib free procedure, such as
<b>XFreePixmap</b>.
If you don't call <fun>Tk_FreeXId</fun> then the resource identifier will
be lost, which could cause problems if the application runs long enough
to lose all of the available identifiers.

</p>
</section>
<keywords>
<keyword>resource identifier</keyword>
</keywords>
</manpage>
<manpage version="8.4" cat="fun" title="Tk_GeometryRequest" id="GeomReq">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     
     RCS: @(#) $Id: GeomReq.3,v 1.3 2001/09/26 20:25:17 pspjuth Exp $
 -->
<?TROFF.TH title="Tk_GeometryRequest" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GeometryRequest</name>
<name>Tk_SetMinimumRequestSize</name>
<name>Tk_SetInternalBorder</name>
<name>Tk_SetInternalBorderEx</name>
<desc>specify desired geometry or internal border for a window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_GeometryRequest</fun>(<m>tkwin</m>, <m>reqWidth</m>, <m>reqHeight</m>)

<fun>Tk_SetMinimumRequestSize</fun>(<m>tkwin</m>, <m>minWidth</m>, <m>minHeight</m>)

<fun>Tk_SetInternalBorder</fun>(<m>tkwin</m>, <m>width</m>)

<fun>Tk_SetInternalBorderEx</fun>(<m>tkwin</m>, <m>left</m>, <m>right</m>, <m>top</m>, <m>bottom</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window for which geometry is being requested.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>reqWidth</name>
<argmode>in</argmode>
<desc>Desired width for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>reqHeight</name>
<argmode>in</argmode>
<desc>Desired height for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>minWidth</name>
<argmode>in</argmode>
<desc>Desired minimum requested width for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>minHeight</name>
<argmode>in</argmode>
<desc>Desired minimum requested height for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Space to leave for internal border for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>left</name>
<argmode>in</argmode>
<desc>Space to leave for left side of internal border for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>right</name>
<argmode>in</argmode>
<desc>Space to leave for right side of internal border for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>top</name>
<argmode>in</argmode>
<desc>Space to leave for top side of internal border for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>bottom</name>
<argmode>in</argmode>
<desc>Space to leave for bottom side of internal border for <i>tkwin</i>, in pixel units.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GeometryRequest</fun> is called by widget code to indicate its
preference for the dimensions of a particular window.  The arguments
to <fun>Tk_GeometryRequest</fun> are made available to the geometry
manager for the window, which then decides on the actual geometry
for the window.  Although geometry managers generally try to satisfy
requests made to <fun>Tk_GeometryRequest</fun>, there is no guarantee that
this will always be possible.  Widget code should not assume that
a geometry request will be satisfied until it receives a
<b>ConfigureNotify</b> event indicating that the geometry change has
occurred.  Widget code should never call procedures like
<fun>Tk_ResizeWindow</fun> directly.  Instead, it should invoke
<fun>Tk_GeometryRequest</fun> and leave the final geometry decisions to
the geometry manager.
</p>
<p>If <i>tkwin</i> is a top-level window, then the geometry information
will be passed to the window manager using the standard ICCCM protocol.
</p>
<p><fun>Tk_SetInternalBorder</fun> is called by widget code to indicate that
the widget has an internal border.  This means that the widget draws
a decorative border inside the window instead of using the standard
X borders, which are external to the window's area.  For example,
internal borders are used to draw 3-D effects.  <i>Width</i>
specifies the width of the border in pixels.  Geometry managers will
use this information to avoid placing any children of <i>tkwin</i>
overlapping the outermost <i>width</i> pixels of <i>tkwin</i>'s area.
</p>
<p><fun>Tk_SetInternalBorderEx</fun> works like <fun>Tk_SetInternalBorder</fun>
but lets you specify different widths for different sides of the window.
</p>
<p><fun>Tk_SetMinimumRequestSize</fun> is called by widget code to indicate
that a geometry manager should request at least this size for the
widget.  This allows a widget to have some control over its size when
a propagating geometry manager is used inside it.
</p>
<p>The information specified in calls to <fun>Tk_GeometryRequest</fun>,
<fun>Tk_SetMinimumRequestSize</fun>, <fun>Tk_SetInternalBorder</fun> and
<fun>Tk_SetInternalBorderEx</fun> can be retrieved using the macros
<fun>Tk_ReqWidth</fun>, <fun>Tk_ReqHeight</fun>, <fun>Tk_MinReqWidth</fun>,
<fun>Tk_MinReqHeight</fun>, <fun>Tk_MinReqWidth</fun>, <fun>Tk_InternalBorderLeft</fun>,
<fun>Tk_InternalBorderRight</fun>, <fun>Tk_InternalBorderTop</fun> and
<fun>Tk_InternalBorderBottom</fun>.
See the <fun>Tk_WindowId</fun> manual entry for details.

</p>
</section>
<keywords>
<keyword>geometry</keyword>
<keyword>request</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetAnchor" version="8.1" title="Tk_GetAnchorFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetAnchor.3,v 1.6 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetAnchorFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetAnchorFromObj</name>
<name>Tk_GetAnchor</name>
<name>Tk_NameOfAnchor</name>
<desc>translate between strings and anchor positions</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetAnchorFromObj(</b><m>interp</m>, <m>objPtr</m>, <m>anchorPtr</m><b>)</b>

int
<b>Tk_GetAnchor(</b><m>interp</m>, <m>string</m>, <m>anchorPtr</m><b>)</b>

const char *
<b>Tk_NameOfAnchor(</b><m>anchor</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting, or NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value contains name of anchor point: <b>n</b>, <b>ne</b>,
<b>e</b>, <b>se</b>, <b>s</b>, <b>sw</b>, <b>w</b>, <b>nw</b>, or <b>center</b>;
internal rep will be modified to cache corresponding Tk_Anchor.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of anchor point is passed as
a string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="anchorPtr">*anchorPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store anchor position corresponding to
<i>objPtr</i> or <i>string</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Anchor</argtype>
<name>anchor</name>
<argmode>in</argmode>
<desc>Anchor position, e.g. <b>TCL_ANCHOR_CENTER</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetAnchorFromObj</fun> places in <i>*anchorPtr</i> an anchor position
(enumerated type <b>Tk_Anchor</b>)
corresponding to <i>objPtr</i>'s value.  The result will be one of
<b>TK_ANCHOR_N</b>, <b>TK_ANCHOR_NE</b>, <b>TK_ANCHOR_E</b>, <b>TK_ANCHOR_SE</b>,
<b>TK_ANCHOR_S</b>, <b>TK_ANCHOR_SW</b>, <b>TK_ANCHOR_W</b>, <b>TK_ANCHOR_NW</b>,
or <b>TK_ANCHOR_CENTER</b>.
Anchor positions are typically used for indicating a point on an object
that will be used to position the object, e.g. <b>TK_ANCHOR_N</b> means
position the top center point of the object at a particular place.
</p>
<p>Under normal circumstances the return value is <b>TCL_OK</b> and
<i>interp</i> is unused.
If <i>string</i> doesn't contain a valid anchor position
or an abbreviation of one of these names, <b>TCL_ERROR</b> is returned,
<i>*anchorPtr</i> is unmodified, and an error message is
stored in <i>interp</i>'s result if <i>interp</i> isn't NULL.
<fun>Tk_GetAnchorFromObj</fun> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to
<fun>Tk_GetAnchorFromObj</fun> with the same <i>objPtr</i>.
</p>
<p><fun>Tk_GetAnchor</fun> is identical to <fun>Tk_GetAnchorFromObj</fun> except
that the description of the anchor is specified with a string instead
of an object.  This prevents <fun>Tk_GetAnchor</fun> from caching the
return value, so <fun>Tk_GetAnchor</fun> is less efficient than
<fun>Tk_GetAnchorFromObj</fun>.
</p>
<p><fun>Tk_NameOfAnchor</fun> is the logical inverse of <fun>Tk_GetAnchor</fun>.
Given an anchor position such as <b>TK_ANCHOR_N</b> it returns a
statically-allocated string corresponding to <i>anchor</i>.
If <i>anchor</i> isn't a legal anchor value, then
``unknown anchor position'' is returned.

</p>
</section>
<keywords>
<keyword>anchor position</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetBitmap" version="8.1" title="Tk_AllocBitmapFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetBitmap.3,v 1.10 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_AllocBitmapFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_AllocBitmapFromObj</name>
<name>Tk_GetBitmap</name>
<name>Tk_GetBitmapFromObj</name>
<name>Tk_DefineBitmap</name>
<name>Tk_NameOfBitmap</name>
<name>Tk_SizeOfBitmap</name>
<name>Tk_FreeBitmapFromObj</name>
<name>Tk_FreeBitmap</name>
<desc>maintain database of single-plane pixmaps</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Pixmap
<b>Tk_AllocBitmapFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m><b>)</b>

Pixmap
<b>Tk_GetBitmap(</b><m>interp</m>, <m>tkwin</m>, <m>info</m><b>)</b>

Pixmap
<b>Tk_GetBitmapFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

int
<b>Tk_DefineBitmap(</b><m>interp</m>, <m>name</m>, <m>source</m>, <m>width</m>, <m>height</m><b>)</b>

const char *
<b>Tk_NameOfBitmap(</b><m>display</m>, <m>bitmap</m><b>)</b>

<b>Tk_SizeOfBitmap(</b><m>display</m>, <m>bitmap</m>, <m>widthPtr</m>, <m>heightPtr</m><b>)</b>

<b>Tk_FreeBitmapFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

<b>Tk_FreeBitmap(</b><m>display</m>, <m>bitmap</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting; if NULL then no error message
is left after errors.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which the bitmap will be used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value describes desired bitmap; internal rep will be
modified to cache pointer to corresponding Pixmap.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="info">*info</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of bitmap is passed as a string and
resulting Pixmap isn't cached.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name for new bitmap to be defined.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="source">*source</name>
<argmode>in</argmode>
<desc>Data for bitmap, in standard bitmap format.
Must be stored in static memory whose value will never change.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of bitmap.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of bitmap.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="widthPtr">*widthPtr</name>
<argmode>out</argmode>
<desc>Pointer to word to fill in with <i>bitmap</i>'s width.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="heightPtr">*heightPtr</name>
<argmode>out</argmode>
<desc>Pointer to word to fill in with <i>bitmap</i>'s height.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which <i>bitmap</i> was allocated.
</desc>
</argdef>
<argdef>
<argtype>Pixmap</argtype>
<name>bitmap</name>
<argmode>in</argmode>
<desc>Identifier for a bitmap allocated by <fun>Tk_AllocBitmapFromObj</fun> or
<fun>Tk_GetBitmap</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures manage a collection of bitmaps (one-plane pixmaps)
being used by an application.  The procedures allow bitmaps to be
re-used efficiently, thereby avoiding server overhead, and also
allow bitmaps to be named with character strings.
</p>
<p><fun>Tk_AllocBitmapFromObj</fun> returns a Pixmap identifier for a bitmap
that matches the description in <i>objPtr</i> and is suitable for use
in <i>tkwin</i>.  It re-uses an existing bitmap, if possible, and
creates a new one otherwise.  <i>ObjPtr</i>'s value must have one
of the following forms:
</p>
<dl>
<dle>
<dt><b>@</b><m>fileName</m></dt>
<dd><i>FileName</i> must be the name of a file containing a bitmap
description in the standard X11 or X10 format.
</dd>
</dle>
<dle>
<dt><m>name</m></dt>
<dd><i>Name</i> must be the name of a bitmap defined previously with
a call to <fun>Tk_DefineBitmap</fun>.  The following names are pre-defined
by Tk:
<dl>
<dle>
<dt><b>error</b></dt>
<dd>The international "don't" symbol:  a circle with a diagonal line
across it.
</dd>
</dle>
<dle>
<dt><b>gray75</b></dt>
<dd>75% gray: a checkerboard pattern where three out of four bits are on.
</dd>
</dle>
<dle>
<dt><b>gray50</b></dt>
<dd>50% gray: a checkerboard pattern where every other bit is on.
</dd>
</dle>
<dle>
<dt><b>gray25</b></dt>
<dd>25% gray: a checkerboard pattern where one out of every four bits is on.
</dd>
</dle>
<dle>
<dt><b>gray12</b></dt>
<dd>12.5% gray: a pattern where one-eighth of the bits are on, consisting of
every fourth pixel in every other row.
</dd>
</dle>
<dle>
<dt><b>hourglass</b></dt>
<dd>An hourglass symbol.
</dd>
</dle>
<dle>
<dt><b>info</b></dt>
<dd>A large letter ``i''.
</dd>
</dle>
<dle>
<dt><b>questhead</b></dt>
<dd>The silhouette of a human head, with a question mark in it.
</dd>
</dle>
<dle>
<dt><b>question</b></dt>
<dd>A large question-mark.
</dd>
</dle>
<dle>
<dt><b>warning</b></dt>
<dd>A large exclamation point.
</dd>
</dle>
</dl><p>In addition, the following pre-defined names are available only on the
<b>Macintosh</b> platform:
</p><dl>
<dle>
<dt><b>document</b></dt>
<dd>A generic document.
</dd>
</dle>
<dle>
<dt><b>stationery</b></dt>
<dd>Document stationery.
</dd>
</dle>
<dle>
<dt><b>edition</b></dt>
<dd>The <i>edition</i> symbol.
</dd>
</dle>
<dle>
<dt><b>application</b></dt>
<dd>Generic application icon.
</dd>
</dle>
<dle>
<dt><b>accessory</b></dt>
<dd>A desk accessory.
</dd>
</dle>
<dle>
<dt><b>folder</b></dt>
<dd>Generic folder icon.
</dd>
</dle>
<dle>
<dt><b>pfolder</b></dt>
<dd>A locked folder.
</dd>
</dle>
<dle>
<dt><b>trash</b></dt>
<dd>A trash can.
</dd>
</dle>
<dle>
<dt><b>floppy</b></dt>
<dd>A floppy disk.
</dd>
</dle>
<dle>
<dt><b>ramdisk</b></dt>
<dd>A floppy disk with chip.
</dd>
</dle>
<dle>
<dt><b>cdrom</b></dt>
<dd>A cd disk icon.
</dd>
</dle>
<dle>
<dt><b>preferences</b></dt>
<dd>A folder with prefs symbol.
</dd>
</dle>
<dle>
<dt><b>querydoc</b></dt>
<dd>A database document icon.
</dd>
</dle>
<dle>
<dt><b>stop</b></dt>
<dd>A stop sign.
</dd>
</dle>
<dle>
<dt><b>note</b></dt>
<dd>A face with balloon words.
</dd>
</dle>
<dle>
<dt><b>caution</b></dt>
<dd>A triangle with an exclamation point.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
<p>Under normal conditions, <fun>Tk_AllocBitmapFromObj</fun>
returns an identifier for the requested bitmap.  If an error
occurs in creating the bitmap, such as when <i>objPtr</i> refers
to a non-existent file, then <b>None</b> is returned and an error
message is left in <i>interp</i>'s result if <i>interp</i> isn't
NULL. <fun>Tk_AllocBitmapFromObj</fun> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to procedures
such as <fun>Tk_AllocBitmapFromObj</fun> and <fun>Tk_GetBitmapFromObj</fun>.
</p>
<p><fun>Tk_GetBitmap</fun> is identical to <fun>Tk_AllocBitmapFromObj</fun> except
that the description of the bitmap is specified with a string instead
of an object.  This prevents <fun>Tk_GetBitmap</fun> from caching the
return value, so <fun>Tk_GetBitmap</fun> is less efficient than
<fun>Tk_AllocBitmapFromObj</fun>.
</p>
<p><fun>Tk_GetBitmapFromObj</fun> returns the token for an existing bitmap, given
the window and description used to create the bitmap.
<fun>Tk_GetBitmapFromObj</fun> doesn't actually create the bitmap; the bitmap
must already have been created with a previous call to
<fun>Tk_AllocBitmapFromObj</fun> or <fun>Tk_GetBitmap</fun>.  The return
value is cached in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_GetBitmapFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p><fun>Tk_DefineBitmap</fun> associates a name with
in-memory bitmap data so that the name can be used in later
calls to <fun>Tk_AllocBitmapFromObj</fun> or <fun>Tk_GetBitmap</fun>.  The <i>nameId</i>
argument gives a name for the bitmap;  it must not previously
have been used in a call to <fun>Tk_DefineBitmap</fun>.
The arguments <i>source</i>, <i>width</i>, and <i>height</i>
describe the bitmap.
<fun>Tk_DefineBitmap</fun> normally returns <b>TCL_OK</b>; if an error occurs
(e.g. a bitmap named <i>nameId</i> has already been defined) then
<b>TCL_ERROR</b> is returned and an error message is left in
<i>interp-&gt;result</i>.
Note:  <fun>Tk_DefineBitmap</fun> expects the memory pointed to by
<i>source</i> to be static:  <fun>Tk_DefineBitmap</fun> doesn't make
a private copy of this memory, but uses the bytes pointed to
by <i>source</i> later in calls to <fun>Tk_AllocBitmapFromObj</fun> or
<fun>Tk_GetBitmap</fun>.
</p>
<p>Typically <fun>Tk_DefineBitmap</fun> is used by <b>#include</b>-ing a
bitmap file directly into a C program and then referencing
the variables defined by the file.
For example, suppose there exists a file <b>stip.bitmap</b>,
which was created by the <b cat="canvasitemtype">bitmap</b> program and contains
a stipple pattern.
The following code uses <fun>Tk_DefineBitmap</fun> to define a
new bitmap named <b>foo</b>:
</p>
<example>
Pixmap bitmap;
#include "stip.bitmap"
Tk_DefineBitmap(interp, "foo", stip_bits,
    stip_width, stip_height);
...
bitmap = Tk_GetBitmap(interp, tkwin, "foo");
</example>
<p>This code causes the bitmap file to be read
at compile-time and incorporates the bitmap information into
the program's executable image.  The same bitmap file could be
read at run-time using <fun>Tk_GetBitmap</fun>:
</p>
<example>
Pixmap bitmap;
bitmap = Tk_GetBitmap(interp, tkwin, "@stip.bitmap");
</example>
<p>The second form is a bit more flexible (the file could be modified
after the program has been compiled, or a different string could be
provided to read a different file), but it is a little slower and
requires the bitmap file to exist separately from the program.
</p>
<p>Tk maintains a database of all the bitmaps that are currently in use.
Whenever possible, it will return an existing bitmap rather
than creating a new one.
When a bitmap is no longer used, Tk will release it automatically.
This approach can substantially reduce server overhead, so
<fun>Tk_AllocBitmapFromObj</fun> and <fun>Tk_GetBitmap</fun> should generally
be used in preference to Xlib procedures like <b>XReadBitmapFile</b>.
</p>
<p>The bitmaps returned by <fun>Tk_AllocBitmapFromObj</fun> and <fun>Tk_GetBitmap</fun>
are shared, so callers should never modify them.
If a bitmap must be modified dynamically, then it should be
created by calling Xlib procedures such as <b>XReadBitmapFile</b>
or <b>XCreatePixmap</b> directly.
</p>
<p>The procedure <fun>Tk_NameOfBitmap</fun> is roughly the inverse of
<fun>Tk_GetBitmap</fun>.
Given an X Pixmap argument, it returns the textual description that was
passed to <fun>Tk_GetBitmap</fun> when the bitmap was created.
<i>Bitmap</i> must have been the return value from a previous
call to <fun>Tk_AllocBitmapFromObj</fun> or <fun>Tk_GetBitmap</fun>.
</p>
<p><fun>Tk_SizeOfBitmap</fun> returns the dimensions of its <i>bitmap</i>
argument in the words pointed to by the <i>widthPtr</i> and
<i>heightPtr</i> arguments.  As with <fun>Tk_NameOfBitmap</fun>,
<i>bitmap</i> must have been created by <fun>Tk_AllocBitmapFromObj</fun> or
<fun>Tk_GetBitmap</fun>.
</p>
<p>When a bitmap is no longer needed, <fun>Tk_FreeBitmapFromObj</fun> or
<fun>Tk_FreeBitmap</fun> should be called to release it.
For <fun>Tk_FreeBitmapFromObj</fun> the bitmap to release is specified
with the same information used to create it; for
<fun>Tk_FreeBitmap</fun> the bitmap to release is specified
with its Pixmap token.
There should be exactly one call to <fun>Tk_FreeBitmapFromObj</fun>
or <fun>Tk_FreeBitmap</fun> for each call to <fun>Tk_AllocBitmapFromObj</fun> or
<fun>Tk_GetBitmap</fun>.

</p>
</section>
<section>
<title>BUGS</title>
<p>In determining whether an existing bitmap can be used to satisfy
a new request, <fun>Tk_AllocBitmapFromObj</fun> and <fun>Tk_GetBitmap</fun>
consider only the immediate value of the string description.  For
example, when a file name is passed to <fun>Tk_GetBitmap</fun>,
<fun>Tk_GetBitmap</fun> will assume it is safe to re-use an existing
bitmap created from the same file name:  it will not check to
see whether the file itself has changed, or whether the current
directory has changed, thereby causing the name to refer to
a different file.

</p>
</section>
<keywords>
<keyword>bitmap</keyword>
<keyword>pixmap</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetCapStyl" title="Tk_GetCapStyle">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetCapStyl.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetCapStyle" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetCapStyle</name>
<name>Tk_NameOfCapStyle</name>
<desc>translate between strings and cap styles</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetCapStyle(</b><m>interp</m>, <m>string</m>, <m>capPtr</m><b>)</b>

const char *
<b>Tk_NameOfCapStyle(</b><m>cap</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>String containing name of cap style: one of ```butt'', ``projecting'',
or ``round''.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="capPtr">*capPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store X cap style corresponding to
<i>string</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>cap</name>
<argmode>in</argmode>
<desc>Cap style: one of <b>CapButt</b>, <b>CapProjecting</b>, or <b>CapRound</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetCapStyle</fun> places in <i>*capPtr</i> the X cap style
corresponding to <i>string</i>.
This will be one of the values
<b>CapButt</b>, <b>CapProjecting</b>, or <b>CapRound</b>.
Cap styles are typically used in X graphics contexts to indicate
how the end-points of lines should be capped.
See the X documentation for information on what each style
implies.
</p>
<p>Under normal circumstances the return value is <b>TCL_OK</b> and
<i>interp</i> is unused.
If <i>string</i> doesn't contain a valid cap style
or an abbreviation of one of these names, then an error message is
stored in <i>interp-&gt;result</i>, <b>TCL_ERROR</b> is returned, and
<i>*capPtr</i> is unmodified.
</p>
<p><fun>Tk_NameOfCapStyle</fun> is the logical inverse of <fun>Tk_GetCapStyle</fun>.
Given a cap style such as <b>CapButt</b> it returns a
statically-allocated string corresponding to <i>cap</i>.
If <i>cap</i> isn't a legal cap style, then
``unknown cap style'' is returned.

</p>
</section>
<keywords>
<keyword>butt</keyword>
<keyword>cap style</keyword>
<keyword>projecting</keyword>
<keyword>round</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetClrmap" version="4.0" title="Tk_GetColormap">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetClrmap.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetColormap" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetColormap</name>
<name>Tk_FreeColormap</name>
<desc>allocate and free colormaps</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Colormap
<b>Tk_GetColormap(</b><m>interp</m>, <m>tkwin</m>, <m>string</m><b>)</b>

<b>Tk_FreeColormap(</b><m>display</m>, <m>colormap</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which colormap will be used.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Selects a colormap:  either <b>new</b> or the name of a window
with the same screen and visual as <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which <i>colormap</i> was allocated.
</desc>
</argdef>
<argdef>
<argtype>Colormap</argtype>
<name>colormap</name>
<argmode>in</argmode>
<desc>Colormap to free;  must have been returned by a previous
call to <fun>Tk_GetColormap</fun> or <fun>Tk_GetVisual</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are used to manage colormaps.
<fun>Tk_GetColormap</fun> returns a colormap suitable for use in <i>tkwin</i>.
If its <i>string</i> argument is <b>new</b> then a new colormap is
created;  otherwise <i>string</i> must be the name of another window
with the same screen and visual as <i>tkwin</i>, and the colormap from that
window is returned.
If <i>string</i> doesn't make sense, or if it refers to a window on
a different screen from <i>tkwin</i> or with
a different visual than <i>tkwin</i>, then <fun>Tk_GetColormap</fun> returns
<b>None</b> and leaves an error message in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_FreeColormap</fun> should be called when a colormap returned by
<fun>Tk_GetColormap</fun> is no longer needed.
Tk maintains a reference count for each colormap returned by
<fun>Tk_GetColormap</fun>, so there should eventually be one call to
<fun>Tk_FreeColormap</fun> for each call to <fun>Tk_GetColormap</fun>.
When a colormap's reference count becomes zero, Tk releases the
X colormap.
</p>
<p><fun>Tk_GetVisual</fun> and <fun>Tk_GetColormap</fun> work together, in that
a new colormap created by <fun>Tk_GetVisual</fun> may later be returned
by <fun>Tk_GetColormap</fun>.
The reference counting mechanism for colormaps includes both procedures,
so callers of <fun>Tk_GetVisual</fun> must also call <fun>Tk_FreeColormap</fun>
to release the colormap.
If <fun>Tk_GetColormap</fun> is called with a <i>string</i> value of
<b>new</b> then the resulting colormap will never
be returned by <fun>Tk_GetVisual</fun>;  however, it can be used in other
windows by calling <fun>Tk_GetColormap</fun> with the original window's
name as <i>string</i>.

</p>
</section>
<keywords>
<keyword>colormap</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetColor" version="8.1" title="Tk_AllocColorFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1991 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetColor.3,v 1.6 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_AllocColorFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_AllocColorFromObj</name>
<name>Tk_GetColor</name>
<name>Tk_GetColorFromObj</name>
<name>Tk_GetColorByValue</name>
<name>Tk_NameOfColor</name>
<name>Tk_FreeColorFromObj</name>
<name>Tk_FreeColor</name>
<desc>maintain database of colors</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

XColor *
<b>Tk_AllocColorFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m><b>)</b>

XColor *
<b>Tk_GetColor(</b><m>interp</m>, <m>tkwin</m>, <m>name</m><b>)</b>

XColor *
<b>Tk_GetColorFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

XColor *
<b>Tk_GetColorByValue(</b><m>tkwin</m>, <m>prefPtr</m><b>)</b>

const char *
<b>Tk_NameOfColor(</b><m>colorPtr</m><b>)</b>

GC
<b>Tk_GCForColor(</b><m>colorPtr</m>, <m>drawable</m><b>)</b>

<b>Tk_FreeColorFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

<b>Tk_FreeColor(</b><m>colorPtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which color will be used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value describes desired color; internal rep will be
modified to cache pointer to corresponding (XColor *).
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of color is passed as a string and
resulting (XColor *) isn't cached.
</desc>
</argdef>
<argdef>
<argtype>XColor</argtype>
<name name="prefPtr">*prefPtr</name>
<argmode>in</argmode>
<desc>Indicates red, green, and blue intensities of desired
color.
</desc>
</argdef>
<argdef>
<argtype>XColor</argtype>
<name name="colorPtr">*colorPtr</name>
<argmode>in</argmode>
<desc>Pointer to X color information.  Must have been allocated by previous
call to <fun>Tk_AllocColorFromObj</fun>, <fun>Tk_GetColor</fun> or
<fun>Tk_GetColorByValue</fun>, except when passed to <fun>Tk_NameOfColor</fun>.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>Drawable in which the result graphics context will be used.  Must have
same screen and depth as the window for which the color was allocated.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures manage the colors being used by a Tk application.
They allow colors to be shared whenever possible, so that colormap
space is preserved, and they pick closest available colors when
colormap space is exhausted.
</p>
<p>Given a textual description of a color, <fun>Tk_AllocColorFromObj</fun>
locates a pixel value that may be used to render the color
in a particular window.  The desired color is specified with an
object whose string value must have one of the following forms:
</p>
<dl>
<dle>
<dt><m>colorname</m></dt>
<dd>Any of the valid textual names for a color defined in the
server's color database file, such as <b>red</b> or <b>PeachPuff</b>.
</dd>
</dle>
<dle>
<dt><b>#</b><m>RGB</m></dt>
<dd/>
</dle>
<dle>
<dt><b>#</b><m>RRGGBB</m></dt>
<dd/>
</dle>
<dle>
<dt><b>#</b><m>RRRGGGBBB</m></dt>
<dd/>
</dle>
<dle>
<dt><b>#</b><m>RRRRGGGGBBBB</m></dt>
<dd>A numeric specification of the red, green, and blue intensities
to use to display the color.  Each <i>R</i>, <i>G</i>, or <i>B</i>
represents a single hexadecimal digit.  The four forms permit
colors to be specified with 4-bit, 8-bit, 12-bit or 16-bit values.
When fewer than 16 bits are provided for each color, they represent
the most significant bits of the color.  For example, #3a7 is the
same as #3000a0007000.
</dd>
</dle>
</dl>
<p><fun>Tk_AllocColorFromObj</fun> returns a pointer to
an XColor structure;  the structure indicates the exact intensities of
the allocated color (which may differ slightly from those requested,
depending on the limitations of the screen) and a pixel value
that may be used to draw with the color in <i>tkwin</i>.
If an error occurs in <fun>Tk_AllocColorFromObj</fun> (such as an unknown
color name) then NULL is returned and an error message is stored in
<i>interp</i>'s result if <i>interp</i> isn't NULL.
If the colormap for <i>tkwin</i> is full, <fun>Tk_AllocColorFromObj</fun>
will use the closest existing color in the colormap.
<fun>Tk_AllocColorFromObj</fun> caches information about
the return value in <i>objPtr</i>, which speeds up future calls to procedures
such as <fun>Tk_AllocColorFromObj</fun> and <fun>Tk_GetColorFromObj</fun>.
</p>
<p><fun>Tk_GetColor</fun> is identical to <fun>Tk_AllocColorFromObj</fun> except
that the description of the color is specified with a string instead
of an object.  This prevents <fun>Tk_GetColor</fun> from caching the
return value, so <fun>Tk_GetColor</fun> is less efficient than
<fun>Tk_AllocColorFromObj</fun>.
</p>
<p><fun>Tk_GetColorFromObj</fun> returns the token for an existing color, given
the window and description used to create the color.
<fun>Tk_GetColorFromObj</fun> doesn't actually create the color; the color
must already have been created with a previous call to
<fun>Tk_AllocColorFromObj</fun> or <fun>Tk_GetColor</fun>.  The return
value is cached in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_GetColorFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p><fun>Tk_GetColorByValue</fun> is similar to <fun>Tk_GetColor</fun> except that
the desired color is indicated with the <i>red</i>, <i>green</i>, and
<i>blue</i> fields of the structure pointed to by <i>colorPtr</i>.
</p>
<p>This package maintains a database
of all the colors currently in use.
If the same color is requested multiple times from
<fun>Tk_GetColor</fun> or <fun>Tk_AllocColorFromObj</fun> (e.g. by different
windows), or if the 
same intensities are requested multiple times from
<fun>Tk_GetColorByValue</fun>, then existing pixel values will
be re-used.  Re-using an existing pixel avoids any interaction
with the window server, which makes the allocation much more
efficient.  These procedures also provide a portable interface that
works across all platforms.  For this reason, you should generally use
<fun>Tk_AllocColorFromObj</fun>, <fun>Tk_GetColor</fun>, or <fun>Tk_GetColorByValue</fun>
instead of lower level procedures like <b>XAllocColor</b>.
</p>
<p>Since different calls to this package
may return the same shared
pixel value, callers should never change the color of a pixel
returned by the procedures.
If you need to change a color value dynamically, you should use
<b>XAllocColorCells</b> to allocate the pixel value for the color.
</p>
<p>The procedure <fun>Tk_NameOfColor</fun> is roughly the inverse of
<fun>Tk_GetColor</fun>.  If its <i>colorPtr</i> argument was created
by <fun>Tk_AllocColorFromObj</fun> or <fun>Tk_GetColor</fun> then the return value
is the string that was used to create the
color.  If <i>colorPtr</i> was created by a call to <fun>Tk_GetColorByValue</fun>,
or by any other mechanism, then the return value is a string
that could be passed to <fun>Tk_GetColor</fun> to return the same
color.  Note:  the string returned by <fun>Tk_NameOfColor</fun> is
only guaranteed to persist until the next call to
<fun>Tk_NameOfColor</fun>.
</p>
<p><fun>Tk_GCForColor</fun> returns a graphics context whose <b>foreground</b>
field is the pixel allocated for <i>colorPtr</i> and whose other fields
all have default values.
This provides an easy way to do basic drawing with a color.
The graphics context is cached with the color and will exist only as
long as <i>colorPtr</i> exists;  it is freed when the last reference
to <i>colorPtr</i> is freed by calling <fun>Tk_FreeColor</fun>.
</p>
<p>When a color is no longer needed <fun>Tk_FreeColorFromObj</fun> or
<fun>Tk_FreeColor</fun> should be called to release it.
For <fun>Tk_FreeColorFromObj</fun> the color to release is specified
with the same information used to create it; for
<fun>Tk_FreeColor</fun> the color to release is specified
with a pointer to its XColor structure.
There should be exactly one call to <fun>Tk_FreeColorFromObj</fun>
or <fun>Tk_FreeColor</fun> for each call to <fun>Tk_AllocColorFromObj</fun>,
<fun>Tk_GetColor</fun>, or <fun>Tk_GetColorByValue</fun>.
</p>
</section>
<seealso>
<ref>colors(n)</ref>
</seealso>
<keywords>
<keyword>color</keyword>
<keyword>intensity</keyword>
<keyword>object</keyword>
<keyword>pixel value</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetCursor" version="8.1" title="Tk_AllocCursorFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetCursor.3,v 1.9 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_AllocCursorFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_AllocCursorFromObj</name>
<name>Tk_GetCursor</name>
<name>Tk_GetCursorFromObj</name>
<name>Tk_GetCursorFromData</name>
<name>Tk_NameOfCursor</name>
<name>Tk_FreeCursorFromObj</name>
<name>Tk_FreeCursor</name>
<desc>maintain database of cursors</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Cursor
<b>Tk_AllocCursorFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m><b>)</b>

Tk_Cursor
<b>Tk_GetCursor(</b><m>interp</m>, <m>tkwin</m>, <m>name</m><b>)</b>

Tk_Cursor
<b>Tk_GetCursorFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

Tk_Cursor
<b>Tk_GetCursorFromData(</b><m>interp</m>, <m>tkwin</m>, <m>source</m>, <m>mask</m>, <m>width</m>, <m>height</m>, <m>xHot</m>, <m>yHot</m>, <m>fg</m>, <m>bg</m><b>)</b>

const char *
<b>Tk_NameOfCursor(</b><m>display</m>, <m>cursor</m><b>)</b>

<b>Tk_FreeCursorFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

<b>Tk_FreeCursor(</b><m>display</m>, <m>cursor</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which the cursor will be used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>Description of cursor;  see below for possible values.  Internal rep will be
modified to cache pointer to corresponding Tk_Cursor.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of cursor is passed as a string and
resulting Tk_Cursor isn't cached.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="source">*source</name>
<argmode>in</argmode>
<desc>Data for cursor cursor, in standard cursor format.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="mask">*mask</name>
<argmode>in</argmode>
<desc>Data for mask cursor, in standard cursor format.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of <i>source</i> and <i>mask</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of <i>source</i> and <i>mask</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>xHot</name>
<argmode>in</argmode>
<desc>X-location of cursor hot-spot.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>yHot</name>
<argmode>in</argmode>
<desc>Y-location of cursor hot-spot.
</desc>
</argdef>
<argdef>
<argtype>Tk_Uid</argtype>
<name>fg</name>
<argmode>in</argmode>
<desc>Textual description of foreground color for cursor.
</desc>
</argdef>
<argdef>
<argtype>Tk_Uid</argtype>
<name>bg</name>
<argmode>in</argmode>
<desc>Textual description of background color for cursor.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which <i>cursor</i> was allocated.
</desc>
</argdef>
<argdef>
<argtype>Tk_Cursor</argtype>
<name>cursor</name>
<argmode>in</argmode>
<desc>Opaque Tk identifier for cursor.  If passed to <fun>Tk_FreeCursor</fun>, must
have been returned by some previous call to <fun>Tk_GetCursor</fun> or
<fun>Tk_GetCursorFromData</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures manage a collection of cursors
being used by an application.  The procedures allow cursors to be
re-used efficiently, thereby avoiding server overhead, and also
allow cursors to be named with character strings.
</p>
<p><fun>Tk_AllocCursorFromObj</fun> takes as argument an object describing a
cursor, and returns an opaque Tk identifier for a cursor corresponding
to the description.  It re-uses an existing cursor if possible and
creates a new one otherwise.  <fun>Tk_AllocCursorFromObj</fun> caches
information about the return value in <i>objPtr</i>, which speeds up
future calls to procedures such as <fun>Tk_AllocCursorFromObj</fun> and
<fun>Tk_GetCursorFromObj</fun>. If an error occurs in creating the cursor,
such as when <i>objPtr</i> refers to a non-existent file, then <b>None</b>
is returned and an error message will be stored in <i>interp</i>'s result
if <i>interp</i> isn't NULL.  <i>ObjPtr</i> must contain a standard Tcl
list with one of the following forms:
</p>
<dl>
<dle>
<dt><m>name</m> [<m>fgColor</m> [<m>bgColor</m>]]</dt>
<dd><i>Name</i> is the name of a cursor in the standard X cursor cursor,
i.e., any of the names defined in <b>cursorcursor.h</b>, without
the <b>XC_</b>.  Some example values are <b>X_cursor</b>, <b>hand2</b>,
or <b>left_ptr</b>.  Appendix B of ``The X Window System''
by Scheifler &amp; Gettys has illustrations showing what each of these
cursors looks like.  If <i>fgColor</i> and <i>bgColor</i> are both
specified, they give the foreground and background colors to use
for the cursor (any of the forms acceptable to <fun>Tk_GetColor</fun>
may be used).  If only <i>fgColor</i> is specified, then there
will be no background color:  the background will be transparent.
If no colors are specified, then the cursor
will use black for its foreground color and white for its background
color.
<p>The Macintosh version of Tk supports all of the X cursors and
will also accept any of the standard Mac cursors
including <b>ibeam</b>, <b>crosshair</b>, <b>watch</b>, <b>plus</b>, and
<b>arrow</b>.  In addition, Tk will load Macintosh cursor resources of
the types <b>crsr</b> (color) and <b>CURS</b> (black and white) by the
name of the resource.  The application and all its open
dynamic library's resource files will be searched for the named
cursor.  If there are conflicts color cursors will always be loaded
in preference to black and white cursors.
</p></dd>
</dle>
<dle>
<dt><b>@</b><m>sourceName maskName fgColor bgColor</m></dt>
<dd>In this form, <i>sourceName</i> and <i>maskName</i> are the names of
files describing cursors for the cursor's source bits and mask.
Each file must be in standard X11 or X10 cursor format.
<i>FgColor</i> and <i>bgColor</i> 
indicate the colors to use for the
cursor, in any of the forms acceptable to <fun>Tk_GetColor</fun>.  This
form of the command will not work on Macintosh or Windows computers.
</dd>
</dle>
<dle>
<dt><b>@</b><m>sourceName fgColor</m></dt>
<dd>This form is similar to the one above, except that the source is
used as mask also.  This means that the cursor's background is
transparent.  This form of the command will not work on Macintosh
or Windows computers.
</dd>
</dle>
<dle>
<dt><b>@</b><m>sourceName</m></dt>
<dd>This form only works on Windows, and will load a Windows system
cursor (<b>.ani</b> or <b>.cur</b>) from the file specified in
<i>sourceName</i>.
</dd>
</dle>
</dl>
<p><fun>Tk_GetCursor</fun> is identical to <fun>Tk_AllocCursorFromObj</fun> except
that the description of the cursor is specified with a string instead
of an object.  This prevents <fun>Tk_GetCursor</fun> from caching the
return value, so <fun>Tk_GetCursor</fun> is less efficient than
<fun>Tk_AllocCursorFromObj</fun>.
</p>
<p><fun>Tk_GetCursorFromObj</fun> returns the token for an existing cursor, given
the window and description used to create the cursor.
<fun>Tk_GetCursorFromObj</fun> doesn't actually create the cursor; the cursor
must already have been created with a previous call to
<fun>Tk_AllocCursorFromObj</fun> or <fun>Tk_GetCursor</fun>.  The return
value is cached in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_GetCursorFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p><fun>Tk_GetCursorFromData</fun> allows cursors to be created from
in-memory descriptions of their source and mask cursors.  <i>Source</i>
points to standard cursor data for the cursor's source bits, and
<i>mask</i> points to standard cursor data describing
which pixels of <i>source</i> are to be drawn and which are to be
considered transparent.  <i>Width</i> and <i>height</i> give the
dimensions of the cursor, <i>xHot</i> and <i>yHot</i> indicate the
location of the cursor's hot-spot (the point that is reported when
an event occurs), and <i>fg</i> and <i>bg</i> describe the cursor's
foreground and background colors textually (any of the forms
suitable for <fun>Tk_GetColor</fun> may be used).  Typically, the
arguments to <fun>Tk_GetCursorFromData</fun> are created by including
a cursor file directly into the source code for a program, as in
the following example:
</p>
<example>
Tk_Cursor cursor;
#include "source.cursor"
#include "mask.cursor"
cursor = Tk_GetCursorFromData(interp, tkwin, source_bits,
    mask_bits, source_width, source_height, source_x_hot,
    source_y_hot, Tk_GetUid("red"), Tk_GetUid("blue"));
</example>
<p>Under normal conditions <fun>Tk_GetCursorFromData</fun>
will return an identifier for the requested cursor.  If an error
occurs in creating the cursor then <b>None</b> is returned and an error
message will be stored in <i>interp</i>'s result.
</p>
<p><fun>Tk_AllocCursorFromObj</fun>, <fun>Tk_GetCursor</fun>, and
<fun>Tk_GetCursorFromData</fun> maintain a
database of all the cursors they have created.  Whenever possible,
a call to <fun>Tk_AllocCursorFromObj</fun>, <fun>Tk_GetCursor</fun>, or
<fun>Tk_GetCursorFromData</fun> will
return an existing cursor rather than creating a new one.  This
approach can substantially reduce server overhead, so the Tk
procedures should generally be used in preference to Xlib procedures
like <b>XCreateFontCursor</b> or <b>XCreatePixmapCursor</b>, which
create a new cursor on each call.  The Tk procedures are also more
portable than the lower-level X procedures.
</p>
<p>The procedure <fun>Tk_NameOfCursor</fun> is roughly the inverse of
<fun>Tk_GetCursor</fun>.  If its <i>cursor</i> argument was created
by <fun>Tk_GetCursor</fun>, then the return value is the <i>name</i>
argument that was passed to <fun>Tk_GetCursor</fun> to create the
cursor.  If <i>cursor</i> was created by a call to <fun>Tk_GetCursorFromData</fun>,
or by any other mechanism, then the return value is a hexadecimal string
giving the X identifier for the cursor.
Note:  the string returned by <fun>Tk_NameOfCursor</fun> is
only guaranteed to persist until the next call to
<fun>Tk_NameOfCursor</fun>.  Also, this call is not portable except for
cursors returned by <fun>Tk_GetCursor</fun>.
</p>
<p>When a cursor returned by <fun>Tk_AllocCursorFromObj</fun>, <fun>Tk_GetCursor</fun>,
or <fun>Tk_GetCursorFromData</fun>
is no longer needed, <fun>Tk_FreeCursorFromObj</fun> or
<fun>Tk_FreeCursor</fun> should be called to release it.
For <fun>Tk_FreeCursorFromObj</fun> the cursor to release is specified
with the same information used to create it; for
<fun>Tk_FreeCursor</fun> the cursor to release is specified
with its Tk_Cursor token.
There should be exactly one call to <fun>Tk_FreeCursor</fun> for
each call to <fun>Tk_AllocCursorFromObj</fun>, <fun>Tk_GetCursor</fun>,
or <fun>Tk_GetCursorFromData</fun>.

</p>
</section>
<section>
<title>BUGS</title>
<p>In determining whether an existing cursor can be used to satisfy
a new request, <fun>Tk_AllocCursorFromObj</fun>, <fun>Tk_GetCursor</fun>,
and <fun>Tk_GetCursorFromData</fun>
consider only the immediate values of their arguments.  For
example, when a file name is passed to <fun>Tk_GetCursor</fun>,
<fun>Tk_GetCursor</fun> will assume it is safe to re-use an existing
cursor created from the same file name:  it will not check to
see whether the file itself has changed, or whether the current
directory has changed, thereby causing the name to refer to
a different file.  Similarly, <fun>Tk_GetCursorFromData</fun> assumes
that if the same <i>source</i> pointer is used in two different calls,
then the pointers refer to the same data;  it does not check to
see if the actual data values have changed.

</p>
</section>
<keywords>
<keyword>cursor</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetCwd" title="Tcl_GetCwd" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetCwd.3,v 1.6 2004/10/07 14:44:32 dkf Exp $
 -->
<?TROFF.TH title="Tcl_GetCwd" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetCwd</name>
<name>Tcl_Chdir</name>
<desc>manipulate the current working directory</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

char *
<fun>Tcl_GetCwd</fun>(<m>interp</m>, <m>bufferPtr</m>)

int
<fun>Tcl_Chdir</fun>(<m>path</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to report an error, if any.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="bufferPtr">*bufferPtr</name>
<argmode>in/out</argmode>
<desc>This dynamic string is used to store the current working directory.
At the time of the call it should be uninitialized or free.  The
caller must eventually call <fun>Tcl_DStringFree</fun> to free up
anything stored here.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="path">*path</name>
<argmode>in</argmode>
<desc>File path in UTF-8 format.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures may be used to manipulate the current working
directory for the application.  They provide C-level access to
the same functionality as the Tcl <cmd>pwd</cmd> command.
</p>
<p><fun>Tcl_GetCwd</fun> returns a pointer to a string specifying the current
directory, or NULL if the current directory could not be determined.
If NULL is returned, an error message is left in the interp's result.
Storage for the result string is allocated in bufferPtr; the caller
must call <b>Tcl_DStringFree()</b> when the result is no longer needed.
The format of the path is UTF-8.
</p>
<p><fun>Tcl_Chdir</fun> changes the applications current working directory to
the value specified in <i>path</i>.  The format of the passed in string
must be UTF-8.  The function returns -1 on error or 0 on success.

</p>
</section>
<keywords>
<keyword>pwd</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetDash" version="8.3" title="Tk_GetDash">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetDash.3,v 1.5 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetDash" section="3" date="8.3" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetDash</name>
<desc>convert from string to valid dash structure.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_GetDash</fun>(<m>interp</m>, <m>string</m>, <m>dashPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char *</argtype>
<name>string</name>
<argmode>in</argmode>
<desc>Textual value to be converted.
</desc>
</argdef>
<argdef>
<argtype>Tk_Dash</argtype>
<name name="dashPtr">*dashPtr</name>
<argmode>out</argmode>
<desc>Points to place to store the dash pattern
value converted from <i>string</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedure parses the string and fills in the result in the
Tk_Dash structure. The string can be a list of integers or a
character string containing only <b>[.,-_]</b> or spaces. If all
goes well, <b>TCL_OK</b> is returned. If <i>string</i> doesn't have the
proper syntax then <b>TCL_ERROR</b> is returned, an error message is left
in the interpreter's result, and nothing is stored at *<i>dashPtr</i>.
</p>
<p>The first possible syntax is a list of integers. Each element
represents the number of pixels of a line segment. Only the odd
segments are drawn using the "outline" color. The other segments
are drawn transparent.
</p>
<p>The second possible syntax is a character list containing only
5 possible characters <b>[.,-_ ]</b>. The space can be used
to enlarge the space between other line elements, and can not
occur as the first position in the string. Some examples:
    -dash .     = -dash {2 4}
    -dash -     = -dash {6 4}
    -dash -.    = -dash {6 4 2 4}
    -dash -..   = -dash {6 4 2 4 2 4}
    -dash {. }  = -dash {2 8}
    -dash ,     = -dash {4 4}
</p>
<p>The main difference of this syntax with the previous is that it
is shape-conserving. This means that all values in the dash
list will be multiplied by the line width before display. This
assures that "." will always be displayed as a dot and "-"
always as a dash regardless of the line width.
</p>
<p>On systems where only a limited set of dash patterns, the dash
pattern will be displayed as the most close dash pattern that
is available. For example, on Windows only the first 4 of the
above examples are available. The last 2 examples will be
displayed identically as the first one.

</p>
</section>
<keywords>
<keyword>dash</keyword>
<keyword>conversion</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetFont" version="8.1" title="Tk_AllocFontFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetFont.3,v 1.9 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_AllocFontFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_AllocFontFromObj</name>
<name>Tk_GetFont</name>
<name>Tk_GetFontFromObj</name>
<name>Tk_NameOfFont</name>
<name>Tk_FreeFontFromObj</name>
<name>Tk_FreeFont</name>
<desc>maintain database of fonts</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Font 
<b>Tk_AllocFontFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m><b>)</b>

Tk_Font 
<b>Tk_GetFont(</b><m>interp</m>, <m>tkwin</m>, <m>string</m><b>)</b> 

Tk_Font 
<b>Tk_GetFontFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

const char *
<b>Tk_NameOfFont(</b><m>tkfont</m><b>)</b>

Tk_Font 
<b>Tk_FreeFontFromObj(</b><m>tkwin</m>, <m>objPtr</m><b>)</b>

void
<b>Tk_FreeFont(</b><m>tkfont</m><b>)</b>

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.  If <b>NULL</b>, then no error
messages are left after errors.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which font will be used.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>Gives name or description of font.  See documentation
for the <cmd>font</cmd> command for details on acceptable formats.
Internal rep will be modified to cache corresponding Tk_Font.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of font is passed as a string and
resulting Tk_Font isn't cached.
</desc>
</argdef>
<argdef>
<argtype>Tk_Font</argtype>
<name>tkfont</name>
<argmode>in</argmode>
<desc>Opaque font token.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tk_AllocFontFromObj</fun> finds the font indicated by <i>objPtr</i> and
returns a token that represents the font.  The return value can be used
in subsequent calls to procedures such as <fun>Tk_GetFontMetrics</fun>,
<fun>Tk_MeasureChars</fun>, and <fun>Tk_FreeFont</fun>.  The Tk_Font token
will remain valid until
<fun>Tk_FreeFontFromObj</fun> or <fun>Tk_FreeFont</fun> is called to release it. 
<i>ObjPtr</i> can contain either a symbolic name or a font description; see
the documentation for the <cmd>font</cmd> command for a description of the
valid formats.  If <fun>Tk_AllocFontFromObj</fun> is unsuccessful (because,
for example, <i>objPtr</i> did not contain a valid font specification) then it
returns <b>NULL</b> and leaves an error message in <i>interp</i>'s result
if <i>interp</i> isn't <b>NULL</b>.  <fun>Tk_AllocFontFromObj</fun> caches
information about the return
value in <i>objPtr</i>, which speeds up future calls to procedures
such as <fun>Tk_AllocFontFromObj</fun> and <fun>Tk_GetFontFromObj</fun>.
</p>
<p><fun>Tk_GetFont</fun> is identical to <fun>Tk_AllocFontFromObj</fun> except
that the description of the font is specified with a string instead
of an object.  This prevents <fun>Tk_GetFont</fun> from caching the
matching Tk_Font, so <fun>Tk_GetFont</fun> is less efficient than
<fun>Tk_AllocFontFromObj</fun>.
</p>
<p><fun>Tk_GetFontFromObj</fun> returns the token for an existing font, given
the window and description used to create the font.
<fun>Tk_GetFontFromObj</fun> doesn't actually create the font; the font
must already have been created with a previous call to
<fun>Tk_AllocFontFromObj</fun> or <fun>Tk_GetFont</fun>.  The return
value is cached in <i>objPtr</i>, which speeds up
future calls to <fun>Tk_GetFontFromObj</fun> with the same <i>objPtr</i>
and <i>tkwin</i>.
</p>
<p><fun>Tk_AllocFontFromObj</fun> and <fun>Tk_GetFont</fun> maintain
a database of all fonts they have allocated.  If
the same font is requested multiple times (e.g. by different
windows or for different purposes), then a single Tk_Font will be
shared for all uses.  The underlying resources will be freed automatically
when no-one is using the font anymore.
</p>
<p>The procedure <fun>Tk_NameOfFont</fun> is roughly the inverse of
<fun>Tk_GetFont</fun>.  Given a <i>tkfont</i> that was created by
<fun>Tk_GetFont</fun> (or <fun>Tk_AllocFontFromObj</fun>), the return value is
the <i>string</i> argument that was
passed to <fun>Tk_GetFont</fun> to create the font.  The string returned by
<fun>Tk_NameOfFont</fun> is only guaranteed to persist until the <i>tkfont</i>
is deleted.  The caller must not modify this string.
</p>
<p>When a font is no longer needed,
<fun>Tk_FreeFontFromObj</fun> or <fun>Tk_FreeFont</fun> should be called to
release it.  For <fun>Tk_FreeFontFromObj</fun> the font to release is specified
with the same information used to create it; for
<fun>Tk_FreeFont</fun> the font to release is specified
with its Tk_Font token.  There should be
exactly one call to <fun>Tk_FreeFontFromObj</fun> or <fun>Tk_FreeFont</fun>
for each call to <fun>Tk_AllocFontFromObj</fun> or <fun>Tk_GetFont</fun>.

</p>
</section>
<seealso>
<ref>Tk_FontId(3)</ref>
</seealso>
<keywords>
<keyword>font</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_GetGC" id="GetGC">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetGC.3,v 1.2 1998/09/14 18:22:49 stanton Exp $
 -->
<?TROFF.TH title="Tk_GetGC" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetGC</name>
<name>Tk_FreeGC</name>
<desc>maintain database of read-only graphics contexts</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

GC
<fun>Tk_GetGC</fun>(<m>tkwin</m>, <m>valueMask</m>, <m>valuePtr</m>)

<b>Tk_FreeGC(</b><m>display</m>, <m>gc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which the graphics context will be used.
</desc>
</argdef>
<argdef>
<argtype>unsigned long</argtype>
<name>valueMask</name>
<argmode>in</argmode>
<desc>Mask of bits (such as <b>GCForeground</b> or <b>GCStipple</b>)
indicating which fields of <i>*valuePtr</i> are valid.
</desc>
</argdef>
<argdef>
<argtype>XGCValues</argtype>
<name name="valuePtr">*valuePtr</name>
<argmode>in</argmode>
<desc>Pointer to structure describing the desired values for the
graphics context.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which <i>gc</i> was allocated.
</desc>
</argdef>
<argdef>
<argtype>GC</argtype>
<name>gc</name>
<argmode>in</argmode>
<desc>X identifier for graphics context that is no longer needed.
Must have been allocated by <fun>Tk_GetGC</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetGC</fun> and <fun>Tk_FreeGC</fun> manage a collection of graphics contexts
being used by an application.  The procedures allow graphics contexts to be
shared, thereby avoiding the server overhead that would be incurred
if a separate GC were created for each use.  <fun>Tk_GetGC</fun> takes arguments
describing the desired graphics context and returns an X identifier
for a GC that fits the description.  The graphics context that is returned
will have default values in all of the fields not specified explicitly
by <i>valueMask</i> and <i>valuePtr</i>.
</p>
<p><fun>Tk_GetGC</fun> maintains a
database of all the graphics contexts it has created.  Whenever possible,
a call to <fun>Tk_GetGC</fun> will
return an existing graphics context rather than creating a new one.  This
approach can substantially reduce server overhead, so <fun>Tk_GetGC</fun>
should generally be used in preference to the Xlib procedure
<b>XCreateGC</b>, which creates a new graphics context on each call.
</p>
<p>Since the return values of <fun>Tk_GetGC</fun>
are shared, callers should never modify the graphics contexts
returned by <fun>Tk_GetGC</fun>.
If a graphics context must be modified dynamically, then it should be
created by calling <b>XCreateGC</b> instead of <fun>Tk_GetGC</fun>.
</p>
<p>When a graphics context
is no longer needed, <fun>Tk_FreeGC</fun> should be called to release it.
There should be exactly one call to <fun>Tk_FreeGC</fun> for
each call to <fun>Tk_GetGC</fun>.
When a graphics context is no longer in use anywhere (i.e. it has
been freed as many times as it has been gotten) <fun>Tk_FreeGC</fun>
will release it to the X server and delete it from the database.

</p>
</section>
<keywords>
<keyword>graphics context</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_GetHISTANCE" id="GetHINSTANCE">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: GetHINSTANCE.3,v 1.2 2002/11/15 15:35:55 dkf Exp $
 -->
<?TROFF.TH title="Tk_GetHISTANCE" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetHINSTANCE</name>
<desc>retrieve the global application instance handle</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

HINSTANCE
<fun>Tk_GetHINSTANCE</fun>()
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetHINSTANCE</fun> returns the Windows application instance handle
for the Tk application.  This function is only available on Windows platforms.

</p>
</section>
<keywords>
<keyword>identifier</keyword>
<keyword>instance</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetHostName" title="Tcl_GetHostName" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: GetHostName.3,v 1.4 2004/10/07 15:15:38 dkf Exp $
 -->
<?TROFF.TH title="Tcl_GetHostName" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetHostName</name>
<desc>get the name of the local host</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

const char *
<fun>Tcl_GetHostName</fun>()
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_GetHostName</fun> is a utility procedure used by some of the
Tcl commands.  It returns a pointer to a string containing the name 
for the current machine, or an empty string if the name cannot be
determined.  The string is statically allocated, and the caller must
not modify of free it.
</p>
</section>
<keywords>
<keyword>hostname</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetHWND" title="HWND" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: GetHWND.3,v 1.4 2004/08/22 15:43:20 dkf Exp $
 -->
<?TROFF.TH title="HWND" section="3" date="8.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetHWND</name>
<name>Tk_AttachHWND</name>
<desc>manage interactions between the Windows handle and an X window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tkPlatDecls.h&gt;</b>

HWND
<fun>Tk_GetHWND</fun>(<m>window</m>)

Window
<fun>Tk_AttachHWND</fun>(<m>tkwin</m>, <m>hwnd</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Window</argtype>
<name>window</name>
<argmode>in</argmode>
<desc>X token for window.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Tk window for window.
</desc>
</argdef>
<argdef>
<argtype>HWND</argtype>
<name>hwnd</name>
<argmode>in</argmode>
<desc>Windows HWND for window.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetHWND</fun> returns the Windows HWND identifier for X Windows
window given by <i>window</i>.
</p>
<p><fun>Tk_AttachHWND</fun> binds the Windows HWND identifier to the
specified Tk_Window given by <i>tkwin</i>. It returns an X Windows
window that encapsulates the HWND.

</p>
</section>
<keywords>
<keyword>identifier</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetImage" version="4.0" title="Tk_GetImage">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetImage.3,v 1.7 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetImage" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetImage</name>
<name>Tk_RedrawImage</name>
<name>Tk_SizeOfImage</name>
<name>Tk_FreeImage</name>
<desc>use an image in a widget</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Image
<fun>Tk_GetImage</fun>(<m>interp</m>, <m>tkwin</m>, <m>name</m>, <m>changeProc</m>, <m>clientData</m>)

<fun>Tk_RedrawImage</fun>(<m>image</m>, <m>imageX</m>, <m>imageY</m>, <m>width</m>, <m>height</m>, <m>drawable</m>, <m>drawableX</m>, <m>drawableY</m>)

<fun>Tk_SizeOfImage</fun>(<m>image</m>, <m>widthPtr</m>, <m>heightPtr</m>)

<fun>Tk_FreeImage</fun>(<m>image</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Place to leave error message.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window in which image will be used.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of image.
</desc>
</argdef>
<argdef>
<argtype>Tk_ImageChangedProc</argtype>
<name name="changeProc">*changeProc</name>
<argmode>in</argmode>
<desc>Procedure for Tk to invoke whenever image content or size changes.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>One-word value for Tk to pass to <i>changeProc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Image</argtype>
<name>image</name>
<argmode>in</argmode>
<desc>Token for image instance;  must have been returned by a previous
call to <fun>Tk_GetImage</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>imageX</name>
<argmode>in</argmode>
<desc>X-coordinate of upper-left corner of region of image to redisplay
(measured in pixels from the image's upper-left corner).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>imageY</name>
<argmode>in</argmode>
<desc>Y-coordinate of upper-left corner of region of image to redisplay
(measured in pixels from the image's upper-left corner).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of region of image to redisplay.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of region of image to redisplay.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>Where to display image.  Must either be window specified to
<fun>Tk_GetImage</fun> or a pixmap compatible with that window.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>drawableX</name>
<argmode>in</argmode>
<desc>Where to display image in <i>drawable</i>: this is the x-coordinate
in <i>drawable</i> where x-coordinate <i>imageX</i> of the image
should be displayed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>drawableY</name>
<argmode>in</argmode>
<desc>Where to display image in <i>drawable</i>: this is the y-coordinate
in <i>drawable</i> where y-coordinate <i>imageY</i> of the image
should be displayed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>widthPtr</name>
<argmode>out</argmode>
<desc>Store width of <i>image</i> (in pixels) here.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>heightPtr</name>
<argmode>out</argmode>
<desc>Store height of <i>image</i> (in pixels) here.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are invoked by widgets that wish to display images.
<fun>Tk_GetImage</fun> is invoked by a widget when it first decides to
display an image.
<i>name</i> gives the name of the desired image and <i>tkwin</i>
identifies the window where the image will be displayed.
<fun>Tk_GetImage</fun> looks up the image in the table of existing
images and returns a token for a new instance of the image.
If the image doesn't exist then <fun>Tk_GetImage</fun> returns NULL
and leaves an error message in <i>interp-&gt;result</i>.
</p>
<p>When a widget wishes to actually display an image it must
call <fun>Tk_RedrawImage</fun>, identifying the image (<i>image</i>),
a region within the image to redisplay (<i>imageX</i>, <i>imageY</i>,
<i>width</i>, and <i>height</i>), and a place to display the
image (<i>drawable</i>, <i>drawableX</i>, and <i>drawableY</i>).
Tk will then invoke the appropriate image manager, which will
display the requested portion of the image before returning.
</p>
<p>A widget can find out the dimensions of an image by calling
<fun>Tk_SizeOfImage</fun>:  the width and height will be stored
in the locations given by <i>widthPtr</i> and <i>heightPtr</i>,
respectively.
</p>
<p>When a widget is finished with an image (e.g., the widget is
being deleted or it is going to use a different image instead
of the current one), it must call <fun>Tk_FreeImage</fun> to
release the image instance.
The widget should never again use the image token after passing
it to <fun>Tk_FreeImage</fun>.
There must be exactly one call to <fun>Tk_FreeImage</fun> for each
call to <fun>Tk_GetImage</fun>.
</p>
<p>If the contents or size of an image changes, then any widgets
using the image will need to find out about the changes so that
they can redisplay themselves.
The <i>changeProc</i> and <i>clientData</i> arguments to
<fun>Tk_GetImage</fun> are used for this purpose.
<i>changeProc</i> will be called by Tk whenever a change occurs
in the image;  it must match the following prototype:
</p>
<syntax cat="type" name="Tk_ImageChangedProc" scope="global">
typedef void Tk_ImageChangedProc(
    ClientData <i>clientData</i>,
    int <i>x</i>,
    int <i>y</i>,
    int <i>width</i>,
    int <i>height</i>,
    int <i>imageWidth</i>,
    int <i>imageHeight</i>);
</syntax>
<p>The <i>clientData</i> argument to <i>changeProc</i> is the same as the
<i>clientData</i> argument to <fun>Tk_GetImage</fun>.
It is usually a pointer to the widget record for the widget or
some other data structure managed by the widget.
The arguments <i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i>
identify a region within the image that must be redisplayed;
they are specified in pixels measured from the upper-left
corner of the image.
The arguments <i>imageWidth</i> and <i>imageHeight</i> give
the image's (new) size.

</p>
</section>
<seealso>
<ref>Tk_CreateImageType</ref>
</seealso>
<keywords>
<keyword>images</keyword>
<keyword>redisplay</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetIndex" version="8.1" title="Tcl_GetIndexFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetIndex.3,v 1.20 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="Tcl_GetIndexFromObj" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetIndexFromObj</name>
<name>Tcl_GetIndexFromObjStruct</name>
<desc>lookup string in table of keywords</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_GetIndexFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>tablePtr</m>, <m>msg</m>, <m>flags</m>, <m>indexPtr</m>)

int
<fun>Tcl_GetIndexFromObjStruct</fun>(<m>interp</m>, <m>objPtr</m>, <m>structTablePtr</m>, <m>offset</m>, <m>msg</m>, <m>flags</m>, <m>indexPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting; if NULL, then no message is
provided on errors.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>The string value of this object is used to search through <i>tablePtr</i>.
The internal representation is modified to hold the index of the matching
table entry.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="tablePtr">**tablePtr</name>
<argmode>in</argmode>
<desc>An array of null-terminated strings.  The end of the array is marked
by a NULL string pointer.
</desc>
</argdef>
<argdef>
<argtype>const void</argtype>
<name name="structTablePtr">*structTablePtr</name>
<argmode>in</argmode>
<desc>An array of arbitrary type, typically some <b>struct</b> type.
The first member of the structure must be a null-terminated string.
The size of the structure is given by <i>offset</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>offset</name>
<argmode>in</argmode>
<desc>The offset to add to structTablePtr to get to the next entry.
The end of the array is marked by a NULL string pointer.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="msg">*msg</name>
<argmode>in</argmode>
<desc>Null-terminated string describing what is being looked up, such as
<cmd>option</cmd>.  This string is included in error messages.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>OR-ed combination of bits providing additional information for
operation.  The only bit that is currently defined is <b>TCL_EXACT</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="indexPtr">*indexPtr</name>
<argmode>out</argmode>
<desc>The index of the string in <i>tablePtr</i> that matches the value of
<i>objPtr</i> is returned here.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure provides an efficient way for looking up keywords,
switch names, option names, and similar things where the value of
an object must be one of a predefined set of values.
<i>ObjPtr</i> is compared against each of
the strings in <i>tablePtr</i> to find a match.  A match occurs if
<i>objPtr</i>'s string value is identical to one of the strings in
<i>tablePtr</i>, or if it is a non-empty unique abbreviation
for exactly one of the strings in <i>tablePtr</i> and the
<b>TCL_EXACT</b> flag was not specified; in either case
the index of the matching entry is stored at <i>*indexPtr</i>
and <b>TCL_OK</b> is returned.
</p>
<p>If there is no matching entry,
<b>TCL_ERROR</b> is returned and an error message is left in <i>interp</i>'s
result if <i>interp</i> isn't NULL.  <i>Msg</i> is included in the
error message to indicate what was being looked up.  For example,
if <i>msg</i> is <cmd>option</cmd> the error message will have a form like
<b>bad option "firt": must be first, second, or third</b>.
</p>
<p>If <fun>Tcl_GetIndexFromObj</fun> completes successfully it modifies the
internal representation of <i>objPtr</i> to hold the address of
the table and the index of the matching entry.  If <fun>Tcl_GetIndexFromObj</fun>
is invoked again with the same <i>objPtr</i> and <i>tablePtr</i>
arguments (e.g. during a reinvocation of a Tcl command), it returns
the matching index immediately without having to redo the lookup
operation.  Note: <fun>Tcl_GetIndexFromObj</fun> assumes that the entries
in <i>tablePtr</i> are static: they must not change between
invocations.  If the value of <i>objPtr</i> is the empty string,
<fun>Tcl_GetIndexFromObj</fun> will treat it as a non-matching value
and return <b>TCL_ERROR</b>.
</p>
<p><fun>Tcl_GetIndexFromObjStruct</fun> works just like
<fun>Tcl_GetIndexFromObj</fun>, except that instead of treating
<i>tablePtr</i> as an array of string pointers, it treats it as a
pointer to the first string in a series of strings that have
<i>offset</i> bytes between them (i.e. that there is a pointer to the
first array of characters at <i>tablePtr</i>, a pointer to the second
array of characters at <i>tablePtr</i>+<i>offset</i> bytes, etc.)
This is particularly useful when processing things like
<b>Tk_ConfigurationSpec</b>, whose string keys are in the same place in
each of several array elements.

</p>
</section>
<seealso>
<ref>Tcl_WrongNumArgs</ref>
</seealso>
<keywords>
<keyword>index</keyword>
<keyword>object</keyword>
<keyword>table lookup</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetInt" title="Tcl_GetInt">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetInt.3,v 1.10 2005/05/10 18:33:56 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_GetInt" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetInt</name>
<name>Tcl_GetDouble</name>
<name>Tcl_GetBoolean</name>
<desc>convert from string to integer, double, or boolean</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_GetInt</fun>(<m>interp</m>, <m>src</m>, <m>intPtr</m>)

int
<fun>Tcl_GetDouble</fun>(<m>interp</m>, <m>src</m>, <m>doublePtr</m>)

int
<fun>Tcl_GetBoolean</fun>(<m>interp</m>, <m>src</m>, <m>boolPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="src">*src</name>
<argmode>in</argmode>
<desc>Textual value to be converted.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="intPtr">*intPtr</name>
<argmode>out</argmode>
<desc>Points to place to store integer value converted from <i>src</i>.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Points to place to store double-precision floating-point
value converted from <i>src</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="boolPtr">*boolPtr</name>
<argmode>out</argmode>
<desc>Points to place to store boolean value (0 or 1) converted from <i>src</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures convert from strings to integers or double-precision
floating-point values or booleans (represented as 0- or 1-valued
integers).  Each of the procedures takes a <i>src</i> argument,
converts it to an internal form of a particular type, and stores
the converted value at the location indicated by the procedure's
third argument.  If all goes well, each of the procedures returns
<b>TCL_OK</b>.  If <i>src</i> doesn't have the proper syntax for the
desired type then <b>TCL_ERROR</b> is returned, an error message is left
in the interpreter's result, and nothing is stored at *<i>intPtr</i>
or *<i>doublePtr</i> or *<i>boolPtr</i>.
</p>
<p><fun>Tcl_GetInt</fun> expects <i>src</i> to consist of a collection
of integer digits, optionally signed and optionally preceded by
white space.  If the first two characters of <i>src</i>
after the optional white space and sign are ``0x''
then <i>src</i> is expected to be in hexadecimal form;  otherwise,
if the first such character is ``0'' then <i>src</i>
is expected to be in octal form;  otherwise, <i>src</i> is
expected to be in decimal form.
</p>
<p><fun>Tcl_GetDouble</fun> expects <i>src</i> to consist of a floating-point
number, which is:  white space;  a sign; a sequence of digits;  a
decimal point;  a sequence of digits;  the letter ``e'';  a
signed decimal exponent ; and more white space.
Any of the fields may be omitted, except that
the digits either before or after the decimal point must be present
and if the ``e'' is present then it must be followed by the
exponent number.
</p>
<p><fun>Tcl_GetBoolean</fun> expects <i>src</i> to specify a boolean
value.  If <i>src</i> is any of <b>0</b>, <b>false</b>,
<b>no</b>, or <b>off</b>, then <fun>Tcl_GetBoolean</fun> stores a zero
value at <i>*boolPtr</i>.
If <i>src</i> is any of <b>1</b>, <b>true</b>, <b>yes</b>, or <b>on</b>,
then 1 is stored at <i>*boolPtr</i>.
Any of these values may be abbreviated, and upper-case spellings
are also acceptable.

</p>
</section>
<keywords>
<keyword>boolean</keyword>
<keyword>conversion</keyword>
<keyword>double</keyword>
<keyword>floating-point</keyword>
<keyword>integer</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetJoinStl" title="Tk_GetJoinStyle">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetJoinStl.3,v 1.4 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetJoinStyle" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetJoinStyle</name>
<name>Tk_NameOfJoinStyle</name>
<desc>translate between strings and join styles</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetJoinStyle(</b><m>interp</m>, <m>string</m>, <m>joinPtr</m><b>)</b>

const char *
<b>Tk_NameOfJoinStyle(</b><m>join</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>String containing name of join style: one of ``bevel'', ``miter'',
or ``round''.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="joinPtr">*joinPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store X join style corresponding to
<i>string</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>join</name>
<argmode>in</argmode>
<desc>Join style: one of <b>JoinBevel</b>, <b>JoinMiter</b>, <b>JoinRound</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetJoinStyle</fun> places in <i>*joinPtr</i> the X join style
corresponding to <i>string</i>, which will be one of
<b>JoinBevel</b>, <b>JoinMiter</b>, or <b>JoinRound</b>.
Join styles are typically used in X graphics contexts to indicate
how adjacent line segments should be joined together.
See the X documentation for information on what each style
implies.
</p>
<p>Under normal circumstances the return value is <b>TCL_OK</b> and
<i>interp</i> is unused.
If <i>string</i> doesn't contain a valid join style
or an abbreviation of one of these names, then an error message is
stored in <i>interp-&gt;result</i>, <b>TCL_ERROR</b> is returned, and
<i>*joinPtr</i> is unmodified.
</p>
<p><fun>Tk_NameOfJoinStyle</fun> is the logical inverse of <fun>Tk_GetJoinStyle</fun>.
Given a join style such as <b>JoinBevel</b> it returns a
statically-allocated string corresponding to <i>join</i>.
If <i>join</i> isn't a legal join style, then
``unknown join style'' is returned.

</p>
</section>
<keywords>
<keyword>bevel</keyword>
<keyword>join style</keyword>
<keyword>miter</keyword>
<keyword>round</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetJustify" version="8.1" title="Tk_GetJustifyFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetJustify.3,v 1.6 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetJustifyFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetJustifyFromObj</name>
<name>Tk_GetJustify</name>
<name>Tk_NameOfJustify</name>
<desc>translate between strings and justification styles</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetJustifyFromObj(</b><m>interp</m>, <m>objPtr</m>, <m>justifyPtr</m><b>)</b>

int
<b>Tk_GetJustify(</b><m>interp</m>, <m>string</m>, <m>justifyPtr</m><b>)</b>

const char *
<b>Tk_NameOfJustify(</b><m>justify</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting, or NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value contains name of justification style (<b>left</b>, <b>right</b>, or
<b>center</b>).  The
internal rep will be modified to cache corresponding justify value.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of justification style is passed as
a string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="justifyPtr">*justifyPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store justify value corresponding to
<i>objPtr</i> or <i>string</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Justify</argtype>
<name>justify</name>
<argmode>in</argmode>
<desc>Justification style (one of the values listed below).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetJustifyFromObj</fun> places in <i>*justifyPtr</i> the justify value
corresponding to <i>objPtr</i>'s value.
This value will be one of the following:
</p>
<dl>
<dle>
<dt><b>TK_JUSTIFY_LEFT</b></dt>
<dd>Means that the text on each line should start at the left edge of
the line;  as a result, the right edges of lines may be ragged.
</dd>
</dle>
<dle>
<dt><b>TK_JUSTIFY_RIGHT</b></dt>
<dd>Means that the text on each line should end at the right edge of
the line;  as a result, the left edges of lines may be ragged.
</dd>
</dle>
<dle>
<dt><b>TK_JUSTIFY_CENTER</b></dt>
<dd>Means that the text on each line should be centered;  as a result,
both the left and right edges of lines may be ragged.
</dd>
</dle>
</dl>
<p>Under normal circumstances the return value is <b>TCL_OK</b> and
<i>interp</i> is unused.
If <i>objPtr</i> doesn't contain a valid justification style
or an abbreviation of one of these names, <b>TCL_ERROR</b> is returned,
<i>*justifyPtr</i> is unmodified, and an error message is
stored in <i>interp</i>'s result if <i>interp</i> isn't NULL.
<fun>Tk_GetJustifyFromObj</fun> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to
<fun>Tk_GetJustifyFromObj</fun> with the same <i>objPtr</i>.
</p>
<p><fun>Tk_GetJustify</fun> is identical to <fun>Tk_GetJustifyFromObj</fun> except
that the description of the justification is specified with a string instead
of an object.  This prevents <fun>Tk_GetJustify</fun> from caching the
return value, so <fun>Tk_GetJustify</fun> is less efficient than
<fun>Tk_GetJustifyFromObj</fun>.
</p>
<p><fun>Tk_NameOfJustify</fun> is the logical inverse of <fun>Tk_GetJustify</fun>.
Given a justify value it returns a statically-allocated string
corresponding to <i>justify</i>.
If <i>justify</i> isn't a legal justify value, then
``unknown justification style'' is returned.

</p>
</section>
<keywords>
<keyword>center</keyword>
<keyword>fill</keyword>
<keyword>justification</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="getOpenFile" version="4.2" title="tk_getOpenFile">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: getOpenFile.n,v 1.15 2005/07/06 22:17:06 hobbs Exp $
 -->
<?TROFF.TH title="tk_getOpenFile" section="n" date="4.2" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_getOpenFile</name>
<name>tk_getSaveFile</name>
<desc>pop up a dialog box for the user to select a file to open or save.</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk_getOpenFile</cmd> ?<m>option value ...</m>?

<cmd>tk_getSaveFile</cmd> ?<m>option value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The procedures <cmd>tk_getOpenFile</cmd> and <cmd>tk_getSaveFile</cmd> pop up a
dialog box for the user to select a file to open or save. The
<cmd>tk_getOpenFile</cmd> command is usually associated with the <b>Open</b>
command in the <b>File</b> menu. Its purpose is for the user to select an
existing file <i>only</i>. If the user enters a non-existent file, the
dialog box gives the user an error prompt and requires the user to give
an alternative selection. If an application allows the user to create
new files, it should do so by providing a separate <b>New</b> menu command.
</p>
<p>The <cmd>tk_getSaveFile</cmd> command is usually associated with the <b>Save
as</b> command in the <b>File</b> menu. If the user enters a file that
already exists, the dialog box prompts the user for confirmation
whether the existing file should be overwritten or not.
</p>
<p>The following <i>option-value</i> pairs are possible as command line
arguments to these two commands:
</p>
<dl>
<dle>
<dt><b>-defaultextension</b> <m>extension</m></dt>
<dd>Specifies a string that will be appended to the filename if the user
enters a filename without an extension. The default value is the empty
string, which means no extension will be appended to the filename in
any case. This option is ignored on the Macintosh platform, which
does not require extensions to filenames,
and the UNIX implementation guesses reasonable values for this from
the <b>-filetypes</b> option when this is not supplied.
</dd>
</dle>
<dle>
<dt><b>-filetypes</b> <m>filePatternList</m></dt>
<dd>If a <b>File types</b> listbox exists in the file dialog on the particular
platform, this option gives the <i>filetype</i>s in this listbox. When
the user choose a filetype in the listbox, only the files of that type
are listed. If this option is unspecified, or if it is set to the
empty list, or if the <b>File types</b> listbox is not supported by the
particular platform then all files are listed regardless of their
types. See the section <ref refid="specifying-file-patterns">SPECIFYING FILE PATTERNS</ref> below for a
discussion on the contents of <i>filePatternList</i>.
</dd>
</dle>
<dle>
<dt><b>-initialdir</b> <m>directory</m></dt>
<dd>Specifies that the files in <i>directory</i> should be displayed
when the dialog pops up. If this parameter is not specified, then
the files in the current working directory are displayed. If the
parameter specifies a relative path, the return value will convert the
relative path to an absolute path.  This option may not always work on
the Macintosh.  This is not a bug. Rather, the <i>General Controls</i>
control panel on the Mac allows the end user to override the
application default directory.
</dd>
</dle>
<dle>
<dt><b>-initialfile</b> <m>filename</m></dt>
<dd>Specifies a filename to be displayed in the dialog when it pops up.  This
option is ignored on the Macintosh platform.
</dd>
</dle>
<dle>
<dt><b>-multiple</b> <m>boolean</m></dt>
<dd>Allows the user to choose multiple files from the Open dialog.
On the Macintosh, this is only available when Navigation Services are
installed.
</dd>
</dle>
<dle>
<dt><b>-message</b> <m>string</m></dt>
<dd>Specifies a message to include in the client area of the dialog.
This is only available on the Macintosh, and only when Navigation
Services are installed.
</dd>
</dle>
<dle>
<dt><b>-parent</b> <m>window</m></dt>
<dd>Makes <i>window</i> the logical parent of the file dialog. The file
dialog is displayed on top of its parent window.
</dd>
</dle>
<dle>
<dt><b>-title</b> <m>titleString</m></dt>
<dd>Specifies a string to display as the title of the dialog box. If this
option is not specified, then a default title is displayed. 
</dd>
</dle>
</dl>
<p>If the user selects a file, both <cmd>tk_getOpenFile</cmd> and
<cmd>tk_getSaveFile</cmd> return the full pathname of this file. If the
user cancels the operation, both commands return the empty string.
</p>
</section>
<section id="specifying-file-patterns">
<title>SPECIFYING FILE PATTERNS</title>


<p>The <i>filePatternList</i> value given by the <b>-filetypes</b> option
is a list of file patterns. Each file pattern is a list of the
form
</p>
<example>
<i>typeName</i> {<i>extension</i> ?<i>extension ...</i>?} ?{<i>macType</i> ?<i>macType ...</i>?}?
</example>
<p><i>typeName</i> is the name of the file type described by this
file pattern and is the text string that appears in the <b>File types</b>
listbox. <i>extension</i> is a file extension for this file pattern.
<i>macType</i> is a four-character Macintosh file type. The list of
<i>macType</i>s is optional and may be omitted for applications that do
not need to execute on the Macintosh platform.
</p>
<p>Several file patterns may have the same <i>typeName,</i> in which case
they refer to the same file type and share the same entry in the
listbox. When the user selects an entry in the listbox, all the files
that match at least one of the file patterns corresponding
to that entry are listed. Usually, each file pattern corresponds to a
distinct type of file. The use of more than one file patterns for one
type of file is necessary on the Macintosh platform only.
</p>
<p>On the Macintosh platform, a file matches a file pattern if its
name matches at least one of the <i>extension</i>(s) AND it
belongs to at least one of the <i>macType</i>(s) of the
file pattern. For example, the <b>C Source Files</b> file pattern in the
sample code matches with files that have a <b>.c</b> extension AND
belong to the <i>macType</i> <b>TEXT</b>. To use the OR rule instead,
you can use two file patterns, one with the <i>extensions</i> only and
the other with the <i>macType</i> only. The <b>GIF Files</b> file type
in the sample code matches files that EITHER have a <b>.gif</b>
extension OR belong to the <i>macType</i> <b>GIFF</b>.
</p>
<p>On the Unix and Windows platforms, a file matches a file pattern
if its name matches at least one of the <i>extension</i>(s) of
the file pattern. The <i>macType</i>s are ignored.
</p>
</section>
<section>
<title>SPECIFYING EXTENSIONS</title>
<p>On the Unix and Macintosh platforms, extensions are matched using
glob-style pattern matching. On the Windows platforms, extensions are
matched by the underlying operating system. The types of possible
extensions are: (1) the special extension * matches any
file; (2) the special extension "" matches any files that
do not have an extension (i.e., the filename contains no full stop
character); (3) any character string that does not contain any wild
card characters (* and ?).
</p>
<p>Due to the different pattern matching rules on the various platforms,
to ensure portability, wild card characters are not allowed in the
extensions, except as in the special extension *. Extensions
without a full stop character (e.g. ~) are allowed but may not
work on all platforms.

</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
set types {
    {{Text Files}       {.txt}        }
    {{TCL Scripts}      {.tcl}        }
    {{C Source Files}   {.c}      TEXT}
    {{GIF Files}        {.gif}        }
    {{GIF Files}        {}        GIFF}
    {{All Files}        *             }
}
set filename [tk_getOpenFile -filetypes $types]

if {$filename != ""} {
    # Open the file ...
}
</example>


</section>
<seealso>
<ref>tk_chooseDirectory</ref>
</seealso>
<keywords>
<keyword>file selection dialog</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetOpnFl" version="8.0" title="Tcl_GetOpenFile">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetOpnFl.3,v 1.11 2005/05/10 18:33:56 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_GetOpenFile" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetOpenFile</name>
<desc>Return a FILE* for a channel registered in the given interpreter (Unix only)</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_GetOpenFile</fun>(<m>interp</m>, <m>chanID</m>, <m>write</m>, <m>checkUsage</m>, <m>filePtr</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter from which file handle is to be obtained.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="chanID">*chanID</name>
<argmode>in</argmode>
<desc>String identifying channel, such as <b>stdin</b> or <b>file4</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>write</name>
<argmode>in</argmode>
<desc>Non-zero means the file will be used for writing, zero means it will
be used for reading.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>checkUsage</name>
<argmode>in</argmode>
<desc>If non-zero, then an error will be generated if the file wasn't opened
for the access indicated by <i>write</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="filePtr">*filePtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store pointer to FILE structure for
the file given by <i>chanID</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_GetOpenFile</fun> takes as argument a file identifier of the form
returned by the <b cat="AMBIGUOUS ambiguous cmd">open</b> command and
returns at <i>*filePtr</i> a pointer to the FILE structure for
the file.
The <i>write</i> argument indicates whether the FILE pointer will
be used for reading or writing.
In some cases, such as a channel that connects to a pipeline of
subprocesses, different FILE pointers will be returned for reading
and writing.
<fun>Tcl_GetOpenFile</fun> normally returns <b>TCL_OK</b>.
If an error occurs in <fun>Tcl_GetOpenFile</fun> (e.g. <i>chanID</i> didn't
make any sense or <i>checkUsage</i> was set and the file wasn't opened
for the access specified by <i>write</i>) then <b>TCL_ERROR</b> is returned
and the interpreter's result will contain an error message.
In the current implementation <i>checkUsage</i> is ignored and consistency
checks are always performed.
</p>
<p>Note that this interface is only supported on the Unix platform.

</p>
</section>
<keywords>
<keyword>channel</keyword>
<keyword>file handle</keyword>
<keyword>permissions</keyword>
<keyword>pipeline</keyword>
<keyword>read</keyword>
<keyword>write</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetOption" title="Tk_GetOption">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetOption.3,v 1.4 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetOption" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetOption</name>
<desc>retrieve an option from the option database</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Uid
<fun>Tk_GetOption</fun>(<m>tkwin</m>, <m>name</m>, <m>class</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of desired option.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="class">*class</name>
<argmode>in</argmode>
<desc>Class of desired option.  Null means there is no class for
this option;  do lookup based on name only.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is invoked to retrieve an option from the database
associated with <i>tkwin</i>'s main window.  If there is an option
for <i>tkwin</i> that matches the given <i>name</i> or <i>class</i>,
then it is returned in the form of a Tk_Uid.  If multiple options
match <i>name</i> and <i>class</i>, then the highest-priority one
is returned.  If no option matches, then NULL is returned.
</p>
<p><fun>Tk_GetOption</fun> caches options related to <i>tkwin</i> so that
successive calls for the same <i>tkwin</i> will execute much more
quickly than successive calls for different windows.

</p>
</section>
<keywords>
<keyword>class</keyword>
<keyword>name</keyword>
<keyword>option</keyword>
<keyword>retrieve</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetPixels" version="8.1" title="Tk_GetPixelsFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetPixels.3,v 1.6 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetPixelsFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetPixelsFromObj</name>
<name>Tk_GetPixels</name>
<name>Tk_GetMMFromObj</name>
<name>Tk_GetScreenMM</name>
<desc>translate between strings and screen units</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetPixelsFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m>, <m>intPtr</m><b>)</b>

int
<b>Tk_GetPixels(</b><m>interp</m>, <m>tkwin</m>, <m>string</m>, <m>intPtr</m><b>)</b>

int
<b>Tk_GetMMFromObj(</b><m>interp</m>, <m>tkwin</m>, <m>objPtr</m>, <m>doublePtr</m><b>)</b>

int
<b>Tk_GetScreenMM(</b><m>interp</m>, <m>tkwin</m>, <m>string</m>, <m>doublePtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window whose screen geometry determines the conversion between absolute
units and pixels.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value specifies a distance on the screen;
internal rep will be modified to cache converted distance.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except specification of distance is passed as
a string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="intPtr">*intPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store converted distance in pixels.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="doublePtr">*doublePtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store converted distance in millimeters.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures take as argument a specification of distance on
the screen (<i>objPtr</i> or <i>string</i>) and compute the
corresponding distance either in integer pixels or floating-point millimeters.
In either case,
<i>objPtr</i> or <i>string</i>
specifies a screen distance as a
floating-point number followed by one of the following characters
that indicates units:
</p>
<dl>
<dle>
<dt>&lt;none&gt;</dt>
<dd>The number specifies a distance in pixels.
</dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>The number specifies a distance in centimeters on the screen.
</dd>
</dle>
<dle>
<dt><b>i</b></dt>
<dd>The number specifies a distance in inches on the screen.
</dd>
</dle>
<dle>
<dt><b>m</b></dt>
<dd>The number specifies a distance in millimeters on the screen.
</dd>
</dle>
<dle>
<dt><b>p</b></dt>
<dd>The number specifies a distance in printer's points (1/72 inch)
on the screen.
</dd>
</dle>
</dl>
<p><fun>Tk_GetPixelsFromObj</fun> converts the value of <i>objPtr</i> to the
nearest even number of pixels and stores that value at <i>*intPtr</i>.
It returns <b>TCL_OK</b> under normal circumstances.
If an error occurs (e.g. <i>objPtr</i> contains a number followed
by a character that isn't one of the ones above) then
<b>TCL_ERROR</b> is returned and an error message is left
in <i>interp</i>'s result if <i>interp</i> isn't NULL.
<fun>Tk_GetPixelsFromObj</fun> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to
<fun>Tk_GetPixelsFromObj</fun> with the same <i>objPtr</i>.
</p>
<p><fun>Tk_GetPixels</fun> is identical to <fun>Tk_GetPixelsFromObj</fun> except
that the screen distance is specified with a string instead
of an object.  This prevents <fun>Tk_GetPixels</fun> from caching the
return value, so <fun>Tk_GetAnchor</fun> is less efficient than
<fun>Tk_GetPixelsFromObj</fun>.
</p>
<p><fun>Tk_GetMMFromObj</fun> and <fun>Tk_GetScreenMM</fun> are similar to
<fun>Tk_GetPixelsFromObj</fun> and <fun>Tk_GetPixels</fun> (respectively) except
that they convert the screen distance to millimeters and
store a double-precision floating-point result at <i>*doublePtr</i>.

</p>
</section>
<keywords>
<keyword>centimeters</keyword>
<keyword>convert</keyword>
<keyword>inches</keyword>
<keyword>millimeters</keyword>
<keyword>pixels</keyword>
<keyword>points</keyword>
<keyword>screen units</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_GetPixmap" id="GetPixmap">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetPixmap.3,v 1.2 1998/09/14 18:22:50 stanton Exp $
 -->
<?TROFF.TH title="Tk_GetPixmap" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetPixmap</name>
<name>Tk_FreePixmap</name>
<desc>allocate and free pixmaps</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Pixmap
<b>Tk_GetPixmap(</b><m>display</m>, <m>d</m>, <m>width</m>, <m>height</m>, <m>depth</m><b>)</b>

<b>Tk_FreePixmap(</b><m>display</m>, <m>pixmap</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>X display for the pixmap.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>d</name>
<argmode>in</argmode>
<desc>Pixmap or window where the new pixmap will be used for drawing.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of pixmap.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of pixmap.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>depth</name>
<argmode>in</argmode>
<desc>Number of bits per pixel in pixmap.
</desc>
</argdef>
<argdef>
<argtype>Pixmap</argtype>
<name>pixmap</name>
<argmode>in</argmode>
<desc>Pixmap to destroy.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are identical to the Xlib procedures <b>XCreatePixmap</b>
and <b>XFreePixmap</b>, except that they have extra code to manage X
resource identifiers so that identifiers for deleted pixmaps can be
reused in the future.
It is important for Tk applications to use these procedures rather
than <b>XCreatePixmap</b> and <b>XFreePixmap</b>;  otherwise long-running
applications may run out of resource identifiers.
</p>
<p><fun>Tk_GetPixmap</fun> creates a pixmap suitable for drawing in <i>d</i>,
with dimensions given by <i>width</i>, <i>height</i>, and <i>depth</i>,
and returns its identifier.
<fun>Tk_FreePixmap</fun> destroys the pixmap given by <i>pixmap</i> and makes
its resource identifier available for reuse.

</p>
</section>
<keywords>
<keyword>pixmap</keyword>
<keyword>resource identifier</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetRelief" version="8.1" title="Tk_GetReliefFromObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetRelief.3,v 1.7 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetReliefFromObj" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetReliefFromObj</name>
<name>Tk_GetRelief</name>
<name>Tk_NameOfRelief</name>
<desc>translate between strings and relief values</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetReliefFromObj(</b><m>interp</m>, <m>objPtr</m>, <m>reliefPtr</m><b>)</b>

int
<b>Tk_GetRelief(</b><m>interp</m>, <m>name</m>, <m>reliefPtr</m><b>)</b>

const char *
<b>Tk_NameOfRelief(</b><m>relief</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>String value contains name of relief (one of <b>flat</b>, <b>groove</b>,
<b>raised</b>, <b>ridge</b>, <b>solid</b>, or <b>sunken</b>);
internal rep will be modified to cache corresponding relief value.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Same as <i>objPtr</i> except description of relief is passed as
a string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="reliefPtr">*reliefPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store relief value corresponding to
<i>objPtr</i> or <i>name</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode/>
<desc>Name of the relief.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>relief</name>
<argmode>in</argmode>
<desc>Relief value (one of <b>TK_RELIEF_FLAT</b>, <b>TK_RELIEF_RAISED</b>,
<b>TK_RELIEF_SUNKEN</b>, <b>TK_RELIEF_GROOVE</b>, <b>TK_RELIEF_SOLID</b>,
or <b>TK_RELIEF_RIDGE</b>).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetReliefFromObj</fun> places in <i>*reliefPtr</i> the relief value
corresponding to the value of <i>objPtr</i>.  This value will be one of
<b>TK_RELIEF_FLAT</b>, <b>TK_RELIEF_RAISED</b>, <b>TK_RELIEF_SUNKEN</b>,
<b>TK_RELIEF_GROOVE</b>, <b>TK_RELIEF_SOLID</b>, or <b>TK_RELIEF_RIDGE</b>.
Under normal circumstances the return value is <b>TCL_OK</b> and
<i>interp</i> is unused.
If <i>objPtr</i> doesn't contain one of the valid relief names
or an abbreviation of one of them, then <b>TCL_ERROR</b> is returned,
<i>*reliefPtr</i> is unmodified, and an error message
is stored in <i>interp</i>'s result if <i>interp</i> isn't NULL.
<fun>Tk_GetReliefFromObj</fun> caches information about the return
value in <i>objPtr</i>, which speeds up future calls to
<fun>Tk_GetReliefFromObj</fun> with the same <i>objPtr</i>.
</p>
<p><fun>Tk_GetRelief</fun> is identical to <fun>Tk_GetReliefFromObj</fun> except
that the description of the relief is specified with a string instead
of an object.  This prevents <fun>Tk_GetRelief</fun> from caching the
return value, so <fun>Tk_GetRelief</fun> is less efficient than
<fun>Tk_GetReliefFromObj</fun>.
</p>
<p><fun>Tk_NameOfRelief</fun> is the logical inverse of <fun>Tk_GetRelief</fun>.
Given a relief value it returns the corresponding string (<b>flat</b>,
<b>raised</b>, <b>sunken</b>, <b>groove</b>, <b>solid</b>, or <b>ridge</b>).
If <i>relief</i> isn't a legal relief value, then ``unknown relief''
is returned.

</p>
</section>
<keywords>
<keyword>name</keyword>
<keyword>relief</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_GetRootCoords" id="GetRootCrd">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetRootCrd.3,v 1.2 1998/09/14 18:22:51 stanton Exp $
 -->
<?TROFF.TH title="Tk_GetRootCoords" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetRootCoords</name>
<desc>Compute root-window coordinates of window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_GetRootCoords</fun>(<m>tkwin</m>, <m>xPtr</m>, <m>yPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="xPtr">*xPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store root-window x-coordinate
corresponding to left edge of <i>tkwin</i>'s border.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="yPtr">*yPtr</name>
<argmode>out</argmode>
<desc>Pointer to location in which to store root-window y-coordinate
corresponding to top edge of <i>tkwin</i>'s border.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure scans through the structural information maintained
by Tk to compute the root-window coordinates corresponding to
the upper-left corner of <i>tkwin</i>'s border.  If <i>tkwin</i> has
no border, then <fun>Tk_GetRootCoords</fun> returns the root-window
coordinates corresponding to location (0,0) in <i>tkwin</i>.
<fun>Tk_GetRootCoords</fun> is relatively efficient, since it doesn't have to
communicate with the X server.

</p>
</section>
<keywords>
<keyword>coordinates</keyword>
<keyword>root window</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="gets" version="7.5" title="gets">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: gets.n,v 1.8 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="gets" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>gets</name>
<desc>Read a line from a channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>gets</cmd> <m>channelId</m> ?<m>varName</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command reads the next line from <i>channelId</i>, returns everything
in the line up to (but not including) the end-of-line character(s), and
discards the end-of-line character(s).
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as the
Tcl standard input channel (<b>stdin</b>), the return value from an
invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or the result of a channel
creation command provided by a Tcl extension. The channel must have
been opened for input.
</p>
<p>If <i>varName</i> is omitted the line is returned as the result of the
command.
If <i>varName</i> is specified then the line is placed in the variable by
that name and the return value is a count of the number of characters
returned.
</p>
<p>If end of file occurs while scanning for an end of
line, the command returns whatever input is available up to the end of file.
If <i>channelId</i> is in nonblocking mode and there is not a full
line of input available, the command returns an empty string and
does not consume any input.
If <i>varName</i> is specified and an empty string is returned in
<i>varName</i> because of end-of-file or because of insufficient
data in nonblocking mode, then the return count is -1.
Note that if <i>varName</i> is not specified then the end-of-file
and no-full-line-available cases can
produce the same results as if there were an input line consisting
only of the end-of-line character(s).
The <cmd>eof</cmd> and <cmd>fblocked</cmd> commands can be used to distinguish
these three cases.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This example reads a file one line at a time and prints it out with
the current line number attached to the start of each line.
</p>
<example>
set chan [open "some.file.txt"]
set lineNumber 0
while {[<cmd>gets</cmd> $chan line] &gt;= 0} {
    puts "[incr lineNumber]: $line"
}
close $chan
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>eof(n)</ref>
<ref>fblocked(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>channel</keyword>
<keyword>end of file</keyword>
<keyword>end of line</keyword>
<keyword>line</keyword>
<keyword>nonblocking</keyword>
<keyword>read</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetScroll" version="8.0" title="Tk_GetScrollInfo">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetScroll.3,v 1.6 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetScrollInfo" section="3" date="8.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetScrollInfo</name>
<name>Tk_GetScrollInfoObj</name>
<desc>parse arguments for scrolling commands</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_GetScrollInfo(</b><m>interp</m>, <m>argc</m>, <m>argv</m>, <m>dblPtr</m>, <m>intPtr</m><b>)</b>

int
<b>Tk_GetScrollInfoObj(</b><m>interp</m>, <m>objc</m>, <m>objv</m>, <m>dblPtr</m>, <m>intPtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of strings in <i>argv</i> array.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argv">*argv[]</name>
<argmode>in</argmode>
<desc>Argument strings.  These represent the entire widget command, of
which the first word is typically the widget name and the second
word is typically <b>xview</b> or <b>yview</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>Number of Tcl_Obj's in <i>objv</i> array.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *const</argtype>
<name name="objv">objv[]</name>
<argmode>in</argmode>
<desc>Argument objects.  These represent the entire widget command, of
which the first word is typically the widget name and the second
word is typically <b>xview</b> or <b>yview</b>.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name name="dblPtr">*dblPtr</name>
<argmode>out</argmode>
<desc>Filled in with fraction from <b>moveto</b> option, if any.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="intPtr">*intPtr</name>
<argmode>out</argmode>
<desc>Filled in with line or page count from <b>scroll</b> option, if any.
The value may be negative.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetScrollInfo</fun> parses the arguments expected by widget
scrolling commands such as <b>xview</b> and <b>yview</b>.
It receives the entire list of words that make up a widget command
and parses the words starting with <i>argv</i>[2].
The words starting with <i>argv</i>[2] must have one of the following forms:
</p>
<example>
<b>moveto</b> <i>fraction</i>
<b>scroll</b> <i>number</i> <b>units</b>
<b>scroll</b> <i>number</i> <b>pages</b>
</example>
<p>Any of the <b>moveto</b>, <b>scroll</b>, <b>units</b>, and <b>pages</b>
keywords may be abbreviated.
If <i>argv</i> has the <b>moveto</b> form, <b>TK_SCROLL_MOVETO</b>
is returned as result and <i>*dblPtr</i> is filled in with the
<i>fraction</i> argument to the command, which must be a proper real
value.
If <i>argv</i> has the <b>scroll</b> form, <b>TK_SCROLL_UNITS</b>
or <b>TK_SCROLL_PAGES</b> is returned and <i>*intPtr</i> is filled
in with the <i>number</i> value, which must be a proper integer.
If an error occurs in parsing the arguments, <b>TK_SCROLL_ERROR</b>
is returned and an error message is left in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_GetScrollInfoObj</fun> is identical in function to
<fun>Tk_GetScrollInfo</fun>.  However, <fun>Tk_GetScrollInfoObj</fun> accepts
Tcl_Obj style arguments, making it more appropriate for use with new
development.

</p>
</section>
<keywords>
<keyword>parse</keyword>
<keyword>scrollbar</keyword>
<keyword>scrolling command</keyword>
<keyword>xview</keyword>
<keyword>yview</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetSelect" title="Tk_GetSelection" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetSelect.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_GetSelection" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetSelection</name>
<desc>retrieve the contents of a selection</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_GetSelection</fun>(<m>interp</m>, <m>tkwin</m>, <m>selection</m>, <m>target</m>, <m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for reporting errors.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window on whose behalf to retrieve the selection (determines
display from which to retrieve).
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>selection</name>
<argmode>in</argmode>
<desc>The name of the selection to be retrieved.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>target</name>
<argmode>in</argmode>
<desc>Form in which to retrieve selection.
</desc>
</argdef>
<argdef>
<argtype>Tk_GetSelProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke to process pieces of the selection as they
are retrieved.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetSelection</fun> retrieves the selection specified by the atom
<i>selection</i> in the format specified by <i>target</i>.  The
selection may actually be retrieved in several pieces; as each piece
is retrieved, <i>proc</i> is called to process the piece.  <i>Proc</i>
should have arguments and result that match the type
<type>Tk_GetSelProc</type>:
</p>
<syntax cat="type" name="Tk_GetSelProc" scope="global">
typedef int Tk_GetSelProc(
    ClientData <i>clientData</i>,
    Tcl_Interp *<i>interp</i>,
    char *<i>portion</i>);
</syntax>
<p>The <i>clientData</i> and <i>interp</i> parameters to <i>proc</i> 
will be copies of the corresponding arguments to
<fun>Tk_GetSelection</fun>.  <i>Portion</i> will be a pointer to
a string containing part or all of the selection.  For large
selections, <i>proc</i> will be called several times with successive
portions of the selection.  The X Inter-Client Communication
Conventions Manual allows a selection to be returned in formats
other than strings, e.g. as an array of atoms or integers.  If
this happens, Tk converts the selection back into a string
before calling <i>proc</i>.  If a selection is returned as an
array of atoms, Tk converts it to a string containing the atom names
separated by white space.  For any other format besides string,
Tk converts a selection to a string containing hexadecimal
values separated by white space.
</p>
<p><fun>Tk_GetSelection</fun> returns to its caller when the selection has
been completely retrieved and processed by <i>proc</i>, or when a
fatal error has occurred (e.g. the selection owner didn't respond
promptly).  <fun>Tk_GetSelection</fun> normally returns <b>TCL_OK</b>;  if
an error occurs, it returns <b>TCL_ERROR</b> and leaves an error message
in <i>interp-&gt;result</i>.  <i>Proc</i> should also return either
<b>TCL_OK</b> or <b>TCL_ERROR</b>. If <i>proc</i> encounters an error in dealing with the
selection, it should leave an error message in <i>interp-&gt;result</i>
and return <b>TCL_ERROR</b>;  this will abort the selection retrieval.

</p>
</section>
<keywords>
<keyword>format</keyword>
<keyword>get</keyword>
<keyword>selection retrieval</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetStdChan" version="7.5" title="Tcl_GetStdChannel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 by Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetStdChan.3,v 1.6 2006/06/06 20:06:57 dgp Exp $
 -->
<?TROFF.TH title="Tcl_GetStdChannel" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetStdChannel</name>
<name>Tcl_SetStdChannel</name>
<desc>procedures for retrieving and replacing the standard channels</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Channel
<fun>Tcl_GetStdChannel</fun>(<m>type</m>)

<fun>Tcl_SetStdChannel</fun>(<m>channel</m>, <m>type</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>type</name>
<argmode>in</argmode>
<desc>The identifier for the standard channel to retrieve or modify.  Must be one of
<b>TCL_STDIN</b>, <b>TCL_STDOUT</b>, or <b>TCL_STDERR</b>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>The channel to use as the new value for the specified standard channel.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl defines three special channels that are used by various I/O related
commands if no other channels are specified.  The standard input channel
has a channel name of <b>stdin</b> and is used by <b cat="AMBIGUOUS ambiguous cmd">read</b> and <cmd>gets</cmd>.
The standard output channel is named <b>stdout</b> and is used by
<cmd>puts</cmd>.  The standard error channel is named <b>stderr</b> and is used for 
reporting errors.  In addition, the standard channels are inherited by any
child processes created using <cmd>exec</cmd> or <b cat="AMBIGUOUS ambiguous cmd">open</b> in the absence of any
other redirections.
</p>
<p>The standard channels are actually aliases for other normal channels.  The
current channel associated with a standard channel can be retrieved by calling
<fun>Tcl_GetStdChannel</fun> with one of 
<b>TCL_STDIN</b>, <b>TCL_STDOUT</b>, or <b>TCL_STDERR</b> as the <i>type</i>.  The
return value will be a valid channel, or NULL.
</p>
<p>A new channel can be set for the standard channel specified by <i>type</i> 
by calling <fun>Tcl_SetStdChannel</fun> with a new channel or NULL in the
<i>channel</i> argument.  If the specified channel is closed by a later call to
<fun>Tcl_Close</fun>, then the corresponding standard channel will automatically be
set to NULL.
</p>
<p>If a non-NULL value for <i>channel</i> is passed to <fun>Tcl_SetStdChannel</fun>,
then that same value should be passed to <fun>Tcl_RegisterChannel</fun>, like so:
</p>
<example>
Tcl_RegisterChannel(NULL, channel);
</example>
<p>This is a workaround for a misfeature in <fun>Tcl_SetStdChannel</fun> that it
fails to do some reference counting housekeeping.  This misfeature cannot
be corrected without contradicting the assumptions of some existing
code that calls <fun>Tcl_SetStdChannel</fun>.
</p>
<p>If <fun>Tcl_GetStdChannel</fun> is called before <fun>Tcl_SetStdChannel</fun>, Tcl will
construct a new channel to wrap the appropriate platform-specific standard 
file handle.  If <fun>Tcl_SetStdChannel</fun> is called before
<fun>Tcl_GetStdChannel</fun>, then the default channel will not be created.
</p>
<p>If one of the standard channels is set to NULL, either by calling
<fun>Tcl_SetStdChannel</fun> with a NULL <i>channel</i> argument, or by calling
<fun>Tcl_Close</fun> on the channel, then the next call to <fun>Tcl_CreateChannel</fun>
will automatically set the standard channel with the newly created channel.  If
more than one standard channel is NULL, then the standard channels will be
assigned starting with standard input, followed by standard output, with
standard error being last.
</p>
<p>See <fun>Tcl_StandardChannels</fun> for a general treatise about standard
channels and the behaviour of the Tcl library with regard to them.
</p>
</section>
<seealso>
<ref>Tcl_Close(3)</ref>
<ref>Tcl_CreateChannel(3)</ref>
<ref>Tcl_Main(3)</ref>
<ref>tclsh(1)</ref>
</seealso>
<keywords>
<keyword>standard channel</keyword>
<keyword>standard input</keyword>
<keyword>standard output</keyword>
<keyword>standard error</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetTime" version="8.4" title="Tcl_GetTime">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 by Kevin B. Kenny.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id$
 -->
<?TROFF.TH title="Tcl_GetTime" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetTime</name>
<name>Tcl_SetTimeProc</name>
<name>Tcl_QueryTimeProc</name>
<desc>get date and time</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_GetTime</fun>(<m>timePtr</m>)

<fun>Tcl_SetTimeProc</fun>(<m>getProc</m>, <m>scaleProc</m>, <m>clientData</m>)

<fun>Tcl_QueryTimeProc</fun>(<m>getProcPtr</m>, <m>scaleProcPtr</m>, <m>clientDataPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Time *</argtype>
<name>timePtr</name>
<argmode>out</argmode>
<desc>Points to memory in which to store the date and time information.
</desc>
</argdef>
<argdef>
<argtype>Tcl_GetTimeProc *</argtype>
<name>getProc</name>
<argmode>in</argmode>
<desc>Pointer to handler function replacing Tcl_GetTime's access to the OS.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ScaleTimeProc *</argtype>
<name>scaleProc</name>
<argmode>in</argmode>
<desc>Pointer to handler function for the conversion of time delays in the
virtual domain to real-time.
</desc>
</argdef>
<argdef>
<argtype>ClientData *</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Value passed through to the two handler functions.
</desc>
</argdef>
<argdef>
<argtype>Tcl_GetTimeProc **</argtype>
<name>getProcPtr</name>
<argmode>inout</argmode>
<desc>Pointer to place the currently registered get handler function into.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ScaleTimeProc **</argtype>
<name>scaleProcPtr</name>
<argmode>inout</argmode>
<desc>Pointer to place the currently registered scale handler function into.
</desc>
</argdef>
<argdef>
<argtype>ClientData **</argtype>
<name>clientDataPtr</name>
<argmode>inout</argmode>
<desc>Pointer to place the currently registered pass-through value into.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p>The <fun>Tcl_GetTime</fun> function retrieves the current time as a
<i>Tcl_Time</i> structure in memory the caller provides.  This
structure has the following definition:
</p>
<syntax cat="type" name="Tcl_Time" scope="global">
typedef struct Tcl_Time {
    long sec;
    long usec;
} Tcl_Time;
</syntax>
<p>On return, the <i>sec</i> member of the structure is filled in with the
number of seconds that have elapsed since the <i>epoch:</i> the epoch
is the point in time of 00:00 UTC, 1 January 1970.  This number does
<i>not</i> count leap seconds - an interval of one day advances it by
86400 seconds regardless of whether a leap second has been inserted.
</p>
<p>The <i>usec</i> member of the structure is filled in with the number of
microseconds that have elapsed since the start of the second
designated by <i>sec</i>.  The Tcl library makes every effort to keep
this number as precise as possible, subject to the limitations of the
computer system.  On multiprocessor variants of Windows, this number
may be limited to the 10- or 20-ms granularity of the system clock.
(On single-processor Windows systems, the <i>usec</i> field is derived
from a performance counter and is highly precise.)
</p>
<p>The <b>Tcl_SetTime</b> function registers two related handler functions
with the core. The first handler function is a replacement for
<fun>Tcl_GetTime</fun>, or rather the OS access made by
<fun>Tcl_GetTime</fun>. The other handler function is used by the Tcl
notifier to convert wait/block times from the virtual domain into real
time.
</p>
<p>The <b>Tcl_QueryTime</b> function returns the currently registered
handler functions. If no external handlers were set then this will
return the standard handlers accessing and processing the native time
of the OS. The arguments to the function are allowed to be NULL; and
any argument which is NULL is ignored and not set.
</p>
<p>Any handler pair specified has to return data which is consistent
between them. In other words, setting one handler of the pair to
something assuming a 10-times slowdown, and the other handler of the
pair to something assuming a two-times slowdown is wrong and not
allowed.
</p>
<p>The set handler functions are allowed to run the delivered time
backwards, however this should be avoided. We have to allow it as the
native time can run backwards as the user can fiddle with the system
time one way or other. Note that the insertion of the hooks will not
change the behaviour of the Tcl core with regard to this situation,
i.e. the existing behaviour is retained.
</p>
</section>
<seealso>
<ref>clock</ref>
</seealso>
<keywords>
<keyword>date</keyword>
<keyword>time</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_GetUid" id="GetUid">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetUid.3,v 1.4 2004/02/17 13:47:22 dkf Exp $
 -->
<?TROFF.TH title="Tk_GetUid" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetUid</name>
<name>Tk_Uid</name>
<desc>convert from string to unique identifier</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Uid
<fun>Tk_GetUid</fun>(<m>string</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>String for which the corresponding unique identifier is
desired.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetUid</fun> returns the unique identifier corresponding
to <i>string</i>.
Unique identifiers are similar to atoms in Lisp, and are used
in Tk to speed up comparisons and
searches.  A unique identifier (type Tk_Uid) is a string pointer
and may be used anywhere that a variable of type ``char *''
could be used.  However, there is guaranteed to be exactly
one unique identifier for any given string value.  If <fun>Tk_GetUid</fun>
is called twice, once with string <i>a</i> and once with string
<i>b</i>, and if <i>a</i> and <i>b</i> have the same string value
(strcmp(a, b) == 0), then <fun>Tk_GetUid</fun> will return exactly
the same Tk_Uid value for each call (Tk_GetUid(a) == Tk_GetUid(b)).
This means that variables of type
Tk_Uid may be compared directly (x == y) without having to call
<b>strcmp</b>.
In addition, the return value from <fun>Tk_GetUid</fun> will have the
same string value as its argument (strcmp(Tk_GetUid(a), a) == 0).

</p>
</section>
<keywords>
<keyword>atom</keyword>
<keyword>unique identifier</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetVersion" title="Tcl_GetVersion" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetVersion.3,v 1.4 2004/10/07 14:44:32 dkf Exp $
 -->
<?TROFF.TH title="Tcl_GetVersion" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_GetVersion</name>
<desc>get the version of the library at runtime</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_GetVersion</fun>(<m>major</m>, <m>minor</m>, <m>patchLevel</m>, <m>type</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name name="major">*major</name>
<argmode>out</argmode>
<desc>Major version number of the Tcl library.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="minor">*minor</name>
<argmode>out</argmode>
<desc>Minor version number of the Tcl library.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="patchLevel">*patchLevel</name>
<argmode>out</argmode>
<desc>The patch level of the Tcl library (or alpha or beta number).
</desc>
</argdef>
<argdef>
<argtype>Tcl_ReleaseType</argtype>
<name name="type">*type</name>
<argmode>out</argmode>
<desc>The type of release, also indicates the type of patch level. Can be
one of <b>TCL_ALPHA_RELEASE</b>, <b>TCL_BETA_RELEASE</b>, or 
<b>TCL_FINAL_RELEASE</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_GetVersion</fun> should be used to query the version number
of the Tcl library at runtime.  This is useful when using a 
dynamically loaded Tcl library or when writing a stubs-aware
extension.  For instance, if you write an extension that is
linked against the Tcl stubs library, it could be loaded into
a program linked to an older version of Tcl than you expected.
Use <fun>Tcl_GetVersion</fun> to verify that fact, and possibly to
change the behavior of your extension.
</p>
<p><fun>Tcl_GetVersion</fun> accepts NULL for any of the arguments. For instance if 
you do not care about the <i>patchLevel</i> of the library, pass
a NULL for the <i>patchLevel</i> argument.

</p>
</section>
<keywords>
<keyword>version</keyword>
<keyword>patchlevel</keyword>
<keyword>major</keyword>
<keyword>minor</keyword>
<keyword>alpha</keyword>
<keyword>beta</keyword>
<keyword>release</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetVisual" version="4.0" title="Tk_GetVisual">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetVisual.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_GetVisual" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetVisual</name>
<desc>translate from string to visual</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Visual *
<b>Tk_GetVisual(</b><m>interp</m>, <m>tkwin</m>, <m>string</m>, <m>depthPtr</m>, <m>colormapPtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in which the visual will be used.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>String that identifies the desired visual.  See below for
valid formats.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="depthPtr">*depthPtr</name>
<argmode>out</argmode>
<desc>Depth of returned visual gets stored here.
</desc>
</argdef>
<argdef>
<argtype>Colormap</argtype>
<name name="colormapPtr">*colormapPtr</name>
<argmode>out</argmode>
<desc>If non-NULL then a suitable colormap for visual is found and its
identifier is stored here.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetVisual</fun> takes a string description of a visual and
finds a suitable X Visual for use in <i>tkwin</i>, if there is one.
It returns a pointer to the X Visual structure for the visual
and stores the number of bits per pixel for it at <i>*depthPtr</i>.
If <i>string</i> is unrecognizable or if no suitable visual could
be found, then NULL is returned and <fun>Tk_GetVisual</fun> leaves
an error message in <i>interp-&gt;result</i>.
If <i>colormap</i> is non-NULL then <fun>Tk_GetVisual</fun>
also locates an appropriate colormap for use with the result visual
and stores its X identifier at <i>*colormapPtr</i>.
</p>
<p>The <i>string</i> argument specifies the desired visual in one
of the following ways:
</p>
<dl>
<dle>
<dt><m>class depth</m></dt>
<dd>The string consists of a class name followed by an integer depth,
with any amount of white space (including none) in between.
<i>class</i> selects what sort of visual is desired and must be one of
<b>directcolor</b>, <b>grayscale</b>, <b>greyscale</b>, <b>pseudocolor</b>,
<b>staticcolor</b>, <b>staticgray</b>, <b>staticgrey</b>, or
<b>truecolor</b>, or a unique abbreviation.
<i>depth</i> specifies how many bits per pixel are needed for the
visual.
If possible, <fun>Tk_GetVisual</fun> will return a visual with this depth;
if there is no visual of the desired depth then <fun>Tk_GetVisual</fun>
looks first for a visual with greater depth, then one with less
depth.
</dd>
</dle>
<dle>
<dt><b>default</b></dt>
<dd>Use the default visual for <i>tkwin</i>'s screen.
</dd>
</dle>
<dle>
<dt><m>pathName</m></dt>
<dd>Use the visual for the window given by <i>pathName</i>.
<i>pathName</i> must be the name of a window on the same screen
as <i>tkwin</i>.
</dd>
</dle>
<dle>
<dt><m>number</m></dt>
<dd>Use the visual whose X identifier is <i>number</i>.
</dd>
</dle>
<dle>
<dt><b>best</b> ?<m>depth</m>?</dt>
<dd>Choose the ``best possible'' visual, using the following rules, in
decreasing order of priority:
(a) a visual that has exactly the desired depth is best, followed
by a visual with greater depth than requested (but as little extra
as possible), followed by a visual with less depth than requested
(but as great a depth as possible);
(b) if no <i>depth</i> is specified, then the deepest available visual
is chosen;
(c) <b>pseudocolor</b> is better than <b>truecolor</b> or <b>directcolor</b>,
which are better than <b>staticcolor</b>, which is better than
<b>staticgray</b> or <b>grayscale</b>;
(d) the default visual for the screen is better than any other visual.

</dd>
</dle>
</dl>
</section>
<section>
<title>CREDITS</title>
<p>The idea for <fun>Tk_GetVisual</fun>, and the first implementation, came
from Paul Mackerras.

</p>
</section>
<keywords>
<keyword>colormap</keyword>
<keyword>screen</keyword>
<keyword>visual</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="GetVRoot" title="Tk_GetVRootGeometry" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: GetVRoot.3,v 1.3 2004/08/22 15:43:20 dkf Exp $
 -->
<?TROFF.TH title="Tk_GetVRootGeometry" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetVRootGeometry</name>
<desc>Get location and size of virtual root for window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<b>Tk_GetVRootGeometry(</b><m>tkwin</m>, <m>xPtr</m>, <m>yPtr</m>, <m>widthPtr</m>, <m>heightPtr</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window whose virtual root is to be queried.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>xPtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store x-offset of virtual root.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>yPtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store y-offset of virtual root.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>widthPtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store width of virtual root.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>heightPtr</name>
<argmode>out</argmode>
<desc>Points to word in which to store height of virtual root.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_GetVRootGeometry</fun> returns geometry information about the virtual
root window associated with <i>tkwin</i>.  The ``associated'' virtual
root is the one in which <i>tkwin</i>'s nearest top-level ancestor (or
<i>tkwin</i> itself if it is a top-level window) has
been reparented by the window manager.  This window is identified by
a <b>__SWM_ROOT</b> or <b>__WM_ROOT</b> property placed on the top-level
window by the window manager.
If <i>tkwin</i> is not associated with a virtual root (e.g.
because the window manager doesn't use virtual roots) then *<i>xPtr</i> and
*<i>yPtr</i> will be set to 0 and *<i>widthPtr</i> and *<i>heightPtr</i>
will be set to the dimensions of the screen containing <i>tkwin</i>.

</p>
</section>
<keywords>
<keyword>geometry</keyword>
<keyword>height</keyword>
<keyword>location</keyword>
<keyword>virtual root</keyword>
<keyword>width</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="glob" version="8.3" title="glob">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: glob.n,v 1.18 2005/06/09 16:24:47 vincentdarley Exp $
 -->
<?TROFF.TH title="glob" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>glob</name>
<desc>Return names of files that match patterns</desc>
</namesection>
<synopsis>
<syntax>
<cmd>glob</cmd> ?<m>switches</m>? <m>pattern</m> ?<m>pattern ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command performs file name ``globbing'' in a fashion similar to
the csh shell.  It returns a list of the files whose names match any
of the <i>pattern</i> arguments.  No particular order is guaranteed
in the list, so if a sorted list is required the caller should use 
<cmd>lsort</cmd>.
</p>
<p>If the initial arguments to <cmd>glob</cmd> start with <b>-</b> then
they are treated as switches.  The following switches are
currently supported:
</p>
<dl>
<dle>
<dt><b>-directory</b> <m>directory</m></dt>
<dd>Search for files which match the given patterns starting in the given
<i>directory</i>.  This allows searching of directories whose name
contains glob-sensitive characters without the need to quote such
characters explicitly.  This option may not be used in conjunction with
<b>-path</b>, which is used to allow searching for complete file paths
whose names may contain glob-sensitive characters.
</dd>
</dle>
<dle>
<dt><b>-join</b></dt>
<dd>The remaining pattern arguments are treated as a single pattern
obtained by joining the arguments with directory separators.
</dd>
</dle>
<dle>
<dt><b>-nocomplain</b></dt>
<dd>Allows an empty list to be returned without error;  without this
switch an error is returned if the result list would be empty.
</dd>
</dle>
<dle>
<dt><b>-path</b> <m>pathPrefix</m></dt>
<dd>Search for files with the given <i>pathPrefix</i> where the rest of the name
matches the given patterns.  This allows searching for files with names
similar to a given file (as opposed to a directory) even when the names 
contain glob-sensitive 
characters.  This option may not be used in conjunction with
<b>-directory</b>.  For example, to find all files with the same root name
as $path, but differing extensions, you should use <b>glob 
-path [file rootname $path] .*</b> which will work even if $path contains
numerous glob-sensitive characters.
</dd>
</dle>
<dle>
<dt><b>-tails</b></dt>
<dd>Only return the part of each file found which follows the last directory
named in any <b>-directory</b> or <b>-path</b> path specification.  
Thus <b>glob -tails -directory $dir *</b> is equivalent to 
<b>set pwd [pwd] ; cd $dir ; glob *; cd $pwd</b>.  For 
<b>-path</b> specifications, the returned names will include the last
path segment, so <b>glob -tails -path [file rootname ~/foo.tex] .*</b> 
will return paths like <b>foo.aux foo.bib foo.tex</b> etc.
</dd>
</dle>
<dle>
<dt><b>-types</b> <m>typeList</m></dt>
<dd>Only list files or directories which match <i>typeList</i>, where the items
in the list have two forms.  The first form is like the -type option of
the Unix find command:
<i>b</i> (block special file),
<i>c</i> (character special file),
<i>d</i> (directory),
<i>f</i> (plain file),
<i>l</i> (symbolic link),
<i>p</i> (named pipe),
or <i>s</i> (socket), where multiple types may be specified in the list.
<b>Glob</b> will return all files which match at least one of the types given.
Note that symbolic links will be returned both if <b>-types l</b> is given, 
or if the target of a link matches the requested type.  So, a link to
a directory will be returned if <b>-types d</b> was specified.
<p>The second form specifies types where all the types given must match.
These are <i>r</i>, <i>w</i>, <i>x</i> as file permissions, and
<i>readonly</i>, <i>hidden</i> as special permission cases.  On the
Macintosh, MacOS types and creators are also supported, where any item
which is four characters long is assumed to be a MacOS type
(e.g. <b>TEXT</b>).  Items which are of the form <i>{macintosh type XXXX}</i>
or <i>{macintosh creator XXXX}</i> will match types or creators
respectively.  Unrecognized types, or specifications of multiple MacOS
types/creators will signal an error.
</p><p>The two forms may be mixed, so <b>-types {d f r w}</b> will find all
regular files OR directories that have both read AND write permissions.
The following are equivalent:
</p><example>
<b>glob -type d *</b>
<b>glob */</b>
</example><p>except that the first case doesn't return the trailing ``/'' and
is more platform independent.
</p></dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of switches.  The argument following this one will
be treated as a <i>pattern</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>The <i>pattern</i> arguments may contain any of the following
special characters:
</p>
<dl>
<dle>
<dt><b>?</b></dt>
<dd>Matches any single character.
</dd>
</dle>
<dle>
<dt><b>*</b></dt>
<dd>Matches any sequence of zero or more characters.
</dd>
</dle>
<dle>
<dt><b>[</b><m>chars</m><b>]</b></dt>
<dd>Matches any single character in <i>chars</i>.  If <i>chars</i>
contains a sequence of the form <i>a</i><b>-</b><i>b</i> then any
character between <i>a</i> and <i>b</i> (inclusive) will match.
</dd>
</dle>
<dle>
<dt><b>\</b><m>x</m></dt>
<dd>Matches the character <i>x</i>.
</dd>
</dle>
<dle>
<dt><b>{</b><m>a</m><b>,</b><m>b</m><b>,</b><m>...</m>}</dt>
<dd>Matches any of the strings <i>a</i>, <i>b</i>, etc.
</dd>
</dle>
</dl>
<p>On Unix, as with csh, a ``.'' at the beginning of a file's name or just
after a ``/'' must be matched explicitly or with a {} construct,
unless the ``-types hidden'' flag is given (since ``.'' at the beginning 
of a file's name indicates that it is hidden).  On other platforms,
files beginning with a ``.'' are handled no differently to any others,
except the special directories ``.'' and ``..'' which must be matched
explicitly (this is to avoid a recursive pattern like ``glob -join * *
* *'' from recursing up the directory hierarchy as well as down).
In addition, all ``/'' characters must be matched explicitly.
</p>
<p>If the first character in a <i>pattern</i> is ``~'' then it refers
to the home directory for the user whose name follows the ``~''.
If the ``~'' is followed immediately by ``/'' then the value of
the HOME environment variable is used.
</p>
<p>The <cmd>glob</cmd> command differs from csh globbing in two ways.
First, it does not sort its result list (use the <cmd>lsort</cmd>
command if you want the list sorted).
Second, <cmd>glob</cmd> only returns the names of files that actually
exist;  in csh no check for existence is made unless a pattern
contains a ?, *, or [] construct.
</p>
<p>When the <cmd>glob</cmd> command returns relative paths whose filenames
start with a tilde ``~'' (for example through <b>glob *</b> or 
<b>glob -tails</b>, the returned list will not quote the tilde with
``./''.  This means care must be taken if those names are later to
be used with <b>file join</b>, to avoid them being interpreted as
absolute paths pointing to a given user's home directory.
</p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<p><b>Windows</b>
For Windows UNC names, the servername and sharename components of the path
may not contain ?, *, or [] constructs.  On Windows NT, if <i>pattern</i> is
of the form ``<b>~</b><i>username</i><b>@</b><i>domain</i>'' it refers to the home
directory of the user whose account information resides on the specified NT
domain server.  Otherwise, user account information is obtained from
the local computer.  On Windows 95 and 98, <cmd>glob</cmd> accepts patterns
like ``.../'' and ``..../'' for successively higher up parent directories.

Since the backslash character has a special meaning to the glob 
command, glob patterns containing Windows style path separators need 
special care. The pattern <i>C:\\foo\\*</i> is interpreted as 
<i>C:\foo\*</i> where <i>\f</i> will match the single character <i>f</i> 
and <i>\*</i> will match the single character <i>*</i> and will not be 
interpreted as a wildcard character. One solution to this problem is 
to use the Unix style forward slash as a path separator. Windows style 
paths can be converted to Unix style paths with the command <b>file
join $path</b> (or <b>file normalize $path</b> in Tcl 8.4). 
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Find all the Tcl files in the current directory:
</p>
<example>
<cmd>glob</cmd> *.tcl
</example>
<p>Find all the Tcl files in the user's home directory, irrespective of
what the current directory is:
</p>
<example>
<cmd>glob</cmd> -directory ~ *.tcl
</example>
<p>Find all subdirectories of the current directory:
</p>
<example>
<cmd>glob</cmd> -type d *
</example>
<p>Find all files whose name contains an "a", a "b" or the sequence "cde":
</p>
<example>
<cmd>glob</cmd> -type f *{a,b,cde}*
</example>


</section>
<seealso>
<ref>file(n)</ref>
</seealso>
<keywords>
<keyword>exist</keyword>
<keyword>file</keyword>
<keyword>glob</keyword>
<keyword>pattern</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="global" title="global">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: global.n,v 1.9 2004/10/27 12:53:22 dkf Exp $
 -->
<?TROFF.TH title="global" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>global</name>
<desc>Access global variables</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">global</b> <m>varname</m> ?<m>varname ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command has no effect unless executed in the context of a proc body.
If the <b cat="AMBIGUOUS ambiguous cmd">global</b> command is executed in the context of a proc body, it
creates local variables linked to the corresponding global variables (and
therefore these variables are listed by info locals).
</p>
<p>If <i>varname</i> contains namespace qualifiers, the local variable's name is
the unqualified name of the global variable, as determined by the
<b>namespace tail</b> command. 
</p>
<p><i>varname</i> is always treated as the name of a variable, not an
array element.  An error is returned if the name looks like an array element,
such as <b>a(b)</b>.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>This procedure sets the namespace variable <i>::a::x</i>
</p>
<example>
proc reset {} {
    <b cat="AMBIGUOUS ambiguous cmd">global</b> a::x
    set x 0
}
</example>
<p>This procedure accumulates the strings passed to it in a global
buffer, separated by newlines.  It is useful for situations when you
want to build a message piece-by-piece (as if with <cmd>puts</cmd>) but
send that full message in a single piece (e.g. over a connection
opened with <cmd>socket</cmd> or as part of a counted HTTP response).
</p>
<example>
proc accum {string} {
    <b cat="AMBIGUOUS ambiguous cmd">global</b> accumulator
    append accumulator $string \n
}
</example>


</section>
<seealso>
<ref>namespace(n)</ref>
<ref>upvar(n)</ref>
<ref>variable(n)</ref>
</seealso>
<keywords>
<keyword>global</keyword>
<keyword>namespace</keyword>
<keyword>procedure</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="grab" title="grab">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: grab.n,v 1.4 2004/10/28 10:22:51 dkf Exp $
 -->
<?TROFF.TH title="grab" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>grab</name>
<desc>Confine pointer and keyboard events to a window sub-tree</desc>
</namesection>
<synopsis>
<syntax>
<cmd>grab</cmd> ?<b>-global</b>? <m>window</m>

<cmd>grab</cmd> <m>option</m> ?<m>arg arg</m> ...?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command implements simple pointer and keyboard grabs for Tk.
Tk's grabs are different than the grabs
described in the Xlib documentation.
When a grab is set for a particular window, Tk restricts all pointer
events to the grab window and its descendants in Tk's window hierarchy.
Whenever the pointer is within the grab window's subtree, the pointer
will behave exactly the same as if there had been no grab at all
and all events will be reported in the normal fashion.
When the pointer is outside <i>window</i>'s tree, button presses and
releases and
mouse motion events are reported to <i>window</i>, and window entry
and window exit events are ignored.
The grab subtree ``owns'' the pointer:
windows outside the grab subtree will be visible on the screen
but they will be insensitive until the grab is released.
The tree of windows underneath the grab window can include top-level
windows, in which case all of those top-level windows
and their descendants will continue to receive mouse events
during the grab.
</p>
<p>Two forms of grabs are possible:  local and global.
A local grab affects only the grabbing application:  events will
be reported to other applications as if the grab had never occurred.
Grabs are local by default.
A global grab locks out all applications on the screen,
so that only the given subtree of the grabbing application will be
sensitive to pointer events (mouse button presses, mouse button releases,
pointer motions, window entries, and window exits).
During global grabs the window manager will not receive pointer
events either.
</p>
<p>During local grabs, keyboard events (key presses and key releases)
are delivered as usual:  the window
manager controls which application receives keyboard events, and
if they are sent to any window in the grabbing application then they are
redirected to the focus window.
During a global grab Tk grabs the keyboard so that all keyboard events
are always sent to the grabbing application.
The <cmd>focus</cmd> command is still used to determine which window in the
application receives the keyboard events.
The keyboard grab is released when the grab is released.
</p>
<p>Grabs apply to particular displays.  If an application has windows
on multiple displays then it can establish a separate grab on each
display.
The grab on a particular display affects only the windows on
that display.
It is possible for different applications on a single display to have
simultaneous local grabs, but only one application can have a global
grab on a given display at once.
</p>
<p>The <cmd>grab</cmd> command can take any of the following forms:
</p>
<commandlist>
<commanddef>
<command><b>grab</b> ?<b>-global</b>? <m>window</m></command>
<desc>Same as <b>grab set</b>, described below.
</desc>
</commanddef>
<commanddef>
<command><b>grab current</b> ?<m>window</m>?</command>
<desc>If <i>window</i> is specified, returns the name of the current grab
window in this application for <i>window</i>'s display, or an empty
string if there is no such window.
If <i>window</i> is omitted, the command returns a list whose elements
are all of the windows grabbed by this application for all displays,
or an empty string if the application has no grabs.
</desc>
</commanddef>
<commanddef>
<command><b>grab release</b> <m>window</m></command>
<desc>Releases the grab on <i>window</i> if there is one, otherwise does
nothing.  Returns an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>grab set</b> ?<b>-global</b>? <m>window</m></command>
<desc>Sets a grab on <i>window</i>.  If <b>-global</b> is specified then the
grab is global, otherwise it is local.
If a grab was already in effect for this application on
<i>window</i>'s display then it is automatically released.
If there is already a grab on <i>window</i> and it has the same
global/local form as the requested grab, then the command
does nothing.  Returns an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>grab status</b> <m>window</m></command>
<desc>Returns <b>none</b> if no grab is currently set on <i>window</i>,
<b>local</b> if a local grab is set on <i>window</i>, and
<b cat="AMBIGUOUS ambiguous cmd">global</b> if a global grab is set.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>WARNING</title>
<p>It is very easy to use global grabs to render a display completely
unusable (e.g. by setting a grab on a widget which does not respond to
events and not providing any mechanism for releasing the grab).  Take
<i>extreme</i> care when using them!
</p>
</section>
<section>
<title>BUGS</title>
<p>It took an incredibly complex and gross implementation to produce
the simple grab effect described above.
Given the current implementation, it isn't safe for applications
to use the Xlib grab facilities at all except through the Tk grab
procedures.
If applications try to manipulate X's grab mechanisms directly,
things will probably break.
</p>
<p>If a single process is managing several different Tk applications,
only one of those applications can have a local grab for a given
display at any given time.  If the applications are in different
processes, this restriction doesn't exist.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Set a grab so that only one button may be clicked out of a group.  The
other buttons are unresponsive to the mouse until the middle button is
clicked.
</p>
<example>
pack [button .b1 -text "Click me! #1" -command {destroy .b1}]
pack [button .b2 -text "Click me! #2" -command {destroy .b2}]
pack [button .b3 -text "Click me! #3" -command {destroy .b3}]
<cmd>grab</cmd> .b2
</example>


</section>
<keywords>
<keyword>grab</keyword>
<keyword>keyboard events</keyword>
<keyword>pointer events</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="grid" version="8.5" title="grid">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: grid.n,v 1.15 2006/11/15 13:29:17 dkf Exp $
 -->
<?TROFF.TH title="grid" section="n" date="8.5" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>grid</name>
<desc>Geometry manager that arranges widgets in a grid</desc>
</namesection>
<synopsis>
<syntax>
<cmd>grid</cmd> <m>option arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>grid</cmd> command is used to communicate with the grid
geometry manager that arranges widgets in rows and columns inside
of another window, called the geometry master (or master window).
The <cmd>grid</cmd> command can have any of several forms, depending
on the <i>option</i> argument:
</p>
<commandlist>
<commanddef>
<command><b>grid</b> <m>slave</m> ?<m>slave ...</m>? ?<m>options</m>?</command>
<desc>If the first argument to <cmd>grid</cmd> is suitable as the first slave
argument to <b>grid configure</b>, either a window name (any value
starting with <b>.</b>) or one of the characters <b>x</b> or <b>^</b> 
(see the <ref refid="relative-placement">RELATIVE PLACEMENT</ref> section below), then the command is
processed in the same way as <b>grid configure</b>.
</desc>
</commanddef>
<commanddef version="8.5">
<command><b>grid anchor</b> <m>master</m> ?<m>anchor</m>?</command>
<desc>The anchor value controls how to place the grid within the master
when no row/column has any weight.  See <ref refid="the-grid-algorithm">THE GRID ALGORITHM</ref> below
for further details.  The default <i>anchor</i> is <i>nw</i>.
</desc>
</commanddef>
<commanddef>
<command><b>grid bbox</b> <m>master</m> ?<m>column row</m>? ?<m>column2 row2</m>?</command>
<desc>With no arguments, 
the bounding box (in pixels) of the grid is returned.
The return value consists of 4 integers.  The first two are the pixel
offset from the master window (x then y) of the top-left corner of the
grid, and the second two integers are the width and height of the grid,
also in pixels.  If a single <i>column</i> and <i>row</i> is specified on 
the command line, then the bounding box for that cell is returned, where the
top left cell is numbered from zero.  If both <i>column</i> and <i>row</i>
arguments are specified, then the bounding box spanning the rows and columns
indicated is returned.
</desc>
</commanddef>
<commanddef>
<command><b>grid columnconfigure</b> <m>master index</m> ?<m>-option value...</m>?</command>
<desc>Query or set the column properties of the <i>index</i> column of the 
geometry master, <i>master</i>.
The valid options are <b>-minsize</b>, <b>-weight</b>, <b>-uniform</b>
and <b>-pad</b>.
If one or more options are provided, then <i>index</i> may be given as 
a list of column indices to which the configuration options will operate on.
<new version="8.5">Indices may be integers, window names or the keyword <i>all</i>. For <i>all</i>
the options apply to all columns currently occupied be slave windows. For
a window name, that window must be a slave of this master and the options
apply to all columns currently occupied be the slave.
</new>The <b>-minsize</b> option sets the minimum size, in screen units,
that will be permitted for this column.
The <b>-weight</b> option (an integer value)
sets the relative weight for apportioning
any extra spaces among
columns.
A weight of zero (0) indicates the column will not deviate from its requested
size.  A column whose weight is two will grow at twice the rate as a column
of weight one when extra space is allocated to the layout.
The <b>-uniform</b> option, when a non-empty value is supplied, places
the column in a <i>uniform group</i> with other columns that have the
same value for <b>-uniform</b>.  The space for columns belonging to a
uniform group is allocated so that their sizes are always in strict
proportion to their <b>-weight</b> values.  See
<ref refid="the-grid-algorithm">THE GRID ALGORITHM</ref> below for further details.
The <b>-pad</b> option specifies the number of screen units that will be
added to the largest window contained completely in that column when the
grid geometry manager requests a size from the containing window.
If only an option is specified, with no value,
the current value of that option is returned.
If only the master window and index is specified, all the current settings
are returned in a list of "-option value" pairs.
</desc>
</commanddef>
<commanddef>
<command><b>grid configure</b> <m>slave</m> ?<m>slave ...</m>? ?<m>options</m>?</command>
<desc>The arguments consist of the names of one or more slave windows
followed by pairs of arguments that specify how
to manage the slaves.
The characters <b>-</b>,  <b>x</b> and <b>^</b>, 
can be specified instead of a window name to alter the default
location of a <i>slave</i>, as described in the <ref refid="relative-placement">RELATIVE PLACEMENT</ref>
section, below.
The following options are supported:
<dl>
<dle>
<dt><b>-column</b> <m>n</m></dt>
<dd>Insert the slave so that it occupies the <i>n</i>th column in the grid.
Column numbers start with 0.  If this option is not supplied, then the
slave is arranged just to the right of previous slave specified on this
call to <i>grid</i>, or column "0" if it is the first slave.  For each
<b>x</b> that immediately precedes the <i>slave</i>, the column position
is incremented by one.  Thus the <b>x</b> represents a blank column
for this row in the grid.
</dd>
</dle>
<dle>
<dt><b>-columnspan</b> <m>n</m></dt>
<dd>Insert the slave so that it occupies <i>n</i> columns in the grid.
The default is one column, unless the window name is followed by a
<b>-</b>, in which case the columnspan is incremented once for each immediately
following <b>-</b>.
</dd>
</dle>
<dle>
<dt><b>-in</b> <m>other</m></dt>
<dd>Insert the slave(s) in the master
window given by <i>other</i>.  The default is the first slave's
parent window.
</dd>
</dle>
<dle>
<dt><b>-ipadx</b> <m>amount</m></dt>
<dd>The <i>amount</i> specifies how much horizontal internal padding to
leave on each side of the slave(s).  This is space is added
inside the slave(s) border.
The <i>amount</i> must be a valid screen distance, such as <b>2</b> or <b>.5c</b>.
It defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-ipady</b> <m>amount</m></dt>
<dd>The <i>amount</i> specifies how much vertical internal padding to
leave on the top and bottom of the slave(s).
This space is added inside the slave(s) border.
The <i>amount</i>  defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-padx</b> <m>amount</m></dt>
<dd>The <i>amount</i> specifies how much horizontal external padding to
leave on each side of the slave(s), in screen units.
<i>Amount</i> may be a list
of two values to specify padding for left and right separately.
The <i>amount</i> defaults to 0.
This space is added outside the slave(s) border.
</dd>
</dle>
<dle>
<dt><b>-pady</b> <m>amount</m></dt>
<dd>The <i>amount</i> specifies how much vertical external padding to
leave on the top and bottom of the slave(s), in screen units.
<i>Amount</i> may be a list
of two values to specify padding for top and bottom separately.
The <i>amount</i> defaults to 0.
This space is added outside the slave(s) border.
</dd>
</dle>
<dle>
<dt><b>-row</b> <m>n</m></dt>
<dd>Insert the slave so that it occupies the <i>n</i>th row in the grid.
Row numbers start with 0.  If this option is not supplied, then the
slave is arranged on the same row as the previous slave specified on this
call to <cmd>grid</cmd>, or the first unoccupied row if this is the first slave.
</dd>
</dle>
<dle>
<dt><b>-rowspan</b> <m>n</m></dt>
<dd>Insert the slave so that it occupies <i>n</i> rows in the grid.
The default is one row.  If the next <cmd>grid</cmd> command contains
<b>^</b> characters instead of <i>slaves</i> that line up with the columns
of this <i>slave</i>, then the <b>rowspan</b> of this <i>slave</i> is
extended by one.
</dd>
</dle>
<dle>
<dt><b>-sticky</b> <m>style</m></dt>
<dd>If a slave's cell is larger than its requested dimensions, this
option may be used to position (or stretch) the slave within its cell.
<i>Style</i>  is a string that contains zero or more of the characters
<b>n</b>, <b>s</b>, <b>e</b> or <b>w</b>.
The string can optionally contains spaces or
commas, but they are ignored.  Each letter refers to a side (north, south,
east, or west) that the slave will "stick" to.  If both <b>n</b> and <b>s</b> (or
<b>e</b> and <b>w</b>) are specified, the slave will be stretched to fill the entire
height (or width) of its cavity.  The <b>sticky</b> option subsumes the
combination of <b>-anchor</b> and <b>-fill</b> that is used by <cmd>pack</cmd>.
The default is <b>{}</b>, which causes the slave to be centered in its cavity,
at its requested size.
</dd>
</dle>
</dl><p>If any of the slaves are already managed by the geometry manager
then any unspecified options for them retain their previous values rather
than receiving default values.
</p></desc>
</commanddef>
<commanddef>
<command><b>grid forget</b> <m>slave</m> ?<m>slave ...</m>?</command>
<desc>Removes each of the <i>slave</i>s from grid for its
master and unmaps their windows.
The slaves will no longer be managed by the grid geometry manager.
The configuration options for that window are forgotten, so that if the
slave is managed once more by the grid geometry manager, the initial
default settings are used.
</desc>
</commanddef>
<commanddef>
<command><b>grid info</b> <m>slave</m></command>
<desc>Returns a list whose elements are the current configuration state of
the slave given by <i>slave</i> in the same option-value form that
might be specified to <b>grid configure</b>.
The first two elements of the list are ``<b>-in</b> <i>master</i>'' where
<i>master</i> is the slave's master.
</desc>
</commanddef>
<commanddef>
<command><b>grid location</b> <m>master x y</m></command>
<desc>Given  <i>x</i> and <i>y</i> values in screen units relative to the master window, 
the column and row number at that <i>x</i> and <i>y</i> location is returned.
For locations that are above or to the left of the grid, <b>-1</b> is returned.
</desc>
</commanddef>
<commanddef>
<command><b>grid propagate</b> <m>master</m> ?<m>boolean</m>?</command>
<desc>If <i>boolean</i> has a true boolean value such as <b>1</b> or <b>on</b>
then propagation is enabled for <i>master</i>, which must be a window
name (see <ref refid="geometry-propagation">GEOMETRY PROPAGATION</ref> below).
If <i>boolean</i> has a false boolean value then propagation is
disabled for <i>master</i>.
In either of these cases an empty string is returned.
If <i>boolean</i> is omitted then the command returns <b>0</b> or
<b>1</b> to indicate whether propagation is currently enabled
for <i>master</i>.
Propagation is enabled by default.
</desc>
</commanddef>
<commanddef>
<command><b>grid rowconfigure</b> <m>master index</m> ?<m>-option value...</m>?</command>
<desc>Query or set the row properties of the <i>index</i> row of the 
geometry master, <i>master</i>.
The valid options are <b>-minsize</b>, <b>-weight</b>, <b>-uniform</b>
and <b>-pad</b>.
If one or more options are provided, then <i>index</i> may be given as 
a list of row indices to which the configuration options will operate on.
<new version="8.5">Indices may be integers, window names or the keyword <i>all</i>. For <i>all</i>
the options apply to all rows currently occupied be slave windows. For
a window name, that window must be a slave of this master and the options
apply to all rows currently occupied be the slave.
</new>The <b>-minsize</b> option sets the minimum size, in screen units,
that will be permitted for this row.
The <b>-weight</b> option (an integer value)
sets the relative weight for apportioning
any extra spaces among
rows.
A weight of zero (0) indicates the row will not deviate from its requested
size.  A row whose weight is two will grow at twice the rate as a row
of weight one when extra space is allocated to the layout.
The <b>-uniform</b> option, when a non-empty value is supplied, places
the row in a <i>uniform group</i> with other rows that have the
same value for <b>-uniform</b>.  The space for rows belonging to a
uniform group is allocated so that their sizes are always in strict
proportion to their <b>-weight</b> values.  See
<ref refid="the-grid-algorithm">THE GRID ALGORITHM</ref> below for further details.
The <b>-pad</b> option specifies the number of screen units that will be
added to the largest window contained completely in that row when the
grid geometry manager requests a size from the containing window.
If only an option is specified, with no value,
the current value of that option is returned.
If only the master window and index is specified, all the current settings
are returned in a list of "-option value" pairs.
</desc>
</commanddef>
<commanddef>
<command><b>grid remove</b> <m>slave</m> ?<m>slave ...</m>?</command>
<desc>Removes each of the <i>slave</i>s from grid for its
master and unmaps their windows.
The slaves will no longer be managed by the grid geometry manager.
However, the configuration options for that window are remembered,
so that if the
slave is managed once more by the grid geometry manager, the previous
values are retained.
</desc>
</commanddef>
<commanddef>
<command><b>grid size</b> <m>master</m></command>
<desc>Returns the size of the grid (in columns then rows) for <i>master</i>.
The size is determined either by the <i>slave</i> occupying the largest
row or column, or the largest column or row with a <b>minsize</b>, 
<b>weight</b>, or <b>pad</b> that is non-zero.
</desc>
</commanddef>
<commanddef>
<command><b>grid slaves</b> <m>master</m> ?<m>-option value</m>?</command>
<desc>If no options are supplied, a list of all of the slaves in <i>master</i>
are returned, most recently manages first.
<i>Option</i> can be either <b>-row</b> or <b>-column</b> which
causes only the slaves in the row (or column) specified by <i>value</i>
to be returned.
</desc>
</commanddef>
</commandlist>
</section>
<section id="relative-placement">
<title>RELATIVE PLACEMENT</title>
<p>The <cmd>grid</cmd> command contains a limited set of capabilities that
permit layouts to be created without specifying the row and column 
information for each slave.  This permits slaves to be rearranged, 
added, or removed without the need to explicitly specify row and
column information.
When no column or row information is specified for a <i>slave</i>, 
default values are chosen for
<b>column</b>, <b>row</b>, <b>columnspan</b> and <b>rowspan</b>
at the time the <i>slave</i> is managed. The values are chosen
based upon the current layout of the grid, the position of the <i>slave</i>
relative to other <i>slave</i>s in the same grid command, and the presence
of the characters <b>-</b>, <b>x</b>, and <b>^</b> in <cmd>grid</cmd>
command where <i>slave</i> names are normally expected.
</p>
<dl>
<dle>
<dt><b>-</b></dt>
<dd>This increases the columnspan of the <i>slave</i> to the left.  Several
<b>-</b>'s in a row will successively increase the columnspan. A <b>-</b>
may not follow a <b>^</b> or a <b>x</b>, nor may it be the first <i>slave</i>
argument to <b>grid configure</b>.
</dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>This leaves an empty column between the <i>slave</i> on the left and
the <i>slave</i> on the right.
</dd>
</dle>
<dle>
<dt><b>^</b></dt>
<dd>This extends the <b>rowspan</b> of the <i>slave</i> above the <b>^</b>'s
in the grid.  The number of <b>^</b>'s in a row must match the number of
columns spanned by the <i>slave</i> above it.
</dd>
</dle>
</dl>
</section>
<section id="the-grid-algorithm">
<title>THE GRID ALGORITHM</title>
<p>The grid geometry manager lays out its slaves in three steps.
In the first step, the minimum size needed to fit all of the slaves
is computed, then (if propagation is turned on), a request is made
of the master window to become that size.
In the second step, the requested size is compared against the actual size
of the master.  If the sizes are different, then spaces is added to or taken
away from the layout as needed.
For the final step, each slave is positioned in its row(s) and column(s)
based on the setting of its <i>sticky</i> flag.
</p>
<p>To compute the minimum size of a layout, the grid geometry manager
first looks at all slaves whose columnspan and rowspan values are one,
and computes the nominal size of each row or column to be either the
<i>minsize</i> for that row or column, or the sum of the <i>pad</i>ding
plus the size of the largest slave, whichever is greater.  After that
the rows or columns in each uniform group adapt to each other.  Then
the slaves whose rowspans or columnspans are greater than one are
examined.  If a group of rows or columns need to be increased in size
in order to accommodate these slaves, then extra space is added to each
row or column in the group according to its <i>weight</i>.  For each
group whose weights are all zero, the additional space is apportioned
equally.
</p>
<p>When multiple rows or columns belong to a uniform group, the space
allocated to them is always in proportion to their weights. (A weight
of zero is considered to be 1.)  In other words, a row or column
configured with <b>-weight 1 -uniform a</b> will have exactly the same
size as any other row or column configured with <b>-weight 1 -uniform
a</b>.  A row or column configured with <b>-weight 2 -uniform b</b> will 
be exactly twice as large as one that is configured with <b>-weight 1
-uniform b</b>.  
</p>
<p>More technically, each row or column in the group will have a size
equal to <i>k*weight</i> for some constant <i>k</i>.  The constant
<i>k</i> is chosen so that no row or column becomes smaller than its
minimum size.  For example, if all rows or columns in a group have the
same weight, then each row or column will have the same size as the
largest row or column in the group.
</p>
<p><new version="8.5">For masters whose size is larger than the requested layout, the additional
space is apportioned according to the row and column weights.  If all of
the weights are zero, the layout is placed within its master according to
the <i>anchor</i> value.
For masters whose size is smaller than the requested layout, space is taken
away from columns and rows according to their weights.  However, once a 
column or row shrinks to its minsize, its weight is taken to be zero.
If more space needs to be removed from a layout than would be permitted, as
when all the rows or columns are at their minimum sizes, the layout is
placed and clipped according to the <i>anchor</i> value.
</new></p>
</section>
<section id="geometry-propagation">
<title>GEOMETRY PROPAGATION</title>
<p>The grid geometry manager normally computes how large a master must be to
just exactly meet the needs of its slaves, and it sets the
requested width and height of the master to these dimensions.
This causes geometry information to propagate up through a
window hierarchy to a top-level window so that the entire
sub-tree sizes itself to fit the needs of the leaf windows.
However, the <b>grid propagate</b> command may be used to
turn off propagation for one or more masters.
If propagation is disabled then grid will not set
the requested width and height of the master window.
This may be useful if, for example, you wish for a master
window to have a fixed size that you specify.
</p>
</section>
<section>
<title>RESTRICTIONS ON MASTER WINDOWS</title>
<p>The master for each slave must either be the slave's parent
(the default) or a descendant of the slave's parent.
This restriction is necessary to guarantee that the
slave can be placed over any part of its master that is
visible without danger of the slave being clipped by its parent.
In addition, all slaves in one call to <cmd>grid</cmd> must have the same master.
</p>
</section>
<section>
<title>STACKING ORDER</title>
<p>If the master for a slave is not its parent then you must make sure
that the slave is higher in the stacking order than the master.
Otherwise the master will obscure the slave and it will appear as
if the slave hasn't been managed correctly.
The easiest way to make sure the slave is higher than the master is
to create the master window first:  the most recently created window
will be highest in the stacking order.
</p>
</section>
<section>
<title>CREDITS</title>
<p>The <cmd>grid</cmd> command is based on ideas taken from the <i>GridBag</i>
geometry manager written by Doug. Stein, and the <b>blt_table</b> geometry
manager, written by George Howlett.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>A toplevel window containing a text widget and two scrollbars:
</p>
<example>
# Make the widgets
toplevel .t
text .t.txt -wrap none -xscroll {.t.h set} -yscroll {.t.v set}
scrollbar .t.v -orient vertical   -command {.t.txt xview}
scrollbar .t.h -orient horizontal -command {.t.txt xview}
# Lay them out
<cmd>grid</cmd> .t.txt .t.v -sticky nsew
<cmd>grid</cmd> .t.h        -sticky nsew
# Tell the text widget to take all the extra room
<b>grid rowconfigure</b>    .t .t.txt -weight 1
<b>grid columnconfigure</b> .t .t.txt -weight 1
</example>
<p>Three widgets of equal width, despite their different "natural" widths:
</p>
<example>
button .b -text "Foo"
entry .e -variable foo
label .l -text "This is a fairly long piece of text"
<cmd>grid</cmd> .b .e .l -sticky ew
<b>grid columnconfigure</b> . "all" -uniform allTheSame
</example>


</section>
<seealso>
<ref>pack(n)</ref>
<ref>place(n)</ref>
</seealso>
<keywords>
<keyword>geometry manager</keyword>
<keyword>location</keyword>
<keyword>grid</keyword>
<keyword>cell</keyword>
<keyword>propagation</keyword>
<keyword>size</keyword>
<keyword>pack</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_HandleEvent" id="HandleEvent">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: HandleEvent.3,v 1.4 1999/04/21 21:53:22 rjohnson Exp $
 -->
<?TROFF.TH title="Tk_HandleEvent" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_HandleEvent</name>
<desc>invoke event handlers for window system events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_HandleEvent</fun>(<m>eventPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>XEvent</argtype>
<name name="eventPtr">*eventPtr</name>
<argmode>in</argmode>
<desc>Pointer to X event to dispatch to relevant handler(s).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_HandleEvent</fun> is a lower-level procedure that deals with window
events.  It is called by <fun>Tcl_ServiceEvent</fun> (and indirectly by
<b>Tk_DoOneEvent</b>), and in a few other cases within Tk.
It makes callbacks to any window event
handlers (created by calls to <fun>Tk_CreateEventHandler</fun>)
that match <i>eventPtr</i> and then returns.  In some cases
it may be useful for an application to bypass the Tk event
queue and call <fun>Tk_HandleEvent</fun> directly instead of
calling <fun>Tcl_QueueEvent</fun> followed by
<fun>Tcl_ServiceEvent</fun>.
</p>
<p>This procedure may be invoked recursively.  For example,
it is possible to invoke <fun>Tk_HandleEvent</fun> recursively
from a handler called by <fun>Tk_HandleEvent</fun>.  This sort
of operation is useful in some modal situations, such
as when a
notifier has been popped up and an application wishes to
wait for the user to click a button in the notifier before
doing anything else.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>event</keyword>
<keyword>handler</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Hash" title="Tcl_Hash">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Hash.3,v 1.18 2004/10/07 16:05:14 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Hash" section="3" date="" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_InitHashTable</name>
<name>Tcl_InitCustomHashTable</name>
<name>Tcl_InitObjHashTable</name>
<name>Tcl_DeleteHashTable</name>
<name>Tcl_CreateHashEntry</name>
<name>Tcl_DeleteHashEntry</name>
<name>Tcl_FindHashEntry</name>
<name>Tcl_GetHashValue</name>
<name>Tcl_SetHashValue</name>
<name>Tcl_GetHashKey</name>
<name>Tcl_FirstHashEntry</name>
<name>Tcl_NextHashEntry</name>
<name>Tcl_HashStats</name>
<desc>procedures to manage hash tables</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_InitHashTable</fun>(<m>tablePtr</m>, <m>keyType</m>)

<fun>Tcl_InitCustomHashTable</fun>(<m>tablePtr</m>, <m>keyType</m>, <m>typePtr</m>)

<fun>Tcl_InitObjHashTable</fun>(<m>tablePtr</m>)

<fun>Tcl_DeleteHashTable</fun>(<m>tablePtr</m>)

Tcl_HashEntry *
<fun>Tcl_CreateHashEntry</fun>(<m>tablePtr</m>, <m>key</m>, <m>newPtr</m>)

<fun>Tcl_DeleteHashEntry</fun>(<m>entryPtr</m>)

Tcl_HashEntry *
<fun>Tcl_FindHashEntry</fun>(<m>tablePtr</m>, <m>key</m>)

ClientData
<fun>Tcl_GetHashValue</fun>(<m>entryPtr</m>)

<fun>Tcl_SetHashValue</fun>(<m>entryPtr</m>, <m>value</m>)

char *
<fun>Tcl_GetHashKey</fun>(<m>tablePtr</m>, <m>entryPtr</m>)

Tcl_HashEntry *
<fun>Tcl_FirstHashEntry</fun>(<m>tablePtr</m>, <m>searchPtr</m>)

Tcl_HashEntry *
<fun>Tcl_NextHashEntry</fun>(<m>searchPtr</m>)

const char *
<fun>Tcl_HashStats</fun>(<m>tablePtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_HashTable</argtype>
<name name="tablePtr">*tablePtr</name>
<argmode>in</argmode>
<desc>Address of hash table structure (for all procedures but
<fun>Tcl_InitHashTable</fun>, this must have been initialized by
previous call to <fun>Tcl_InitHashTable</fun>).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>keyType</name>
<argmode>in</argmode>
<desc>Kind of keys to use for new hash table.  Must be either
<b>TCL_STRING_KEYS</b>, <b>TCL_ONE_WORD_KEYS</b>, <b>TCL_CUSTOM_TYPE_KEYS</b>,
<b>TCL_CUSTOM_PTR_KEYS</b>, or an integer value greater than 1.
</desc>
</argdef>
<argdef>
<argtype>Tcl_HashKeyType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Address of structure which defines the behaviour of the hash table.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="key">*key</name>
<argmode>in</argmode>
<desc>Key to use for probe into table.  Exact form depends on
<i>keyType</i> used to create table.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="newPtr">*newPtr</name>
<argmode>out</argmode>
<desc>The word at <i>*newPtr</i> is set to 1 if a new entry was created
and 0 if there was already an entry for <i>key</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_HashEntry</argtype>
<name name="entryPtr">*entryPtr</name>
<argmode>in</argmode>
<desc>Pointer to hash table entry.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>value</name>
<argmode>in</argmode>
<desc>New value to assign to hash table entry.  Need not have type
ClientData, but must fit in same space as ClientData.
</desc>
</argdef>
<argdef>
<argtype>Tcl_HashSearch</argtype>
<name name="searchPtr">*searchPtr</name>
<argmode>in</argmode>
<desc>Pointer to record to use to keep track of progress in enumerating
all the entries in a hash table.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p>A hash table consists of zero or more entries, each consisting of a
key and a value.  Given the key for an entry, the hashing routines can
very quickly locate the entry, and hence its value. There may be at
most one entry in a hash table with a particular key, but many entries
may have the same value.  Keys can take one of four forms: strings,
one-word values, integer arrays, or custom keys defined by a
Tcl_HashKeyType structure (See section <b>THE TCL_HASHKEYTYPE
STRUCTURE</b> below). All of the keys in a given table have the same
form, which is specified when the table is initialized.
</p>
<p>The value of a hash table entry can be anything that fits in the same
space as a ``char *'' pointer.  Values for hash table entries are
managed entirely by clients, not by the hash module itself.  Typically
each entry's value is a pointer to a data structure managed by client
code.
</p>
<p>Hash tables grow gracefully as the number of entries increases, so
that there are always less than three entries per hash bucket, on
average. This allows for fast lookups regardless of the number of
entries in a table.
</p>
<p>The core provides three functions for the initialization of hash
tables, Tcl_InitHashTable, Tcl_InitObjHashTable and
Tcl_InitCustomHashTable.
</p>
<p><fun>Tcl_InitHashTable</fun> initializes a structure that describes a new
hash table.  The space for the structure is provided by the caller,
not by the hash module.  The value of <i>keyType</i> indicates what
kinds of keys will be used for all entries in the table. All of the
key types described later are allowed, with the exception of
<b>TCL_CUSTOM_TYPE_KEYS</b> and <b>TCL_CUSTOM_PTR_KEYS</b>.
</p>
<p><fun>Tcl_InitObjHashTable</fun> is a wrapper around
<fun>Tcl_InitCustomHashTable</fun> and initializes a hash table whose keys
are Tcl_Obj *.
</p>
<p><fun>Tcl_InitCustomHashTable</fun> initializes a structure that describes a
new hash table. The space for the structure is provided by the
caller, not by the hash module.  The value of <i>keyType</i> indicates
what kinds of keys will be used for all entries in the table.
<i>KeyType</i> must have one of the following values:
</p>
<dl>
<dle>
<dt><b>TCL_STRING_KEYS</b></dt>
<dd>Keys are null-terminated strings.
They are passed to hashing routines using the address of the
first character of the string.
</dd>
</dle>
<dle>
<dt><b>TCL_ONE_WORD_KEYS</b></dt>
<dd>Keys are single-word values;  they are passed to hashing routines
and stored in hash table entries as ``char *'' values.
The pointer value is the key;  it need not (and usually doesn't)
actually point to a string.
</dd>
</dle>
<dle>
<dt><b>TCL_CUSTOM_TYPE_KEYS</b></dt>
<dd>Keys are of arbitrary type, and are stored in the entry. Hashing
and comparison is determined by <i>typePtr</i>. The Tcl_HashKeyType 
structure is described in the section 
<ref refid="the-tcl_hashkeytype-structure">THE TCL_HASHKEYTYPE STRUCTURE</ref> below.
</dd>
</dle>
<dle>
<dt><b>TCL_CUSTOM_PTR_KEYS</b></dt>
<dd>Keys are pointers to an arbitrary type, and are stored in the entry. Hashing
and comparison is determined by <i>typePtr</i>. The Tcl_HashKeyType 
structure is described in the section 
<ref refid="the-tcl_hashkeytype-structure">THE TCL_HASHKEYTYPE STRUCTURE</ref> below.
</dd>
</dle>
<dle>
<dt><m>other</m></dt>
<dd>If <i>keyType</i> is not one of the above,
then it must be an integer value greater than 1.
In this case the keys will be arrays of ``int'' values, where
<i>keyType</i> gives the number of ints in each key.
This allows structures to be used as keys.
All keys must have the same size.
Array keys are passed into hashing functions using the address
of the first int in the array.
</dd>
</dle>
</dl>
<p><fun>Tcl_DeleteHashTable</fun> deletes all of the entries in a hash
table and frees up the memory associated with the table's
bucket array and entries.
It does not free the actual table structure (pointed to
by <i>tablePtr</i>), since that memory is assumed to be managed
by the client.
<fun>Tcl_DeleteHashTable</fun> also does not free or otherwise
manipulate the values of the hash table entries.
If the entry values point to dynamically-allocated memory, then
it is the client's responsibility to free these structures
before deleting the table.
</p>
<p><fun>Tcl_CreateHashEntry</fun> locates the entry corresponding to a
particular key, creating a new entry in the table if there
wasn't already one with the given key.
If an entry already existed with the given key then <i>*newPtr</i>
is set to zero.
If a new entry was created, then <i>*newPtr</i> is set to a non-zero
value and the value of the new entry will be set to zero.
The return value from <fun>Tcl_CreateHashEntry</fun> is a pointer to
the entry, which may be used to retrieve and modify the entry's
value or to delete the entry from the table.
</p>
<p><fun>Tcl_DeleteHashEntry</fun> will remove an existing entry from a
table.
The memory associated with the entry itself will be freed, but
the client is responsible for any cleanup associated with the
entry's value, such as freeing a structure that it points to.
</p>
<p><fun>Tcl_FindHashEntry</fun> is similar to <fun>Tcl_CreateHashEntry</fun>
except that it doesn't create a new entry if the key doesn't exist;
instead, it returns NULL as result.
</p>
<p><fun>Tcl_GetHashValue</fun> and <fun>Tcl_SetHashValue</fun> are used to
read and write an entry's value, respectively.
Values are stored and retrieved as type ``ClientData'', which is
large enough to hold a pointer value.  On almost all machines this is
large enough to hold an integer value too.
</p>
<p><fun>Tcl_GetHashKey</fun> returns the key for a given hash table entry,
either as a pointer to a string, a one-word (``char *'') key, or
as a pointer to the first word of an array of integers, depending
on the <i>keyType</i> used to create a hash table.
In all cases <fun>Tcl_GetHashKey</fun> returns a result with type
``char *''.
When the key is a string or array, the result of <fun>Tcl_GetHashKey</fun>
points to information in the table entry;  this information will
remain valid until the entry is deleted or its table is deleted.
</p>
<p><fun>Tcl_FirstHashEntry</fun> and <fun>Tcl_NextHashEntry</fun> may be used
to scan all of the entries in a hash table.
A structure of type ``Tcl_HashSearch'', provided by the client,
is used to keep track of progress through the table.
<fun>Tcl_FirstHashEntry</fun> initializes the search record and
returns the first entry in the table (or NULL if the table is
empty).
Each subsequent call to <fun>Tcl_NextHashEntry</fun> returns the
next entry in the table or
NULL if the end of the table has been reached.
A call to <fun>Tcl_FirstHashEntry</fun> followed by calls to
<fun>Tcl_NextHashEntry</fun> will return each of the entries in
the table exactly once, in an arbitrary order.
It is unadvisable to modify the structure of the table, e.g.
by creating or deleting entries, while the search is in progress,
with the exception of deleting the entry returned by
<fun>Tcl_FirstHashEntry</fun> or <fun>Tcl_NextHashEntry</fun>.
</p>
<p><fun>Tcl_HashStats</fun> returns a dynamically-allocated string with
overall information about a hash table, such as the number of
entries it contains, the number of buckets in its hash array,
and the utilization of the buckets.
It is the caller's responsibility to free the result string
by passing it to <fun>ckfree</fun>.
</p>
<p>The header file <b>tcl.h</b> defines the actual data structures
used to implement hash tables.
This is necessary so that clients can allocate Tcl_HashTable
structures and so that macros can be used to read and write
the values of entries.
However, users of the hashing routines should never refer directly
to any of the fields of any of the hash-related data structures;
use the procedures and macros defined here.
</p>
</section>
<section id="the-tcl_hashkeytype-structure">
<title>THE TCL_HASHKEYTYPE STRUCTURE</title>
<p>Extension writers can define new hash key types by defining four
procedures, initializing a Tcl_HashKeyType structure to describe
the type, and calling <fun>Tcl_InitCustomHashTable</fun>.
The <type>Tcl_HashKeyType</type> structure is defined as follows:
</p>
<syntax cat="type" name="Tcl_HashKeyType" scope="global">
typedef struct Tcl_HashKeyType {
    int <i>version</i>;
    int <i>flags</i>;
    Tcl_HashKeyProc *<i>hashKeyProc</i>;
    Tcl_CompareHashKeysProc *<i>compareKeysProc</i>;
    Tcl_AllocHashEntryProc *<i>allocEntryProc</i>;
    Tcl_FreeHashEntryProc *<i>freeEntryProc</i>;
} Tcl_HashKeyType;
</syntax>
<p>The <i>version</i> member is the version of the table. If this
structure is extended in future then the version can be used
to distinguish between different structures. It should be set
to <b>TCL_HASH_KEY_TYPE_VERSION</b>.
</p>
<p>The <i>flags</i> member is one or more of the following values OR'ed together:
</p>
<dl>
<dle>
<dt><b>TCL_HASH_KEY_RANDOMIZE_HASH</b></dt>
<dd>There are some things, pointers for example which don't hash well 
because they do not use the lower bits. If this flag is set then the
hash table will attempt to rectify this by randomizing the bits and 
then using the upper N bits as the index into the table.
</dd>
</dle>
<dle>
<dt><b>TCL_HASH_KEY_SYSTEM_HASH</b></dt>
<dd><new version="8.5">This flag forces Tcl to use the memory allocation 
procedures provided by the operating system when allocating
and freeing memory used to store the hash table data structures,
and not any of Tcl's own customized memory allocation routines.
This is important if the hash table is to be used in the
implementation of a custom set of allocation routines, or something
that a custom set of allocation routines might depend on, in
order to avoid any circular dependency.
</new></dd>
</dle>
</dl>
<p>The <i>hashKeyProc</i> member contains the address of a function 
called to calculate a hash value for the key.
</p>
<syntax cat="type" name="Tcl_HashKeyProc" scope="global">
typedef unsigned int (Tcl_HashKeyProc) (
        Tcl_HashTable *<i>tablePtr</i>,
        void *<i>keyPtr</i>);
</syntax>
<p>If this is NULL then <i>keyPtr</i> is used and 
<b>TCL_HASH_KEY_RANDOMIZE_HASH</b> is assumed.
</p>
<p>The <i>compareKeysProc</i> member contains the address of a function 
called to compare two keys.
</p>
<syntax cat="type" name="Tcl_CompareHashKeysProc" scope="global">
typedef int (Tcl_CompareHashKeysProc) (
        void *<i>keyPtr</i>,
        Tcl_HashEntry *<i>hPtr</i>);
</syntax>
<p>If this is NULL then the <i>keyPtr</i> pointers are compared.
If the keys don't match then the function returns 0, otherwise
it returns 1.
</p>
<p>The <i>allocEntryProc</i> member contains the address of a function 
called to allocate space for an entry and initialize the key.
</p>
<example>
typedef Tcl_HashEntry *(Tcl_AllocHashEntryProc) (
        Tcl_HashTable *<i>tablePtr</i>,
        void *<i>keyPtr</i>);
</example>
<p>If this is NULL then Tcl_Alloc is used to allocate enough space for a
Tcl_HashEntry and the key pointer is assigned to key.oneWordValue.
String keys and array keys use this function to allocate enough 
space for the entry and the key in one block, rather than doing
it in two blocks. This saves space for a pointer to the key from
the entry and another memory allocation. Tcl_Obj * keys use this 
function to allocate enough space for an entry and increment the 
reference count on the object.
If 
</p>
<p>The <i>freeEntryProc</i> member contains the address of a function 
called to free space for an entry.
</p>
<syntax cat="type" name="Tcl_FreeHashEntryProc" scope="global">
typedef void (Tcl_FreeHashEntryProc) (Tcl_HashEntry *<i>hPtr</i>);
</syntax>
<p>If this is NULL then Tcl_Free is used to free the space for the 
entry. Tcl_Obj * keys use this function to decrement the
reference count on the object.
</p>
</section>
<keywords>
<keyword>hash table</keyword>
<keyword>key</keyword>
<keyword>lookup</keyword>
<keyword>search</keyword>
<keyword>value</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="history" title="history">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: history.n,v 1.4 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="history" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>history</name>
<desc>Manipulate the history list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>history</cmd> ?<m>option</m>? ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>history</cmd> command performs one of several operations related to
recently-executed commands recorded in a history list.  Each of
these recorded commands is referred to as an ``event''.  When
specifying an event to the <cmd>history</cmd> command, the following
forms may be used:
</p>
<ol>
<li>A number:  if positive, it refers to the event with
that number (all events are numbered starting at 1).  If the number
is negative, it selects an event relative to the current event
(<b>-1</b> refers to the previous event, <b>-2</b> to the one before that, and
so on).  Event <b>0</b> refers to the current event.
</li>
<li>A string:  selects the most recent event that matches the string.
An event is considered to match the string either if the string is
the same as the first characters of the event, or if the string
matches the event in the sense of the <b>string match</b> command.
</li>
</ol>
<p>The <cmd>history</cmd> command can take any of the following forms:
</p>
<commandlist>
<commanddef>
<command><b>history</b></command>
<desc>Same
as <b>history info</b>, described below.
</desc>
</commanddef>
<commanddef>
<command><b>history add</b> <m>command</m> ?<b>exec</b>?</command>
<desc>Adds the <i>command</i> argument to the history list as a new event.  If
<cmd>exec</cmd> is specified (or abbreviated) then the command is also
executed and its result is returned.  If <cmd>exec</cmd> isn't specified
then an empty string is returned as result.
</desc>
</commanddef>
<commanddef>
<command><b>history change</b> <m>newValue</m> ?<m>event</m>?</command>
<desc>Replaces the value recorded for an event with <i>newValue</i>.  <i>Event</i>
specifies the event to replace, and
defaults to the <i>current</i> event (not event <b>-1</b>).  This command
is intended for use in commands that implement new forms of history
substitution and wish to replace the current event (which invokes the
substitution) with the command created through substitution.  The return
value is an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>history clear</b></command>
<desc>Erase the history list.  The current keep limit is retained.
The history event numbers are reset.
</desc>
</commanddef>
<commanddef>
<command><b>history event</b> ?<m>event</m>?</command>
<desc>Returns the value of the event given by <i>event</i>.  <i>Event</i>
defaults to <b>-1</b>.
</desc>
</commanddef>
<commanddef>
<command><b>history info</b> ?<m>count</m>?</command>
<desc>Returns a formatted string (intended for humans to read) giving
the event number and contents for each of the events in the history
list except the current event.  If <i>count</i> is specified
then only the most recent <i>count</i> events are returned.
</desc>
</commanddef>
<commanddef>
<command><b>history keep</b> ?<m>count</m>?</command>
<desc>This command may be used to change the size of the history list to
<i>count</i> events.  Initially, 20 events are retained in the history
list.  If <i>count</i> is not specified, the current keep limit is returned.
</desc>
</commanddef>
<commanddef>
<command><b>history nextid</b></command>
<desc>Returns the number of the next event to be recorded
in the history list.  It is useful for things like printing the
event number in command-line prompts.
</desc>
</commanddef>
<commanddef>
<command><b>history redo</b> ?<m>event</m>?</command>
<desc>Re-executes the command indicated by <i>event</i> and returns its result.
<i>Event</i> defaults to <b>-1</b>.  This command results in history
revision:  see below for details.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>HISTORY REVISION</title>
<p>Pre-8.0 Tcl had a complex history revision mechanism.
The current mechanism is more limited, and the old
history operations <b>substitute</b> and <b>words</b> have been removed.
(As a consolation, the <b>clear</b> operation was added.)
</p>
<p>The history option <b>redo</b> results in much simpler ``history revision''.
When this option is invoked then the most recent event
is modified to eliminate the history command and replace it with
the result of the history command.
If you want to redo an event without modifying history, then use
the <cmd>event</cmd> operation to retrieve some event,
and the <b>add</b> operation to add it to history and execute it.

</p>
</section>
<keywords>
<keyword>event</keyword>
<keyword>history</keyword>
<keyword>record</keyword>
</keywords>
</manpage>
<manpage cat="package" id="http" version="2.5" title="http">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1997 Sun Microsystems, Inc.
     Copyright (c) 1998-2000 by Ajuba Solutions.
     Copyright (c) 2004 ActiveState Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: http.n,v 1.24 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="http" section="n" date="2.5" source="http" manual="Tcl Bundled Packages" ?>
<namesection>
<name>http</name>
<desc>Client-side implementation of the HTTP/1.0 protocol</desc>
</namesection>
<synopsis>
<syntax>
<b>package require http ?2.5?</b>

<b>::http::config</b> <m>?options?</m>

<b>::http::geturl</b> <m>url ?options?</m>

<b>::http::formatQuery</b> <m>key value</m> ?<m>key value</m> ...?

<b>::http::reset</b> <m>token</m> ?<m>why</m>?

<b>::http::wait</b> <m>token</m>

<b>::http::status</b> <m>token</m>

<b>::http::size</b> <m>token</m>

<b>::http::code</b> <m>token</m>

<b>::http::ncode</b> <m>token</m>

<b>::http::data</b> <m>token</m>

<b>::http::error</b> <m>token</m>

<b>::http::cleanup</b> <m>token</m>

<b>::http::register</b> <m>proto port command</m>

<b>::http::unregister</b> <m>proto</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b>http</b> package provides the client side of the HTTP/1.0
protocol.  The package implements the GET, POST, and HEAD operations
of HTTP/1.0.  It allows configuration of a proxy host to get through
firewalls.  The package is compatible with the <b>Safesock</b> security
policy, so it can be used by untrusted applets to do URL fetching from
a restricted set of hosts. This package can be extended to support
additional HTTP transport protocols, such as HTTPS, by providing
a custom <cmd>socket</cmd> command, via <b>::http::register</b>.
</p>
<p>The <b>::http::geturl</b> procedure does a HTTP transaction.
Its <i>options</i>  determine whether a GET, POST, or HEAD transaction
is performed.  
The return value of <b>::http::geturl</b> is a token for the transaction.
The value is also the name of an array in the ::http namespace
that contains state information about the transaction.  The elements
of this array are described in the STATE ARRAY section.
</p>
<p>If the <b>-command</b> option is specified, then
the HTTP operation is done in the background.
<b>::http::geturl</b> returns immediately after generating the
HTTP request and the callback is invoked
when the transaction completes.  For this to work, the Tcl event loop
must be active.  In Tk applications this is always true.  For pure-Tcl
applications, the caller can use <b>::http::wait</b> after calling
<b>::http::geturl</b> to start the event loop.
</p>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><b>::http::config</b> ?<m>options</m>?</dt>
<dd>The <b>::http::config</b> command is used to set and query the name of the
proxy server and port, and the User-Agent name used in the HTTP
requests.  If no options are specified, then the current configuration
is returned.  If a single argument is specified, then it should be one
of the flags described below.  In this case the current value of
that setting is returned.  Otherwise, the options should be a set of
flags and values that define the configuration:
<dl>
<dle>
<dt><b>-accept</b> <m>mimetypes</m></dt>
<dd>The Accept header of the request.  The default is */*, which means that
all types of documents are accepted.  Otherwise you can supply a 
comma-separated list of mime type patterns that you are
willing to receive.  For example, "image/gif, image/jpeg, text/*".
</dd>
</dle>
<dle>
<dt><b>-proxyhost</b> <m>hostname</m></dt>
<dd>The name of the proxy host, if any.  If this value is the
empty string, the URL host is contacted directly.
</dd>
</dle>
<dle>
<dt><b>-proxyport</b> <m>number</m></dt>
<dd>The proxy port number.
</dd>
</dle>
<dle>
<dt><b>-proxyfilter</b> <m>command</m></dt>
<dd>The command is a callback that is made during
<b>::http::geturl</b>
to determine if a proxy is required for a given host.  One argument, a
host name, is added to <i>command</i> when it is invoked.  If a proxy
is required, the callback should return a two-element list containing
the proxy server and proxy port.  Otherwise the filter should return
an empty list.  The default filter returns the values of the
<b>-proxyhost</b> and <b>-proxyport</b> settings if they are
non-empty.
</dd>
</dle>
<dle>
<dt><b>-urlencoding</b> <m>encoding</m></dt>
<dd>The <i>encoding</i> used for creating the x-url-encoded URLs with
<b>::http::formatQuery</b>.  The default is <b>utf-8</b>, as specified by RFC
2718.  Prior to http 2.5 this was unspecified, and that behavior can be
returned by specifying the empty string (<b>{}</b>), although
<i>iso8859-1</i> is recommended to restore similar behavior but without the
<b>::http::formatQuery</b> throwing an error processing non-latin-1
characters.
</dd>
</dle>
<dle>
<dt><b>-useragent</b> <m>string</m></dt>
<dd>The value of the User-Agent header in the HTTP request.  The default
is <b>"Tcl http client package 2.4."</b>
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>::http::geturl</b> <m>url</m> ?<m>options</m>? </dt>
<dd>The <b>::http::geturl</b> command is the main procedure in the package.
The <b>-query</b> option causes a POST operation and
the <b>-validate</b> option causes a HEAD operation;
otherwise, a GET operation is performed.  The <b>::http::geturl</b> command
returns a <i>token</i> value that can be used to get
information about the transaction.  See the <ref refid="state-array">STATE ARRAY</ref> and ERRORS section for
details.  The <b>::http::geturl</b> command blocks until the operation
completes, unless the <b>-command</b> option specifies a callback
that is invoked when the HTTP transaction completes.
<b>::http::geturl</b> takes several options:
<dl>
<dle>
<dt><b>-binary</b> <m>boolean</m></dt>
<dd>Specifies whether to force interpreting the URL data as binary.  Normally
this is auto-detected (anything not beginning with a <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> content
type or whose content encoding is <b>gzip</b> or <b>compress</b> is
considered binary data).
</dd>
</dle>
<dle>
<dt><b>-blocksize</b> <m>size</m></dt>
<dd>The block size used when reading the URL.
At most <i>size</i> bytes are read at once.  After each block, a call to the
<b>-progress</b> callback is made (if that option is specified).
</dd>
</dle>
<dle>
<dt><b>-channel</b> <m>name</m></dt>
<dd>Copy the URL contents to channel <i>name</i> instead of saving it in
<b>state(body)</b>.
</dd>
</dle>
<dle>
<dt><b>-command</b> <m>callback</m></dt>
<dd>Invoke <i>callback</i> after the HTTP transaction completes.
This option causes <b>::http::geturl</b> to return immediately.
The <i>callback</i> gets an additional argument that is the <i>token</i> returned
from <b>::http::geturl</b>. This token is the name of an array that is
described in the STATE ARRAY section.  Here is a template for the
callback:
<example>
proc httpCallback {token} {
    upvar #0 $token state
    # Access state as a Tcl array
}
</example></dd>
</dle>
<dle>
<dt><b>-handler</b> <m>callback</m></dt>
<dd>Invoke <i>callback</i> whenever HTTP data is available; if present, nothing
else will be done with the HTTP data.  This procedure gets two additional
arguments: the socket for the HTTP data and the <i>token</i> returned from
<b>::http::geturl</b>.  The token is the name of a global array that is described
in the STATE ARRAY section.  The procedure is expected to return the number
of bytes read from the socket.  Here is a template for the callback:
<example>
proc httpHandlerCallback {socket token} {
    upvar #0 $token state
    # Access socket, and state as a Tcl array
    ...
    (example: set data [read $socket 1000];set nbytes [string length $data])
    ...
    return nbytes
}
</example></dd>
</dle>
<dle>
<dt><b>-headers</b> <m>keyvaluelist</m></dt>
<dd>This option is used to add extra headers to the HTTP request.  The
<i>keyvaluelist</i> argument must be a list with an even number of
elements that alternate between keys and values.  The keys become
header field names.  Newlines are stripped from the values so the
header cannot be corrupted.  For example, if <i>keyvaluelist</i> is
<b>Pragma no-cache</b> then the following header is included in the
HTTP request:
<example>
Pragma: no-cache
</example></dd>
</dle>
<dle>
<dt><b>-progress</b> <m>callback</m></dt>
<dd>The <i>callback</i> is made after each transfer of data from the URL.
The callback gets three additional arguments: the <i>token</i> from
<b>::http::geturl</b>, the expected total size of the contents from the
<b>Content-Length</b> meta-data, and the current number of bytes
transferred so far.  The expected total size may be unknown, in which
case zero is passed to the callback.  Here is a template for the
progress callback:
<example>
proc httpProgress {token total current} {
    upvar #0 $token state
}
</example></dd>
</dle>
<dle>
<dt><b>-query</b> <m>query</m></dt>
<dd>This flag causes <b>::http::geturl</b> to do a POST request that passes the
<i>query</i> to the server. The <i>query</i> must be an x-url-encoding
formatted query.  The <b>::http::formatQuery</b> procedure can be used to
do the formatting.
</dd>
</dle>
<dle>
<dt><b>-queryblocksize</b> <m>size</m></dt>
<dd>The block size used when posting query data to the URL.
At most 
<i>size</i>
bytes are written at once.  After each block, a call to the
<b>-queryprogress</b>
callback is made (if that option is specified).
</dd>
</dle>
<dle>
<dt><b>-querychannel</b> <m>channelID</m></dt>
<dd>This flag causes <b>::http::geturl</b> to do a POST request that passes the
data contained in <i>channelID</i> to the server. The data contained in
<i>channelID</i> must be an x-url-encoding
formatted query unless the <b>-type</b> option below is used.
If a Content-Length header is not specified via the <b>-headers</b> options,
<b>::http::geturl</b> attempts to determine the size of the post data
in order to create that header.  If it is
unable to determine the size, it returns an error.
</dd>
</dle>
<dle>
<dt><b>-queryprogress</b> <m>callback</m></dt>
<dd>The <i>callback</i> is made after each transfer of data to the URL
(i.e. POST) and acts exactly like the <b>-progress</b> option (the
callback format is the same).
</dd>
</dle>
<dle>
<dt><b>-timeout</b> <m>milliseconds</m></dt>
<dd>If <i>milliseconds</i> is non-zero, then <b>::http::geturl</b> sets up a timeout
to occur after the specified number of milliseconds.
A timeout results in a call to <b>::http::reset</b> and to
the <b>-command</b> callback, if specified.
The return value of <b>::http::status</b> is <b>timeout</b>
after a timeout has occurred.
</dd>
</dle>
<dle>
<dt><b>-type</b> <m>mime-type</m></dt>
<dd>Use <i>mime-type</i> as the <b>Content-Type</b> value, instead of the
default value (<b>application/x-www-form-urlencoded</b>) during a
POST operation.
</dd>
</dle>
<dle>
<dt><b>-validate</b> <m>boolean</m></dt>
<dd>If <i>boolean</i> is non-zero, then <b>::http::geturl</b> does an HTTP HEAD
request.  This request returns meta information about the URL, but the
contents are not returned.  The meta information is available in the
<b>state(meta)</b>  variable after the transaction. 
See the <ref refid="state-array">STATE ARRAY</ref> section for details.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>::http::formatQuery</b> <m>key value</m> ?<m>key value</m> ...?</dt>
<dd>This procedure does x-url-encoding of query data.  It takes an even
number of arguments that are the keys and values of the query.  It
encodes the keys and values, and generates one string that has the
proper &amp; and = separators.  The result is suitable for the
<b>-query</b> value passed to <b>::http::geturl</b>.
</dd>
</dle>
<dle>
<dt><b>::http::reset</b> <m>token</m> ?<m>why</m>?</dt>
<dd>This command resets the HTTP transaction identified by <i>token</i>, if
any.  This sets the <b>state(status)</b> value to <i>why</i>, which defaults to <b>reset</b>, and then calls the registered <b>-command</b> callback.
</dd>
</dle>
<dle>
<dt><b>::http::wait</b> <m>token</m></dt>
<dd>This is a convenience procedure that blocks and waits for the
transaction to complete.  This only works in trusted code because it
uses <cmd>vwait</cmd>.  Also, it's not useful for the case where
<b>::http::geturl</b> is called <i>without</i> the <b>-command</b> option
because in this case the <b>::http::geturl</b> call doesn't return
until the HTTP transaction is complete, and thus there's nothing to
wait for.
</dd>
</dle>
<dle>
<dt><b>::http::data</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns the <b>body</b> element
(i.e., the URL data) of the state array.
</dd>
</dle>
<dle>
<dt><b>::http::error</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns the <b cat="AMBIGUOUS ambiguous cmd">error</b> element
of the state array.
</dd>
</dle>
<dle>
<dt><b>::http::status</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns the <b>status</b> element of
the state array.
</dd>
</dle>
<dle>
<dt><b>::http::code</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns the <b>http</b> element of the
state array.
</dd>
</dle>
<dle>
<dt><b>::http::ncode</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns just the numeric return
code (200, 404, etc.) from the <b>http</b> element of the state array.
</dd>
</dle>
<dle>
<dt><b>::http::size</b> <m>token</m></dt>
<dd>This is a convenience procedure that returns the <b>currentsize</b>
element of the state array, which represents the number of bytes
received from the URL in the <b>::http::geturl</b> call.
</dd>
</dle>
<dle>
<dt><b>::http::cleanup</b> <m>token</m></dt>
<dd>This procedure cleans up the state associated with the connection
identified by <i>token</i>.  After this call, the procedures
like <b>::http::data</b> cannot be used to get information
about the operation.  It is <i>strongly</i> recommended that you call
this function after you're done with a given HTTP request.  Not doing
so will result in memory not being freed, and if your app calls
<b>::http::geturl</b> enough times, the memory leak could cause a
performance hit...or worse.
</dd>
</dle>
<dle>
<dt><b>::http::register</b> <m>proto port command</m></dt>
<dd>This procedure allows one to provide custom HTTP transport types
such as HTTPS, by registering a prefix, the default port, and the
command to execute to create the Tcl <b>channel</b>. E.g.:
<example>
package require http
package require tls

::http::register https 443 ::tls::socket

set token [::http::geturl https://my.secure.site/]
</example></dd>
</dle>
<dle>
<dt><b>::http::unregister</b> <m>proto</m></dt>
<dd>This procedure unregisters a protocol handler that was previously
registered via <b>::http::register</b>.

</dd>
</dle>
</dl>
</section>
<section>
<title>ERRORS</title>
<p>The <b>::http::geturl</b> procedure will raise errors in the following cases:
invalid command line options,
an invalid URL,
a URL on a non-existent host,
or a URL at a bad port on an existing host.
These errors mean that it
cannot even start the network transaction.
It will also raise an error if it gets an I/O error while
writing out the HTTP request header.
For synchronous <b>::http::geturl</b> calls (where <b>-command</b> is
not specified), it will raise an error if it gets an I/O error while
reading the HTTP reply headers or data.  Because <b>::http::geturl</b>
doesn't return a token in these cases, it does all the required
cleanup and there's no issue of your app having to call
<b>::http::cleanup</b>.
</p>
<p>For asynchronous <b>::http::geturl</b> calls, all of the above error
situations apply, except that if there's any error while 
reading the
HTTP reply headers or data, no exception is thrown.  This is because
after writing the HTTP headers, <b>::http::geturl</b> returns, and the
rest of the HTTP transaction occurs in the background.  The command
callback can check if any error occurred during the read by calling
<b>::http::status</b> to check the status and if its <i>error</i>,
calling <b>::http::error</b> to get the error message.
</p>
<p>Alternatively, if the main program flow reaches a point where it needs
to know the result of the asynchronous HTTP request, it can call
<b>::http::wait</b> and then check status and error, just as the
callback does.
</p>
<p>In any case, you must still call
<b>::http::cleanup</b> to delete the state array when you're done.
</p>
<p>There are other possible results of the HTTP transaction
determined by examining the status from <b>::http::status</b>.
These are described below.
</p>
<dl>
<dle>
<dt>ok</dt>
<dd>If the HTTP transaction completes entirely, then status will be <b>ok</b>.
However, you should still check the <b>::http::code</b> value to get
the HTTP status.  The <b>::http::ncode</b> procedure provides just
the numeric error (e.g., 200, 404 or 500) while the <b>::http::code</b>
procedure returns a value like "HTTP 404 File not found".
</dd>
</dle>
<dle>
<dt>eof</dt>
<dd>If the server closes the socket without replying, then no error
is raised, but the status of the transaction will be <cmd>eof</cmd>.
</dd>
</dle>
<dle>
<dt>error</dt>
<dd>The error message will also be stored in the <b cat="AMBIGUOUS ambiguous cmd">error</b> status
array element, accessible via <b>::http::error</b>.
</dd>
</dle>
</dl>
<p>Another error possibility is that <b>::http::geturl</b> is unable to
write all the post query data to the server before the server
responds and closes the socket.
The error message is saved in the <b>posterror</b> status array
element and then  <b>::http::geturl</b> attempts to complete the
transaction.
If it can read the server's response
it will end up with an <b>ok</b> status, otherwise it will have
an <cmd>eof</cmd> status.

</p>
</section>
<section id="state-array">
<title>STATE ARRAY</title>
<p>The <b>::http::geturl</b> procedure returns a <i>token</i> that can be used to
get to the state of the HTTP transaction in the form of a Tcl array.
Use this construct to create an easy-to-use array variable:
</p>
<example>
upvar #0 $token state
</example>
<p>Once the data associated with the URL is no longer needed, the state
array should be unset to free up storage.
The <b>::http::cleanup</b> procedure is provided for that purpose.
The following elements of
the array are supported:
</p>
<dl>
<dle>
<dt><b>body</b></dt>
<dd>The contents of the URL.  This will be empty if the <b>-channel</b>
option has been specified.  This value is returned by the <b>::http::data</b> command.
</dd>
</dle>
<dle>
<dt><b>charset</b></dt>
<dd>The value of the charset attribute from the <b>Content-Type</b> meta-data
value.  If none was specified, this defaults to the RFC standard
<b>iso8859-1</b>, or the value of <b>$::http::defaultCharset</b>.  Incoming
text data will be automatically converted from this charset to utf-8.
</dd>
</dle>
<dle>
<dt><b>coding</b></dt>
<dd>A copy of the <b>Content-Encoding</b> meta-data value.
</dd>
</dle>
<dle>
<dt><b>currentsize</b></dt>
<dd>The current number of bytes fetched from the URL.
This value is returned by the <b>::http::size</b> command.
</dd>
</dle>
<dle>
<dt><b>error</b></dt>
<dd>If defined, this is the error string seen when the HTTP transaction
was aborted.
</dd>
</dle>
<dle>
<dt><b>http</b></dt>
<dd>The HTTP status reply from the server.  This value
is returned by the <b>::http::code</b> command.  The format of this value is:
<example>
<i>HTTP/1.0 code string</i>
</example><p>The <i>code</i> is a three-digit number defined in the HTTP standard.
A code of 200 is OK.  Codes beginning with 4 or 5 indicate errors.
Codes beginning with 3 are redirection errors.  In this case the
<b>Location</b> meta-data specifies a new URL that contains the
requested information.
</p></dd>
</dle>
<dle>
<dt><b>meta</b></dt>
<dd>The HTTP protocol returns meta-data that describes the URL contents.
The <b>meta</b> element of the state array is a list of the keys and
values of the meta-data.  This is in a format useful for initializing
an array that just contains the meta-data:
<example>
array set meta $state(meta)
</example><p>Some of the meta-data keys are listed below, but the HTTP standard defines
more, and servers are free to add their own.
</p><dl>
<dle>
<dt><b>Content-Type</b></dt>
<dd>The type of the URL contents.  Examples include <b>text/html</b>,
<b>image/gif,</b> <b>application/postscript</b> and
<b>application/x-tcl</b>.
</dd>
</dle>
<dle>
<dt><b>Content-Length</b></dt>
<dd>The advertised size of the contents.  The actual size obtained by
<b>::http::geturl</b> is available as <b>state(size)</b>.
</dd>
</dle>
<dle>
<dt><b>Location</b></dt>
<dd>An alternate URL that contains the requested data.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>posterror</b></dt>
<dd>The error, if any, that occurred while writing
the post query data to the server.
</dd>
</dle>
<dle>
<dt><b>status</b></dt>
<dd>Either <b>ok</b>, for successful completion, <b>reset</b> for
user-reset, <b>timeout</b> if a timeout occurred before the transaction
could complete, or <b cat="AMBIGUOUS ambiguous cmd">error</b> for an error condition.  During the
transaction this value is the empty string.
</dd>
</dle>
<dle>
<dt><b>totalsize</b></dt>
<dd>A copy of the <b>Content-Length</b> meta-data value.
</dd>
</dle>
<dle>
<dt><b>type</b></dt>
<dd>A copy of the <b>Content-Type</b> meta-data value.
</dd>
</dle>
<dle>
<dt><b>url</b></dt>
<dd>The requested URL.
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<example>
# Copy a URL to a file and print meta-data
proc httpcopy { url file {chunk 4096} } {
   set out [open $file w]
   set token [<b>::http::geturl</b> $url -channel $out \
          -progress httpCopyProgress -blocksize $chunk]
   close $out

   # This ends the line started by httpCopyProgress
   puts stderr ""

   upvar #0 $token state
   set max 0
   foreach {name value} $state(meta) {
      if {[string length $name] &gt; $max} {
         set max [string length $name]
      }
      if {[regexp -nocase ^location$ $name]} {
         # Handle URL redirects
         puts stderr "Location:$value"
         return [httpcopy [string trim $value] $file $chunk]
      }
   }
   incr max
   foreach {name value} $state(meta) {
      puts [format "%-*s %s" $max $name: $value]
   }

   return $token
}
proc httpCopyProgress {args} {
   puts -nonewline stderr .
   flush stderr
}
</example>


</section>
<seealso>
<ref>safe(n)</ref>
<ref>socket(n)</ref>
<ref>safesock(n)</ref>
</seealso>
<keywords>
<keyword>security policy</keyword>
<keyword>socket</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_HWNDToWindow" id="HWNDToWindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: HWNDToWindow.3,v 1.2 2000/09/07 00:28:38 ericm Exp $
 -->
<?TROFF.TH title="Tk_HWNDToWindow" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_HWNDToWindow</name>
<desc>Find Tk's window information for a Windows window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tkPlatDecls.h&gt;</b>

Tk_Window
<fun>Tk_HWNDToWindow</fun>(<m>hwnd</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>HWND</argtype>
<name>hwnd</name>
<argmode>in</argmode>
<desc>Windows handle for the window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Given a Windows HWND window identifier, this procedure returns the
corresponding Tk_Window handle. If there is no Tk_Window corresponding
to <i>hwnd</i> then NULL is returned.

</p>
</section>
<keywords>
<keyword>Windows window id</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_IdToWindow" id="IdToWindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: IdToWindow.3,v 1.2 1998/09/14 18:22:52 stanton Exp $
 -->
<?TROFF.TH title="Tk_IdToWindow" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_IdToWindow</name>
<desc>Find Tk's window information for an X window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_IdToWindow</fun>(<m>display</m>, <m>window</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>X display containing the window.
</desc>
</argdef>
<argdef>
<argtype>Window</argtype>
<name>window</name>
<argmode>in</argmode>
<desc>X id for window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Given an X window identifier and the X display it corresponds to,
this procedure returns the corresponding Tk_Window handle.
If there is no Tk_Window corresponding to <i>window</i> then
NULL is returned.

</p>
</section>
<keywords>
<keyword>X window id</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="if" title="if">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: if.n,v 1.5 2004/10/27 12:53:22 dkf Exp $
 -->
<?TROFF.TH title="if" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>if</name>
<desc>Execute scripts conditionally</desc>
</namesection>
<synopsis>
<syntax>
<cmd>if</cmd> <m>expr1</m> ?<b>then</b>? <m>body1</m> <b>elseif</b> <m>expr2</m> ?<b>then</b>? <m>body2</m> <b>elseif</b> ... ?<b>else</b>? ?<m>bodyN</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <i>if</i> command evaluates <i>expr1</i> as an expression (in the
same way that <cmd>expr</cmd> evaluates its argument).  The value of the
expression must be a boolean
(a numeric value, where 0 is false and
anything is true, or a string value such as <b>true</b> or <b>yes</b>
for true and <b>false</b> or <b>no</b> for false);
if it is true then <i>body1</i> is executed by passing it to the
Tcl interpreter.
Otherwise <i>expr2</i> is evaluated as an expression and if it is true
then <b>body2</b> is executed, and so on.
If none of the expressions evaluates to true then <i>bodyN</i> is
executed.
The <b>then</b> and <b>else</b> arguments are optional
``noise words'' to make the command easier to read.
There may be any number of <b>elseif</b> clauses, including zero.
<i>BodyN</i> may also be omitted as long as <b>else</b> is omitted too.
The return value from the command is the result of the body script
that was executed, or an empty string
if none of the expressions was non-zero and there was no <i>bodyN</i>.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>A simple conditional:
</p>
<example>
<cmd>if</cmd> {$vbl == 1} { puts "vbl is one" }
</example>
<p>With an <b>else</b>-clause:
</p>
<example>
<cmd>if</cmd> {$vbl == 1} {
   puts "vbl is one"
} <b>else</b> {
   puts "vbl is not one"
}
</example>
<p>With an <b>elseif</b>-clause too:
</p>
<example>
<cmd>if</cmd> {$vbl == 1} {
   puts "vbl is one"
} <b>elseif</b> {$vbl == 2} {
   puts "vbl is two"
} <b>else</b> {
   puts "vbl is not one or two"
}
</example>
<p>Remember, expressions can be multi-line, but in that case it can be a
good idea to use the optional <b>then</b> keyword for clarity:
</p>
<example>
<cmd>if</cmd> {
   $vbl == 1 || $vbl == 2 || $vbl == 3
} <b>then</b> {
   puts "vbl is one, two or three"
}
</example>


</section>
<seealso>
<ref>expr(n)</ref>
<ref>for(n)</ref>
<ref>foreach(n)</ref>
</seealso>
<keywords>
<keyword>boolean</keyword>
<keyword>conditional</keyword>
<keyword>else</keyword>
<keyword>false</keyword>
<keyword>if</keyword>
<keyword>true</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="image" version="4.0" title="image">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: image.n,v 1.7 2004/06/15 22:44:42 dkf Exp $
 -->
<?TROFF.TH title="image" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>image</name>
<desc>Create and manipulate images</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS canvasitemtype cmd">image</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS canvasitemtype cmd">image</b> command is used to create, delete, and query images.
It can take several different forms, depending on the
<i>option</i> argument.  The legal forms are:
</p>
<commandlist>
<commanddef>
<command><b>image create</b> <m>type</m> ?<m>name</m>? ?<m>option value ...</m>?</command>
<desc>Creates a new image and a command with the same name and returns its name.
<i>type</i> specifies the type of the image, which must be one of
the types currently defined (e.g., <b cat="canvasitemtype">bitmap</b>).
<i>name</i> specifies the name for the image;  if it is omitted then
Tk picks a name of the form <b cat="AMBIGUOUS canvasitemtype cmd">image</b><i>x</i>, where <i>x</i> is
an integer.
There may be any number of <i>option</i>-<i>value</i> pairs,
which provide configuration options for the new image.
The legal set of options is defined separately for each image
type;  see below for details on the options for built-in image types.
If an image already exists by the given name then it is replaced
with the new image and any instances of that image will redisplay
with the new contents.
It is important to note that the image command will silently overwrite any
procedure that may currently be defined by the given name, so choose the
name wisely.  It is recommended to use a separate namespace for image names
(e.g., <b>::img::logo</b>, <b>::img::large</b>).
</desc>
</commanddef>
<commanddef>
<command><b>image delete</b> ?<m>name name</m> ...?</command>
<desc>Deletes each of the named images and returns an empty string.
If there are instances of the images displayed in widgets,
the images won't actually be deleted until all of the instances
are released.
However, the association between the instances and the image
manager will be dropped.
Existing instances will retain their sizes but redisplay as
empty areas.
If a deleted image is recreated with another call to <b>image create</b>,
the existing instances will use the new image.
</desc>
</commanddef>
<commanddef>
<command><b>image height</b> <m>name</m></command>
<desc>Returns a decimal string giving the height of image <i>name</i>
in pixels.
</desc>
</commanddef>
<commanddef>
<command><b>image inuse</b> <m>name</m></command>
<desc>Returns a boolean value indicating whether or not the image given by
<i>name</i> is in use by any widgets.
</desc>
</commanddef>
<commanddef>
<command><b>image names</b></command>
<desc>Returns a list containing the names of all existing images.
</desc>
</commanddef>
<commanddef>
<command><b>image type</b> <m>name</m></command>
<desc>Returns the type of image <i>name</i> (the value of the <i>type</i>
argument to <b>image create</b> when the image was created).
</desc>
</commanddef>
<commanddef>
<command><b>image types</b></command>
<desc>Returns a list whose elements are all of the valid image types
(i.e., all of the values that may be supplied for the <i>type</i>
argument to <b>image create</b>).
</desc>
</commanddef>
<commanddef>
<command><b>image width</b> <m>name</m></command>
<desc>Returns a decimal string giving the width of image <i>name</i>
in pixels.
</desc>
</commanddef>
</commandlist>
<p>Additional operations (e.g. writing the image to a file) may be
available as subcommands of the image instance command. See the manual
page for the particular image type for details.
</p>
</section>
<section>
<title>BUILT-IN IMAGE TYPES</title>
<p>The following image types are defined by Tk so they will be available
in any Tk application.
Individual applications or extensions may define additional types.
</p>
<dl>
<dle>
<dt><b>bitmap</b></dt>
<dd>Each pixel in the image displays a foreground color, a background
color, or nothing.
See the <b cat="canvasitemtype">bitmap</b> manual entry for more information.
</dd>
</dle>
<dle>
<dt><b>photo</b></dt>
<dd>Displays a variety of full-color images, using dithering to
approximate colors on displays with limited color capabilities.
See the <b>photo</b> manual entry for more information.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>bitmap(n)</ref>
<ref>options(n)</ref>
<ref>photo(n)</ref>
</seealso>
<keywords>
<keyword>height</keyword>
<keyword>image</keyword>
<keyword>types of images</keyword>
<keyword>width</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_ImageChanged" id="ImgChanged">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ImgChanged.3,v 1.2 1998/09/14 18:22:52 stanton Exp $
 -->
<?TROFF.TH title="Tk_ImageChanged" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ImageChanged</name>
<desc>notify widgets that image needs to be redrawn</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_ImageChanged</fun>(<m>imageMaster</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>, <m>imageWidth</m>, <m>imageHeight</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_ImageMaster</argtype>
<name>imageMaster</name>
<argmode>in</argmode>
<desc>Token for image, which was passed to image's <i>createProc</i> when
the image was created.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>X-coordinate of upper-left corner of region that needs redisplay (measured
from upper-left corner of image).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Y-coordinate of upper-left corner of region that needs redisplay (measured
from upper-left corner of image).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Width of region that needs to be redrawn, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Height of region that needs to be redrawn, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>imageWidth</name>
<argmode>in</argmode>
<desc>Current width of image, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>imageHeight</name>
<argmode>in</argmode>
<desc>Current height of image, in pixels.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>An image manager calls <fun>Tk_ImageChanged</fun> for an image
whenever anything happens that requires the image to be redrawn.
As a result of calling <fun>Tk_ImageChanged</fun>, any widgets using
the image are notified so that they can redisplay themselves
appropriately.
The <i>imageMaster</i> argument identifies the image, and
<i>x</i>, <i>y</i>, <i>width</i>, and <i>height</i>
specify a rectangular region within the image that needs to
be redrawn.
<i>imageWidth</i> and <i>imageHeight</i> specify the image's (new) size.
</p>
<p>An image manager should call <fun>Tk_ImageChanged</fun> during
its <i>createProc</i> to specify the image's initial size and to
force redisplay if there are existing instances for the image.
If any of the pixel values in the image should change later on,
<fun>Tk_ImageChanged</fun> should be called again with <i>x</i>, <i>y</i>,
<i>width</i>, and <i>height</i> values that cover all the pixels
that changed.
If the size of the image should change, then <fun>Tk_ImageChanged</fun>
must be called to indicate the new size, even if no pixels
need to be redisplayed.

</p>
</section>
<seealso>
<ref>Tk_CreateImageType</ref>
</seealso>
<keywords>
<keyword>images</keyword>
<keyword>redisplay</keyword>
<keyword>image size changes</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Inactive" version="8.5" title="Tk_GetUserInactiveTime">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: Inactive.3,v 1.1 2005/05/31 15:24:53 rmax Exp $
 -->
<?TROFF.TH title="Tk_GetUserInactiveTime" section="3" date="8.5" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_GetUserInactiveTime</name>
<name>Tk_ResetUserInactiveTime</name>
<desc>discover user inactivity time</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

long
<b>Tk_GetUserInactiveTime(</b><m>display</m><b>)</b>

<b>Tk_GetUserInactiveTime(</b><m>display</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>The display on which the user inactivity timer is to be queried or
reset.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><b>Tk_GetUserInactiveTime</b> returns the number of milliseconds that
have passed since the last user interaction (usually via keyboard or
mouse) with the respective display. On systems and displays that don't
support querying the user inactiviy time, <b>-1</b> is returned.
<b>Tk_GetUserInactiveTime</b> resets the user inactivity timer of the
given display to zero.  On windowing systems that don't support
multiple displays <i>display</i> can be passed as <b>NULL</b>.

</p>
</section>
<keywords>
<keyword>idle</keyword>
<keyword>inactive</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="incr" title="incr">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: incr.n,v 1.6 2006/02/09 17:34:41 dgp Exp $
 -->
<?TROFF.TH title="incr" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>incr</name>
<desc>Increment the value of a variable</desc>
</namesection>
<synopsis>
<syntax>
<cmd>incr</cmd> <m>varName</m> ?<m>increment</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Increments the value stored in the variable whose name is <i>varName</i>.
The value of the variable must be an integer.
If <i>increment</i> is supplied then its value (which must be an
integer) is added to the value of variable <i>varName</i>;  otherwise
1 is added to <i>varName</i>.
The new value is stored as a decimal string in variable <i>varName</i>
and also returned as result.
</p>
<p><new version="8.5">Starting with the Tcl 8.5 release, the variable <i>varName</i> passed
to <cmd>incr</cmd> may be unset, and in that case, it will be set to
the value <i>increment</i> or to the default increment value of <b>1</b>.
</new></p>
</section>
<section>
<title>EXAMPLES</title>
<p>Add one to the contents of the variable <i>x</i>:
</p>
<example>
<cmd>incr</cmd> x
</example>
<p>Add 42 to the contents of the variable <i>x</i>:
</p>
<example>
<cmd>incr</cmd> x 42
</example>
<p>Add the contents of the variable <i>y</i> to the contents of the
variable <i>x</i>:
</p>
<example>
<cmd>incr</cmd> x $y
</example>
<p>Add nothing at all to the variable <i>x</i> (often useful for checking
whether an argument to a procedure is actually integral and generating
an error if it is not):
</p>
<example>
<cmd>incr</cmd> x 0
</example>


</section>
<seealso>
<ref>expr(n)</ref>
</seealso>
<keywords>
<keyword>add</keyword>
<keyword>increment</keyword>
<keyword>variable</keyword>
<keyword>value</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="info" version="8.4" title="info">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
     Copyright (c) 1993-1997 Bell Labs Innovations for Lucent Technologies
     Copyright (c) 1998-2000 Ajuba Solutions
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: info.n,v 1.18 2006/11/28 22:20:27 andreas_kupries Exp $
 -->
<?TROFF.TH title="info" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>info</name>
<desc>Return information about the state of the Tcl interpreter</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">info</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command provides information about various internals of the Tcl
interpreter.
The legal <i>option</i>'s (which may be abbreviated) are:
</p>
<commandlist>
<commanddef>
<command><b>info args</b> <m>procname</m></command>
<desc>Returns a list containing the names of the arguments to procedure
<i>procname</i>, in order.  <i>Procname</i> must be the name of a
Tcl command procedure.
</desc>
</commanddef>
<commanddef>
<command><b>info body</b> <m>procname</m></command>
<desc>Returns the body of procedure <i>procname</i>.  <i>Procname</i> must be
the name of a Tcl command procedure.
</desc>
</commanddef>
<commanddef>
<command><b>info cmdcount</b></command>
<desc>Returns a count of the total number of commands that have been invoked
in this interpreter.
</desc>
</commanddef>
<commanddef>
<command><b>info commands</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified,
<new version="8.5">returns a list of names of all the Tcl commands visible
(i.e. executable without using a qualified name) to the current namespace,
including both the built-in commands written in C and
the command procedures defined using the <cmd>proc</cmd> command.
If <i>pattern</i> is specified,
only those names matching <i>pattern</i> are returned.
Matching is determined using the same rules as for <b>string match</b>.
<i>pattern</i> can be a qualified name like <b>Foo::print*</b>.
That is, it may specify a particular namespace
using a sequence of namespace names separated by double colons (<b>::</b>),
and may have pattern matching special characters
at the end to specify a set of commands in that namespace.
If <i>pattern</i> is a qualified name,
the resulting list of command names has each one qualified with the name
of the specified namespace, and only the commands defined in the named
namespace are returned.
</new></desc>
</commanddef>
<commanddef>
<command><b>info complete</b> <m>command</m></command>
<desc>Returns 1 if <i>command</i> is a complete Tcl command in the sense of
having no unclosed quotes, braces, brackets or array element names.
If the command doesn't appear to be complete then 0 is returned.
This command is typically used in line-oriented input environments
to allow users to type in commands that span multiple lines;  if the
command isn't complete, the script can delay evaluating it until additional
lines have been typed to complete the command.
</desc>
</commanddef>
<commanddef>
<command><b>info default</b> <m>procname arg varname</m></command>
<desc><i>Procname</i> must be the name of a Tcl command procedure and <i>arg</i>
must be the name of an argument to that procedure.  If <i>arg</i>
doesn't have a default value then the command returns <b>0</b>.
Otherwise it returns <b>1</b> and places the default value of <i>arg</i>
into variable <i>varname</i>.
</desc>
</commanddef>
<commanddef>
<command><b>info exists</b> <m>varName</m></command>
<desc>Returns <b>1</b> if the variable named <i>varName</i> exists in the
current context (either as a global or local variable) and has been
defined by being given a value, returns <b>0</b> otherwise.

</desc>
</commanddef>
<commanddef>
<command><b>info frame</b> ?<m>number</m>?</command>
<desc>This command provides access to all frames on the stack, even those
hidden from <b>info level</b>. If <i>number</i> is not specified, this
command returns a number giving the frame level of the command. This
is 1 if the command is invoked at top-level. If <i>number</i> is
specified, then the result is a dictionary containing the location
information for the command at the <i>number</i>ed level on the stack.
<p>If <i>number</i> is positive (&gt; 0) then it selects a particular stack
level (1 refers to the top-most active command, i.e., <b>info frame</b>
itself, 2 to the command it was called from, and so on); otherwise it
gives a level relative to the current command (0 refers to the current
command, i.e., <b>info frame</b> itself, -1 to its caller, and so on).
</p><p>This is similar to how <b>info level</b> works, except that this
subcommand reports all frames, like <b cat="AMBIGUOUS ambiguous cmd">source</b>'d scripts,
<b cat="AMBIGUOUS ambiguous cmd">eval</b>'s, <cmd>uplevel</cmd>'s, etc.
</p><p>Note that for nested commands, like "foo [[bar [[x]]]]" only "x" will
be seen by an <b>info frame</b> invoked within "x". This is the same as
for <b>info level</b> and error stack traces.
</p><p>The result dictionary may contain the keys listed below, with the
specified meanings for their values:
</p><dl>
<dle>
<dt><m>type</m></dt>
<dd>This entry is always present and describes the nature of the location
for the command. The recognized values are <b cat="AMBIGUOUS ambiguous cmd">source</b>, <cmd>proc</cmd>,
<b cat="AMBIGUOUS ambiguous cmd">eval</b>, and <b>precompiled</b>.
<dl>
<dle>
<dt><b>source</b></dt>
<dd>means that the command is found in a script loaded by the <b cat="AMBIGUOUS ambiguous cmd">source</b>
command.
</dd>
</dle>
<dle>
<dt><b>proc</b></dt>
<dd>means that the command is found in dynamically created procedure body.
</dd>
</dle>
<dle>
<dt><b>eval</b></dt>
<dd>means that the command is executed by <b cat="AMBIGUOUS ambiguous cmd">eval</b> or <cmd>uplevel</cmd>.
</dd>
</dle>
<dle>
<dt><b>precompiled</b></dt>
<dd>means that the command is found in a precompiled script (loadable by
the package <b>tbcload</b>), and no further information will be
available.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>line</m></dt>
<dd>This entry provides the number of the line the command is at inside of
the script it is a part of. This information is not present for type
<b>precompiled</b>. For type <b cat="AMBIGUOUS ambiguous cmd">source</b> this information is counted
relative to the beginning of the file, whereas for the last two types
the line is counted relative to the start of the script.
</dd>
</dle>
<dle>
<dt><m>file</m></dt>
<dd>This entry is present only for type <b cat="AMBIGUOUS ambiguous cmd">source</b>. It provides the
normalized path of the file the command is in.
</dd>
</dle>
<dle>
<dt><m>cmd</m></dt>
<dd>This entry provides the string representation of the command. This is
usually the unsubstituted form, however for commands which are a pure
list executed by eval it is the substituted form as they have no other
string representation. Care is taken that the pure-List property of
the latter is not spoiled.
</dd>
</dle>
<dle>
<dt><m>proc</m></dt>
<dd>This entry is present only if the command is found in the body of a
regular Tcl procedure. It then provides the name of that procedure.
</dd>
</dle>
<dle>
<dt><m>lambda</m></dt>
<dd>This entry is present only if the command is found in the body of an
anonymous Tcl procedure, i.e. a lambda. It then provides the entire
definition of the lambda in question.
</dd>
</dle>
<dle>
<dt><m>level</m></dt>
<dd>This entry is present only if the queried frame has a corresponding
frame returned by <b>info level</b>. It provides the index of this
frame, relative to the current level (0 and negative numbers).
</dd>
</dle>
</dl><p>A thing of note is that for procedures statically defined in files the
locations of commands in their bodies will be reported with type
<b cat="AMBIGUOUS ambiguous cmd">source</b> and absolute line numbers, and not as type
<cmd>proc</cmd>. The same is true for procedures nested in statically
defined procedures, and literal eval scripts in files or statically
defined procedures.
<br/>In contrast, a procedure definition or <b cat="AMBIGUOUS ambiguous cmd">eval</b> within a dynamically
<b cat="AMBIGUOUS ambiguous cmd">eval</b>uated environment count linenumbers relative to the start of
their script, even if they would be able to count relative to the
start of the outer dynamic script. That type of number usually makes
more sense.
<br/>A different way of describing this behaviour is that file based
locations are tracked as deeply as possible, and where this is not
possible the lines are counted based on the smallest possible
<b cat="AMBIGUOUS ambiguous cmd">eval</b> or procedure body, as that scope is usually easier to find
than any dynamic outer scope.
<br/>The syntactic form <b>{expand}</b> is handled like <b cat="AMBIGUOUS ambiguous cmd">eval</b>. I.e. if it
is given a literal list argument the system tracks the linenumber
within the list words as well, and otherwise all linenumbers are
counted relative to the start of each word (smallest scope)
</p></desc>
</commanddef>
<commanddef>
<command><b>info functions</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified, returns a list of all the math
functions currently defined.
If <i>pattern</i> is specified, only those functions whose name matches
<i>pattern</i> are returned.  Matching is determined using the same
rules as for <b>string match</b>.
</desc>
</commanddef>
<commanddef>
<command><b>info globals</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified, returns a list of all the names
of currently-defined global variables.
Global variables are variables in the global namespace.
If <i>pattern</i> is specified, only those names matching <i>pattern</i>
are returned.  Matching is determined using the same rules as for
<b>string match</b>.
</desc>
</commanddef>
<commanddef>
<command><b>info hostname</b></command>
<desc>Returns the name of the computer on which this invocation is being
executed.
Note that this name is not guaranteed to be the fully qualified domain
name of the host.  Where machines have several different names (as is
common on systems with both TCP/IP (DNS) and NetBIOS-based networking
installed,) it is the name that is suitable for TCP/IP networking that
is returned.
</desc>
</commanddef>
<commanddef>
<command><b>info level</b> ?<m>number</m>?</command>
<desc>If <i>number</i> is not specified, this command returns a number
giving the stack level of the invoking procedure, or 0 if the
command is invoked at top-level.  If <i>number</i> is specified,
then the result is a list consisting of the name and arguments for the
procedure call at level <i>number</i> on the stack.  If <i>number</i>
is positive then it selects a particular stack level (1 refers
to the top-most active procedure, 2 to the procedure it called, and
so on); otherwise it gives a level relative to the current level
(0 refers to the current procedure, -1 to its caller, and so on).
See the <cmd>uplevel</cmd> command for more information on what stack
levels mean.
</desc>
</commanddef>
<commanddef>
<command><b>info library</b></command>
<desc>Returns the name of the library directory in which standard Tcl
scripts are stored.
This is actually the value of the <b cat="variable">tcl_library</b>
variable and may be changed by setting <b cat="variable">tcl_library</b>.
See the <b>tclvars</b> manual entry for more information.
</desc>
</commanddef>
<commanddef>
<command><b>info loaded</b> ?<m>interp</m>?</command>
<desc>Returns a list describing all of the packages that have been loaded into
<i>interp</i> with the <b cat="AMBIGUOUS ambiguous cmd">load</b> command.
Each list element is a sub-list with two elements consisting of the
name of the file from which the package was loaded and the name of
the package.
For statically-loaded packages the file name will be an empty string.
If <i>interp</i> is omitted then information is returned for all packages
loaded in any interpreter in the process.
To get a list of just the packages in the current interpreter, specify
an empty string for the <i>interp</i> argument.
</desc>
</commanddef>
<commanddef>
<command><b>info locals</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified, returns a list of all the names
of currently-defined local variables, including arguments to the
current procedure, if any.
Variables defined with the <b cat="AMBIGUOUS ambiguous cmd">global</b>, <cmd>upvar</cmd>  and
<b cat="AMBIGUOUS ambiguous cmd">variable</b> commands will not be returned.
If <i>pattern</i> is specified, only those names matching <i>pattern</i>
are returned.  Matching is determined using the same rules as for
<b>string match</b>.
</desc>
</commanddef>
<commanddef>
<command><b>info nameofexecutable</b></command>
<desc>Returns the full path name of the binary file from which the application
was invoked.  If Tcl was unable to identify the file, then an empty
string is returned.
</desc>
</commanddef>
<commanddef>
<command><b>info patchlevel</b></command>
<desc>Returns the value of the global variable <b cat="variable">tcl_patchLevel</b>; see
the <b>tclvars</b> manual entry for more information.
</desc>
</commanddef>
<commanddef>
<command><b>info procs</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified, returns a list of all the
names of Tcl command procedures in the current namespace.
If <i>pattern</i> is specified,
only those procedure names in the current namespace
matching <i>pattern</i> are returned.
Matching is determined using the same rules as for
<b>string match</b>.
If <i>pattern</i> contains any namespace separators, they are used to
select a namespace relative to the current namespace (or relative to
the global namespace if <i>pattern</i> starts with <b>::</b>) to match
within; the matching pattern is taken to be the part after the last
namespace separator.
</desc>
</commanddef>
<commanddef>
<command><b>info script</b> ?<m>filename</m>?</command>
<desc>If a Tcl script file is currently being evaluated (i.e. there is a
call to <fun>Tcl_EvalFile</fun> active or there is an active invocation
of the <b cat="AMBIGUOUS ambiguous cmd">source</b> command), then this command returns the name
of the innermost file being processed.  If <i>filename</i> is specified,
then the return value of this command will be modified for the
duration of the active invocation to return that name.  This is
useful in virtual file system applications.
Otherwise the command returns an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>info sharedlibextension</b></command>
<desc>Returns the extension used on this platform for the names of files
containing shared libraries (for example, <b>.so</b> under Solaris).
If shared libraries aren't supported on this platform then an empty
string is returned.
</desc>
</commanddef>
<commanddef>
<command><b>info tclversion</b></command>
<desc>Returns the value of the global variable <b cat="variable">tcl_version</b>; see
the <b>tclvars</b> manual entry for more information.
</desc>
</commanddef>
<commanddef>
<command><b>info vars</b> ?<m>pattern</m>?</command>
<desc>If <i>pattern</i> isn't specified,
returns a list of all the names of currently-visible variables.
This includes locals and currently-visible globals.
If <i>pattern</i> is specified, only those names matching <i>pattern</i>
are returned.  Matching is determined using the same rules as for
<b>string match</b>.
<i>pattern</i> can be a qualified name like <b>Foo::option*</b>.
That is, it may specify a particular namespace
using a sequence of namespace names separated by double colons (<b>::</b>),
and may have pattern matching special characters
at the end to specify a set of variables in that namespace.
If <i>pattern</i> is a qualified name,
the resulting list of variable names
has each matching namespace variable qualified with the name
of its namespace.
Note that a currently-visible variable may not yet "exist" if it has not
been set (e.g. a variable declared but not set by <b cat="AMBIGUOUS ambiguous cmd">variable</b>).
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLE</title>
<p>This command prints out a procedure suitable for saving in a Tcl
script:
</p>
<example>
proc printProc {procName} {
    set result [list proc $procName]
    set formals {}
    foreach var [<b>info args</b> $procName] {
        if {[<b>info default</b> $procName $var def]} {
            lappend formals [list $var $def]
        } else {
            # Still need the list-quoting because variable
            # names may properly contain spaces.
            lappend formals [list $var]
        }
    }
    puts [lappend result $formals [<b>info body</b> $procName]]
}
</example>


</section>
<seealso>
<ref>global(n)</ref>
<ref>proc(n)</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>information</keyword>
<keyword>interpreter</keyword>
<keyword>level</keyword>
<keyword>namespace</keyword>
<keyword>procedure</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Init" title="Tcl_Init" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: Init.3,v 1.3 2004/10/07 15:37:43 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Init" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Init</name>
<desc>find and source initialization script</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_Init</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to initialize.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_Init</fun> is a helper procedure that finds and <b cat="AMBIGUOUS ambiguous cmd">source</b>'s the
<b>init.tcl</b> script, which should exist somewhere on the Tcl library
path.
</p>
<p><fun>Tcl_Init</fun> is typically called from <fun>Tcl_AppInit</fun> procedures.

</p>
</section>
<seealso>
<ref>Tcl_AppInit</ref>
<ref>Tcl_Main</ref>
</seealso>
<keywords>
<keyword>application</keyword>
<keyword>initialization</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="InitStubs" title="Tcl_InitStubs" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: InitStubs.3,v 1.11 2004/10/07 15:15:38 dkf Exp $
 -->
<?TROFF.TH title="Tcl_InitStubs" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_InitStubs</name>
<desc>initialize the Tcl stubs mechanism</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

const char *
<fun>Tcl_InitStubs</fun>(<m>interp</m>, <m>version</m>, <m>exact</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter handle.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="version">*version</name>
<argmode>in</argmode>
<desc>A version string consisting of one or more decimal numbers
separated by dots.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>exact</name>
<argmode>in</argmode>
<desc>Non-zero means that only the particular version specified by
<i>version</i> is acceptable.
Zero means that versions newer than <i>version</i> are also
acceptable as long as they have the same major version number
as <i>version</i>.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>INTRODUCTION</title>
<p>The Tcl stubs mechanism defines a way to dynamically bind
extensions to a particular Tcl implementation at run time.
This provides two significant benefits to Tcl users:
</p>
<dl>
<dle>
<dt>1)</dt>
<dd>Extensions that use the stubs mechanism can be loaded into
multiple versions of Tcl without being recompiled or
relinked.
</dd>
</dle>
<dle>
<dt>2)</dt>
<dd>Extensions that use the stubs mechanism can be dynamically
loaded into statically-linked Tcl applications.
</dd>
</dle>
</dl>
<p>The stubs mechanism accomplishes this by exporting function tables
that define an interface to the Tcl API.  The extension then accesses
the Tcl API through offsets into the function table, so there are no
direct references to any of the Tcl library's symbols.  This
redirection is transparent to the extension, so an extension writer
can continue to use all public Tcl functions as documented.
</p>
<p>The stubs mechanism requires no changes to applications incorporating
Tcl interpreters.  Only developers creating C-based Tcl extensions
need to take steps to use the stubs mechanism with their extensions.
</p>
<p>Enabling the stubs mechanism for an extension requires the following
steps:
</p>
<dl>
<dle>
<dt>1)</dt>
<dd>Call <fun>Tcl_InitStubs</fun> in the extension before calling any other
Tcl functions.
</dd>
</dle>
<dle>
<dt>2)</dt>
<dd>Define the <b>USE_TCL_STUBS</b> symbol.  Typically, you would include the
<b>-DUSE_TCL_STUBS</b> flag when compiling the extension.
</dd>
</dle>
<dle>
<dt>3)</dt>
<dd>Link the extension with the Tcl stubs library instead of the standard
Tcl library.  On Unix platforms, the library name is
<i>libtclstub8.1.a</i>; on Windows platforms, the library name is
<i>tclstub81.lib</i>.
</dd>
</dle>
</dl>
<p>If the extension also requires the Tk API, it must also call
<fun>Tk_InitStubs</fun> to initialize the Tk stubs interface and link
with the Tk stubs libraries.  See the <fun>Tk_InitStubs</fun> page for
more information.
</p>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_InitStubs</fun> attempts to initialize the stub table pointers
and ensure that the correct version of Tcl is loaded.  In addition
to an interpreter handle, it accepts as arguments a version number
and a Boolean flag indicating whether the extension requires
an exact version match or not.  If <i>exact</i> is 0, then the
extension is indicating that newer versions of Tcl are acceptable
as long as they have the same major version number as <i>version</i>;
non-zero means that only the specified <i>version</i> is acceptable.
<fun>Tcl_InitStubs</fun> returns a string containing the actual version
of Tcl satisfying the request, or NULL if the Tcl version is not
acceptable, does not support stubs, or any other error condition occurred.
</p>
</section>
<seealso>
<ref>Tk_InitStubs</ref>
</seealso>
<keywords>
<keyword>stubs</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="InternAtom" title="Tk_InternAtom">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: InternAtom.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_InternAtom" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_InternAtom</name>
<name>Tk_GetAtomName</name>
<desc>manage cache of X atoms</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Atom
<b>Tk_InternAtom(</b><m>tkwin</m>, <m>name</m>)

const char *
<b>Tk_GetAtomName(</b><m>tkwin</m>, <m>atom</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.  Used to map atom or name relative to a particular display.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>String name for which atom is desired.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>atom</name>
<argmode>in</argmode>
<desc>Atom for which corresponding string name is desired.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are similar to the Xlib procedures
<b>XInternAtom</b> and <b>XGetAtomName</b>.  <fun>Tk_InternAtom</fun>
returns the atom identifier associated with string given by
<i>name</i>;  the atom identifier is only valid for the display
associated with <i>tkwin</i>.
<fun>Tk_GetAtomName</fun> returns the string associated
with <i>atom</i> on <i>tkwin</i>'s display.  The string returned
by <fun>Tk_GetAtomName</fun> is in Tk's storage:  the caller need
not free this space when finished with the string, and the caller
should not modify the contents of the returned string.
If there is no atom <i>atom</i> on <i>tkwin</i>'s display,
then <fun>Tk_GetAtomName</fun> returns the string ``?bad atom?''.
</p>
<p>Tk caches
the information returned by <fun>Tk_InternAtom</fun> and <fun>Tk_GetAtomName</fun>
so that future calls
for the same information can be serviced from the cache without
contacting the server.  Thus <fun>Tk_InternAtom</fun> and <fun>Tk_GetAtomName</fun>
are generally much faster than their Xlib counterparts, and they
should be used in place of the Xlib procedures.

</p>
</section>
<keywords>
<keyword>atom</keyword>
<keyword>cache</keyword>
<keyword>display</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="interp" title="interp" version="7.6">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: interp.n,v 1.10 2004/02/28 15:45:53 vincentdarley Exp $
 -->
<?TROFF.TH title="interp" section="n" date="7.6" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>interp</name>
<desc>Create and manipulate Tcl interpreters</desc>
</namesection>
<synopsis>
<syntax>
<cmd>interp</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command makes it possible to create one or more new Tcl 
interpreters that co-exist with the creating interpreter in the
same application.  The creating interpreter is called the <i>master</i>
and the new interpreter is called a <i>slave</i>. 
A master can create any number of slaves, and each slave can
itself create additional slaves for which it is master, resulting
in a hierarchy of interpreters.
</p>
<p>Each interpreter is independent from the others: it has its own name
space for commands, procedures, and global variables.
A master interpreter may create connections between its slaves and
itself using a mechanism called an <i>alias</i>.  An <i>alias</i> is
a command in a slave interpreter which, when invoked, causes a
command to be invoked in its master interpreter or in another slave
interpreter.  The only other connections between interpreters are
through environment variables (the <b cat="variable">env</b> variable), which are
normally shared among all interpreters in the application. Note that the
name space for files (such as the names returned by the <b cat="AMBIGUOUS ambiguous cmd">open</b> command)
is no longer shared between interpreters. Explicit commands are provided to
share files and to transfer references to open files from one interpreter
to another.
</p>
<p>The <cmd>interp</cmd> command also provides support for <i>safe</i>
interpreters.  A safe interpreter is a slave whose functions have
been greatly restricted, so that it is safe to execute untrusted
scripts without fear of them damaging other interpreters or the
application's environment. For example, all IO channel creation
commands and subprocess creation commands are made inaccessible to safe
interpreters.
<?NEW?>See <ref refid="safe-interpreters">SAFE INTERPRETERS</ref> below for more information on
what features are present in a safe interpreter.
The dangerous functionality is not removed from the safe interpreter;
instead, it is <i>hidden</i>, so that only trusted interpreters can obtain
access to it. For a detailed explanation of hidden commands, see
HIDDEN COMMANDS, below.
The alias mechanism can be used for protected communication (analogous to a
kernel call) between a slave interpreter and its master. 
See <ref refid="alias-invocation">ALIAS INVOCATION</ref>, below, for more details on 
how the alias mechanism works.
<?ENDNEW?></p>
<p>A qualified interpreter name is a proper Tcl lists containing a subset of its
ancestors in the interpreter hierarchy, terminated by the string naming the
interpreter in its immediate master. Interpreter names are relative to the
interpreter in which they are used. For example, if <b>a</b> is a slave of
the current interpreter and it has a slave <b>a1</b>, which in turn has a
slave <b>a11</b>, the qualified name of <b>a11</b> in <b>a</b> is the list
<b>a1 a11</b>.
</p>
<p>The <cmd>interp</cmd> command, described below, accepts qualified interpreter
names as arguments; the interpreter in which the command is being evaluated
can always be referred to as <b>{}</b> (the empty list or string). Note that
it is impossible to refer to a master (ancestor) interpreter by name in a
slave interpreter except through aliases. Also, there is no global name by
which one can refer to the first interpreter created in an application.
Both restrictions are motivated by safety concerns.

</p>
</section>
<?NEW?>
<section>
<title>THE INTERP COMMAND</title>
<p><?ENDNEW CONFUSED ?>The <cmd>interp</cmd> command is used to create, delete, and manipulate
slave interpreters, and to share or transfer
channels between interpreters.  It can have any of several forms, depending
on the <i>option</i> argument:
</p>
<commandlist>
<commanddef>
<command><b>interp</b> <b>alias</b> <m>srcPath</m> <m>srcCmd</m></command>
<desc>Returns a Tcl list whose elements are the <i>targetCmd</i> and
<i>arg</i>s associated with the alias named <i>srcCmd</i>
(all of these are the values specified when the alias was
created; it is possible that the actual source command in the
slave is different from <i>srcCmd</i> if it was renamed).
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>alias</b> <m>srcPath</m> <m>srcCmd</m> <b>{}</b></command>
<desc>Deletes the alias for <i>srcCmd</i> in the slave interpreter identified by
<i>srcPath</i>.
<i>srcCmd</i> refers to the name under which the alias
was created;  if the source command has been renamed, the renamed
command will be deleted.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>alias</b> <m>srcPath</m> <m>srcCmd</m> <m>targetPath</m> <m>targetCmd</m> ?<m>arg arg ...</m>?</command>
<desc>This command creates an alias between one slave and another (see the
<b>alias</b> slave command below for creating aliases between a slave
and its master).  In this command, either of the slave interpreters
may be anywhere in the hierarchy of interpreters under the interpreter
invoking the command.
<i>SrcPath</i> and <i>srcCmd</i> identify the source of the alias.
<i>SrcPath</i> is a Tcl list whose elements select a particular
interpreter.  For example, ``<b>a b</b>'' identifies an interpreter
<b>b</b>, which is a slave of interpreter <b>a</b>, which is a slave
of the invoking interpreter.  An empty list specifies the interpreter
invoking the command.  <i>srcCmd</i> gives the name of a new
command, which will be created in the source interpreter.
<i>TargetPath</i> and <i>targetCmd</i> specify a target interpreter
and command, and the <i>arg</i> arguments, if any, specify additional
arguments to <i>targetCmd</i> which are prepended to any arguments specified
in the invocation of <i>srcCmd</i>.
<i>TargetCmd</i> may be undefined at the time of this call, or it may
already exist; it is not created by this command.
The alias arranges for the given target command to be invoked
in the target interpreter whenever the given source command is
invoked in the source interpreter.  See <ref refid="alias-invocation">ALIAS INVOCATION</ref> below for
more details.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>aliases</b> ?<m>path</m>?</command>
<desc>This command returns a Tcl list of the names of all the source commands for
aliases defined in the interpreter identified by <i>path</i>.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>create</b> ?<b>-safe</b>? ?<b>--</b>? ?<m>path</m>?</command>
<desc>Creates a slave interpreter identified by <i>path</i> and a new command,
called a <i>slave command</i>. The name of the slave command is the last
component of <i>path</i>. The new slave interpreter and the slave command
are created in the interpreter identified by the path obtained by removing
the last component from <i>path</i>. For example, if <i>path is</i> <b>a b
c</b> then a new slave interpreter and slave command named <b>c</b> are
created in the interpreter identified by the path <b>a b</b>.
The slave command may be used to manipulate the new interpreter as
described below. If <i>path</i> is omitted, Tcl creates a unique name of the
form <cmd>interp</cmd><i>x</i>, where <i>x</i> is an integer, and uses it for the
interpreter and the slave command. If the <b>-safe</b> switch is specified
(or if the master interpreter is a safe interpreter), the new slave
interpreter will be created as a safe interpreter with limited
functionality; otherwise the slave will include the full set of Tcl
built-in commands and variables. The <b>--</b> switch can be used to
mark the end of switches;  it may be needed if <i>path</i> is an unusual
value such as <b>-safe</b>. The result of the command is the name of the
new interpreter. The name of a slave interpreter must be unique among all
the slaves for its master;  an error occurs if a slave interpreter by the
given name already exists in this master.
The initial recursion limit of the slave interpreter is set to the
current recursion limit of its parent interpreter.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>delete</b> ?<m>path ...?</m></command>
<desc>Deletes zero or more interpreters given by the optional <i>path</i>
arguments, and for each interpreter, it also deletes its slaves. The
command also deletes the slave command for each interpreter deleted.
For each <i>path</i> argument, if no interpreter by that name
exists, the command raises an error.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>eval</b> <m>path arg</m> ?<m>arg ...</m>?</command>
<desc>This command concatenates all of the <i>arg</i> arguments in the same
fashion as the <cmd>concat</cmd> command, then evaluates the resulting string as
a Tcl script in the slave interpreter identified by <i>path</i>. The result
of this evaluation (including error information such as the <b cat="variable">errorInfo</b>
and <b cat="variable">errorCode</b> variables, if an error occurs) is returned to the
invoking interpreter.
</desc>
</commanddef>
<commanddef>
<command><b>interp exists</b> <m>path</m></command>
<desc>Returns  <b>1</b> if a slave interpreter by the specified <i>path</i>
exists in this master, <b>0</b> otherwise. If <i>path</i> is omitted, the
invoking interpreter is used.
</desc>
</commanddef>
<?NEW?>
<commanddef>
<command><b>interp expose</b> <m>path</m> <m>hiddenName</m> ?<m>exposedCmdName</m>?</command>
<desc>Makes the hidden command <i>hiddenName</i> exposed, eventually bringing
it back under a new <i>exposedCmdName</i> name (this name is currently
accepted only if it is a valid global name space name without any ::),
in the interpreter
denoted by <i>path</i>.
If an exposed command with the targeted name already exists, this command
fails.
Hidden commands are explained in more detail in HIDDEN COMMANDS, below.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>hide</b> <m>path</m> <m>exposedCmdName</m> ?<m>hiddenCmdName</m>?</command>
<desc>Makes the exposed command <i>exposedCmdName</i> hidden, renaming
it to the hidden command <i>hiddenCmdName</i>, or keeping the same name if
<i>hiddenCmdName</i> is not given, in the interpreter denoted 
by <i>path</i>.
If a hidden command with the targeted name already exists, this command
fails.
Currently both <i>exposedCmdName</i> and <i>hiddenCmdName</i> can 
not contain namespace qualifiers, or an error is raised.
Commands to be hidden by <b>interp hide</b> are looked up in the global
namespace even if the current namespace is not the global one. This
prevents slaves from fooling a master interpreter into hiding the wrong
command, by making the current namespace be different from the global one.
Hidden commands are explained in more detail in HIDDEN COMMANDS, below.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>hidden</b> <m>path</m></command>
<desc>Returns a list of the names of all hidden commands in the interpreter
identified by <i>path</i>.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>invokehidden</b> <m>path</m> ?<b>-global</b>? <m>hiddenCmdName</m> ?<m>arg ...</m>?</command>
<desc>Invokes the hidden command <i>hiddenCmdName</i> with the arguments supplied
in the interpreter denoted by <i>path</i>. No substitutions or evaluation
are applied to the arguments.
If the <b>-global</b> flag is present, the hidden command is invoked at the
global level in the target interpreter; otherwise it is invoked at the
current call frame and can access local variables in that and outer call
frames.
Hidden commands are explained in more detail in HIDDEN COMMANDS, below.
</desc>
</commanddef>
<?ENDNEW?>
<commanddef>
<command><b>interp issafe</b> ?<m>path</m>?</command>
<desc>Returns <b>1</b> if the interpreter identified by the specified <i>path</i>
is safe, <b>0</b> otherwise.
</desc>
</commanddef>
<?NEW?>
<commanddef>
<command><b>interp marktrusted</b> <m>path</m></command>
<desc>Marks the interpreter identified by <i>path</i> as trusted. Does
not expose the hidden commands. This command can only be invoked from a
trusted interpreter.
The command has no effect if the interpreter identified by <i>path</i> is
already trusted.
</desc>
</commanddef>
<?ENDNEW?>
<commanddef>
<command><b>interp</b> <b>recursionlimit</b> <m>path</m> ?<m>newlimit</m>?</command>
<desc>Returns the maximum allowable nesting depth for the interpreter
specified by <i>path</i>.  If <i>newlimit</i> is specified,
the interpreter recursion limit will be set so that nesting
of more than <i>newlimit</i> calls to <b>Tcl_Eval()</b>
and related procedures in that interpreter will return an error.
The <i>newlimit</i> value is also returned.
The <i>newlimit</i> value must be a positive integer between 1 and the
maximum value of a non-long integer on the platform.  
<p>The command sets the maximum size of the Tcl call stack only. It cannot
by itself prevent stack overflows on the C stack being used by the
application. If your machine has a limit on the size of the C stack, you
may get stack overflows before reaching the limit set by the command. If
this happens, see if there is a mechanism in your system for increasing
the maximum size of the C stack. 
</p></desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>share</b> <m>srcPath channelId destPath</m></command>
<desc>Causes the IO channel identified by <i>channelId</i> to become shared
between the interpreter identified by <i>srcPath</i> and the interpreter
identified by <i>destPath</i>. Both interpreters have the same permissions
on the IO channel.
Both interpreters must close it to close the underlying IO channel; IO
channels accessible in an interpreter are automatically closed when an
interpreter is destroyed.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>slaves</b> ?<m>path</m>?</command>
<desc>Returns a Tcl list of the names of all the slave interpreters associated
with the interpreter identified by <i>path</i>. If <i>path</i> is omitted,
the invoking interpreter is used.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>target</b> <m>path alias</m></command>
<desc>Returns a Tcl list describing the target interpreter for an alias. The
alias is specified with an interpreter path and source command name, just
as in <b>interp alias</b> above. The name of the target interpreter is
returned as an interpreter path, relative to the invoking interpreter.
If the target interpreter for the alias is the invoking interpreter then an
empty list is returned. If the target interpreter for the alias is not the
invoking interpreter or one of its descendants then an error is generated.
The target command does not have to be defined at the time of this invocation.
</desc>
</commanddef>
<commanddef>
<command><b>interp</b> <b>transfer</b> <m>srcPath channelId destPath</m></command>
<desc>Causes the IO channel identified by <i>channelId</i> to become available in
the interpreter identified by <i>destPath</i> and unavailable in the
interpreter identified by <i>srcPath</i>.

</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>SLAVE COMMAND</title>
<p>For each slave interpreter created with the <cmd>interp</cmd> command, a
new Tcl command is created in the master interpreter with the same
name as the new interpreter. This command may be used to invoke
various operations on the interpreter.  It has the following
general form:
</p>
<example>
<i>slave command</i> ?<i>arg arg ...</i>?
</example>
<p><i>Slave</i> is the name of the interpreter, and <i>command</i>
and the <i>arg</i>s determine the exact behavior of the command.
The valid forms of this command are:
</p>
<dl>
<dle>
<dt><m>slave</m> <b>aliases</b></dt>
<dd>Returns a Tcl list whose elements are the names of all the
aliases in <i>slave</i>.  The names returned are the <i>srcCmd</i>
values used when the aliases were created (which may not be the same
as the current names of the commands, if they have been
renamed).
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>alias</b> <m>srcCmd</m></dt>
<dd>Returns a Tcl list whose elements are the <i>targetCmd</i> and
<i>arg</i>s associated with the alias named <i>srcCmd</i>
(all of these are the values specified when the alias was
created; it is possible that the actual source command in the
slave is different from <i>srcCmd</i> if it was renamed).
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>alias</b> <m>srcCmd</m> <b>{}</b></dt>
<dd>Deletes the alias for <i>srcCmd</i> in the slave interpreter.
<i>srcCmd</i> refers to the name under which the alias
was created;  if the source command has been renamed, the renamed
command will be deleted.
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>alias</b> <m>srcCmd targetCmd</m> ?<m>arg ..</m>?</dt>
<dd>Creates an alias such that whenever <i>srcCmd</i> is invoked
in <i>slave</i>, <i>targetCmd</i> is invoked in the master.
The <i>arg</i> arguments will be passed to <i>targetCmd</i> as additional
arguments, prepended before any arguments passed in the invocation of
<i>srcCmd</i>.
See <ref refid="alias-invocation">ALIAS INVOCATION</ref> below for details.
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>eval</b> <m>arg</m> ?<m>arg ..</m>?</dt>
<dd>This command concatenates all of the <i>arg</i> arguments in
the same fashion as the <cmd>concat</cmd> command, then evaluates
the resulting string as a Tcl script in <i>slave</i>.
The result of this evaluation (including error information
such as the <b cat="variable">errorInfo</b> and <b cat="variable">errorCode</b> variables, if an
error occurs) is returned to the invoking interpreter.
</dd>
</dle>
<?NEW?>
<dle>
<dt><m>slave</m> <b>expose</b> <m>hiddenName</m> ?<m>exposedCmdName</m>?</dt>
<dd>This command exposes the hidden command <i>hiddenName</i>, eventually bringing
it back under a new <i>exposedCmdName</i> name (this name is currently
accepted only if it is a valid global name space name without any ::),
in <i>slave</i>.
If an exposed command with the targeted name already exists, this command
fails.
For more details on hidden commands, see <ref refid="hidden-commands">HIDDEN COMMANDS</ref>, below.
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>hide</b> <m>exposedCmdName</m> ?<m>hiddenCmdName</m>?</dt>
<dd>This command hides the exposed command <i>exposedCmdName</i>, renaming it to 
the hidden command <i>hiddenCmdName</i>, or keeping the same name if the
argument is not given, in the <i>slave</i> interpreter.
If a hidden command with the targeted name already exists, this command
fails.
Currently both <i>exposedCmdName</i> and <i>hiddenCmdName</i> can 
not contain namespace qualifiers, or an error is raised.
Commands to be hidden are looked up in the global
namespace even if the current namespace is not the global one. This
prevents slaves from fooling a master interpreter into hiding the wrong
command, by making the current namespace be different from the global one.
For more details on hidden commands, see <ref refid="hidden-commands">HIDDEN COMMANDS</ref>, below.
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>hidden</b></dt>
<dd>Returns a list of the names of all hidden commands in <i>slave</i>.
</dd>
</dle>
<dle>
<dt><m>slave</m> <b>invokehidden</b> ?<b>-global</b> <m>hiddenName</m> ?<m>arg ..</m>?</dt>
<dd>This command invokes the hidden command <i>hiddenName</i> with the
supplied arguments, in <i>slave</i>. No substitutions or evaluations are
applied to the arguments.
If the <b>-global</b> flag is given, the command is invoked at the global
level in the slave; otherwise it is invoked at the current call frame and
can access local variables in that or outer call frames.
For more details on hidden commands, 
see <ref refid="hidden-commands">HIDDEN COMMANDS</ref>, below.
</dd>
</dle>
<?ENDNEW?>
<dle>
<dt><m>slave</m> <b>issafe</b></dt>
<dd>Returns  <b>1</b> if the slave interpreter is safe, <b>0</b> otherwise.
</dd>
</dle>
<?NEW?>
<dle>
<dt><m>slave</m> <b>marktrusted</b></dt>
<dd>Marks the slave interpreter as trusted. Can only be invoked by a
trusted interpreter. This command does not expose any hidden
commands in the slave interpreter. The command has no effect if the slave
is already trusted.
</dd>
</dle>
<?ENDNEW?>
<dle>
<dt><m>slave</m> <b>recursionlimit</b> ?<m>newlimit</m>?</dt>
<dd>Returns the maximum allowable nesting depth for the <i>slave</i> interpreter.
If <i>newlimit</i> is specified, the recursion limit in <i>slave</i> will be
set so that nesting of more than <i>newlimit</i> calls to <b>Tcl_Eval()</b>
and related procedures in <i>slave</i> will return an error.
The <i>newlimit</i> value is also returned.
The <i>newlimit</i> value must be a positive integer between 1 and the
maximum value of a non-long integer on the platform.  
<p>The command sets the maximum size of the Tcl call stack only. It cannot
by itself prevent stack overflows on the C stack being used by the
application. If your machine has a limit on the size of the C stack, you
may get stack overflows before reaching the limit set by the command. If
this happens, see if there is a mechanism in your system for increasing
the maximum size of the C stack. 
</p></dd>
</dle>
</dl>
</section>
<section id="safe-interpreters">
<title>SAFE INTERPRETERS</title>
<p>A safe interpreter is one with restricted functionality, so that
is safe to execute an arbitrary script from your worst enemy without
fear of that script damaging the enclosing application or the rest
of your computing environment.  In order to make an interpreter
safe, certain commands and variables are removed from the interpreter.
For example, commands to create files on disk are removed, and the
<cmd>exec</cmd> command is removed, since it could be used to cause damage
through subprocesses.
Limited access to these facilities can be provided, by creating
aliases to the master interpreter which check their arguments carefully
and provide restricted access to a safe subset of facilities.
For example, file creation might be allowed in a particular subdirectory
and subprocess invocation might be allowed for a carefully selected and
fixed set of programs.
</p>
<p>A safe interpreter is created by specifying the <b>-safe</b> switch
to the <b>interp create</b> command.  Furthermore, any slave created
by a safe interpreter will also be safe.
</p>
<p>A safe interpreter is created with exactly the following set of
built-in commands:
</p>
<?TABSTOPS 1.2i 2.4i 3.6i?>
<sl cat="cmd" cols="4">
<li>after</li>
<li>append</li>
<li>array</li>
<li>binary</li>
<li>break</li>
<li>case</li>
<li>catch</li>
<li>clock</li>
<li>close</li>
<li>concat</li>
<li>continue</li>
<li>eof</li>
<li>error</li>
<li>eval</li>
<li>expr</li>
<li>fblocked</li>
<li>fcopy</li>
<li>fileevent</li>
<li>flush</li>
<li>for</li>
<li>foreach</li>
<li>format</li>
<li>gets</li>
<li>global</li>
<li>if</li>
<li>incr</li>
<li>info</li>
<li>interp</li>
<li>join</li>
<li>lappend</li>
<li>lindex</li>
<li>linsert</li>
<li>list</li>
<li>llength</li>
<li>lrange</li>
<li>lreplace</li>
<li>lsearch</li>
<li>lsort</li>
<li>namespace</li>
<li>package</li>
<li>pid</li>
<li>proc</li>
<li>puts</li>
<li>read</li>
<li>regexp</li>
<li>regsub</li>
<li>rename</li>
<li>return</li>
<li>scan</li>
<li>seek</li>
<li>set</li>
<li>split</li>
<li>string</li>
<li>subst</li>
<li>switch</li>
<li>tell</li>
<li>time</li>
<li>trace</li>
<li>unset</li>
<li>update</li>
<li>uplevel</li>
<li>upvar</li>
<li>variable</li>
<li>vwait</li>
<li>while</li>
</sl>
<?NEW?>
<p>The following commands are hidden by <b>interp create</b> when it
creates a safe interpreter:
</p>
<?TABSTOPS 1.2i 2.4i 3.6i?>
<sl cols="4">
<li>cd</li>
<li>encoding</li>
<li>exec</li>
<li>exit</li>
<li>fconfigure file</li>
<li>glob</li>
<li>load</li>
<li>open</li>
<li>pwd</li>
<li>socket</li>
<li>source</li>
</sl>
<p>These commands can be recreated later as Tcl procedures or aliases, or
re-exposed by <b>interp expose</b>.
</p>
<p>The following commands from Tcl's library of support procedures are
not present in a safe interpreter:
</p>
<?TABSTOPS 1.6i 3.2i?>
<sl cols="3">
<li>auto_exec_ok</li>
<li>auto_import</li>
<li>auto_load</li>
<li>auto_load_index</li>
<li>auto_qualify</li>
<li>unknown</li>
</sl>
<p>Note in particular that safe interpreters have no default <b cat="AMBIGUOUS ambiguous cmd">unknown</b>
command, so Tcl's default autoloading facilities are not available.  
Autoload access to Tcl's commands that are normally autoloaded:
</p>
<?TABSTOPS 2.1i?>
<sl cat="cmd" cols="2">
<li>::pkg::create</li>
<li>::safe::interpAddToAccessPath</li>
<li>::safe::interpConfigure</li>
<li>::safe::interpCreate</li>
<li>::safe::interpDelete</li>
<li>::safe::interpFindInAccessPath</li>
<li>::safe::interpInit</li>
<li>::safe::setLogCmd</li>
<li>auto_mkindex</li>
<li>auto_mkindex_old</li>
<li>auto_reset</li>
<li>history</li>
<li>parray</li>
<li>pkg_mkIndex</li>
<li>tcl_endOfWord</li>
<li>tcl_findLibrary</li>
<li>tcl_startOfNextWord</li>
<li>tcl_startOfPreviousWord</li>
<li>tcl_wordBreakAfter</li>
<li>tcl_wordBreakBefore</li>
</sl>
<p>can only be provided by explicit definition of an <b cat="AMBIGUOUS ambiguous cmd">unknown</b> command
in the safe interpreter.  This will involve exposing the <b cat="AMBIGUOUS ambiguous cmd">source</b>
command.  This is most easily accomplished by creating the safe interpreter
with Tcl's <b>Safe-Tcl</b> mechanism.  <b>Safe-Tcl</b> provides safe
versions of <b cat="AMBIGUOUS ambiguous cmd">source</b>, <b cat="AMBIGUOUS ambiguous cmd">load</b>, and other Tcl commands needed
to support autoloading of commands and the loading of packages.
</p>
<?ENDNEW?>
<p>In addition, the <b cat="variable">env</b> variable is not present in a safe interpreter,
so it cannot share environment variables with other interpreters. The
<b cat="variable">env</b> variable poses a security risk, because users can store
sensitive information in an environment variable. For example, the PGP
manual recommends storing the PGP private key protection password in
the environment variable <i>PGPPASS</i>. Making this variable available
to untrusted code executing in a safe interpreter would incur a
security risk.
</p>
<p>If extensions are loaded into a safe interpreter, they may also restrict
their own functionality to eliminate unsafe commands. For a discussion of
management of extensions for safety see the manual entries for
<b>Safe-Tcl</b> and the <b cat="AMBIGUOUS ambiguous cmd">load</b> Tcl command.
</p>
<p>A safe interpreter may not alter the recursion limit of any interpreter,
including itself.

</p>
</section>
<section id="alias-invocation">
<title>ALIAS INVOCATION</title>
<p>The alias mechanism has been carefully designed so that it can
be used safely when an untrusted script is executing
in a safe slave and the target of the alias is a trusted
master.  The most important thing in guaranteeing safety is to
ensure that information passed from the slave to the master is
never evaluated or substituted in the master;  if this were to
occur, it would enable an evil script in the slave to invoke
arbitrary functions in the master, which would compromise security.
</p>
<p>When the source for an alias is invoked in the slave interpreter, the
usual Tcl substitutions are performed when parsing that command.
These substitutions are carried out in the source interpreter just
as they would be for any other command invoked in that interpreter.
The command procedure for the source command takes its arguments
and merges them with the <i>targetCmd</i> and <i>arg</i>s for the
alias to create a new array of arguments.  If the words
of <i>srcCmd</i> were ``<i>srcCmd arg1 arg2 ... argN</i>'',
the new set of words will be
``<i>targetCmd arg arg ... arg arg1 arg2 ... argN</i>'',
where <i>targetCmd</i> and <i>arg</i>s are the values supplied when the
alias was created.  <i>TargetCmd</i> is then used to locate a command
procedure in the target interpreter, and that command procedure
is invoked with the new set of arguments.  An error occurs if
there is no command named <i>targetCmd</i> in the target interpreter.
No additional substitutions are performed on the words:  the
target command procedure is invoked directly, without
going through the normal Tcl evaluation mechanism.
Substitutions are thus performed on each word exactly once:
<i>targetCmd</i> and <i>args</i> were substituted when parsing the command
that created the alias, and <i>arg1 - argN</i> are substituted when
the alias's source command is parsed in the source interpreter.
</p>
<p>When writing the <i>targetCmd</i>s for aliases in safe interpreters,
it is very important that the arguments to that command never be
evaluated or substituted, since this would provide an escape
mechanism whereby the slave interpreter could execute arbitrary
code in the master.  This in turn would compromise the security
of the system.

</p>
</section>
<?NEW?>
<section id="hidden-commands">
<title>HIDDEN COMMANDS</title>
<p>Safe interpreters greatly restrict the functionality available to Tcl
programs executing within them.
Allowing the untrusted Tcl program to have direct access to this
functionality is unsafe, because it can be used for a variety of
attacks on the environment.
However, there are times when there is a legitimate need to use the
dangerous functionality in the context of the safe interpreter. For
example, sometimes a program must be <b cat="AMBIGUOUS ambiguous cmd">source</b>d into the interpreter.
Another example is Tk, where windows are bound to the hierarchy of windows
for a specific interpreter; some potentially dangerous functions, e.g.
window management, must be performed on these windows within the
interpreter context.
</p>
<p>The <cmd>interp</cmd> command provides a solution to this problem in the form of
<i>hidden commands</i>. Instead of removing the dangerous commands entirely
from a safe interpreter, these commands are hidden so they become
unavailable to Tcl scripts executing in the interpreter. However, such
hidden commands can be invoked by any trusted ancestor of the safe
interpreter, in the context of the safe interpreter, using <b>interp
invoke</b>. Hidden commands and exposed commands reside in separate name
spaces. It is possible to define a hidden command and an exposed command by
the same name within one interpreter.
</p>
<p>Hidden commands in a slave interpreter can be invoked in the body of
procedures called in the master during alias invocation. For example, an
alias for <b cat="AMBIGUOUS ambiguous cmd">source</b> could be created in a slave interpreter. When it is
invoked in the slave interpreter, a procedure is called in the master
interpreter to check that the operation is allowable (e.g. it asks to
source a file that the slave interpreter is allowed to access). The
procedure then it invokes the hidden <b cat="AMBIGUOUS ambiguous cmd">source</b> command in the slave
interpreter to actually source in the contents of the file. Note that two
commands named <b cat="AMBIGUOUS ambiguous cmd">source</b> exist in the slave interpreter: the alias, and
the hidden command.
</p>
<p>Because a master interpreter may invoke a hidden command as part of
handling an alias invocation, great care must be taken to avoid evaluating
any arguments passed in through the alias invocation.
Otherwise, malicious slave interpreters could cause a trusted master
interpreter to execute dangerous commands on their behalf. See the section
on ALIAS INVOCATION for a more complete discussion of this topic.
To help avoid this problem, no substitutions or evaluations are
applied to arguments of <b>interp invokehidden</b>.
</p>
<p>Safe interpreters are not allowed to invoke hidden commands in themselves
or in their descendants. This prevents safe slaves from gaining access to
hidden functionality in themselves or their descendants.
</p>
<p>The set of hidden commands in an interpreter can be manipulated by a trusted
interpreter using <b>interp expose</b> and <b>interp hide</b>. The <b>interp
expose</b> command moves a hidden command to the
set of exposed commands in the interpreter identified by <i>path</i>,
potentially renaming the command in the process. If an exposed command by
the targeted name already exists, the operation fails. Similarly,
<b>interp hide</b> moves an exposed command to the set of hidden commands in
that interpreter. Safe interpreters are not allowed to move commands
between the set of hidden and exposed commands, in either themselves or
their descendants.
</p>
<p>Currently, the names of hidden commands cannot contain namespace
qualifiers, and you must first rename a command in a namespace to the
global namespace before you can hide it.
Commands to be hidden by <b>interp hide</b> are looked up in the global
namespace even if the current namespace is not the global one. This
prevents slaves from fooling a master interpreter into hiding the wrong
command, by making the current namespace be different from the global one.
</p>
</section>
<?ENDNEW?>
<section>
<title>CREDITS</title>
<p>This mechanism is based on the Safe-Tcl prototype implemented
by Nathaniel Borenstein and Marshall Rose.

</p>
</section>
<seealso>
<ref>load(n)</ref>
<ref>safe(n)</ref>
<ref>Tcl_CreateSlave(3)</ref>
</seealso>
<keywords>
<keyword>alias</keyword>
<keyword>master interpreter</keyword>
<keyword>safe interpreter</keyword>
<keyword>slave interpreter</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="IntObj" version="8.5" title="Tcl_IntObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: IntObj.3,v 1.11 2006/04/18 18:06:48 dgp Exp $
 -->
<?TROFF.TH title="Tcl_IntObj" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewIntObj</name>
<name>Tcl_NewLongObj</name>
<name>Tcl_NewWideIntObj</name>
<name>Tcl_SetIntObj</name>
<name>Tcl_SetLongObj</name>
<name>Tcl_SetWideIntObj</name>
<name>Tcl_GetIntFromObj</name>
<name>Tcl_GetLongFromObj</name>
<name>Tcl_GetWideIntFromObj</name>
<name>Tcl_NewBignumObj</name>
<name>Tcl_SetBignumObj</name>
<name>Tcl_GetBignumFromObj</name>
<name>Tcl_GetBignumAndClearObj</name>
<desc>manipulate Tcl objects as integer values</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewIntObj</fun>(<m>intValue</m>)

Tcl_Obj *
<fun>Tcl_NewLongObj</fun>(<m>longValue</m>)

Tcl_Obj *
<fun>Tcl_NewWideIntObj</fun>(<m>wideValue</m>)

<fun>Tcl_SetIntObj</fun>(<m>objPtr</m>, <m>intValue</m>)

<fun>Tcl_SetLongObj</fun>(<m>objPtr</m>, <m>longValue</m>)

<fun>Tcl_SetWideIntObj</fun>(<m>objPtr</m>, <m>wideValue</m>)

int
<fun>Tcl_GetIntFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>intPtr</m>)

int
<fun>Tcl_GetLongFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>longPtr</m>)

int
<fun>Tcl_GetWideIntFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>widePtr</m>)


<new version="8.5"><b>#include &lt;tclTomMath.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewBignumObj</fun>(<m>bigValue</m>)

<fun>Tcl_SetBignumObj</fun>(<m>objPtr</m>, <m>bigValue</m>)

int
<fun>Tcl_GetBignumFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>bigValue</m>)

int
<fun>Tcl_GetBignumAndClearObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>bigValue</m>)
</new></syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>intValue</name>
<argmode>in</argmode>
<desc>Integer value used to initialize or set a Tcl object.
</desc>
</argdef>
<argdef>
<argtype>long</argtype>
<name>longValue</name>
<argmode>in</argmode>
<desc>Long integer value used to initialize or set a Tcl object.
</desc>
</argdef>
<argdef>
<argtype>Tcl_WideInt</argtype>
<name>wideValue</name>
<argmode>in</argmode>
<desc>Wide integer value used to initialize or set a Tcl object.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>For <fun>Tcl_SetIntObj</fun>, <fun>Tcl_SetLongObj</fun>, <fun>Tcl_SetWideIntObj</fun>,
and <fun>Tcl_SetBignumObj</fun>, this points to the object in which to store an
integral value.  For <fun>Tcl_GetIntFromObj</fun>, <fun>Tcl_GetLongFromObj</fun>,
<fun>Tcl_GetWideIntFromObj</fun>, <fun>Tcl_GetBignumFromObj</fun>, and
<fun>Tcl_GetBignumAndClearObj</fun>, this refers to the object from which
to retrieve an integral value.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>When non-NULL, an error message is left here when integral value
retrieval fails.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="intPtr">*intPtr</name>
<argmode>out</argmode>
<desc>Points to place to store the integer value retrieved from <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>long</argtype>
<name name="longPtr">*longPtr</name>
<argmode>out</argmode>
<desc>Points to place to store the long integer value retrieved from <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_WideInt</argtype>
<name name="widePtr">*widePtr</name>
<argmode>out</argmode>
<desc>Points to place to store the wide integer value retrieved from <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>mp_int</argtype>
<name name="bigValue">*bigValue</name>
<argmode>in/out</argmode>
<desc><new version="8.5">Points to a multi-precision integer structure declared by the LibTomMath
library.
</new></desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><?NEW 8.5?>These procedures are used to create, modify, and read Tcl objects
that hold integral values.  
</p>
<p>The different routines exist to accomodate different integral types in C
with which values might be exchanged.  The C integral types for which Tcl
provides value exchange routines are <b cat="mathfunc">int</b>, <b>long int</b>,
<b>Tcl_WideInt</b>, and <b>mp_int</b>.  The <b cat="mathfunc">int</b> and <b>long int</b> types
are provided by the C language standard.  The <b>Tcl_WideInt</b> type is a
typedef defined to be whatever signed integral type covers at least the
64-bit integer range (-9223372036854775809 to 9223372036854775807).  Depending
on the platform and the C compiler, the actual type might be
<b>long int</b>, <b>long long int</b>, <b>int64</b>, or something else.
The <b>mp_int</b> type is a multiple-precision integer type defined
by the LibTomMath multiple-precision integer library.  
</p>
<p>The <fun>Tcl_NewIntObj</fun>, <fun>Tcl_NewLongObj</fun>, <fun>Tcl_NewWideIntObj</fun>,
and <fun>Tcl_NewBignumObj</fun> routines each create and return a new
Tcl object initialized to the integral value of the argument.  The
returned Tcl object is unshared.
</p>
<p>The <fun>Tcl_SetIntObj</fun>, <fun>Tcl_SetLongObj</fun>, <fun>Tcl_SetWideIntObj</fun>,
and <fun>Tcl_SetBignumObj</fun> routines each set the value of an existing
Tcl object pointed to by <i>objPtr</i> to the integral value provided
by the other argument.  The <i>objPtr</i> argument must point to an
unshared Tcl object.  Any attempt to set the value of a shared Tcl object
violates Tcl's copy-on-write policy.  Any existing string representation
or internal representation in the unshared Tcl object will be freed
as a consequence of setting the new value.
</p>
<p>The <fun>Tcl_GetIntFromObj</fun>, <fun>Tcl_GetLongFromObj</fun>,
<fun>Tcl_GetWideIntFromObj</fun>, <fun>Tcl_GetBignumFromObj</fun>, and
<fun>Tcl_GetBignumAndClearObj</fun> routines attempt to retrieve an integral
value of the appropriate type from the Tcl object <i>objPtr</i>.  If the
attempt succeeds, then <b>TCL_OK</b> is returned, and the value is
written to the storage provided by the caller.  The attempt might
fail if <i>objPtr</i> does not hold an integral value, or if the
value exceeds the range of the target type.  If the attempt fails,
then <b>TCL_ERROR</b> is returned, and if <i>interp</i> is non-NULL,
an error message is left in <i>interp</i>.  The <type>Tcl_ObjType</type>
of <i>objPtr</i> may be changed to make subsequent calls to the
same routine more efficient. Unlike the other functions,
<fun>Tcl_GetBignumAndClearObj</fun> may set the content of the Tcl object
<i>objPtr</i> to an empty string in the process of retrieving the
multiple-precision integer value.
</p>
<p>The choice between <fun>Tcl_GetBignumFromObj</fun> and
<fun>Tcl_GetBignumAndClearObj</fun> is governed by how the caller will
continue to use <i>objPtr</i>.  If after the <b>mp_int</b> value
is retrieved from <i>objPtr</i>, the caller will make no more
use of <i>objPtr</i>, and in addition if <i>objPtr</i> is unshared,
then using <fun>Tcl_GetBignumAndClearObj</fun> requires less copying
to get the same job done, and should be more efficient.  If
<i>objPtr</i> is shared, or if anything later in the caller requires
<i>objPtr</i> to continue to hold the same value, then
<fun>Tcl_GetBignumFromObj</fun> must be chosen.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_GetObjResult</ref>
</seealso>
<keywords>
<keyword>integer</keyword>
<keyword>integer object</keyword>
<keyword>integer type</keyword>
<keyword>internal representation</keyword>
<keyword>object</keyword>
<keyword>object type</keyword>
<keyword>string representation</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="join" title="join">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: join.n,v 1.5 2004/10/27 12:53:22 dkf Exp $
 -->
<?TROFF.TH title="join" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>join</name>
<desc>Create a string by joining together list elements</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">join</b> <m>list</m> ?<m>joinString</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <i>list</i> argument must be a valid Tcl list.
This command returns the string
formed by joining all of the elements of <i>list</i> together with
<i>joinString</i> separating each adjacent pair of elements.
The <i>joinString</i> argument defaults to a space character.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Making a comma-separated list:
</p>
<example>
set data {1 2 3 4 5}
<b cat="AMBIGUOUS ambiguous cmd">join</b> $data ", "
     <b>=&gt; 1, 2, 3, 4, 5</b>
</example>
<p>Using <b cat="AMBIGUOUS ambiguous cmd">join</b> to flatten a list by a single level:
</p>
<example>
set data {1 {2 3} 4 {5 {6 7} 8}}
<b cat="AMBIGUOUS ambiguous cmd">join</b> $data
     <b>=&gt; 1 2 3 4 5 {6 7} 8</b>
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>split(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>join</keyword>
<keyword>list</keyword>
<keyword>separator</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="keysyms" title="keysyms" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: keysyms.n,v 1.4 2004/08/20 14:15:29 dkf Exp $
 -->
<?TROFF.TH title="keysyms" section="n" date="8.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>keysyms</name>
<desc>keysyms recognized by Tk</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>Tk recognizes many keysyms when specifying key bindings (e.g. 
<b>bind . &lt;Key-</b><i>keysym</i><b>&gt;</b>).  The following list enumerates the
keysyms that will be recognized by Tk.  Note that not all keysyms will
be valid on all platforms.  For example, on Unix systems, the presence
of a particular keysym is dependant on the configuration of the
keyboard modifier map.  This list shows keysyms along with their
decimal and hexadecimal values.
</p>
<example>
space                               32     0x0020
exclam                              33     0x0021
quotedbl                            34     0x0022
numbersign                          35     0x0023
dollar                              36     0x0024
percent                             37     0x0025
ampersand                           38     0x0026
quoteright                          39     0x0027
parenleft                           40     0x0028
parenright                          41     0x0029
asterisk                            42     0x002a
plus                                43     0x002b
comma                               44     0x002c
minus                               45     0x002d
period                              46     0x002e
slash                               47     0x002f
0                                   48     0x0030
1                                   49     0x0031
2                                   50     0x0032
3                                   51     0x0033
4                                   52     0x0034
5                                   53     0x0035
6                                   54     0x0036
7                                   55     0x0037
8                                   56     0x0038
9                                   57     0x0039
colon                               58     0x003a
semicolon                           59     0x003b
less                                60     0x003c
equal                               61     0x003d
greater                             62     0x003e
question                            63     0x003f
at                                  64     0x0040
A                                   65     0x0041
B                                   66     0x0042
C                                   67     0x0043
D                                   68     0x0044
E                                   69     0x0045
F                                   70     0x0046
G                                   71     0x0047
H                                   72     0x0048
I                                   73     0x0049
J                                   74     0x004a
K                                   75     0x004b
L                                   76     0x004c
M                                   77     0x004d
N                                   78     0x004e
O                                   79     0x004f
P                                   80     0x0050
Q                                   81     0x0051
R                                   82     0x0052
S                                   83     0x0053
T                                   84     0x0054
U                                   85     0x0055
V                                   86     0x0056
W                                   87     0x0057
X                                   88     0x0058
Y                                   89     0x0059
Z                                   90     0x005a
bracketleft                         91     0x005b
backslash                           92     0x005c
bracketright                        93     0x005d
asciicircum                         94     0x005e
underscore                          95     0x005f
quoteleft                           96     0x0060
a                                   97     0x0061
b                                   98     0x0062
c                                   99     0x0063
d                                  100     0x0064
e                                  101     0x0065
f                                  102     0x0066
g                                  103     0x0067
h                                  104     0x0068
i                                  105     0x0069
j                                  106     0x006a
k                                  107     0x006b
l                                  108     0x006c
m                                  109     0x006d
n                                  110     0x006e
o                                  111     0x006f
p                                  112     0x0070
q                                  113     0x0071
r                                  114     0x0072
s                                  115     0x0073
t                                  116     0x0074
u                                  117     0x0075
v                                  118     0x0076
w                                  119     0x0077
x                                  120     0x0078
y                                  121     0x0079
z                                  122     0x007a
braceleft                          123     0x007b
bar                                124     0x007c
braceright                         125     0x007d
asciitilde                         126     0x007e
nobreakspace                       160     0x00a0
exclamdown                         161     0x00a1
cent                               162     0x00a2
sterling                           163     0x00a3
currency                           164     0x00a4
yen                                165     0x00a5
brokenbar                          166     0x00a6
section                            167     0x00a7
diaeresis                          168     0x00a8
copyright                          169     0x00a9
ordfeminine                        170     0x00aa
guillemotleft                      171     0x00ab
notsign                            172     0x00ac
hyphen                             173     0x00ad
registered                         174     0x00ae
macron                             175     0x00af
degree                             176     0x00b0
plusminus                          177     0x00b1
twosuperior                        178     0x00b2
threesuperior                      179     0x00b3
acute                              180     0x00b4
mu                                 181     0x00b5
paragraph                          182     0x00b6
periodcentered                     183     0x00b7
cedilla                            184     0x00b8
onesuperior                        185     0x00b9
masculine                          186     0x00ba
guillemotright                     187     0x00bb
onequarter                         188     0x00bc
onehalf                            189     0x00bd
threequarters                      190     0x00be
questiondown                       191     0x00bf
Agrave                             192     0x00c0
Aacute                             193     0x00c1
Acircumflex                        194     0x00c2
Atilde                             195     0x00c3
Adiaeresis                         196     0x00c4
Aring                              197     0x00c5
AE                                 198     0x00c6
Ccedilla                           199     0x00c7
Egrave                             200     0x00c8
Eacute                             201     0x00c9
Ecircumflex                        202     0x00ca
Ediaeresis                         203     0x00cb
Igrave                             204     0x00cc
Iacute                             205     0x00cd
Icircumflex                        206     0x00ce
Idiaeresis                         207     0x00cf
Eth                                208     0x00d0
Ntilde                             209     0x00d1
Ograve                             210     0x00d2
Oacute                             211     0x00d3
Ocircumflex                        212     0x00d4
Otilde                             213     0x00d5
Odiaeresis                         214     0x00d6
multiply                           215     0x00d7
Ooblique                           216     0x00d8
Ugrave                             217     0x00d9
Uacute                             218     0x00da
Ucircumflex                        219     0x00db
Udiaeresis                         220     0x00dc
Yacute                             221     0x00dd
Thorn                              222     0x00de
ssharp                             223     0x00df
agrave                             224     0x00e0
aacute                             225     0x00e1
acircumflex                        226     0x00e2
atilde                             227     0x00e3
adiaeresis                         228     0x00e4
aring                              229     0x00e5
ae                                 230     0x00e6
ccedilla                           231     0x00e7
egrave                             232     0x00e8
eacute                             233     0x00e9
ecircumflex                        234     0x00ea
ediaeresis                         235     0x00eb
igrave                             236     0x00ec
iacute                             237     0x00ed
icircumflex                        238     0x00ee
idiaeresis                         239     0x00ef
eth                                240     0x00f0
ntilde                             241     0x00f1
ograve                             242     0x00f2
oacute                             243     0x00f3
ocircumflex                        244     0x00f4
otilde                             245     0x00f5
odiaeresis                         246     0x00f6
division                           247     0x00f7
oslash                             248     0x00f8
ugrave                             249     0x00f9
uacute                             250     0x00fa
ucircumflex                        251     0x00fb
udiaeresis                         252     0x00fc
yacute                             253     0x00fd
thorn                              254     0x00fe
ydiaeresis                         255     0x00ff
Aogonek                            417     0x01a1
breve                              418     0x01a2
Lstroke                            419     0x01a3
Lcaron                             421     0x01a5
Sacute                             422     0x01a6
Scaron                             425     0x01a9
Scedilla                           426     0x01aa
Tcaron                             427     0x01ab
Zacute                             428     0x01ac
</example>
<example>
Zcaron                             430     0x01ae
Zabovedot                          431     0x01af
aogonek                            433     0x01b1
ogonek                             434     0x01b2
lstroke                            435     0x01b3
lcaron                             437     0x01b5
sacute                             438     0x01b6
caron                              439     0x01b7
scaron                             441     0x01b9
scedilla                           442     0x01ba
tcaron                             443     0x01bb
zacute                             444     0x01bc
doubleacute                        445     0x01bd
zcaron                             446     0x01be
zabovedot                          447     0x01bf
Racute                             448     0x01c0
Abreve                             451     0x01c3
Cacute                             454     0x01c6
Ccaron                             456     0x01c8
Eogonek                            458     0x01ca
Ecaron                             460     0x01cc
Dcaron                             463     0x01cf
Nacute                             465     0x01d1
Ncaron                             466     0x01d2
Odoubleacute                       469     0x01d5
Rcaron                             472     0x01d8
Uring                              473     0x01d9
Udoubleacute                       475     0x01db
Tcedilla                           478     0x01de
racute                             480     0x01e0
abreve                             483     0x01e3
cacute                             486     0x01e6
ccaron                             488     0x01e8
eogonek                            490     0x01ea
ecaron                             492     0x01ec
dcaron                             495     0x01ef
nacute                             497     0x01f1
ncaron                             498     0x01f2
odoubleacute                       501     0x01f5
rcaron                             504     0x01f8
uring                              505     0x01f9
udoubleacute                       507     0x01fb
tcedilla                           510     0x01fe
abovedot                           511     0x01ff
Hstroke                            673     0x02a1
Hcircumflex                        678     0x02a6
Iabovedot                          681     0x02a9
Gbreve                             683     0x02ab
Jcircumflex                        684     0x02ac
hstroke                            689     0x02b1
hcircumflex                        694     0x02b6
idotless                           697     0x02b9
gbreve                             699     0x02bb
jcircumflex                        700     0x02bc
Cabovedot                          709     0x02c5
Ccircumflex                        710     0x02c6
Gabovedot                          725     0x02d5
Gcircumflex                        728     0x02d8
Ubreve                             733     0x02dd
Scircumflex                        734     0x02de
cabovedot                          741     0x02e5
ccircumflex                        742     0x02e6
gabovedot                          757     0x02f5
gcircumflex                        760     0x02f8
ubreve                             765     0x02fd
scircumflex                        766     0x02fe
kappa                              930     0x03a2
Rcedilla                           931     0x03a3
Itilde                             933     0x03a5
Lcedilla                           934     0x03a6
Emacron                            938     0x03aa
Gcedilla                           939     0x03ab
Tslash                             940     0x03ac
rcedilla                           947     0x03b3
itilde                             949     0x03b5
lcedilla                           950     0x03b6
emacron                            954     0x03ba
gacute                             955     0x03bb
tslash                             956     0x03bc
ENG                                957     0x03bd
eng                                959     0x03bf
Amacron                            960     0x03c0
Iogonek                            967     0x03c7
Eabovedot                          972     0x03cc
Imacron                            975     0x03cf
Ncedilla                           977     0x03d1
Omacron                            978     0x03d2
Kcedilla                           979     0x03d3
Uogonek                            985     0x03d9
Utilde                             989     0x03dd
Umacron                            990     0x03de
amacron                            992     0x03e0
iogonek                            999     0x03e7
eabovedot                         1004     0x03ec
imacron                           1007     0x03ef
ncedilla                          1009     0x03f1
omacron                           1010     0x03f2
kcedilla                          1011     0x03f3
uogonek                           1017     0x03f9
utilde                            1021     0x03fd
umacron                           1022     0x03fe
overline                          1150     0x047e
kana_fullstop                     1185     0x04a1
kana_openingbracket               1186     0x04a2
kana_closingbracket               1187     0x04a3
kana_comma                        1188     0x04a4
kana_middledot                    1189     0x04a5
kana_WO                           1190     0x04a6
kana_a                            1191     0x04a7
kana_i                            1192     0x04a8
kana_u                            1193     0x04a9
kana_e                            1194     0x04aa
kana_o                            1195     0x04ab
kana_ya                           1196     0x04ac
kana_yu                           1197     0x04ad
kana_yo                           1198     0x04ae
kana_tu                           1199     0x04af
prolongedsound                    1200     0x04b0
kana_A                            1201     0x04b1
kana_I                            1202     0x04b2
kana_U                            1203     0x04b3
kana_E                            1204     0x04b4
kana_O                            1205     0x04b5
kana_KA                           1206     0x04b6
kana_KI                           1207     0x04b7
kana_KU                           1208     0x04b8
kana_KE                           1209     0x04b9
kana_KO                           1210     0x04ba
kana_SA                           1211     0x04bb
kana_SHI                          1212     0x04bc
kana_SU                           1213     0x04bd
kana_SE                           1214     0x04be
kana_SO                           1215     0x04bf
kana_TA                           1216     0x04c0
kana_TI                           1217     0x04c1
kana_TU                           1218     0x04c2
kana_TE                           1219     0x04c3
kana_TO                           1220     0x04c4
kana_NA                           1221     0x04c5
kana_NI                           1222     0x04c6
kana_NU                           1223     0x04c7
kana_NE                           1224     0x04c8
kana_NO                           1225     0x04c9
kana_HA                           1226     0x04ca
kana_HI                           1227     0x04cb
kana_HU                           1228     0x04cc
kana_HE                           1229     0x04cd
kana_HO                           1230     0x04ce
kana_MA                           1231     0x04cf
kana_MI                           1232     0x04d0
kana_MU                           1233     0x04d1
kana_ME                           1234     0x04d2
kana_MO                           1235     0x04d3
kana_YA                           1236     0x04d4
kana_YU                           1237     0x04d5
kana_YO                           1238     0x04d6
kana_RA                           1239     0x04d7
kana_RI                           1240     0x04d8
kana_RU                           1241     0x04d9
kana_RE                           1242     0x04da
kana_RO                           1243     0x04db
kana_WA                           1244     0x04dc
kana_N                            1245     0x04dd
voicedsound                       1246     0x04de
semivoicedsound                   1247     0x04df
Arabic_comma                      1452     0x05ac
Arabic_semicolon                  1467     0x05bb
Arabic_question_mark              1471     0x05bf
Arabic_hamza                      1473     0x05c1
Arabic_maddaonalef                1474     0x05c2
Arabic_hamzaonalef                1475     0x05c3
Arabic_hamzaonwaw                 1476     0x05c4
Arabic_hamzaunderalef             1477     0x05c5
Arabic_hamzaonyeh                 1478     0x05c6
Arabic_alef                       1479     0x05c7
Arabic_beh                        1480     0x05c8
Arabic_tehmarbuta                 1481     0x05c9
Arabic_teh                        1482     0x05ca
Arabic_theh                       1483     0x05cb
Arabic_jeem                       1484     0x05cc
Arabic_hah                        1485     0x05cd
Arabic_khah                       1486     0x05ce
Arabic_dal                        1487     0x05cf
Arabic_thal                       1488     0x05d0
Arabic_ra                         1489     0x05d1
Arabic_zain                       1490     0x05d2
Arabic_seen                       1491     0x05d3
Arabic_sheen                      1492     0x05d4
Arabic_sad                        1493     0x05d5
Arabic_dad                        1494     0x05d6
Arabic_tah                        1495     0x05d7
Arabic_zah                        1496     0x05d8
Arabic_ain                        1497     0x05d9
Arabic_ghain                      1498     0x05da
Arabic_tatweel                    1504     0x05e0
Arabic_feh                        1505     0x05e1
Arabic_qaf                        1506     0x05e2
Arabic_kaf                        1507     0x05e3
Arabic_lam                        1508     0x05e4
Arabic_meem                       1509     0x05e5
</example>
<example>
Arabic_noon                       1510     0x05e6
Arabic_heh                        1511     0x05e7
Arabic_waw                        1512     0x05e8
Arabic_alefmaksura                1513     0x05e9
Arabic_yeh                        1514     0x05ea
Arabic_fathatan                   1515     0x05eb
Arabic_dammatan                   1516     0x05ec
Arabic_kasratan                   1517     0x05ed
Arabic_fatha                      1518     0x05ee
Arabic_damma                      1519     0x05ef
Arabic_kasra                      1520     0x05f0
Arabic_shadda                     1521     0x05f1
Arabic_sukun                      1522     0x05f2
Serbian_dje                       1697     0x06a1
Macedonia_gje                     1698     0x06a2
Cyrillic_io                       1699     0x06a3
Ukranian_je                       1700     0x06a4
Macedonia_dse                     1701     0x06a5
Ukranian_i                        1702     0x06a6
Ukranian_yi                       1703     0x06a7
Serbian_je                        1704     0x06a8
Serbian_lje                       1705     0x06a9
Serbian_nje                       1706     0x06aa
Serbian_tshe                      1707     0x06ab
Macedonia_kje                     1708     0x06ac
Byelorussian_shortu               1710     0x06ae
Serbian_dze                       1711     0x06af
numerosign                        1712     0x06b0
Serbian_DJE                       1713     0x06b1
Macedonia_GJE                     1714     0x06b2
Cyrillic_IO                       1715     0x06b3
Ukranian_JE                       1716     0x06b4
Macedonia_DSE                     1717     0x06b5
Ukranian_I                        1718     0x06b6
Ukranian_YI                       1719     0x06b7
Serbian_JE                        1720     0x06b8
Serbian_LJE                       1721     0x06b9
Serbian_NJE                       1722     0x06ba
Serbian_TSHE                      1723     0x06bb
Macedonia_KJE                     1724     0x06bc
Byelorussian_SHORTU               1726     0x06be
Serbian_DZE                       1727     0x06bf
Cyrillic_yu                       1728     0x06c0
Cyrillic_a                        1729     0x06c1
Cyrillic_be                       1730     0x06c2
Cyrillic_tse                      1731     0x06c3
Cyrillic_de                       1732     0x06c4
Cyrillic_ie                       1733     0x06c5
Cyrillic_ef                       1734     0x06c6
Cyrillic_ghe                      1735     0x06c7
Cyrillic_ha                       1736     0x06c8
Cyrillic_i                        1737     0x06c9
Cyrillic_shorti                   1738     0x06ca
Cyrillic_ka                       1739     0x06cb
Cyrillic_el                       1740     0x06cc
Cyrillic_em                       1741     0x06cd
Cyrillic_en                       1742     0x06ce
Cyrillic_o                        1743     0x06cf
Cyrillic_pe                       1744     0x06d0
Cyrillic_ya                       1745     0x06d1
Cyrillic_er                       1746     0x06d2
Cyrillic_es                       1747     0x06d3
Cyrillic_te                       1748     0x06d4
Cyrillic_u                        1749     0x06d5
Cyrillic_zhe                      1750     0x06d6
Cyrillic_ve                       1751     0x06d7
Cyrillic_softsign                 1752     0x06d8
Cyrillic_yeru                     1753     0x06d9
Cyrillic_ze                       1754     0x06da
Cyrillic_sha                      1755     0x06db
Cyrillic_e                        1756     0x06dc
Cyrillic_shcha                    1757     0x06dd
Cyrillic_che                      1758     0x06de
Cyrillic_hardsign                 1759     0x06df
Cyrillic_YU                       1760     0x06e0
Cyrillic_A                        1761     0x06e1
Cyrillic_BE                       1762     0x06e2
Cyrillic_TSE                      1763     0x06e3
Cyrillic_DE                       1764     0x06e4
Cyrillic_IE                       1765     0x06e5
Cyrillic_EF                       1766     0x06e6
Cyrillic_GHE                      1767     0x06e7
Cyrillic_HA                       1768     0x06e8
Cyrillic_I                        1769     0x06e9
Cyrillic_SHORTI                   1770     0x06ea
Cyrillic_KA                       1771     0x06eb
Cyrillic_EL                       1772     0x06ec
Cyrillic_EM                       1773     0x06ed
Cyrillic_EN                       1774     0x06ee
Cyrillic_O                        1775     0x06ef
Cyrillic_PE                       1776     0x06f0
Cyrillic_YA                       1777     0x06f1
Cyrillic_ER                       1778     0x06f2
Cyrillic_ES                       1779     0x06f3
Cyrillic_TE                       1780     0x06f4
Cyrillic_U                        1781     0x06f5
Cyrillic_ZHE                      1782     0x06f6
Cyrillic_VE                       1783     0x06f7
Cyrillic_SOFTSIGN                 1784     0x06f8
Cyrillic_YERU                     1785     0x06f9
Cyrillic_ZE                       1786     0x06fa
Cyrillic_SHA                      1787     0x06fb
Cyrillic_E                        1788     0x06fc
Cyrillic_SHCHA                    1789     0x06fd
Cyrillic_CHE                      1790     0x06fe
Cyrillic_HARDSIGN                 1791     0x06ff
Greek_ALPHAaccent                 1953     0x07a1
Greek_EPSILONaccent               1954     0x07a2
Greek_ETAaccent                   1955     0x07a3
Greek_IOTAaccent                  1956     0x07a4
Greek_IOTAdiaeresis               1957     0x07a5
Greek_IOTAaccentdiaeresis         1958     0x07a6
Greek_OMICRONaccent               1959     0x07a7
Greek_UPSILONaccent               1960     0x07a8
Greek_UPSILONdieresis             1961     0x07a9
Greek_UPSILONaccentdieresis       1962     0x07aa
Greek_OMEGAaccent                 1963     0x07ab
Greek_alphaaccent                 1969     0x07b1
Greek_epsilonaccent               1970     0x07b2
Greek_etaaccent                   1971     0x07b3
Greek_iotaaccent                  1972     0x07b4
Greek_iotadieresis                1973     0x07b5
Greek_iotaaccentdieresis          1974     0x07b6
Greek_omicronaccent               1975     0x07b7
Greek_upsilonaccent               1976     0x07b8
Greek_upsilondieresis             1977     0x07b9
Greek_upsilonaccentdieresis       1978     0x07ba
Greek_omegaaccent                 1979     0x07bb
Greek_ALPHA                       1985     0x07c1
Greek_BETA                        1986     0x07c2
Greek_GAMMA                       1987     0x07c3
Greek_DELTA                       1988     0x07c4
Greek_EPSILON                     1989     0x07c5
Greek_ZETA                        1990     0x07c6
Greek_ETA                         1991     0x07c7
Greek_THETA                       1992     0x07c8
Greek_IOTA                        1993     0x07c9
Greek_KAPPA                       1994     0x07ca
Greek_LAMBDA                      1995     0x07cb
Greek_MU                          1996     0x07cc
Greek_NU                          1997     0x07cd
Greek_XI                          1998     0x07ce
Greek_OMICRON                     1999     0x07cf
Greek_PI                          2000     0x07d0
Greek_RHO                         2001     0x07d1
Greek_SIGMA                       2002     0x07d2
Greek_TAU                         2004     0x07d4
Greek_UPSILON                     2005     0x07d5
Greek_PHI                         2006     0x07d6
Greek_CHI                         2007     0x07d7
Greek_PSI                         2008     0x07d8
Greek_OMEGA                       2009     0x07d9
Greek_alpha                       2017     0x07e1
Greek_beta                        2018     0x07e2
Greek_gamma                       2019     0x07e3
Greek_delta                       2020     0x07e4
Greek_epsilon                     2021     0x07e5
Greek_zeta                        2022     0x07e6
Greek_eta                         2023     0x07e7
Greek_theta                       2024     0x07e8
Greek_iota                        2025     0x07e9
Greek_kappa                       2026     0x07ea
Greek_lambda                      2027     0x07eb
Greek_mu                          2028     0x07ec
Greek_nu                          2029     0x07ed
Greek_xi                          2030     0x07ee
Greek_omicron                     2031     0x07ef
Greek_pi                          2032     0x07f0
Greek_rho                         2033     0x07f1
Greek_sigma                       2034     0x07f2
Greek_finalsmallsigma             2035     0x07f3
Greek_tau                         2036     0x07f4
Greek_upsilon                     2037     0x07f5
Greek_phi                         2038     0x07f6
Greek_chi                         2039     0x07f7
Greek_psi                         2040     0x07f8
Greek_omega                       2041     0x07f9
leftradical                       2209     0x08a1
topleftradical                    2210     0x08a2
horizconnector                    2211     0x08a3
topintegral                       2212     0x08a4
botintegral                       2213     0x08a5
vertconnector                     2214     0x08a6
topleftsqbracket                  2215     0x08a7
botleftsqbracket                  2216     0x08a8
toprightsqbracket                 2217     0x08a9
botrightsqbracket                 2218     0x08aa
topleftparens                     2219     0x08ab
botleftparens                     2220     0x08ac
toprightparens                    2221     0x08ad
botrightparens                    2222     0x08ae
leftmiddlecurlybrace              2223     0x08af
rightmiddlecurlybrace             2224     0x08b0
topleftsummation                  2225     0x08b1
botleftsummation                  2226     0x08b2
topvertsummationconnector         2227     0x08b3
botvertsummationconnector         2228     0x08b4
toprightsummation                 2229     0x08b5
botrightsummation                 2230     0x08b6
rightmiddlesummation              2231     0x08b7
</example>
<example>
lessthanequal                     2236     0x08bc
notequal                          2237     0x08bd
greaterthanequal                  2238     0x08be
integral                          2239     0x08bf
therefore                         2240     0x08c0
variation                         2241     0x08c1
infinity                          2242     0x08c2
nabla                             2245     0x08c5
approximate                       2248     0x08c8
similarequal                      2249     0x08c9
ifonlyif                          2253     0x08cd
implies                           2254     0x08ce
identical                         2255     0x08cf
radical                           2262     0x08d6
includedin                        2266     0x08da
includes                          2267     0x08db
intersection                      2268     0x08dc
union                             2269     0x08dd
logicaland                        2270     0x08de
logicalor                         2271     0x08df
partialderivative                 2287     0x08ef
function                          2294     0x08f6
leftarrow                         2299     0x08fb
uparrow                           2300     0x08fc
rightarrow                        2301     0x08fd
downarrow                         2302     0x08fe
blank                             2527     0x09df
soliddiamond                      2528     0x09e0
checkerboard                      2529     0x09e1
ht                                2530     0x09e2
ff                                2531     0x09e3
cr                                2532     0x09e4
lf                                2533     0x09e5
nl                                2536     0x09e8
vt                                2537     0x09e9
lowrightcorner                    2538     0x09ea
uprightcorner                     2539     0x09eb
upleftcorner                      2540     0x09ec
lowleftcorner                     2541     0x09ed
crossinglines                     2542     0x09ee
horizlinescan1                    2543     0x09ef
horizlinescan3                    2544     0x09f0
horizlinescan5                    2545     0x09f1
horizlinescan7                    2546     0x09f2
horizlinescan9                    2547     0x09f3
leftt                             2548     0x09f4
rightt                            2549     0x09f5
bott                              2550     0x09f6
topt                              2551     0x09f7
vertbar                           2552     0x09f8
emspace                           2721     0x0aa1
enspace                           2722     0x0aa2
em3space                          2723     0x0aa3
em4space                          2724     0x0aa4
digitspace                        2725     0x0aa5
punctspace                        2726     0x0aa6
thinspace                         2727     0x0aa7
hairspace                         2728     0x0aa8
emdash                            2729     0x0aa9
endash                            2730     0x0aaa
signifblank                       2732     0x0aac
ellipsis                          2734     0x0aae
doubbaselinedot                   2735     0x0aaf
onethird                          2736     0x0ab0
twothirds                         2737     0x0ab1
onefifth                          2738     0x0ab2
twofifths                         2739     0x0ab3
threefifths                       2740     0x0ab4
fourfifths                        2741     0x0ab5
onesixth                          2742     0x0ab6
fivesixths                        2743     0x0ab7
careof                            2744     0x0ab8
figdash                           2747     0x0abb
leftanglebracket                  2748     0x0abc
decimalpoint                      2749     0x0abd
rightanglebracket                 2750     0x0abe
marker                            2751     0x0abf
oneeighth                         2755     0x0ac3
threeeighths                      2756     0x0ac4
fiveeighths                       2757     0x0ac5
seveneighths                      2758     0x0ac6
trademark                         2761     0x0ac9
signaturemark                     2762     0x0aca
trademarkincircle                 2763     0x0acb
leftopentriangle                  2764     0x0acc
rightopentriangle                 2765     0x0acd
emopencircle                      2766     0x0ace
emopenrectangle                   2767     0x0acf
leftsinglequotemark               2768     0x0ad0
rightsinglequotemark              2769     0x0ad1
leftdoublequotemark               2770     0x0ad2
rightdoublequotemark              2771     0x0ad3
prescription                      2772     0x0ad4
minutes                           2774     0x0ad6
seconds                           2775     0x0ad7
latincross                        2777     0x0ad9
hexagram                          2778     0x0ada
filledrectbullet                  2779     0x0adb
filledlefttribullet               2780     0x0adc
filledrighttribullet              2781     0x0add
emfilledcircle                    2782     0x0ade
emfilledrect                      2783     0x0adf
enopencircbullet                  2784     0x0ae0
enopensquarebullet                2785     0x0ae1
openrectbullet                    2786     0x0ae2
opentribulletup                   2787     0x0ae3
opentribulletdown                 2788     0x0ae4
openstar                          2789     0x0ae5
enfilledcircbullet                2790     0x0ae6
enfilledsqbullet                  2791     0x0ae7
filledtribulletup                 2792     0x0ae8
filledtribulletdown               2793     0x0ae9
leftpointer                       2794     0x0aea
rightpointer                      2795     0x0aeb
club                              2796     0x0aec
diamond                           2797     0x0aed
heart                             2798     0x0aee
maltesecross                      2800     0x0af0
dagger                            2801     0x0af1
doubledagger                      2802     0x0af2
checkmark                         2803     0x0af3
ballotcross                       2804     0x0af4
musicalsharp                      2805     0x0af5
musicalflat                       2806     0x0af6
malesymbol                        2807     0x0af7
femalesymbol                      2808     0x0af8
telephone                         2809     0x0af9
telephonerecorder                 2810     0x0afa
phonographcopyright               2811     0x0afb
caret                             2812     0x0afc
singlelowquotemark                2813     0x0afd
doublelowquotemark                2814     0x0afe
cursor                            2815     0x0aff
leftcaret                         2979     0x0ba3
rightcaret                        2982     0x0ba6
downcaret                         2984     0x0ba8
upcaret                           2985     0x0ba9
overbar                           3008     0x0bc0
downtack                          3010     0x0bc2
upshoe                            3011     0x0bc3
downstile                         3012     0x0bc4
underbar                          3014     0x0bc6
jot                               3018     0x0bca
quad                              3020     0x0bcc
uptack                            3022     0x0bce
circle                            3023     0x0bcf
upstile                           3027     0x0bd3
downshoe                          3030     0x0bd6
rightshoe                         3032     0x0bd8
leftshoe                          3034     0x0bda
lefttack                          3036     0x0bdc
righttack                         3068     0x0bfc
hebrew_aleph                      3296     0x0ce0
hebrew_beth                       3297     0x0ce1
hebrew_gimmel                     3298     0x0ce2
hebrew_daleth                     3299     0x0ce3
hebrew_he                         3300     0x0ce4
hebrew_waw                        3301     0x0ce5
hebrew_zayin                      3302     0x0ce6
hebrew_het                        3303     0x0ce7
hebrew_teth                       3304     0x0ce8
hebrew_yod                        3305     0x0ce9
hebrew_finalkaph                  3306     0x0cea
hebrew_kaph                       3307     0x0ceb
hebrew_lamed                      3308     0x0cec
hebrew_finalmem                   3309     0x0ced
hebrew_mem                        3310     0x0cee
hebrew_finalnun                   3311     0x0cef
hebrew_nun                        3312     0x0cf0
hebrew_samekh                     3313     0x0cf1
hebrew_ayin                       3314     0x0cf2
hebrew_finalpe                    3315     0x0cf3
hebrew_pe                         3316     0x0cf4
hebrew_finalzadi                  3317     0x0cf5
hebrew_zadi                       3318     0x0cf6
hebrew_kuf                        3319     0x0cf7
hebrew_resh                       3320     0x0cf8
hebrew_shin                       3321     0x0cf9
hebrew_taf                        3322     0x0cfa
BackSpace                        65288     0xff08
Tab                              65289     0xff09
Linefeed                         65290     0xff0a
Clear                            65291     0xff0b
Return                           65293     0xff0d
Pause                            65299     0xff13
Scroll_Lock                      65300     0xff14
Sys_Req                          65301     0xff15
Escape                           65307     0xff1b
Multi_key                        65312     0xff20
Kanji                            65313     0xff21
Home                             65360     0xff50
Left                             65361     0xff51
Up                               65362     0xff52
Right                            65363     0xff53
Down                             65364     0xff54
Prior                            65365     0xff55
Next                             65366     0xff56
End                              65367     0xff57
Begin                            65368     0xff58
Win_L                            65371     0xff5b
Win_R                            65372     0xff5c
</example>
<example>
App                              65373     0xff5d
Select                           65376     0xff60
Print                            65377     0xff61
Execute                          65378     0xff62
Insert                           65379     0xff63
Undo                             65381     0xff65
Redo                             65382     0xff66
Menu                             65383     0xff67
Find                             65384     0xff68
Cancel                           65385     0xff69
Help                             65386     0xff6a
Break                            65387     0xff6b
Hebrew_switch                    65406     0xff7e
Num_Lock                         65407     0xff7f
KP_Space                         65408     0xff80
KP_Tab                           65417     0xff89
KP_Enter                         65421     0xff8d
KP_F1                            65425     0xff91
KP_F2                            65426     0xff92
KP_F3                            65427     0xff93
KP_F4                            65428     0xff94
KP_Multiply                      65450     0xffaa
KP_Add                           65451     0xffab
KP_Separator                     65452     0xffac
KP_Subtract                      65453     0xffad
KP_Decimal                       65454     0xffae
KP_Divide                        65455     0xffaf
KP_0                             65456     0xffb0
KP_1                             65457     0xffb1
KP_2                             65458     0xffb2
KP_3                             65459     0xffb3
KP_4                             65460     0xffb4
KP_5                             65461     0xffb5
KP_6                             65462     0xffb6
KP_7                             65463     0xffb7
KP_8                             65464     0xffb8
KP_9                             65465     0xffb9
KP_Equal                         65469     0xffbd
F1                               65470     0xffbe
F2                               65471     0xffbf
F3                               65472     0xffc0
F4                               65473     0xffc1
F5                               65474     0xffc2
F6                               65475     0xffc3
F7                               65476     0xffc4
F8                               65477     0xffc5
F9                               65478     0xffc6
F10                              65479     0xffc7
L1                               65480     0xffc8
L2                               65481     0xffc9
L3                               65482     0xffca
L4                               65483     0xffcb
L5                               65484     0xffcc
L6                               65485     0xffcd
L7                               65486     0xffce
L8                               65487     0xffcf
L9                               65488     0xffd0
L10                              65489     0xffd1
R1                               65490     0xffd2
R2                               65491     0xffd3
R3                               65492     0xffd4
R4                               65493     0xffd5
R5                               65494     0xffd6
R6                               65495     0xffd7
R7                               65496     0xffd8
R8                               65497     0xffd9
R9                               65498     0xffda
R10                              65499     0xffdb
R11                              65500     0xffdc
R12                              65501     0xffdd
F33                              65502     0xffde
R14                              65503     0xffdf
R15                              65504     0xffe0
Shift_L                          65505     0xffe1
Shift_R                          65506     0xffe2
Control_L                        65507     0xffe3
Control_R                        65508     0xffe4
Caps_Lock                        65509     0xffe5
Shift_Lock                       65510     0xffe6
Meta_L                           65511     0xffe7
Meta_R                           65512     0xffe8
Alt_L                            65513     0xffe9
Alt_R                            65514     0xffea
Super_L                          65515     0xffeb
Super_R                          65516     0xffec
Hyper_L                          65517     0xffed
Hyper_R                          65518     0xffee
Delete                           65535     0xffff
</example>


</section>
<seealso>
<ref>bind</ref>
</seealso>
<keywords>
<keyword>keysym</keyword>
<keyword>bind</keyword>
<keyword>binding</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="label" version="4.0" title="label">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: label.n,v 1.9 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="label" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>label</name>
<desc>Create and manipulate label widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">label</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeforeground</li>
<li>-anchor</li>
<li>-background</li>
<li>-bitmap</li>
<li>-borderwidth</li>
<li>-compound</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-image</li>
<li>-justify</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-wraplength</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired height for the label.
If an image or bitmap is being displayed in the label then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in lines of text.
If this option isn't specified, the label's desired height is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the label:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the button is displayed using the
<b>foreground</b> and <b>background</b> options.  In active state
the label is displayed using the <b>activeForeground</b> and
<b>activeBackground</b> options.  In the disabled state the
<b>disabledForeground</b> and <b>background</b> options determine how
the button is displayed.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies a desired width for the label.
If an image or bitmap is being displayed in the label then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in characters.
If this option isn't specified, the label's desired width is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">label</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a label widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the label such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">label</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A label is a widget that displays a textual string, bitmap or image.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the <b>wrapLength</b> option) and
one of the characters may optionally be underlined using the
<b>underline</b> option.
The label can be manipulated in a few simple ways, such as
changing its relief or text, using the commands described below.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">label</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for label widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">label</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">label</b>
command.
</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>When a new label is created, it has no default event bindings:
labels are not intended to be interactive.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
# Make the widgets
<b cat="AMBIGUOUS widget cmd">label</b> .t -text "This widget is at the top"    -bg red
<b cat="AMBIGUOUS widget cmd">label</b> .b -text "This widget is at the bottom" -bg green
<b cat="AMBIGUOUS widget cmd">label</b> .l -text "Left\nHand\nSide"
<b cat="AMBIGUOUS widget cmd">label</b> .r -text "Right\nHand\nSide"
text .mid
.mid insert end "This layout is like Java's BorderLayout"
# Lay them out
pack .t   -side top    -fill x
pack .b   -side bottom -fill x
pack .l   -side left   -fill y
pack .r   -side right  -fill y
pack .mid -expand 1    -fill both
</example>


</section>
<seealso>
<ref>labelframe(n)</ref>
<ref>button(n)</ref>
<ref>ttk_label(n)</ref>
</seealso>
<keywords>
<keyword>label</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="labelframe" version="8.4" title="labelframe">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: labelframe.n,v 1.3 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="labelframe" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>labelframe</name>
<desc>Create and manipulate labelframe widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">labelframe</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-borderwidth</li>
<li>-cursor</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-background</name>
<dbname>background</dbname>
<dbclass>Background</dbclass>
<desc>This option is the same as the standard <b>background</b> option
except that its value may also be specified as an empty string.
In this case, the widget will display no background or border, and
no colors will be consumed from its colormap for its background
and border.
</desc>
</optiondef>
<optiondef>
<name>-class</name>
<dbname>class</dbname>
<dbclass>Class</dbclass>
<desc>Specifies a class for the window.
This class will be used when querying the option database for
the window's other options, and it will also be used later for
other purposes such as bindings.
The <b>class</b> option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-colormap</name>
<dbname>colormap</dbname>
<dbclass>Colormap</dbclass>
<desc>Specifies a colormap to use for the window.
The value may be either <b>new</b>, in which case a new colormap is
created for the window and its children, or the name of another
window (which must be on the same screen and have the same visual
as <i>pathName</i>), in which case the new window will use the colormap
from the specified window.
If the <b>colormap</b> option is not specified, the new window
uses the same colormap as its parent.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-container</name>
<dbname>container</dbname>
<dbclass>Container</dbclass>
<desc>The value must be a boolean.  If true, it means that this window will
be used as a container in which some other application will be embedded
(for example, a Tk toplevel can be embedded using the <b>-use</b> option).
The window will support the appropriate window manager protocols for
things like geometry requests.  The window should not have any
children of its own in this application.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the desired height for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.
If this option is less than or equal to zero then the window will
not request any size at all.
</desc>
</optiondef>
<optiondef>
<name>-labelanchor</name>
<dbname>labelAnchor</dbname>
<dbclass>LabelAnchor</dbclass>
<desc>Specifies where to place the label. A label is only displayed if the
<b>-text</b> option is not the empty string.
Valid values for this option are (listing them clockwise)
<b>nw</b>, <b>n</b>, <b>ne</b>, <b>en</b>, <b>e</b>, <b>es</b>,
<b>se</b>, <b>s</b>,<b>sw</b>, <b>ws</b>, <b>w</b> and <b>wn</b>.
The default value is <b>nw</b>.
</desc>
</optiondef>
<optiondef>
<name>-labelwidget</name>
<dbname>labelWidget</dbname>
<dbclass>LabelWidget</dbclass>
<desc>Specifies a widget to use as label. This overrides any <b>-text</b>
option. The widget must exist before being used as <b>-labelwidget</b>
and if it is not a descendant of this window, it will be raised
above it in the stacking order.
</desc>
</optiondef>
<optiondef>
<name>-visual</name>
<dbname>visual</dbname>
<dbclass>Visual</dbclass>
<desc>Specifies visual information for the new window in any of the
forms accepted by <fun>Tk_GetVisual</fun>.
If this option is not specified, the new window will use the same
visual as its parent.
The <b>visual</b> option may not be modified with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired width for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.
If this option is less than or equal to zero then the window will
not request any size at all.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">labelframe</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a labelframe widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the labelframe such as its background color
and relief.  The <b cat="AMBIGUOUS widget cmd">labelframe</b> command returns the
path name of the new window.
</p>
<p>A labelframe is a simple widget.  Its primary purpose is to act as a
spacer or container for complex window layouts.  It has the features
of a <b cat="AMBIGUOUS widget cmd">frame</b> plus the ability to display a label.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">labelframe</b> command creates a new Tcl command whose
name is the same as the path name of the labelframe's window.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>PathName</i> is the name of the command, which is the same as
the labelframe widget's path name.  <i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for frame widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">labelframe</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? <m>?value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">labelframe</b>
command.
</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>When a new labelframe is created, it has no default event bindings:
labelframes are not intended to be interactive.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This shows how to build part of a GUI for a hamburger vendor. The
<b cat="AMBIGUOUS widget cmd">labelframe</b> widgets are used to organize the available choices by
the kinds of things that the choices are being made over.
</p>
<example>
grid [<b cat="AMBIGUOUS widget cmd">labelframe</b> .burger -text "Burger"] \
     [<b cat="AMBIGUOUS widget cmd">labelframe</b> .bun    -text "Bun"] -sticky news
grid [<b cat="AMBIGUOUS widget cmd">labelframe</b> .cheese -text "Cheese Option"] \
     [<b cat="AMBIGUOUS widget cmd">labelframe</b> .pickle -text "Pickle Option"] -sticky news
foreach {type name val} {
    burger Beef    beef
    burger Lamb    lamb
    burger Vegetarian beans

    bun    Plain   white
    bun    Sesame  seeds
    bun    Wholemeal brown

    cheese None    none
    cheese Cheddar cheddar
    cheese Edam    edam
    cheese Brie    brie
    cheese Gruy\u00e8re gruyere
    cheese "Monterey Jack" jack

    pickle None    none
    pickle Gherkins gherkins
    pickle Onions  onion
    pickle Chili   chili
} {
    set w [radiobutton .$type.$val -text $name -anchor w \
            -variable $type -value $val]
    pack $w -side top -fill x
}
set burger beef
set bun    white
set cheese none
set pickle none
</example>


</section>
<seealso>
<ref>frame(n)</ref>
<ref>label(n)</ref>
<ref>ttk_labelframe(n)</ref>
</seealso>
<keywords>
<keyword>labelframe</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lappend" title="lappend">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lappend.n,v 1.11 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="lappend" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lappend</name>
<desc>Append list elements onto a variable</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lappend</cmd> <m>varName</m> ?<m>value value value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command treats the variable given by <i>varName</i> as a list
and appends each of the <i>value</i> arguments to that list as a separate
element, with spaces between elements.
If <i>varName</i> doesn't exist, it is created as a list with elements
given by the <i>value</i> arguments.
<b>Lappend</b> is similar to <cmd>append</cmd> except that the <i>value</i>s
are appended as list elements rather than raw text.
This command provides a relatively efficient way to build up
large lists.  For example, ``<b>lappend a $b</b>'' is much
more efficient than ``<b>set a [concat $a [list $b]]</b>'' when
<b>$a</b> is long.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Using <cmd>lappend</cmd> to build up a list of numbers.
</p>
<example>
% set var 1
1
% <cmd>lappend</cmd> var 2
1 2
% <cmd>lappend</cmd> var 3 4 5
1 2 3 4 5
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
</seealso>
<keywords>
<keyword>append</keyword>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage version="8.5" cat="cmd" title="lassign" id="lassign">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1999 Karl Lehenbauer & Mark Diekhans
     Copyright (c) 2004 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lassign.n,v 1.1 2004/01/17 00:28:08 dkf Exp $
 -->
<?TROFF.TH title="lassign" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lassign</name>
<desc>Assign list elements to variables</desc>
</namesection>
<synopsis>
<syntax>
<b>lassign</b> <m>list varName</m> ?<m>varName ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command treats the value <i>list</i> as a list and assigns
successive elements from that list to the variables given by the
<i>varName</i> arguments in order.  If there are more variable names
than list elements, the remaining variables are set to the empty
string.  If there are more list elements than variables, a list of
unassigned elements is returned.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>An illustration of how multiple assignment works, and what happens
when there are either too few or too many elements.
</p>
<example>
lassign {a b c} x y z       ;# Empty return
puts $x                     ;# Prints "a"
puts $y                     ;# Prints "b"
puts $z                     ;# Prints "c"

lassign {d e} x y z         ;# Empty return
puts $x                     ;# Prints "d"
puts $y                     ;# Prints "e"
puts $z                     ;# Prints ""

lassign {f g h i} x y       ;# Returns "h i"
puts $x                     ;# Prints "f"
puts $y                     ;# Prints "g"
</example>
<p>The <b>lassign</b> command has other uses.  It can be used to create
the analogue of the "shift" command in many shell languages like this:
</p>
<example>
set ::argv [lassign $::argv argumentToReadOff]
</example>
</section>
<seealso>
<ref>lindex(n)</ref>
<ref>list(n)</ref>
<ref>lset(n)</ref>
<ref>set(n)</ref>
</seealso>
<keywords>
<keyword>assign</keyword>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>multiple</keyword>
<keyword>set</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="library" version="8.0" title="library">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1991-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: library.n,v 1.18 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="library" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>auto_execok</name>
<name>auto_import</name>
<name>auto_load</name>
<name>auto_mkindex</name>
<name>auto_mkindex_old</name>
<name>auto_qualify</name>
<name>auto_reset</name>
<name>tcl_findLibrary</name>
<name>parray</name>
<name>tcl_endOfWord</name>
<name>tcl_startOfNextWord</name>
<name>tcl_startOfPreviousWord</name>
<name>tcl_wordBreakAfter</name>
<name>tcl_wordBreakBefore</name>
<desc>standard library of Tcl procedures</desc>
</namesection>
<synopsis>
<syntax>
<cmd>auto_execok</cmd> <m>cmd</m>
<cmd>auto_import</cmd> <m>pattern</m>
<cmd>auto_load</cmd> <m>cmd</m>
<cmd>auto_mkindex</cmd> <m>dir pattern pattern ...</m>
<cmd>auto_mkindex_old</cmd> <m>dir pattern pattern ...</m>
<cmd>auto_qualify</cmd> <m>command namespace</m>
<cmd>auto_reset</cmd>
<cmd>tcl_findLibrary</cmd> <m>basename version patch initScript enVarName varName</m>
<cmd>parray</cmd> <m>arrayName</m>
<cmd>tcl_endOfWord</cmd> <m>str start</m>
<cmd>tcl_startOfNextWord</cmd> <m>str start</m>
<cmd>tcl_startOfPreviousWord</cmd> <m>str start</m>
<cmd>tcl_wordBreakAfter</cmd> <m>str start</m>
<cmd>tcl_wordBreakBefore</cmd> <m>str start</m>
</syntax>
</synopsis>


<section>
<title>INTRODUCTION</title>
<p>Tcl includes a library of Tcl procedures for commonly-needed functions.
The procedures defined in the Tcl library are generic ones suitable
for use by many different applications.
The location of the Tcl library is returned by the <b>info library</b>
command.
In addition to the Tcl library, each application will normally have
its own library of support procedures as well;  the location of this
library is normally given by the value of the <b>$</b><i>app</i><b>_library</b>
global variable, where <i>app</i> is the name of the application.
For example, the location of the Tk library is kept in the variable
<b>$tk_library</b>.
</p>
<p>To access the procedures in the Tcl library, an application should
source the file <b>init.tcl</b> in the library, for example with
the Tcl command
</p>
<example>
<b>source [file join [info library] init.tcl]</b>
</example>
<p>If the library procedure <fun>Tcl_Init</fun> is invoked from an application's
<fun>Tcl_AppInit</fun> procedure, this happens automatically.
The code in <b>init.tcl</b> will define the <b cat="AMBIGUOUS ambiguous cmd">unknown</b> procedure
and arrange for the other procedures to be loaded on-demand using
the auto-load mechanism defined below.

</p>
</section>
<section>
<title>COMMAND PROCEDURES</title>
<p>The following procedures are provided in the Tcl library:
</p>
<dl>
<dle>
<dt><b>auto_execok</b> <m>cmd</m></dt>
<dd>Determines whether there is an executable file or shell builtin
by the name <i>cmd</i>.  If so, it returns a list of arguments to be
passed to <cmd>exec</cmd> to execute the executable file or shell builtin
named by <i>cmd</i>.  If not, it returns an empty string.  This command
examines the directories in the current search path (given by the PATH
environment variable) in its search for an executable file named
<i>cmd</i>.  On Windows platforms, the search is expanded with the same
directories and file extensions as used by <cmd>exec</cmd>. <b>Auto_exec</b>
remembers information about previous searches in an array named
<b>auto_execs</b>;  this avoids the path search in future calls for the
same <i>cmd</i>.  The command <cmd>auto_reset</cmd> may be used to force
<cmd>auto_execok</cmd> to forget its cached information.
</dd>
</dle>
<dle>
<dt><b>auto_import</b> <m>pattern</m></dt>
<dd><b>Auto_import</b> is invoked during <b>namespace import</b> to see if
the imported commands specified by <i>pattern</i> reside in an
autoloaded library.  If so, the commands are loaded so that they will
be available to the interpreter for creating the import links.  If the
commands do not reside in an autoloaded library, <cmd>auto_import</cmd>
does nothing.  The pattern matching is performed according to the
matching rules of <b>namespace import</b>.
</dd>
</dle>
<dle>
<dt><b>auto_load</b> <m>cmd</m></dt>
<dd>This command attempts to load the definition for a Tcl command named
<i>cmd</i>.  To do this, it searches an <i>auto-load path</i>, which is
a list of one or more directories.  The auto-load path is given by the
global variable <b>$auto_path</b> if it exists.  If there is no
<b>$auto_path</b> variable, then the TCLLIBPATH environment variable is
used, if it exists.  Otherwise the auto-load path consists of just the
Tcl library directory.  Within each directory in the auto-load path
there must be a file <b>tclIndex</b> that describes one or more
commands defined in that directory and a script to evaluate to load
each of the commands.  The <b>tclIndex</b> file should be generated
with the <cmd>auto_mkindex</cmd> command.  If <i>cmd</i> is found in an
index file, then the appropriate script is evaluated to create the
command.  The <cmd>auto_load</cmd> command returns 1 if <i>cmd</i> was
successfully created.  The command returns 0 if there was no index
entry for <i>cmd</i> or if the script didn't actually define <i>cmd</i>
(e.g. because index information is out of date).  If an error occurs
while processing the script, then that error is returned.
<b>Auto_load</b> only reads the index information once and saves it in
the array <b>auto_index</b>;  future calls to <cmd>auto_load</cmd> check for
<i>cmd</i> in the array rather than re-reading the index files.  The
cached index information may be deleted with the command
<cmd>auto_reset</cmd>.  This will force the next <cmd>auto_load</cmd> command to
reload the index database from disk.
</dd>
</dle>
<dle>
<dt><b>auto_mkindex</b> <m>dir pattern pattern ...</m></dt>
<dd>Generates an index suitable for use by <cmd>auto_load</cmd>.  The command
searches <i>dir</i> for all files whose names match any of the
<i>pattern</i> arguments (matching is done with the <cmd>glob</cmd>
command), generates an index of all the Tcl command procedures defined
in all the matching files, and stores the index information in a file
named <b>tclIndex</b> in <i>dir</i>. If no pattern is given a pattern of
<b>*.tcl</b> will be assumed.  For example, the command
<example>
<b>auto_mkindex foo *.tcl</b>
</example><p>will read all the <b>.tcl</b> files in subdirectory <b>foo</b> and
generate a new index file <b>foo/tclIndex</b>.
</p><p><b>Auto_mkindex</b> parses the Tcl scripts by sourcing them into a
slave interpreter and monitoring the proc and namespace commands that
are executed.  Extensions can use the (undocumented)
auto_mkindex_parser package to register other commands that can
contribute to the auto_load index. You will have to read through
auto.tcl to see how this works.
</p><p><b>Auto_mkindex_old</b> parses the Tcl scripts in a relatively
unsophisticated way:  if any line contains the word <cmd>proc</cmd>
as its first characters then it is assumed to be a procedure
definition and the next word of the line is taken as the
procedure's name.
Procedure definitions that don't appear in this way (e.g. they
have spaces before the <cmd>proc</cmd>) will not be indexed.  If your 
script contains "dangerous" code, such as global initialization
code or procedure names with special characters like <b>$</b>,
<b>*</b>, <b>[</b> or <b>]</b>, you are safer using auto_mkindex_old.
</p></dd>
</dle>
<dle>
<dt><b>auto_reset</b></dt>
<dd>Destroys all the information cached by <cmd>auto_execok</cmd> and
<cmd>auto_load</cmd>.  This information will be re-read from disk the next
time it is needed.  <b>Auto_reset</b> also deletes any procedures
listed in the auto-load index, so that fresh copies of them will be
loaded the next time that they're used.
</dd>
</dle>
<dle>
<dt><b>auto_qualify</b> <m>command namespace</m></dt>
<dd>Computes a list of fully qualified names for <i>command</i>.  This list
mirrors the path a standard Tcl interpreter follows for command
lookups:  first it looks for the command in the current namespace, and
then in the global namespace.  Accordingly, if <i>command</i> is
relative and <i>namespace</i> is not <b>::</b>, the list returned has
two elements:  <i>command</i> scoped by <i>namespace</i>, as if it were
a command in the <i>namespace</i> namespace; and <i>command</i> as if it
were a command in the global namespace.  Otherwise, if either
<i>command</i> is absolute (it begins with <b>::</b>), or
<i>namespace</i> is <b>::</b>, the list contains only <i>command</i> as
if it were a command in the global namespace.
<p><b>Auto_qualify</b> is used by the auto-loading facilities in Tcl, both
for producing auto-loading indexes such as <i>pkgIndex.tcl</i>, and for
performing the actual auto-loading of functions at runtime.
</p></dd>
</dle>
<dle>
<dt><b>tcl_findLibrary</b> <m>basename version patch initScript enVarName varName</m></dt>
<dd>This is a standard search procedure for use by extensions during
their initialization.  They call this procedure to look for their
script library in several standard directories.
The last component of the name of the library directory is 
normally <i>basenameversion</i>
(e.g., tk8.0), but it might be "library" when in the build hierarchies.
The <i>initScript</i> file will be sourced into the interpreter
once it is found.  The directory in which this file is found is
stored into the global variable <i>varName</i>.
If this variable is already defined (e.g., by C code during
application initialization) then no searching is done.
Otherwise the search looks in these directories:
the directory named by the environment variable <i>enVarName</i>;
relative to the Tcl library directory;
relative to the executable file in the standard installation
bin or bin/<i>arch</i> directory;
relative to the executable file in the current build tree;
relative to the executable file in a parallel build tree.
</dd>
</dle>
<dle>
<dt><b>parray</b> <m>arrayName</m></dt>
<dd>Prints on standard output the names and values of all the elements
in the array <i>arrayName</i>.
<b>ArrayName</b> must be an array accessible to the caller of <cmd>parray</cmd>.
It may be either local or global.
</dd>
</dle>
<dle>
<dt><b>tcl_endOfWord</b> <m>str start</m></dt>
<dd>Returns the index of the first end-of-word location that occurs after
a starting index <i>start</i> in the string <i>str</i>.  An end-of-word
location is defined to be the first non-word character following the
first word character after the starting point.  Returns -1 if there
are no more end-of-word locations after the starting point.  See the
description of <b>tcl_wordchars</b> and <b cat="variable">tcl_nonwordchars</b> below
for more details on how Tcl determines which characters are word
characters.
</dd>
</dle>
<dle>
<dt><b>tcl_startOfNextWord</b> <m>str start</m></dt>
<dd>Returns the index of the first start-of-word location that occurs
after a starting index <i>start</i> in the string <i>str</i>.  A
start-of-word location is defined to be the first word character
following a non-word character.  Returns -1 if there are no more
start-of-word locations after the starting point.
</dd>
</dle>
<dle>
<dt><b>tcl_startOfPreviousWord</b> <m>str start</m></dt>
<dd>Returns the index of the first start-of-word location that occurs
before a starting index <i>start</i> in the string <i>str</i>.  Returns
-1 if there are no more start-of-word locations before the starting
point.
</dd>
</dle>
<dle>
<dt><b>tcl_wordBreakAfter</b> <m>str start</m></dt>
<dd>Returns the index of the first word boundary after the starting index
<i>start</i> in the string <i>str</i>.  Returns -1 if there are no more
boundaries after the starting point in the given string.  The index
returned refers to the second character of the pair that comprises a
boundary.
</dd>
</dle>
<dle>
<dt><b>tcl_wordBreakBefore</b> <m>str start</m></dt>
<dd>Returns the index of the first word boundary before the starting index
<i>start</i> in the string <i>str</i>.  Returns -1 if there are no more
boundaries before the starting point in the given string.  The index
returned refers to the second character of the pair that comprises a
boundary.

</dd>
</dle>
</dl>
</section>
<section>
<title>VARIABLES</title>
<p>The following global variables are defined or used by the procedures in
the Tcl library:
</p>
<dl>
<dle>
<dt><b>auto_execs</b></dt>
<dd>Used by <cmd>auto_execok</cmd> to record information about whether
particular commands exist as executable files.
</dd>
</dle>
<dle>
<dt><b>auto_index</b></dt>
<dd>Used by <cmd>auto_load</cmd> to save the index information read from
disk.
</dd>
</dle>
<dle>
<dt><b>auto_noexec</b></dt>
<dd>If set to any value, then <b cat="AMBIGUOUS ambiguous cmd">unknown</b> will not attempt to auto-exec
any commands.
</dd>
</dle>
<dle>
<dt><b>auto_noload</b></dt>
<dd>If set to any value, then <b cat="AMBIGUOUS ambiguous cmd">unknown</b> will not attempt to auto-load
any commands.
</dd>
</dle>
<dle>
<dt><b>auto_path</b></dt>
<dd>If set, then it must contain a valid Tcl list giving directories to
search during auto-load operations.
This variable is initialized during startup to contain, in order:
the directories listed in the TCLLIBPATH environment variable,
the directory named by the $tcl_library variable,
the parent directory of $tcl_library,
the directories listed in the $tcl_pkgPath variable.
</dd>
</dle>
<dle>
<dt><b>env(TCL_LIBRARY)</b></dt>
<dd>If set, then it specifies the location of the directory containing
library scripts (the value of this variable will be
assigned to the <b cat="variable">tcl_library</b> variable and therefore returned by
the command <b>info library</b>).  If this variable isn't set then
a default value is used.
</dd>
</dle>
<dle>
<dt><b>env(TCLLIBPATH)</b></dt>
<dd>If set, then it must contain a valid Tcl list giving directories to
search during auto-load operations.  Directories must be specified in 
Tcl format, using "/" as the path separator, regardless of platform.
This variable is only used when initializing the <b>auto_path</b> variable.
</dd>
</dle>
<dle>
<dt><b>tcl_nonwordchars</b></dt>
<dd>This variable contains a regular expression that is used by routines
like <cmd>tcl_endOfWord</cmd> to identify whether a character is part of a
word or not.  If the pattern matches a character, the character is
considered to be a non-word character.  On Windows platforms, spaces,
tabs, and newlines are considered non-word characters.  Under Unix,
everything but numbers, letters and underscores are considered
non-word characters.
</dd>
</dle>
<dle>
<dt><b>tcl_wordchars</b></dt>
<dd>This variable contains a regular expression that is used by routines
like <cmd>tcl_endOfWord</cmd> to identify whether a character is part of a
word or not.  If the pattern matches a character, the character is
considered to be a word character.  On Windows platforms, words are
comprised of any character that is not a space, tab, or newline.  Under
Unix, words are comprised of numbers, letters or underscores.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>info(n)</ref>
<ref>re_syntax(n)</ref>
</seealso>
<keywords>
<keyword>auto-exec</keyword>
<keyword>auto-load</keyword>
<keyword>library</keyword>
<keyword>unknown</keyword>
<keyword>word</keyword>
<keyword>whitespace</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Limit" title="Tcl_LimitCheck" version="8.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Limit.3,v 1.7 2004/11/12 09:01:25 das Exp $
 -->
<?TROFF.TH title="Tcl_LimitCheck" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_LimitAddHandler</name>
<name>Tcl_LimitCheck</name>
<name>Tcl_LimitExceeded</name>
<name>Tcl_LimitGetCommands</name>
<name>Tcl_LimitGetGranularity</name>
<name>Tcl_LimitGetTime</name>
<name>Tcl_LimitReady</name>
<name>Tcl_LimitRemoveHandler</name>
<name>Tcl_LimitSetCommands</name>
<name>Tcl_LimitSetGranularity</name>
<name>Tcl_LimitSetTime</name>
<name>Tcl_LimitTypeEnabled</name>
<name>Tcl_LimitTypeExceeded</name>
<name>Tcl_LimitTypeReset</name>
<name>Tcl_LimitTypeSet</name>
<desc>manage and check resource limits on interpreters</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_LimitCheck</fun>(<m>interp</m>)

int
<fun>Tcl_LimitReady</fun>(<m>interp</m>)

int
<fun>Tcl_LimitExceeded</fun>(<m>interp</m>)

int
<fun>Tcl_LimitTypeExceeded</fun>(<m>interp</m>, <m>type</m>)

int
<fun>Tcl_LimitTypeEnabled</fun>(<m>interp</m>, <m>type</m>)

void
<fun>Tcl_LimitTypeSet</fun>(<m>interp</m>, <m>type</m>)

void
<fun>Tcl_LimitTypeReset</fun>(<m>interp</m>, <m>type</m>)

int
<fun>Tcl_LimitGetCommands</fun>(<m>interp</m>)

void
<fun>Tcl_LimitSetCommands</fun>(<m>interp</m>, <m>commandLimit</m>)

void
<fun>Tcl_LimitGetTime</fun>(<m>interp</m>, <m>timeLimitPtr</m>)

void
<fun>Tcl_LimitSetTime</fun>(<m>interp</m>, <m>timeLimitPtr</m>)

int
<fun>Tcl_LimitGetGranularity</fun>(<m>interp</m>, <m>type</m>)

void
<fun>Tcl_LimitSetGranularity</fun>(<m>interp</m>, <m>type</m>, <m>granularity</m>)

void
<fun>Tcl_LimitAddHandler</fun>(<m>interp</m>, <m>type</m>, <m>handlerProc</m>, <m>clientData</m>, <m>deleteProc</m>)

void
<fun>Tcl_LimitRemoveHandler</fun>(<m>interp</m>, <m>type</m>, <m>handlerProc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter that the limit being managed applies to or that will have
its limits checked.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>type</name>
<argmode>in</argmode>
<desc>The type of limit that the operation refers to.  This must be either
<b>TCL_LIMIT_COMMANDS</b> or <b>TCL_LIMIT_TIME</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>commandLimit</name>
<argmode>in</argmode>
<desc>The maximum number of commands (as reported by <b>info cmdcount</b>)
that may be executed in the interpreter.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Time</argtype>
<name name="timeLimitPtr">*timeLimitPtr</name>
<argmode>in/out</argmode>
<desc>A pointer to a structure that will either have the new time limit read
from (<fun>Tcl_LimitSetTime</fun>) or the current time limit written to
(<fun>Tcl_LimitGetTime</fun>).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>granularity</name>
<argmode>in</argmode>
<desc>Divisor that indicates how often a particular limit should really be
checked.  Must be at least 1.
</desc>
</argdef>
<argdef>
<argtype>Tcl_LimitHandlerProc</argtype>
<name name="handlerProc">*handlerProc</name>
<argmode>in</argmode>
<desc>Function to call when a particular limit is exceeded.  If the
<i>handlerProc</i> removes or raises the limit during its processing,
the limited interpreter will be permitted to continue to process after
the handler returns.  Many handlers may be attached to the same
interpreter limit; their order of execution is not defined, and they
must be identified by <i>handlerProc</i> and <i>clientData</i> when they
are deleted.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary pointer-sized word used to pass some context to the
<i>handlerProc</i> function.
</desc>
</argdef>
<argdef>
<argtype>Tcl_LimitHandlerDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>Function to call whenever a handler is deleted.  May be NULL if the
<i>clientData</i> requires no deletion.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl's interpreter resource limit subsystem allows for close control
over how much computation time a script may use, and is useful for
cases where a program is divided into multiple pieces where some parts
are more trusted than others (e.g. web application servers).
</p>
<p>Every interpreter may have a limit on the wall-time for execution, and
a limit on the number of commands that the interpreter may execute.
Since checking of these limits is potentially expensive (especially
the time limit), each limit also has a checking granularity, which is
a divisor for an internal count of the number of points in the core
where a check may be performed (which is immediately before executing
a command and at an unspecified frequency between running commands,
which can happen in empty-bodied <cmd>while</cmd> loops).
</p>
<p>The final component of the limit engine is a callback scheme which
allows for notifications of when a limit has been exceeded.  These
callbacks can just provide logging, or may allocate more resources to
the interpreter to permit it to continue processing longer.
</p>
<p>When a limit is exceeded (and the callbacks have run; the order of
execution of the callbacks is unspecified) execution in the limited
interpreter is stopped by raising an error and setting a flag that
prevents the <cmd>catch</cmd> command in that interpreter from trapping
that error.  It is up to the context that started execution in that
interpreter (typically a master interpreter) to handle the error.
</p>
</section>
<section>
<title>LIMIT CHECKING API</title>
<p>To check the resource limits for an interpreter, call
<fun>Tcl_LimitCheck</fun>, which returns <b>TCL_OK</b> if the limit was not
exceeded (after processing callbacks) and <b>TCL_ERROR</b> if the limit was
exceeded (in which case an error message is also placed in the
interpreter result).  That function should only be called when
<fun>Tcl_LimitReady</fun> returns non-zero so that granularity policy is
enforced.  This API is designed to be similar in usage to
<fun>Tcl_AsyncReady</fun> and <fun>Tcl_AsyncInvoke</fun>.
</p>
<p>When writing code that may behave like <cmd>catch</cmd> in respect of
errors, you should only trap an error if <fun>Tcl_LimitExceeded</fun>
returns zero.  If it returns non-zero, the interpreter is in a
limit-exceeded state and errors should be allowed to propagate to the
calling context.  You can also check whether a particular type of
limit has been exceeded using <fun>Tcl_LimitTypeExceeded</fun>.
</p>
</section>
<section>
<title>LIMIT CONFIGURATION</title>
<p>To check whether a limit has been set (but not whether it has actually
been exceeded) on an interpreter, call <fun>Tcl_LimitTypeEnabled</fun> with
the type of limit you want to check.  To enable a particular limit
call <fun>Tcl_LimitTypeSet</fun>, and to disable a limit call
<fun>Tcl_LimitTypeReset</fun>.
</p>
<p>The level of a command limit may be set using
<fun>Tcl_LimitSetCommands</fun>, and retrieved using
<fun>Tcl_LimitGetCommands</fun>.  Similarly for a time limit with
<fun>Tcl_LimitSetTime</fun> and <fun>Tcl_LimitGetTime</fun> respectively, but
with that API the time limit is copied from and to the Tcl_Time
structure that the <i>timeLimitPtr</i> argument points to.
</p>
<p>The checking granularity for a particular limit may be set using
<fun>Tcl_LimitSetGranularity</fun> and retrieved using
<fun>Tcl_LimitGetGranularity</fun>.  Note that granularities must always be
positive.
</p>
<subsection>
<title>LIMIT CALLBACKS</title>
<p>To add a handler callback to be invoked when a limit is exceeded, call
<fun>Tcl_LimitAddHandler</fun>.  The <i>handlerProc</i> argument describes
the function that will actually be called; it should have the
following prototype:
</p>
<syntax cat="type" name="Tcl_LimitHandlerProc" scope="global">
typedef void Tcl_LimitHandlerProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>clientData</i> argument to the handler will be whatever is
passed to the <i>clientData</i> argment to <fun>Tcl_LimitAddHandler</fun>,
and the <i>interp</i> is the interpreter that had its limit exceeded.
</p>
<p>The <i>deleteProc</i> argument to <fun>Tcl_LimitAddHandler</fun> is a
function to call to delete the <i>clientData</i> value.  It may be
<b>TCL_STATIC</b> or NULL if no deletion action is necessary, or
<b>TCL_DYNAMIC</b> if all that is necessary is to free the structure with
<fun>Tcl_Free</fun>.  Otherwise, it should refer to a function with the
following prototype:
</p>
<syntax cat="type" name="Tcl_LimitHandlerDeleteProc" scope="global">
typedef void Tcl_LimitHandlerDeleteProc(
        ClientData <i>clientData</i>);
</syntax>
<p>A limit handler may be deleted using <fun>Tcl_LimitRemoveHandler</fun>; the
handler removed will be the first one found (out of the handlers added
with <fun>Tcl_LimitAddHandler</fun>) with exactly matching <i>type</i>,
<i>handlerProc</i> and <i>clientData</i> arguments.  This function
always invokes the <i>deleteProc</i> on the <i>clientData</i> (unless
the <i>deleteProc</i> was NULL or <b>TCL_STATIC</b>).

</p>
</subsection>
</section>
<keywords>
<keyword>interpreter</keyword>
<keyword>resource</keyword>
<keyword>limit</keyword>
<keyword>commands</keyword>
<keyword>time</keyword>
<keyword>callback</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lindex" version="8.4" title="lindex">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 by Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lindex.n,v 1.12 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="lindex" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lindex</name>
<desc>Retrieve an element from a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lindex</cmd> <m>list ?index...?</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>lindex</cmd> command accepts a parameter, <i>list</i>, which
it treats as a Tcl list. It also accepts zero or more <i>indices</i> into
the list.  The indices may be presented either consecutively on the
command line, or grouped in a
Tcl list and presented as a single argument.
</p>
<p>If no indices are presented, the command takes the form:
</p>
<example>
lindex list
</example>
<p>or
</p>
<example>
lindex list {}
</example>
<p>In this case, the return value of <cmd>lindex</cmd> is simply the value of the
<i>list</i> parameter.
</p>
<p>When presented with a single index, the <cmd>lindex</cmd> command
treats <i>list</i> as a Tcl list and returns the
<i>index</i>'th element from it (0 refers to the first element of the list).
In extracting the element, <cmd>lindex</cmd> observes the same rules
concerning braces and quotes and backslashes as the Tcl command
interpreter; however, variable
substitution and command substitution do not occur.
If <i>index</i> is negative or greater than or equal to the number
of elements in <i>value</i>, then an empty
string is returned.
<new version="8.5">The interpretation of each simple <i>index</i> value is the same as 
for the command <b>string index</b>, supporting simple index
arithmetic and indices relative to the end of the list.
</new></p>
<p>If additional <i>index</i> arguments are supplied, then each argument is
used in turn to select an element from the previous indexing operation,
allowing the script to select elements from sublists.  The command,
</p>
<example>
lindex $a 1 2 3
</example>
<p>or
</p>
<example>
lindex $a {1 2 3}
</example>
<p>is synonymous with
</p>
<example>
lindex [lindex [lindex $a 1] 2] 3
</example>
</section>
<section>
<title>EXAMPLES</title>
<example>
<cmd>lindex</cmd> {a b c}  <i>=&gt; a b c</i>
<cmd>lindex</cmd> {a b c} {} <i>=&gt; a b c</i>
<cmd>lindex</cmd> {a b c} 0 <i>=&gt; a</i>
<cmd>lindex</cmd> {a b c} 2 <i>=&gt; c</i>
<cmd>lindex</cmd> {a b c} end <i>=&gt; c</i>
<cmd>lindex</cmd> {a b c} end-1 <i>=&gt; b</i>
<cmd>lindex</cmd> {{a b c} {d e f} {g h i}} 2 1 <i>=&gt; h</i>
<cmd>lindex</cmd> {{a b c} {d e f} {g h i}} {2 1} <i>=&gt; h</i>
<cmd>lindex</cmd> {{{a b} {c d}} {{e f} {g h}}} 1 1 0 <i>=&gt; g</i>
<cmd>lindex</cmd> {{{a b} {c d}} {{e f} {g h}}} {1 1 0} <i>=&gt; g</i>
</example>
</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>index</keyword>
<keyword>list</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="LinkVar" version="7.5" title="Tcl_LinkVar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: LinkVar.3,v 1.12 2005/09/08 10:49:19 dkf Exp $
 -->
<?TROFF.TH title="Tcl_LinkVar" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_LinkVar</name>
<name>Tcl_UnlinkVar</name>
<name>Tcl_UpdateLinkedVar</name>
<desc>link Tcl variable to C variable</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_LinkVar</fun>(<m>interp</m>, <m>varName</m>, <m>addr</m>, <m>type</m>)

<fun>Tcl_UnlinkVar</fun>(<m>interp</m>, <m>varName</m>)

<fun>Tcl_UpdateLinkedVar</fun>(<m>interp</m>, <m>varName</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter that contains <i>varName</i>.
Also used by <fun>Tcl_LinkVar</fun> to return error messages.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="varName">*varName</name>
<argmode>in</argmode>
<desc>Name of global variable.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="addr">*addr</name>
<argmode>in</argmode>
<desc>Address of C variable that is to be linked to <i>varName</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>type</name>
<argmode>in</argmode>
<desc>Type of C variable.  Must be one of <b>TCL_LINK_INT</b>,
<new version="8.5"><b>TCL_LINK_UINT</b>, <b>TCL_LINK_CHAR</b>, <b>TCL_LINK_UCHAR</b>,
<b>TCL_LINK_SHORT</b>, <b>TCL_LINK_USHORT</b>, <b>TCL_LINK_LONG</b>,
<b>TCL_LINK_ULONG</b>,
</new><b>TCL_LINK_WIDE_INT</b>,
<new version="8.5"><b>TCL_LINK_WIDE_UINT</b>, <b>TCL_LINK_FLOAT</b>,
</new><b>TCL_LINK_DOUBLE</b>, <b>TCL_LINK_BOOLEAN</b>, or
<b>TCL_LINK_STRING</b>, optionally OR'ed with <b>TCL_LINK_READ_ONLY</b>
to make Tcl variable read-only.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_LinkVar</fun> uses variable traces to keep the Tcl variable
named by <i>varName</i> in sync with the C variable at the address
given by <i>addr</i>.
Whenever the Tcl variable is read the value of the C variable will
be returned, and whenever the Tcl variable is written the C
variable will be updated to have the same value.
<fun>Tcl_LinkVar</fun> normally returns <b>TCL_OK</b>;  if an error occurs
while setting up the link (e.g. because <i>varName</i> is the
name of array) then <b>TCL_ERROR</b> is returned and the interpreter's result
contains an error message.
</p>
<p>The <i>type</i> argument specifies the type of the C variable,
and must have one of the following values, optionally OR'ed with
<b>TCL_LINK_READ_ONLY</b>:
</p>
<dl>
<dle>
<dt><b>TCL_LINK_INT</b></dt>
<dd>The C variable is of type <b cat="mathfunc">int</b>.
Any value written into the Tcl variable must have a proper integer
form acceptable to <fun>Tcl_GetIntFromObj</fun>;  attempts to write
non-integer values into <i>varName</i> will be rejected with
Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_UINT</b></dt>
<dd>The C variable is of type <b>unsigned int</b>.
Any value written into the Tcl variable must have a proper unsigned
integer form acceptable to <fun>Tcl_GetWideIntFromObj</fun> and in the
platform's defined range for the <b>unsigned int</b> type; attempts to
write non-integer values (or values outside the range) into
<i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_CHAR</b></dt>
<dd>The C variable is of type <b>char</b>.
Any value written into the Tcl variable must have a proper integer
form acceptable to <fun>Tcl_GetIntFromObj</fun> and be in the range of the
<b>char</b> datatype; attempts to write non-integer or out-of-range
values into <i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_UCHAR</b></dt>
<dd>The C variable is of type <b>unsigned char</b>.
Any value written into the Tcl variable must have a proper unsigned
integer form acceptable to <fun>Tcl_GetIntFromObj</fun> and in the
platform's defined range for the <b>unsigned char</b> type; attempts to
write non-integer values (or values outside the range) into
<i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_SHORT</b></dt>
<dd>The C variable is of type <b>short</b>.
Any value written into the Tcl variable must have a proper integer
form acceptable to <fun>Tcl_GetIntFromObj</fun> and be in the range of the
<b>short</b> datatype; attempts to write non-integer or out-of-range
values into <i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_USHORT</b></dt>
<dd>The C variable is of type <b>unsigned short</b>.
Any value written into the Tcl variable must have a proper unsigned
integer form acceptable to <fun>Tcl_GetIntFromObj</fun> and in the
platform's defined range for the <b>unsigned short</b> type; attempts to
write non-integer values (or values outside the range) into
<i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_LONG</b></dt>
<dd>The C variable is of type <b>long</b>.
Any value written into the Tcl variable must have a proper integer
form acceptable to <fun>Tcl_GetLongFromObj</fun>; attempts to write
non-integer or out-of-range
values into <i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_ULONG</b></dt>
<dd>The C variable is of type <b>unsigned long</b>.
Any value written into the Tcl variable must have a proper unsigned
integer form acceptable to <fun>Tcl_GetWideIntFromObj</fun> and in the
platform's defined range for the <b>unsigned long</b> type; attempts to
write non-integer values (or values outside the range) into
<i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle>
<dt><b>TCL_LINK_DOUBLE</b></dt>
<dd>The C variable is of type <b cat="mathfunc">double</b>.
Any value written into the Tcl variable must have a proper real
form acceptable to <fun>Tcl_GetDoubleFromObj</fun>;  attempts to write
non-real values into <i>varName</i> will be rejected with
Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_FLOAT</b></dt>
<dd>The C variable is of type <b>float</b>.
Any value written into the Tcl variable must have a proper real
form acceptable to <fun>Tcl_GetDoubleFromObj</fun> and must be within the
range acceptable for a <b>float</b>; attempts to
write non-real values (or values outside the range) into
<i>varName</i> will be rejected with Tcl errors.
</dd>
</dle>
<dle>
<dt><b>TCL_LINK_WIDE_INT</b></dt>
<dd>The C variable is of type <b>Tcl_WideInt</b> (which is an integer type
at least 64-bits wide on all platforms that can support it.)
Any value written into the Tcl variable must have a proper integer
form acceptable to <fun>Tcl_GetWideIntFromObj</fun>;  attempts to write
non-integer values into <i>varName</i> will be rejected with
Tcl errors.
</dd>
</dle>
<dle version="8.5">
<dt><b>TCL_LINK_WIDE_UINT</b></dt>
<dd>The C variable is of type <b>Tcl_WideUInt</b> (which is an unsigned
integer type at least 64-bits wide on all platforms that can support
it.)
Any value written into the Tcl variable must have a proper unsigned
integer form acceptable to <fun>Tcl_GetWideIntFromObj</fun> (it will be
cast to unsigned);
attempts to write non-integer values into <i>varName</i> will be
rejected with Tcl errors.
</dd>
</dle>
<dle>
<dt><b>TCL_LINK_BOOLEAN</b></dt>
<dd>The C variable is of type <b cat="mathfunc">int</b>.
If its value is zero then it will read from Tcl as ``0'';
otherwise it will read from Tcl as ``1''.
Whenever <i>varName</i> is
modified, the C variable will be set to a 0 or 1 value.
Any value written into the Tcl variable must have a proper boolean
form acceptable to <fun>Tcl_GetBooleanFromObj</fun>;  attempts to write
non-boolean values into <i>varName</i> will be rejected with
Tcl errors.
</dd>
</dle>
<dle>
<dt><b>TCL_LINK_STRING</b></dt>
<dd>The C variable is of type <b>char *</b>.
If its value is not NULL then it must be a pointer to a string
allocated with <fun>Tcl_Alloc</fun> or <fun>ckalloc</fun>.
Whenever the Tcl variable is modified the current C string will be
freed and new memory will be allocated to hold a copy of the variable's
new value.
If the C variable contains a NULL pointer then the Tcl variable
will read as ``NULL''.
</dd>
</dle>
</dl>
<p>If the <b>TCL_LINK_READ_ONLY</b> flag is present in <i>type</i> then the
variable will be read-only from Tcl, so that its value can only be
changed by modifying the C variable.
Attempts to write the variable from Tcl will be rejected with errors.
</p>
<p><fun>Tcl_UnlinkVar</fun> removes the link previously set up for the
variable given by <i>varName</i>.  If there does not exist a link
for <i>varName</i> then the procedure has no effect.
</p>
<p><fun>Tcl_UpdateLinkedVar</fun> may be invoked after the C variable has
changed to force the Tcl variable to be updated immediately.
In many cases this procedure is not needed, since any attempt to
read the Tcl variable will return the latest value of the C variable.
However, if a trace has been set on the Tcl variable (such as a
Tk widget that wishes to display the value of the variable), the
trace will not trigger when the C variable has changed.
<fun>Tcl_UpdateLinkedVar</fun> ensures that any traces on the Tcl
variable are invoked.

</p>
</section>
<keywords>
<keyword>boolean</keyword>
<keyword>integer</keyword>
<keyword>link</keyword>
<keyword>read-only</keyword>
<keyword>real</keyword>
<keyword>string</keyword>
<keyword>traces</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="linsert" version="8.2" title="linsert">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: linsert.n,v 1.13 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="linsert" section="n" date="8.2" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>linsert</name>
<desc>Insert elements into a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>linsert</cmd> <m>list index element</m> ?<m>element element ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command produces a new list from <i>list</i> by inserting all of the
<i>element</i> arguments just before the <i>index</i>'th element of
<i>list</i>.  Each <i>element</i> argument will become a separate element of
the new list.  If <i>index</i> is less than or equal to zero, then the new
elements are inserted at the beginning of the list.  
<new version="8.5">The interpretation of the <i>index</i> value is the same as
for the command <b>string index</b>, supporting simple index
arithmetic and indices relative to the end of the list.
</new></p>
</section>
<section>
<title>EXAMPLE</title>
<p>Putting some values into a list, first indexing from the start and
then indexing from the end, and then chaining them together:
</p>
<example>
set oldList {the fox jumps over the dog}
set midList [<cmd>linsert</cmd> $oldList 1 quick]
set newList [<cmd>linsert</cmd> $midList end-1 lazy]
# The old lists still exist though...
set newerList [<cmd>linsert</cmd> [<cmd>linsert</cmd> $oldList end-1 quick] 1 lazy]
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>insert</keyword>
<keyword>list</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="list" title="list">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: list.n,v 1.10 2004/10/27 12:53:22 dkf Exp $
 -->
<?TROFF.TH title="list" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>list</name>
<desc>Create a list</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">list</b> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command returns a list comprised of all the <i>arg</i>s,
or an empty string if no <i>arg</i>s are specified.
Braces and backslashes get added as necessary, so that the <cmd>lindex</cmd> command
may be used on the result to re-extract the original arguments, and also
so that <b cat="AMBIGUOUS ambiguous cmd">eval</b> may be used to execute the resulting list, with
<i>arg1</i> comprising the command's name and the other <i>arg</i>s comprising
its arguments.  <b>List</b> produces slightly different results than
<cmd>concat</cmd>:  <cmd>concat</cmd> removes one level of grouping before forming
the list, while <b cat="AMBIGUOUS ambiguous cmd">list</b> works directly from the original arguments.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>The command
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">list</b> a b "c d e  " "  f {g h}"
</example>
<p>will return
</p>
<example>
<b>a b {c d e  } {  f {g h}}</b>
</example>
<p>while <cmd>concat</cmd> with the same arguments will return
</p>
<example>
<b>a b c d e f {g h}</b>
</example>


</section>
<seealso>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lrange(n)</ref>
<ref>lrepeat(n)</ref>
<ref>lreplace(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="listbox" version="8.4" title="listbox">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: listbox.n,v 1.12 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="listbox" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>listbox</name>
<desc>Create and manipulate listbox widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">listbox</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activestyle</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-exportselection</li>
<li>-font</li>
<li>-foreground</li>
<li>-height</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-relief</li>
<li>-selectbackground</li>
<li>-selectborderwidth</li>
<li>-selectforeground</li>
<li>-setgrid</li>
<li>-state</li>
<li>-takefocus</li>
<li>-width</li>
<li>-xscrollcommand</li>
<li>-yscrollcommand</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-activestyle</name>
<dbname>activeStyle</dbname>
<dbclass>ActiveStyle</dbclass>
<desc>Specifies the style in which to draw the active element.  This must be
one of <b>dotbox</b> (show a focus ring around the active element),
<b>none</b> (no special indication of active element) or
<b>underline</b> (underline the active element).
The default is <b>underline</b>.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the desired height for the window, in lines.
If zero or less, then the desired height for the window is made just
large enough to hold all the elements in the listbox.
</desc>
</optiondef>
<optiondef>
<name>-listvariable</name>
<dbname>listVariable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies the name of a variable.  The value of the variable is a list to
be displayed inside the widget; if the variable value changes then the
widget will automatically update itself to reflect the new value.  Attempts
to assign a variable with an invalid list value to <b>-listvariable</b>
will cause an error.  Attempts to unset a variable in use as a
<b>-listvariable</b> will fail but will not generate an error.
</desc>
</optiondef>
<optiondef>
<name>-selectmode</name>
<dbname>selectMode</dbname>
<dbclass>SelectMode</dbclass>
<desc>Specifies one of several styles for manipulating the selection.
The value of the option may be arbitrary, but the default bindings
expect it to be either <b>single</b>, <b>browse</b>, <b>multiple</b>,
or <b>extended</b>;  the default value is <b>browse</b>.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of two states for the listbox:  <b>normal</b> or <b>disabled</b>.
If the listbox is disabled then items may not be inserted or deleted,
items are drawn in the <b>-disabledforeground</b> color, and selection
cannot be modified and is not shown (though selection information is retained).
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired width for the window in characters.
If the font doesn't have a uniform width then the width of the
character ``0'' is used in translating from character units to
screen units.
If zero or less, then the desired width for the window is made just
large enough to hold all the elements in the listbox.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">listbox</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a listbox widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the listbox such as its colors, font,
text, and relief.  The <b cat="AMBIGUOUS widget cmd">listbox</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A listbox is a widget that displays a list of strings, one per line.
When first created, a new listbox has no elements.
Elements may be added or deleted using widget commands described
below.  In addition, one or more elements may be selected as described
below.
If a listbox is exporting its selection (see <b>exportSelection</b>
option), then it will observe the standard X11 protocols
for handling the selection.
Listbox selections are available as type <b>STRING</b>;
the value of the selection will be the text of the selected elements, with
newlines separating the elements.
</p>
<p>It is not necessary for all the elements to be
displayed in the listbox window at once;  commands described below
may be used to change the view in the window.  Listboxes allow
scrolling in both directions using the standard <b>xScrollCommand</b>
and <b>yScrollCommand</b> options.
They also support scanning, as described below.

</p>
</section>
<section>
<title>INDICES</title>
<p>Many of the widget commands for listboxes take one or more indices
as arguments.
An index specifies a particular element of the listbox, in any of
the following ways:
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>Specifies the element as a numerical index, where 0 corresponds
to the first element in the listbox.
</dd>
</dle>
<dle>
<dt><b>active</b></dt>
<dd>Indicates the element that has the location cursor.  This element
will be displayed as specified by <b>-activestyle</b> when the listbox
has the keyboard focus, and it is specified with the <b>activate</b>
widget command.
</dd>
</dle>
<dle>
<dt><b>anchor</b></dt>
<dd>Indicates the anchor point for the selection, which is set with the
<b>selection anchor</b> widget command.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the end of the listbox.
For most commands this refers to the last element in the listbox,
but for a few commands such as <b>index</b> and <b>insert</b>
it refers to the element just after the last one.
</dd>
</dle>
<dle>
<dt><b>@</b><m>x</m><b>,</b><m>y</m></dt>
<dd>Indicates the element that covers the point in the listbox window
specified by <i>x</i> and <i>y</i> (in pixel coordinates).  If no
element covers that point, then the closest element to that
point is used.
</dd>
</dle>
</dl>
<p>In the widget command descriptions below, arguments named <i>index</i>,
<i>first</i>, and <i>last</i> always contain text indices in one of
the above forms.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">listbox</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for listbox widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>activate</b> <m>index</m></dt>
<dd>Sets the active element to the one indicated by <i>index</i>.
If <i>index</i> is outside the range of elements in the listbox
then the closest element is activated.
The active element is drawn as specified by <b>-activestyle</b> when the
widget has the input focus, and its index may be retrieved with the
index <b>active</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>index</m></dt>
<dd>Returns a list of four numbers describing the bounding box of
the text in the element given by <i>index</i>.
The first two elements of the list give the x and y coordinates
of the upper-left corner of the screen area covered by the text
(specified in pixels relative to the widget) and the last two
elements give the width and height of the area, in pixels.
If no part of the element given by <i>index</i> is visible on the
screen,
or if <i>index</i> refers to a non-existent element,
then the result is an empty string;  if the element is
partially visible, the result gives the full area of the element,
including any parts that are not visible.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">listbox</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">listbox</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>curselection</b></dt>
<dd>Returns a list containing the numerical indices of
all of the elements in the listbox that are currently selected.
If there are no elements selected in the listbox then an empty
string is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>first</m> ?<m>last</m>?</dt>
<dd>Deletes one or more elements of the listbox.  <i>First</i> and <i>last</i>
are indices specifying the first and last elements in the range
to delete.  If <i>last</i> isn't specified it defaults to
<i>first</i>, i.e. a single element is deleted.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b> <m>first</m> ?<m>last</m>?</dt>
<dd>If <i>last</i> is omitted, returns the contents of the listbox
element indicated by <i>first</i>,
or an empty string if <i>first</i> refers to a non-existent element.
If <i>last</i> is specified, the command returns a list whose elements
are all of the listbox elements between <i>first</i> and <i>last</i>,
inclusive.
Both <i>first</i> and <i>last</i> may have any of the standard
forms for indices.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the integer index value that corresponds to <i>index</i>.
If <i>index</i> is <b>end</b> the return value is a count of the number
of elements in the listbox (not the index of the last element).
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index</m> ?<m>element element ...</m>?</dt>
<dd>Inserts zero or more new elements in the list just before the
element given by <i>index</i>.  If <i>index</i> is specified as
<b>end</b> then the new elements are added to the end of the
list.  Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>itemcget</b> <m>index option</m></dt>
<dd>Returns the current value of the item configuration option given
by <i>option</i>. <i>Option</i> may have any of the values accepted 
by the <b>listbox itemconfigure</b> command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>itemconfigure</b> <m>index</m> ?<m>option</m>? ?<m>value</m>? ?<m>option value ...</m>?</dt>
<dd>Query or modify the configuration options of an item in the listbox.
If no <i>option</i> is specified, returns a list describing all of
the available options for the item (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string. The following options
are currently supported for items:
<dl>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd><i>Color</i> specifies the background color to use when displaying the 
item. It may have any of the forms accepted by <fun>Tk_GetColor</fun>.
</dd>
</dle>
<dle>
<dt><b>-foreground</b> <m>color</m></dt>
<dd><i>Color</i> specifies the foreground color to use when displaying the
item. It may have any of the forms accepted by <fun>Tk_GetColor</fun>.
</dd>
</dle>
<dle>
<dt><b>-selectbackground</b> <m>color</m></dt>
<dd><i>color</i> specifies the background color to use when displaying the
item while it is selected. It may have any of the forms accepted by
<fun>Tk_GetColor</fun>.
</dd>
</dle>
<dle>
<dt><b>-selectforeground</b> <m>color</m></dt>
<dd><i>color</i> specifies the foreground color to use when displaying the
item while it is selected. It may have any of the forms accepted by
<fun>Tk_GetColor</fun>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>nearest</b> <m>y</m></dt>
<dd>Given a y-coordinate within the listbox window, this command returns
the index of the (visible) listbox element nearest to that y-coordinate.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan</b> <m>option args</m></dt>
<dd>This command is used to implement scanning on listboxes.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>scan mark</b> <m>x y</m></dt>
<dd>Records <i>x</i> and <i>y</i> and the current view in the listbox
window;  used in conjunction with later <b>scan dragto</b> commands.
Typically this command is associated with a mouse button press in
the widget.  It returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan dragto</b> <m>x y</m>.</dt>
<dd>This command computes the difference between its <i>x</i> and <i>y</i>
arguments and the <i>x</i> and <i>y</i> arguments to the last
<b>scan mark</b> command for the widget.
It then adjusts the view by 10 times the
difference in coordinates.  This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the list at high speed through the window.  The return
value is an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>see</b> <m>index</m></dt>
<dd>Adjust the view in the listbox so that the element given by <i>index</i>
is visible.
If the element is already visible then the command has no effect;
if the element is near one edge of the window then the listbox
scrolls to bring the element into view at the edge;  otherwise
the listbox scrolls to center the element.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection</b> <m>option arg</m></dt>
<dd>This command is used to adjust the selection within a listbox.  It
has several forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>selection anchor</b> <m>index</m></dt>
<dd>Sets the selection anchor to the element given by <i>index</i>.
If <i>index</i> refers to a non-existent element, then the closest
element is used.
The selection anchor is the end of the selection that is fixed
while dragging out a selection with the mouse.
The index <b>anchor</b> may be used to refer to the anchor
element.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection clear</b> <m>first</m> ?<m>last</m>?</dt>
<dd>If any of the elements between <i>first</i> and <i>last</i>
(inclusive) are selected, they are deselected.
The selection state is not changed for elements outside
this range.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection includes</b> <m>index</m></dt>
<dd>Returns 1 if the element indicated by <i>index</i> is currently
selected, 0 if it isn't.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection set</b> <m>first</m> ?<m>last</m>?</dt>
<dd>Selects all of the elements in the range between
<i>first</i> and <i>last</i>, inclusive, without affecting
the selection state of elements outside that range.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>size</b></dt>
<dd>Returns a decimal string indicating the total number of elements
in the listbox.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>args</m></dt>
<dd>This command is used to query and change the horizontal position of the
information in the widget's window.  It can take any of the following
forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the listbox's text is off-screen to the left, the middle 40% is visible
in the window, and 40% of the text is off-screen to the right.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the character position given by
<i>index</i> is displayed at the left edge of the window.
Character positions are defined by the width of the character <b>0</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that <i>fraction</i> of the
total width of the listbox text is off-screen to the left.
<i>fraction</i> must be a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b> or an abbreviation
of one of these.
If <i>what</i> is <b>units</b>, the view adjusts left or right by
<i>number</i> character units (the width of the <b>0</b> character)
on the display;  if it is <b>pages</b> then the view adjusts by
<i>number</i> screenfuls.
If <i>number</i> is negative then characters farther to the left
become visible;  if it is positive then characters farther to the right
become visible.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>?args</m>?</dt>
<dd>This command is used to query and change the vertical position of the
text in the widget's window.
It can take any of the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>yview</b></dt>
<dd>Returns a list containing two elements, both of which are real fractions
between 0 and 1.
The first element gives the position of the listbox element at the
top of the window, relative to the listbox as a whole (0.5 means
it is halfway through the listbox, for example).
The second element gives the position of the listbox element just after
the last one in the window, relative to the listbox as a whole.
These are the same values passed to scrollbars via the <b>-yscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the element given by
<i>index</i> is displayed at the top of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that the element given by <i>fraction</i>
appears at the top of the window.
<i>Fraction</i> is a fraction between 0 and 1;  0 indicates the first
element in the listbox, 0.33 indicates the element one-third the
way through the listbox, and so on.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview scroll</b> <m>number what</m></dt>
<dd>This command adjusts the view in the window up or down according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b>.
If <i>what</i> is <b>units</b>, the view adjusts up or down by
<i>number</i> lines;  if it is <b>pages</b> then
the view adjusts by <i>number</i> screenfuls.
If <i>number</i> is negative then earlier elements
become visible;  if it is positive then later elements
become visible.
</dd>
</dle>
</dl>
</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for listboxes that give them
Motif-like behavior.  Much of the behavior of a listbox is determined
by its <b>selectMode</b> option, which selects one of four ways
of dealing with the selection.
</p>
<p>If the selection mode is <b>single</b> or <b>browse</b>, at most one
element can be selected in the listbox at once.
In both modes, clicking button 1 on an element selects
it and deselects any other selected item.
In <b>browse</b> mode it is also possible to drag the selection
with button 1.
</p>
<p>If the selection mode is <b>multiple</b> or <b>extended</b>,
any number of elements may be selected at once, including discontiguous
ranges.  In <b>multiple</b> mode, clicking button 1 on an element
toggles its selection state without affecting any other elements.
In <b>extended</b> mode, pressing button 1 on an element selects
it, deselects everything else, and sets the anchor to the element
under the mouse;  dragging the mouse with button 1
down extends the selection to include all the elements between
the anchor and the element under the mouse, inclusive.
</p>
<p>Most people will probably want to use <b>browse</b> mode for
single selections and <b>extended</b> mode for multiple selections;
the other modes appear to be useful only in special situations.
</p>
<p>Any time the selection changes in the listbox, the virtual event
<b>&lt;&lt;ListboxSelect&gt;&gt;</b> will be generated.  It is easiest to bind
to this event to be made aware of any changes to listbox selection.
</p>
<p>In addition to the above behavior, the following additional behavior
is defined by the default bindings:
</p>
<ol>
<li>In <b>extended</b> mode, the selected range can be adjusted by pressing
button 1 with the Shift key down:  this modifies the selection to
consist of the elements between the anchor and the element under
the mouse, inclusive.
The un-anchored end of this new selection can also be dragged with
the button down.
</li>
<li>In <b>extended</b> mode, pressing button 1 with the Control key down
starts a toggle operation: the anchor is set to the element under
the mouse, and its selection state is reversed.  The selection state
of other elements isn't changed.
If the mouse is dragged with button 1 down, then the selection state
of all elements between the anchor and the element under the mouse
is set to match that of the anchor element;  the selection state of
all other elements remains what it was before the toggle operation
began.
</li>
<li>If the mouse leaves the listbox window with button 1 down, the window
scrolls away from the mouse, making information visible that used
to be off-screen on the side of the mouse.
The scrolling continues until the mouse re-enters the window, the
button is released, or the end of the listbox is reached.
</li>
<li>Mouse button 2 may be used for scanning.
If it is pressed and dragged over the listbox, the contents of
the listbox drag at high speed in the direction the mouse moves.
</li>
<li>If the Up or Down key is pressed, the location cursor (active
element) moves up or down one element.
If the selection mode is <b>browse</b> or <b>extended</b> then the
new active element is also selected and all other elements are
deselected.
In <b>extended</b> mode the new active element becomes the
selection anchor.
</li>
<li>In <b>extended</b> mode, Shift-Up and Shift-Down move the location
cursor (active element) up or down one element and also extend
the selection to that element in a fashion similar to dragging
with mouse button 1.
</li>
<li>The Left and Right keys scroll the listbox view left and right
by the width of the character <b>0</b>.
Control-Left and Control-Right scroll the listbox view left and
right by the width of the window.
Control-Prior and Control-Next also scroll left and right by
the width of the window.
</li>
<li>The Prior and Next keys scroll the listbox view up and down
by one page (the height of the window).
</li>
<li>The Home and End keys scroll the listbox horizontally to
the left and right edges, respectively.
</li>
<li>Control-Home sets the location cursor to the first element in
the listbox, selects that element, and deselects everything else
in the listbox.
</li>
<li>Control-End sets the location cursor to the last element in
the listbox, selects that element, and deselects everything else
in the listbox.
</li>
<li>In <b>extended</b> mode, Control-Shift-Home extends the selection
to the first element in the listbox and Control-Shift-End extends
the selection to the last element.
</li>
<li>In <b>multiple</b> mode, Control-Shift-Home moves the location cursor
to the first element in the listbox and Control-Shift-End moves
the location cursor to the last element.
</li>
<li>The space and Select keys make a selection at the location cursor
(active element) just as if mouse button 1 had been pressed over
this element.
</li>
<li>In <b>extended</b> mode, Control-Shift-space and Shift-Select
extend the selection to the active element just as if button 1
had been pressed with the Shift key down.
</li>
<li>In <b>extended</b> mode, the Escape key cancels the most recent
selection and restores all the elements in the selected range
to their previous selection state.
</li>
<li>Control-slash selects everything in the widget, except in
<b>single</b> and <b>browse</b> modes, in which case it selects
the active element and deselects everything else.
</li>
<li>Control-backslash deselects everything in the widget, except in
<b>browse</b> mode where it has no effect.
</li>
<li>The F16 key (labelled Copy on many Sun workstations) or Meta-w
copies the selection in the widget to the clipboard, if there is
a selection.

</li>
</ol>
<p>The behavior of listboxes can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<keywords>
<keyword>listbox</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ListObj" version="8.0" title="Tcl_ListObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ListObj.3,v 1.10 2005/05/10 18:33:56 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_ListObj" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_ListObjAppendList</name>
<name>Tcl_ListObjAppendElement</name>
<name>Tcl_NewListObj</name>
<name>Tcl_SetListObj</name>
<name>Tcl_ListObjGetElements</name>
<name>Tcl_ListObjLength</name>
<name>Tcl_ListObjIndex</name>
<name>Tcl_ListObjReplace</name>
<desc>manipulate Tcl objects as lists</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_ListObjAppendList</fun>(<m>interp</m>, <m>listPtr</m>, <m>elemListPtr</m>)

int
<fun>Tcl_ListObjAppendElement</fun>(<m>interp</m>, <m>listPtr</m>, <m>objPtr</m>)

Tcl_Obj *
<fun>Tcl_NewListObj</fun>(<m>objc</m>, <m>objv</m>)

<fun>Tcl_SetListObj</fun>(<m>objPtr</m>, <m>objc</m>, <m>objv</m>)

int
<fun>Tcl_ListObjGetElements</fun>(<m>interp</m>, <m>listPtr</m>, <m>objcPtr</m>, <m>objvPtr</m>)

int
<fun>Tcl_ListObjLength</fun>(<m>interp</m>, <m>listPtr</m>, <m>intPtr</m>)

int
<fun>Tcl_ListObjIndex</fun>(<m>interp</m>, <m>listPtr</m>, <m>index</m>, <m>objPtrPtr</m>)

int
<fun>Tcl_ListObjReplace</fun>(<m>interp</m>, <m>listPtr</m>, <m>first</m>, <m>count</m>, <m>objc</m>, <m>objv</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>If an error occurs while converting an object to be a list object,
an error message is left in the interpreter's result object
unless <i>interp</i> is NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="listPtr">*listPtr</name>
<argmode>in/out</argmode>
<desc>Points to the list object to be manipulated.
If <i>listPtr</i> does not already point to a list object,
an attempt will be made to convert it to one.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="elemListPtr">*elemListPtr</name>
<argmode>in/out</argmode>
<desc>For <fun>Tcl_ListObjAppendList</fun>, this points to a list object
containing elements to be appended onto <i>listPtr</i>.
Each element of *<i>elemListPtr</i> will
become a new element of <i>listPtr</i>.
If *<i>elemListPtr</i> is not NULL and
does not already point to a list object,
an attempt will be made to convert it to one.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>For <fun>Tcl_ListObjAppendElement</fun>,
points to the Tcl object that will be appended to <i>listPtr</i>.
For <fun>Tcl_SetListObj</fun>,
this points to the Tcl object that will be converted to a list object
containing the <i>objc</i> elements of the array referenced by <i>objv</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="objcPtr">*objcPtr</name>
<argmode>in</argmode>
<desc>Points to location where <fun>Tcl_ListObjGetElements</fun>
stores the number of element objects in <i>listPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objvPtr">***objvPtr</name>
<argmode>out</argmode>
<desc>A location where <fun>Tcl_ListObjGetElements</fun> stores a pointer to an array
of pointers to the element objects of <i>listPtr</i>.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>The number of Tcl objects that <fun>Tcl_NewListObj</fun>
will insert into a new list object,
and <fun>Tcl_ListObjReplace</fun> will insert into <i>listPtr</i>.
For <fun>Tcl_SetListObj</fun>,
the number of Tcl objects to insert into <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *const</argtype>
<name name="objv">objv[]</name>
<argmode>in</argmode>
<desc>An array of pointers to objects.
<fun>Tcl_NewListObj</fun> will insert these objects into a new list object
and <fun>Tcl_ListObjReplace</fun> will insert them into an existing <i>listPtr</i>.
Each object will become a separate list element.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="intPtr">*intPtr</name>
<argmode>out</argmode>
<desc>Points to location where <fun>Tcl_ListObjLength</fun>
stores the length of the list.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>index</name>
<argmode>in</argmode>
<desc>Index of the list element that <fun>Tcl_ListObjIndex</fun>
is to return.
The first element has index 0.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtrPtr">**objPtrPtr</name>
<argmode>out</argmode>
<desc>Points to place where <fun>Tcl_ListObjIndex</fun> is to store
a pointer to the resulting list element object.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>first</name>
<argmode>in</argmode>
<desc>Index of the starting list element that <fun>Tcl_ListObjReplace</fun>
is to replace.
The list's first element has index 0.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>count</name>
<argmode>in</argmode>
<desc>The number of elements that <fun>Tcl_ListObjReplace</fun>
is to replace.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Tcl list objects have an internal representation that supports
the efficient indexing and appending.
The procedures described in this man page are used to
create, modify, index, and append to Tcl list objects from C code.
</p>
<p><fun>Tcl_ListObjAppendList</fun> and <fun>Tcl_ListObjAppendElement</fun>
both add one or more objects
to the end of the list object referenced by <i>listPtr</i>.
<fun>Tcl_ListObjAppendList</fun> appends each element of the list object
referenced by <i>elemListPtr</i> while
<fun>Tcl_ListObjAppendElement</fun> appends the single object
referenced by <i>objPtr</i>.
Both procedures will convert the object referenced by <i>listPtr</i>
to a list object if necessary.
If an error occurs during conversion,
both procedures return <b>TCL_ERROR</b> and leave an error message
in the interpreter's result object if <i>interp</i> is not NULL.
Similarly, if <i>elemListPtr</i> does not already refer to a list object,
<fun>Tcl_ListObjAppendList</fun> will attempt to convert it to one
and if an error occurs during conversion,
will return <b>TCL_ERROR</b>
and leave an error message in the interpreter's result object
if interp is not NULL.
Both procedures invalidate any old string representation of <i>listPtr</i>
and, if it was converted to a list object,
free any old internal representation.
Similarly, <fun>Tcl_ListObjAppendList</fun> frees any old internal representation
of <i>elemListPtr</i> if it converts it to a list object.
After appending each element in <i>elemListPtr</i>,
<fun>Tcl_ListObjAppendList</fun> increments the element's reference count
since <i>listPtr</i> now also refers to it.
For the same reason, <fun>Tcl_ListObjAppendElement</fun>
increments <i>objPtr</i>'s reference count.
If no error occurs,
the two procedures return <b>TCL_OK</b> after appending the objects.
</p>
<p><fun>Tcl_NewListObj</fun> and <fun>Tcl_SetListObj</fun>
create a new object or modify an existing object to hold 
the <i>objc</i> elements of the array referenced by <i>objv</i>
where each element is a pointer to a Tcl object.
If <i>objc</i> is less than or equal to zero,
they return an empty object.
The new object's string representation is left invalid.
The two procedures increment the reference counts
of the elements in <i>objc</i> since the list object now refers to them.
The new list object returned by <fun>Tcl_NewListObj</fun>
has reference count zero.
</p>
<p><fun>Tcl_ListObjGetElements</fun> returns a count and a pointer to an array of
the elements in a list object.  It returns the count by storing it in the
address <i>objcPtr</i>.  Similarly, it returns the array pointer by storing
it in the address <i>objvPtr</i>.
The memory pointed to is managed by Tcl and should not be freed or written
to by the caller. If the list is empty, 0 is stored at <i>objcPtr</i>
and NULL at <i>objvPtr</i>.
If <i>listPtr</i> is not already a list object, <fun>Tcl_ListObjGetElements</fun>
will attempt to convert it to one; if the conversion fails, it returns
<b>TCL_ERROR</b> and leaves an error message in the interpreter's result
object if <i>interp</i> is not NULL.
Otherwise it returns <b>TCL_OK</b> after storing the count and array pointer.
</p>
<p><fun>Tcl_ListObjLength</fun> returns the number of elements in the list object
referenced by <i>listPtr</i>.
It returns this count by storing an integer in the address <i>intPtr</i>.
If the object is not already a list object,
<fun>Tcl_ListObjLength</fun> will attempt to convert it to one;
if the conversion fails, it returns <b>TCL_ERROR</b>
and leaves an error message in the interpreter's result object
if <i>interp</i> is not NULL.
Otherwise it returns <b>TCL_OK</b> after storing the list's length.
</p>
<p>The procedure <fun>Tcl_ListObjIndex</fun> returns a pointer to the object
at element <i>index</i> in the list referenced by <i>listPtr</i>.
It returns this object by storing a pointer to it
in the address <i>objPtrPtr</i>.
If <i>listPtr</i> does not already refer to a list object,
<fun>Tcl_ListObjIndex</fun> will attempt to convert it to one;
if the conversion fails, it returns <b>TCL_ERROR</b>
and leaves an error message in the interpreter's result object
if <i>interp</i> is not NULL.
If the index is out of range,
that is, <i>index</i> is negative or
greater than or equal to the number of elements in the list,
<fun>Tcl_ListObjIndex</fun> stores a NULL in <i>objPtrPtr</i>
and returns <b>TCL_OK</b>.
Otherwise it returns <b>TCL_OK</b> after storing the element's
object pointer.
The reference count for the list element is not incremented;
the caller must do that if it needs to retain a pointer to the element.
</p>
<p><fun>Tcl_ListObjReplace</fun> replaces zero or more elements
of the list referenced by <i>listPtr</i>
with the <i>objc</i> objects in the array referenced by <i>objv</i>.
If <i>listPtr</i> does not point to a list object,
<fun>Tcl_ListObjReplace</fun> will attempt to convert it to one;
if the conversion fails, it returns <b>TCL_ERROR</b>
and leaves an error message in the interpreter's result object
if <i>interp</i> is not NULL.
Otherwise, it returns <b>TCL_OK</b> after replacing the objects.
If <i>objv</i> is NULL, no new elements are added.
If the argument <i>first</i> is zero or negative,
it refers to the first element.
If <i>first</i> is greater than or equal to the
number of elements in the list, then no elements are deleted;
the new elements are appended to the list.
<i>count</i> gives the number of elements to replace.
If <i>count</i> is zero or negative then no elements are deleted;
the new elements are simply inserted before the one
designated by <i>first</i>.
<fun>Tcl_ListObjReplace</fun> invalidates <i>listPtr</i>'s
old string representation.
The reference counts of any elements inserted from <i>objv</i>
are incremented since the resulting list now refers to them.
Similarly, the reference counts for any replaced objects are decremented.
</p>
<p>Because <fun>Tcl_ListObjReplace</fun> combines
both element insertion and deletion,
it can be used to implement a number of list operations.
For example, the following code inserts the <i>objc</i> objects
referenced by the array of object pointers <i>objv</i>
just before the element <i>index</i> of the list referenced by <i>listPtr</i>:
</p>
<example>
result = Tcl_ListObjReplace(interp, listPtr, index, 0, objc, objv);
</example>
<p>Similarly, the following code appends the <i>objc</i> objects
referenced by the array <i>objv</i>
to the end of the list <i>listPtr</i>:
</p>
<example>
result = Tcl_ListObjLength(interp, listPtr, &amp;length);
if (result == TCL_OK) {
    result = Tcl_ListObjReplace(interp, listPtr, length, 0, objc, objv);
}
</example>
<p>The <i>count</i> list elements starting at <i>first</i> can be deleted
by simply calling <fun>Tcl_ListObjReplace</fun>
with a NULL <i>objvPtr</i>:
</p>
<example>
result = Tcl_ListObjReplace(interp, listPtr, first, count, 0, NULL);
</example>


</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_GetObjResult</ref>
</seealso>
<keywords>
<keyword>append</keyword>
<keyword>index</keyword>
<keyword>insert</keyword>
<keyword>internal representation</keyword>
<keyword>length</keyword>
<keyword>list</keyword>
<keyword>list object</keyword>
<keyword>list type</keyword>
<keyword>object</keyword>
<keyword>object type</keyword>
<keyword>replace</keyword>
<keyword>string representation</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="llength" title="llength">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: llength.n,v 1.10 2005/05/10 18:34:00 kennykb Exp $
 -->
<?TROFF.TH title="llength" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>llength</name>
<desc>Count the number of elements in a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>llength</cmd> <m>list</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Treats <i>list</i> as a list and returns a decimal string giving
the number of elements in it.

</p>
</section>
<section>
<title>EXAMPLES</title>
<p>The result is the number of elements:
</p>
<example>
% <cmd>llength</cmd> {a b c d e}
5
% <cmd>llength</cmd> {a b c}
3
% <cmd>llength</cmd> {}
0
</example>
<p>Elements are not guaranteed to be exactly words in a dictionary sense
of course, especially when quoting is used:
</p>
<example>
% <cmd>llength</cmd> {a b {c d} e}
4
% <cmd>llength</cmd> {a b { } c d e}
6
</example>
<p>An empty list is not necessarily an empty string:
</p>
<example>
% set var { }; puts "[string length $var],[<cmd>llength</cmd> $var]"
1,0
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>length</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="load" version="7.5" title="load">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: load.n,v 1.16 2005/05/16 08:41:09 dkf Exp $
 -->
<?TROFF.TH title="load" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>load</name>
<desc>Load machine code and initialize new commands</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">load</b> <m>fileName</m>

<b cat="AMBIGUOUS ambiguous cmd">load</b> <m>fileName packageName</m>

<b cat="AMBIGUOUS ambiguous cmd">load</b> <m>fileName packageName interp</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command loads binary code from a file into the
application's address space and calls an initialization procedure
in the package to incorporate it into an interpreter.  <i>fileName</i>
is the name of the file containing the code;  its exact form varies
from system to system but on most systems it is a shared library,
such as a <b>.so</b> file under Solaris or a DLL under Windows.
<i>packageName</i> is the name of the package, and is used to
compute the name of an initialization procedure.
<i>interp</i> is the path name of the interpreter into which to load
the package (see the <cmd>interp</cmd> manual entry for details);
if <i>interp</i> is omitted, it defaults to the
interpreter in which the <b cat="AMBIGUOUS ambiguous cmd">load</b> command was invoked.
</p>
<p>Once the file has been loaded into the application's address space,
one of two initialization procedures will be invoked in the new code.
Typically the initialization procedure will add new commands to a
Tcl interpreter.
The name of the initialization procedure is determined by
<i>packageName</i> and whether or not the target interpreter
is a safe one.  For normal interpreters the name of the initialization
procedure will have the form <i>pkg</i><b>_Init</b>, where <i>pkg</i>
is the same as <i>packageName</i> except that the first letter is
converted to upper case and all other letters
are converted to lower case.  For example, if <i>packageName</i> is
<b>foo</b> or <b>FOo</b>, the initialization procedure's name will
be <b>Foo_Init</b>.
</p>
<p>If the target interpreter is a safe interpreter, then the name
of the initialization procedure will be <i>pkg</i><b>_SafeInit</b>
instead of <i>pkg</i><b>_Init</b>.
The <i>pkg</i><b>_SafeInit</b> function should be written carefully, so that it
initializes the safe interpreter only with partial functionality provided
by the package that is safe for use by untrusted code. For more information
on Safe-Tcl, see the <b>safe</b> manual entry.
</p>
<p>The initialization procedure must match the following prototype:
</p>
<syntax cat="type" name="Tcl_PackageInitProc" scope="global">
typedef int Tcl_PackageInitProc(Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>interp</i> argument identifies the interpreter in which the
package is to be loaded.  The initialization procedure must return
<b>TCL_OK</b> or <b>TCL_ERROR</b> to indicate whether or not it completed
successfully;  in the event of an error it should set the interpreter's result
to point to an error message.  The result of the <b cat="AMBIGUOUS ambiguous cmd">load</b> command
will be the result returned by the initialization procedure.
</p>
<p>The actual loading of a file will only be done once for each <i>fileName</i>
in an application.  If a given <i>fileName</i> is loaded into multiple
interpreters, then the first <b cat="AMBIGUOUS ambiguous cmd">load</b> will load the code and
call the initialization procedure;  subsequent <b cat="AMBIGUOUS ambiguous cmd">load</b>s will
call the initialization procedure without loading the code again.
<new version="8.5">For Tcl versions lower than 8.5, it is not possible to unload or reload a
package. From version 8.5 however, the <b>unload</b> command allows the unloading
of libraries loaded with <b cat="AMBIGUOUS ambiguous cmd">load</b>, for libraries that are aware of the
Tcl's unloading mechanism.
</new></p>
<p>The <b cat="AMBIGUOUS ambiguous cmd">load</b> command also supports packages that are statically
linked with the application, if those packages have been registered
by calling the <fun>Tcl_StaticPackage</fun> procedure.
If <i>fileName</i> is an empty string, then <i>packageName</i> must
be specified.
</p>
<p>If <i>packageName</i> is omitted or specified as an empty string,
Tcl tries to guess the name of the package.
This may be done differently on different platforms.
The default guess, which is used on most UNIX platforms, is to
take the last element of <i>fileName</i>, strip off the first
three characters if they are <b>lib</b>, and use any following
alphabetic and underline characters as the module name.
For example, the command <b>load libxyz4.2.so</b> uses the module
name <b>xyz</b> and the command <b>load bin/last.so {}</b> uses the
module name <b>last</b>.
</p>
<p>If <i>fileName</i> is an empty string, then <i>packageName</i> must
be specified.
The <b cat="AMBIGUOUS ambiguous cmd">load</b> command first searches for a statically loaded package
(one that has been registered by calling the <fun>Tcl_StaticPackage</fun>
procedure) by that name; if one is found, it is used.
Otherwise, the <b cat="AMBIGUOUS ambiguous cmd">load</b> command searches for a dynamically loaded
package by that name, and uses it if it is found.  If several
different files have been <b cat="AMBIGUOUS ambiguous cmd">load</b>ed with different versions of
the package, Tcl picks the file that was loaded first.
</p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<dl>
<dle>
<dt><b>Windows</b>     </dt>
<dd>When a load fails with "library not found" error, it is also possible
that a dependent library was not found.  To see the dependent libraries,
type ``dumpbin -imports &lt;dllname&gt;'' in a DOS console to see what the
library must import.
When loading a DLL in the current directory, Windows will ignore ``./'' as
a path specifier and use a search heuristic to find the DLL instead.
To avoid this, load the DLL with:
<example>
<b cat="AMBIGUOUS ambiguous cmd">load</b> [file join [pwd] mylib.DLL]
</example></dd>
</dle>
</dl>
</section>
<section>
<title>BUGS</title>
<p>If the same file is <b cat="AMBIGUOUS ambiguous cmd">load</b>ed by different <i>fileName</i>s, it will
be loaded into the process's address space multiple times.  The
behavior of this varies from system to system (some systems may
detect the redundant loads, others may not).
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>The following is a minimal extension:
</p>
<example>
#include &lt;tcl.h&gt;
#include &lt;stdio.h&gt;
static int fooCmd(ClientData clientData,
        Tcl_Interp *interp, int objc, Tcl_Obj *const objv[]) {
    printf("called with %d arguments\n", objc);
    return TCL_OK;
}
int Foo_Init(Tcl_Interp *interp) {
    if (Tcl_InitStubs(interp, "8.1", 0) == NULL) {
	return TCL_ERROR;
    }
    printf("creating foo command");
    Tcl_CreateObjCommand(interp, "foo", fooCmd, NULL, NULL);
    return TCL_OK;
}
</example>
<p>When built into a shared/dynamic library with a suitable name
(e.g. <b>foo.dll</b> on Windows, <b>libfoo.so</b> on Solaris and Linux)
it can then be loaded into Tcl with the following:
</p>
<example>
# Load the extension
switch $tcl_platform(platform) {
   windows {
      <b cat="AMBIGUOUS ambiguous cmd">load</b> [file join [pwd] foo.dll]
   }
   unix {
      <b cat="AMBIGUOUS ambiguous cmd">load</b> ./libfoo[info sharedlibextension]
   }
}

# Now execute the command defined by the extension
foo
</example>


</section>
<seealso>
<ref>info sharedlibextension</ref>
<ref>Tcl_StaticPackage(3)</ref>
<ref>safe(n)</ref>
</seealso>
<keywords>
<keyword>binary code</keyword>
<keyword>loading</keyword>
<keyword>safe interpreter</keyword>
<keyword>shared library</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="loadTk" version="8.0" title="Safe Tk">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: loadTk.n,v 1.7 2005/01/05 16:40:39 dkf Exp $
 -->
<?TROFF.TH title="Safe Tk" section="n" date="8.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>loadTk</name>
<desc>Load Tk into a safe interpreter.</desc>
</namesection>
<synopsis>
<syntax>
<b>::safe::loadTk</b> <m>slave</m> ?<b>-use</b> <m>windowId</m>? ?<b>-display</b> <m>displayName</m>? 
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>Safe Tk is based on Safe Tcl, which provides a mechanism 
that allows restricted and mediated
access to auto-loading and packages for safe interpreters.
Safe Tk adds the ability to configure the interpreter
for safe Tk operations and load Tk into safe 
interpreters.
</p>
<p>The <b>::safe::loadTk</b> command initializes the required data structures
in the named safe interpreter and then loads Tk into it.
The interpreter must have been created with <cmd>::safe::interpCreate</cmd>
or have been initialized with <cmd>::safe::interpInit</cmd>.
The command returns the name of the safe interpreter.
If <b>-use</b> is specified, the window identified by the specified system
dependent identifier <i>windowId</i> is used to contain the ``.''
window of the safe interpreter; it can be any valid id, eventually 
referencing a window belonging to another application. As a convenience,
if the window you plan to use is a Tk Window of the application you
can use the window name (e.g. <b>.x.y</b>) instead of its window Id 
(<b>[winfo id .x.y]</b>).
When <b>-use</b> is not specified,
a new toplevel window is created for the ``.'' window of
the safe interpreter. On X11 if you want the embedded window
to use another display than the default one, specify it with
<b>-display</b>.
See the <ref refid="security-issues">SECURITY ISSUES</ref> section below for implementation details.

</p>
</section>
<section id="security-issues">
<title>SECURITY ISSUES</title>
<p>Please read the <b>safe</b> manual page for Tcl to learn about the basic
security considerations for Safe Tcl.
</p>
<p><b>::safe::loadTk</b> adds the value of <b>tk_library</b> taken from the master
interpreter to the virtual access path of the safe interpreter so that
auto-loading will work in the safe interpreter.
</p>
<p>Tk initialization is now safe with respect to not trusting
the slave's state for startup. <b>::safe::loadTk</b>
registers the slave's name so
when the Tk initialization (<fun>Tk_SafeInit</fun>) is called
and in turn calls the master's <b>::safe::InitTk</b> it will
return the desired <b cat="variable">argv</b> equivalent (<b>-use</b> 
<i>windowId</i>, correct <b>-display</b>, etc.)
</p>
<p>When <b>-use</b> is not used, the new toplevel created is specially
decorated so the user is always aware that the user interface presented comes
from a potentially unsafe code and can easily delete the corresponding
interpreter.
</p>
<p>On X11, conflicting <b>-use</b> and <b>-display</b> are likely
to generate a fatal X error.

</p>
</section>
<seealso>
<ref>safe(n)</ref>
<ref>interp(n)</ref>
<ref>library(n)</ref>
<ref>load(n)</ref>
<ref>package(n)</ref>
<ref>source(n)</ref>
<ref>unknown(n)</ref>
</seealso>
<keywords>
<keyword>alias</keyword>
<keyword>auto-loading</keyword>
<keyword>auto_mkindex</keyword>
<keyword>load</keyword>
<keyword>master interpreter</keyword>
<keyword>safe
interpreter</keyword>
<keyword>slave interpreter</keyword>
<keyword>source</keyword>
</keywords>
</manpage>
<manpage version="3.3" cat="cmd" title="lower" id="lower">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lower.n,v 1.2 1998/09/14 18:22:57 stanton Exp $
 -->
<?TROFF.TH title="lower" section="n" date="3.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>lower</name>
<desc>Change a window's position in the stacking order</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">lower</b> <m>window</m> ?<m>belowThis</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>If the <i>belowThis</i> argument is omitted then the command lowers
<i>window</i> so that it is below all of its siblings in the stacking
order (it will be obscured by any siblings that overlap it and
will not obscure any siblings).
If <i>belowThis</i> is specified then it must be the path name of
a window that is either a sibling of <i>window</i> or the descendant
of a sibling of <i>window</i>.
In this case the <b cat="AMBIGUOUS ambiguous cmd">lower</b> command will insert
<i>window</i> into the stacking order just below <i>belowThis</i>
(or the ancestor of <i>belowThis</i> that is a sibling of <i>window</i>);
this could end up either raising or lowering <i>window</i>.

</p>
</section>
<seealso>
<ref>raise</ref>
</seealso>
<keywords>
<keyword>lower</keyword>
<keyword>obscure</keyword>
<keyword>stacking order</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lrange" version="7.4" title="lrange">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lrange.n,v 1.12 2005/05/10 18:34:01 kennykb Exp $
 -->
<?TROFF.TH title="lrange" section="n" date="7.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lrange</name>
<desc>Return one or more adjacent elements from a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lrange</cmd> <m>list first last</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><i>List</i> must be a valid Tcl list.  This command will
return a new list consisting of elements
<i>first</i> through <i>last</i>, inclusive.
<new version="8.5">The index values <i>first</i> and <i>last</i> are interpreted
the same as index values for the command <b>string index</b>,
supporting simple index arithmetic and indices relative to the
end of the list.
</new>If <i>first</i> is less than zero, it is treated as if it were zero.
If <i>last</i> is greater than or equal to the number of elements
in the list, then it is treated as if it were <b>end</b>.
If <i>first</i> is greater than <i>last</i> then an empty string
is returned.
Note: ``<cmd>lrange</cmd> <i>list first first</i>'' does not always produce the
same result as ``<cmd>lindex</cmd> <i>list first</i>'' (although it often does
for simple fields that aren't enclosed in braces); it does, however,
produce exactly the same results as ``<b>list [lindex</b> <i>list first</i><b>]</b>''
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Selecting the first two elements:
</p>
<example>
% <cmd>lrange</cmd> {a b c d e} 0 1
a b
</example>
<p>Selecting the last three elements:
</p>
<example>
% <cmd>lrange</cmd> {a b c d e} end-2 end
c d e
</example>
<p>Selecting everything except the first and last element:
</p>
<example>
% <cmd>lrange</cmd> {a b c d e} 1 end-1
b c d
</example>
<p>Selecting a single element with <cmd>lrange</cmd> is not the same as doing
so with <cmd>lindex</cmd>:
</p>
<example>
% set var {some {elements to} select}
some {elements to} select
% lindex $var 1
elements to
% <cmd>lrange</cmd> $var 1 1
{elements to}
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lreplace(n)</ref>
<ref>lsort(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>range</keyword>
<keyword>sublist</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lrepeat" version="8.5" title="lrepeat">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 by Simon Geard.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lrepeat.n,v 1.2 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="lrepeat" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lrepeat</name>
<desc>Build a list by repeating elements</desc>
</namesection>
<synopsis>
<syntax>
<b>lrepeat</b> <m>number element1</m> ?<m>element2 element3 ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>lrepeat</b> command creates a list of size <i>number * number of
elements</i> by repeating <i>number</i> times the sequence of elements
<i>element1 element2 ...</i>.  <i>number</i> must be a positive integer,
<i>elementn</i> can be any Tcl value.  Note that <b>lrepeat 1 arg ...</b>
is identical to <b>list arg ...</b>, though the <i>arg</i> is required
with <b>lrepeat</b>.
</p>
</section>
<section>
<title>EXAMPLES</title>
<example>
lrepeat 3 a  =&gt; a a a
lrepeat 3 [lrepeat 3 0] =&gt; {0 0 0} {0 0 0} {0 0 0}
lrepeat 3 a b c =&gt; a b c a b c a b c
lrepeat 3 [lrepeat 2 a] b c =&gt; {a a} b c {a a} b c {a a} b c
</example>
</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lset(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>index</keyword>
<keyword>list</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lreplace" version="7.4" title="lreplace">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lreplace.n,v 1.13 2005/05/10 18:34:01 kennykb Exp $
 -->
<?TROFF.TH title="lreplace" section="n" date="7.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lreplace</name>
<desc>Replace elements in a list with new elements</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lreplace</cmd> <m>list first last</m> ?<m>element element ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><cmd>lreplace</cmd> returns a new list formed by replacing one or more elements of
<i>list</i> with the <i>element</i> arguments.
<new version="8.5"><i>first</i> and <i>last</i> are index values specifying the first and
last elements of the range to replace.  
The index values <i>first</i> and <i>last</i> are interpreted
the same as index values for the command <b>string index</b>,
supporting simple index arithmetic and indices relative to the
end of the list.
0 refers to the first element of the
list, and <b>end</b> refers to the last element of the list.
If <i>list</i> is empty, then <i>first</i> and <i>last</i> are ignored.
</new>
If <i>first</i> is less than zero, it is considered to refer to the
first element of the list.  For non-empty lists, the element indicated
by <i>first</i> must exist.

If <i>last</i> is less than zero but greater than <i>first</i>, then any
specified elements will be prepended to the list.  If <i>last</i> is
less than <i>first</i> then no elements are deleted; the new elements
are simply inserted before <i>first</i>.

The <i>element</i> arguments specify zero or more new arguments to
be added to the list in place of those that were deleted.
Each <i>element</i> argument will become a separate element of
the list.  If no <i>element</i> arguments are specified, then the elements
between <i>first</i> and <i>last</i> are simply deleted.  If <i>list</i>
is empty, any <i>element</i> arguments are added to the end of the list.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Replacing an element of a list with another:
</p>
<example>
% <cmd>lreplace</cmd> {a b c d e} 1 1 foo
a foo c d e
</example>
<p>Replacing two elements of a list with three:
</p>
<example>
% <cmd>lreplace</cmd> {a b c d e} 1 2 three more elements
a three more elements d e
</example>
<p>Deleting the last element from a list in a variable:
</p>
<example>
% set var {a b c d e}
a b c d e
% set var [<cmd>lreplace</cmd> $var end end]
a b c d
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lrange(n)</ref>
<ref>lsort(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>replace</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lreverse" version="8.5" title="lreverse">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  -*- nroff -*-
     Copyright (c) 2006 by Donal K. Fellows.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lreverse.n,v 1.2 2006/11/15 09:23:02 dkf Exp $
 -->
<?TROFF.TH title="lreverse" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lreverse</name>
<desc>Reverse the order of a list</desc>
</namesection>
<synopsis>
<syntax>
<b>lreverse</b> <m>list</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>lreverse</b> command returns a list that has the same elements as its
input list, <i>list</i>, except with the elements in the reverse order.
</p>
</section>
<section>
<title>EXAMPLES</title>
<example>
<b>lreverse</b> {a a b c}        =&gt; c b a a
<b>lreverse</b> {a b {c d} e f}  =&gt; f e {c d} b a
</example>
</section>
<seealso>
<ref>list(n)</ref>
<ref>lsearch(n)</ref>
<ref>lsort(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>reverse</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lsearch" version="8.5" title="lsearch">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
     Copyright (c) 2003-2004 Donal K. Fellows.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lsearch.n,v 1.26 2005/07/12 09:39:53 dkf Exp $
 -->
<?TROFF.TH title="lsearch" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lsearch</name>
<desc>See if a list contains a particular element</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lsearch</cmd> ?<m>options</m>? <m>list pattern</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command searches the elements of <i>list</i> to see if one
of them matches <i>pattern</i>.  If so, the command returns the index
of the first matching element
(unless the options <b>-all</b> or <b>-inline</b> are specified.)
If not, the command returns <b>-1</b>.  The <i>option</i> arguments
indicates how the elements of the list are to be matched against
<i>pattern</i> and must have one of the values below:
</p>
<subsection>
<title>MATCHING STYLE OPTIONS</title>
<p>If all matching style options are omitted, the default matching style
is <b>-glob</b>.  If more than one matching style is specified, the
last matching style given takes precedence.
</p>
<dl>
<dle>
<dt><b>-exact</b></dt>
<dd><i>Pattern</i> is a literal string that is compared for exact equality
against each list element.
</dd>
</dle>
<dle>
<dt><b>-glob</b></dt>
<dd><i>Pattern</i> is a glob-style pattern which is matched against each list
element using the same rules as the <b>string match</b> command.
</dd>
</dle>
<dle>
<dt><b>-regexp</b></dt>
<dd><i>Pattern</i> is treated as a regular expression and matched against
each list element using the rules described in the <b>re_syntax</b>
reference page.
</dd>
</dle>
<dle>
<dt><b>-sorted</b></dt>
<dd>The list elements are in sorted order.  If this option is specified,
<cmd>lsearch</cmd> will use a more efficient searching algorithm to search
<i>list</i>.  If no other options are specified, <i>list</i> is assumed
to be sorted in increasing order, and to contain ASCII strings.  This
option is mutually exclusive with <b>-glob</b> and <b>-regexp</b>, and
is treated exactly like <b>-exact</b> when either <b>-all</b> or
<b>-not</b> are specified.
</dd>
</dle>
</dl>
</subsection>
<subsection>
<title>GENERAL MODIFIER OPTIONS</title>
<p>These options may be given with all matching styles.
</p>
<dl>
<dle>
<dt><b>-all</b></dt>
<dd>Changes the result to be the list of all matching indices (or all
matching values if <b>-inline</b> is specified as well.)
</dd>
</dle>
<dle>
<dt><b>-inline</b></dt>
<dd>The matching value is returned instead of its index (or an empty
string if no value matches.)  If <b>-all</b> is also specified, then
the result of the command is the list of all values that matched.
</dd>
</dle>
<dle>
<dt><b>-not</b></dt>
<dd>This negates the sense of the match, returning the index of the first
non-matching value in the list.
</dd>
</dle>
<dle>
<dt><b>-start</b> <m>index</m></dt>
<dd>The list is searched starting at position <i>index</i>.  
<new version="8.5">The interpretation of the <i>index</i> value is the same as
for the command <b>string index</b>, supporting simple index
arithmetic and indices relative to the end of the list.
</new></dd>
</dle>
</dl>
</subsection>
<subsection>
<title>CONTENTS DESCRIPTION OPTIONS</title>
<p>These options describe how to interpret the items in the list being
searched.  They are only meaningful when used with the <b>-exact</b>
and <b>-sorted</b> options.  If more than one is specified, the last
one takes precedence.  The default is <b>-ascii</b>.
</p>
<dl>
<dle>
<dt><b>-ascii</b></dt>
<dd>The list elements are to be examined as Unicode strings (the name is
for backward-compatibility reasons.)
</dd>
</dle>
<dle>
<dt><b>-dictionary</b></dt>
<dd>The list elements are to be compared using dictionary-style
comparisons (see <cmd>lsort</cmd> for a fuller description). Note that this
only makes a meaningful difference from the <b>-ascii</b> option when
the <b>-sorted</b> option is given, because values are only
dictionary-equal when exactly equal.
</dd>
</dle>
<dle>
<dt><b>-integer</b></dt>
<dd>The list elements are to be compared as integers.
</dd>
</dle>
<dle version="8.5">
<dt><b>-nocase</b></dt>
<dd>Causes comparisons to be handled in a case-insensitive manner.  Has no
effect if combined with the <b>-dictionary</b>, <b>-integer</b>, or 
<b>-real</b> options.
</dd>
</dle>
<dle>
<dt><b>-real</b></dt>
<dd>The list elements are to be compared as floating-point values.
</dd>
</dle>
</dl>
</subsection>
<subsection>
<title>SORTED LIST OPTIONS</title>
<p>These options (only meaningful with the <b>-sorted</b> option) specify
how the list is sorted.  If more than one is given, the last one takes
precedence.  The default option is <b>-increasing</b>.
</p>
<dl>
<dle>
<dt><b>-decreasing</b></dt>
<dd>The list elements are sorted in decreasing order.  This option is only
meaningful when used with <b>-sorted</b>.
</dd>
</dle>
<dle>
<dt><b>-increasing</b></dt>
<dd>The list elements are sorted in increasing order.  This option is only
meaningful when used with <b>-sorted</b>.
</dd>
</dle>
</dl>
</subsection>
<subsection>
<title>NESTED LIST OPTIONS</title>
<?NEW 8.5?>
<p version="8.5">These options are used to search lists of lists.  They may be used
with any other options.
</p>
<dl>
<dle>
<dt><b>-index</b> <m>indexList</m></dt>
<dd>This option is designed for use when searching within nested lists.
The <i>indexList</i> argument gives a path of indices (much as might be
used with the <cmd>lindex</cmd> or <cmd>lset</cmd> commands) within each element
to allow the location of the term being matched against.
</dd>
</dle>
<dle>
<dt><b>-subindices</b></dt>
<dd>If this option is given, the index result from this command (or every
index result when <b>-all</b> is also specified) will be a complete
path (suitable for use with <cmd>lindex</cmd> or <cmd>lset</cmd>) within the
overall list to the term found.  This option has no effect unless the
<i>-index</i> is also specified, and is just a convenience short-cut.
</dd>
</dle>
</dl>
<?ENDNEW 8.5?>
</subsection>
</section>
<section>
<title>EXAMPLES</title>
<p>Basic searching:
</p>
<example>
<cmd>lsearch</cmd> {a b c d e} c
      =&gt; 2
<cmd>lsearch</cmd> -all {a b c a b c} c
      =&gt; 2 5
</example>


<p>Using <cmd>lsearch</cmd> to filter lists:
</p>
<example>
<cmd>lsearch</cmd> -inline {a20 b35 c47} b*
      =&gt; b35
<cmd>lsearch</cmd> -inline -not {a20 b35 c47} b*
      =&gt; a20
<cmd>lsearch</cmd> -all -inline -not {a20 b35 c47} b*
      =&gt; a20 c47
<cmd>lsearch</cmd> -all -not {a20 b35 c47} b*
      =&gt; 0 2
</example>
<p>This can even do a "set-like" removal operation:
</p>
<example>
<cmd>lsearch</cmd> -all -inline -not -exact {a b c a d e a f g a} a
      =&gt; b c d e f g
</example>


<p>Searching may start part-way through the list:
</p>
<example>
<cmd>lsearch</cmd> -start 3 {a b c a b c} c
      =&gt; 5
</example>


<p>It is also possible to search inside elements:
</p>
<example>
<cmd>lsearch</cmd> -index 1 -all -inline {{a abc} {b bcd} {c cde}} *bc*
      =&gt; {a abc} {b bcd}
</example>


</section>
<seealso>
<ref>foreach(n)</ref>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lset(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>list</keyword>
<keyword>match</keyword>
<keyword>pattern</keyword>
<keyword>regular expression</keyword>
<keyword>search</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lset" version="8.4" title="lset">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 by Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lset.n,v 1.9 2005/05/10 18:34:02 kennykb Exp $
 -->
<?TROFF.TH title="lset" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lset</name>
<desc>Change an element in a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lset</cmd> <m>varName ?index...? newValue</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>lset</cmd> command accepts a parameter, <i>varName</i>, which
it interprets as the name of a variable containing a Tcl list. 
It also accepts zero or more <i>indices</i> into
the list.  The indices may be presented either consecutively on the
command line, or grouped in a
Tcl list and presented as a single argument.
Finally, it accepts a new value for an element of <i>varName</i>.
</p>
<p>If no indices are presented, the command takes the form:
</p>
<example>
lset varName newValue
</example>
<p>or
</p>
<example>
lset varName {} newValue
</example>
<p>In this case, <i>newValue</i> replaces the old value of the variable
<i>varName</i>.
</p>
<p>When presented with a single index, the <cmd>lset</cmd> command
treats the content of the <i>varName</i> variable as a Tcl list.
It addresses the <i>index</i>'th element in it 
(0 refers to the first element of the list).
When interpreting the list, <cmd>lset</cmd> observes the same rules
concerning braces and quotes and backslashes as the Tcl command
interpreter; however, variable
substitution and command substitution do not occur.
The command constructs a new list in which the designated element is
replaced with <i>newValue</i>.  This new list is stored in the
variable <i>varName</i>, and is also the return value from the <cmd>lset</cmd>
command.
</p>
<p>If <i>index</i> is negative or greater than or equal to the number
of elements in <i>$varName</i>, then an error occurs.
</p>
<p><new version="8.5">The interpretation of each simple <i>index</i> value is the same as
for the command <b>string index</b>, supporting simple index
arithmetic and indices relative to the end of the list.
</new></p>
<p>If additional <i>index</i> arguments are supplied, then each argument is
used in turn to address an element within a sublist designated
by the previous indexing operation,
allowing the script to alter elements in sublists.  The command,
</p>
<example>
lset a 1 2 newValue
</example>
<p>or
</p>
<example>
lset a {1 2} newValue
</example>
<p>replaces element 2 of sublist 1 with <i>newValue</i>.
</p>
<p>The integer appearing in each <i>index</i> argument must be greater
than or equal to zero.  The integer appearing in each <i>index</i>
argument must be strictly less than the length of the corresponding
list.  In other words, the <cmd>lset</cmd> command cannot change the size
of a list.  If an index is outside the permitted range, an error is reported.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>In each of these examples, the initial value of <i>x</i> is:
</p>
<example>
set x [list [list a b c] [list d e f] [list g h i]]
  =&gt; {a b c} {d e f} {g h i}
</example>
<p>The indicated return value also becomes the new value of <i>x</i>
(except in the last case, which is an error which leaves the value of
<i>x</i> unchanged.)
</p>
<example>
lset x {j k l} =&gt; j k l
lset x {} {j k l} =&gt; j k l
lset x 0 j =&gt; j {d e f} {g h i}
lset x 2 j =&gt; {a b c} {d e f} j
lset x end j =&gt; {a b c} {d e f} j
lset x end-1 j =&gt; {a b c} j {g h i}
lset x 2 1 j =&gt; {a b c} {d e f} {g j i}
lset x {2 1} j =&gt; {a b c} {d e f} {g j i}
lset x {2 3} j =&gt; <i>list index out of range</i>
</example>
<p>In the following examples, the initial value of <i>x</i> is:
</p>
<example>
set x [list [list [list a b] [list c d]] \
            [list [list e f] [list g h]]]
 =&gt; {{a b} {c d}} {{e f} {g h}}
</example>
<p>The indicated return value also becomes the new value of <i>x</i>.
</p>
<example>
lset x 1 1 0 j =&gt; {{a b} {c d}} {{e f} {j h}}
lset x {1 1 0} j =&gt; {{a b} {c d}} {{e f} {j h}}
</example>
</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lsort(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>index</keyword>
<keyword>list</keyword>
<keyword>replace</keyword>
<keyword>set</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="lsort" version="8.5" title="lsort">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1999 Scriptics Corporation
     Copyright (c) 2001 Kevin B. Kenny.  All rights reserved.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: lsort.n,v 1.21 2005/06/01 11:00:33 dkf Exp $
 -->
<?TROFF.TH title="lsort" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>lsort</name>
<desc>Sort the elements of a list</desc>
</namesection>
<synopsis>
<syntax>
<cmd>lsort</cmd> ?<m>options</m>? <m>list</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command sorts the elements of <i>list</i>, returning a new
list in sorted order.  The implementation of the <cmd>lsort</cmd> command
uses the merge-sort algorithm which is a stable sort that has O(n log
n) performance characteristics.
</p>
<p>By default ASCII sorting is used with the result returned in
increasing order.  However, any of the following options may be
specified before <i>list</i> to control the sorting process (unique
abbreviations are accepted):
</p>
<dl>
<dle>
<dt><b>-ascii</b></dt>
<dd>Use string comparison with Unicode code-point collation order (the
name is for backward-compatibility reasons.)  This is the default.
</dd>
</dle>
<dle>
<dt><b>-dictionary</b></dt>
<dd>Use dictionary-style comparison.  This is the same as <b>-ascii</b>
except (a) case is ignored except as a tie-breaker and (b) if two
strings contain embedded numbers, the numbers compare as integers,
not characters.  For example, in <b>-dictionary</b> mode, <b>bigBoy</b>
sorts between <b>bigbang</b> and <b>bigboy</b>, and <b>x10y</b>
sorts between <b>x9y</b> and <b>x11y</b>.
</dd>
</dle>
<dle>
<dt><b>-integer</b></dt>
<dd>Convert list elements to integers and use integer comparison.
</dd>
</dle>
<dle>
<dt><b>-real</b></dt>
<dd>Convert list elements to floating-point values and use floating comparison.
</dd>
</dle>
<dle>
<dt><b>-command</b> <m>command</m></dt>
<dd>Use <i>command</i> as a comparison command.
To compare two elements, evaluate a Tcl script consisting of
<i>command</i> with the two elements appended as additional
arguments.  The script should return an integer less than,
equal to, or greater than zero if the first element is to
be considered less than, equal to, or greater than the second,
respectively.
</dd>
</dle>
<dle>
<dt><b>-increasing</b></dt>
<dd>Sort the list in increasing order (``smallest'' items first).
This is the default.
</dd>
</dle>
<dle>
<dt><b>-decreasing</b></dt>
<dd>Sort the list in decreasing order (``largest'' items first).
</dd>
</dle>
<dle>
<dt><b>-indices</b></dt>
<dd><new version="8.5 (TIP#217)">Return a list of indices into <i>list</i> in sorted order instead of
the values themselves.
</new></dd>
</dle>
<dle>
<dt><b>-index</b> <m>indexList</m></dt>
<dd>If this option is specified, each of the elements of <i>list</i> must
itself be a proper Tcl sublist.  Instead of sorting based on whole
sublists, <cmd>lsort</cmd> will extract the <i>indexList</i>'th element from
each sublist
<new version="8.5">(as if the overall element and the <i>indexList</i> were passed to
<cmd>lindex</cmd>) and sort based on the given element.  
</new>For example,
<example>
lsort -integer -index 1 {{First 24} {Second 18} {Third 30}}
</example><p>returns <b>{Second 18} {First 24} {Third 30}</b>, and
</p><example>
lsort -index end-1 {{a 1 e i} {b 2 3 f g} {c 4 5 6 d h}}
</example><p>returns <b>{c 4 5 6 d h} {a 1 e i} {b 2 3 f g}</b>,
<?NEW 8.5?>and
</p><example>
lsort -index {0 1} {{{b i g} 12345} {{d e m o} 34512} {{c o d e} 54321}}
</example><p>returns <b>{{d e m o} 34512} {{b i g} 12345} {{c o d e} 54321}</b>
(because <b>e</b> sorts before <b>i</b> which sorts before <b>o</b>.)
<?ENDNEW CONFUSED 8.5?>This option is much more efficient than using <b>-command</b>
to achieve the same effect.
</p></dd>
</dle>
<dle version="8.5">
<dt><b>-nocase</b></dt>
<dd>Causes comparisons to be handled in a case-insensitive manner.  Has no
effect if combined with the <b>-dictionary</b>, <b>-integer</b>, or 
<b>-real</b> options.
</dd>
</dle>
<dle>
<dt><b>-unique</b></dt>
<dd>If this option is specified, then only the last set of duplicate
elements found in the list will be retained.  Note that duplicates are
determined relative to the comparison used in the sort.  Thus if 
<i>-index 0</i> is used, <b>{1 a}</b> and <b>{1 b}</b> would be
considered duplicates and only the second element, <b>{1 b}</b>, would
be retained.
</dd>
</dle>
</dl>
</section>
<section>
<title>NOTES</title>
<p>The options to <cmd>lsort</cmd> only control what sort of comparison is
used, and do not necessarily constrain what the values themselves
actually are.  This distinction is only noticeable when the list to be
sorted has fewer than two elements.
</p>
<p>The <cmd>lsort</cmd> command is reentrant, meaning it is safe to use as
part of the implementation of a command used in the <b>-command</b>
option.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Sorting a list using ASCII sorting:
</p>
<example>
% <cmd>lsort</cmd> {a10 B2 b1 a1 a2}
B2 a1 a10 a2 b1
</example>
<p>Sorting a list using Dictionary sorting:
</p>
<example>
% <cmd>lsort</cmd> -dictionary {a10 B2 b1 a1 a2}
a1 a2 a10 b1 B2
</example>
<p>Sorting lists of integers:
</p>
<example>
% <cmd>lsort</cmd> -integer {5 3 1 2 11 4}
1 2 3 4 5 11
% <cmd>lsort</cmd> -integer {1 2 0x5 7 0 4 -1}
-1 0 1 2 4 0x5 7
</example>
<p>Sorting lists of floating-point numbers:
</p>
<example>
% <cmd>lsort</cmd> -real {5 3 1 2 11 4}
1 2 3 4 5 11
% <cmd>lsort</cmd> -real {.5 0.07e1 0.4 6e-1}
0.4 .5 6e-1 0.07e1
</example>
<p>Sorting using indices:
</p>
<example>
% # Note the space character before the c
% <cmd>lsort</cmd> {{a 5} { c 3} {b 4} {e 1} {d 2}}
{ c 3} {a 5} {b 4} {d 2} {e 1}
% <cmd>lsort</cmd> -index 0 {{a 5} { c 3} {b 4} {e 1} {d 2}}
{a 5} {b 4} { c 3} {d 2} {e 1}
% <cmd>lsort</cmd> -index 1 {{a 5} { c 3} {b 4} {e 1} {d 2}}
{e 1} {d 2} { c 3} {b 4} {a 5}
</example>
<p>Stripping duplicate values using sorting:
</p>
<example>
% <cmd>lsort</cmd> -unique {a b c a b c a b c}
a b c
</example>
<p>More complex sorting using a comparison function:
</p>
<example>
% proc compare {a b} {
    set a0 [lindex $a 0]
    set b0 [lindex $b 0]
    if {$a0 &lt; $b0} {
        return -1
    } elseif {$a0 &gt; $b0} {
        return 1
    }
    return [string compare [lindex $a 1] [lindex $b 1]]
}
% <cmd>lsort</cmd> -command compare \
        {{3 apple} {0x2 carrot} {1 dingo} {2 banana}}
{1 dingo} {2 banana} {0x2 carrot} {3 apple}
</example>


</section>
<seealso>
<ref>list(n)</ref>
<ref>lappend(n)</ref>
<ref>lindex(n)</ref>
<ref>linsert(n)</ref>
<ref>llength(n)</ref>
<ref>lsearch(n)</ref>
<ref>lset(n)</ref>
<ref>lrange(n)</ref>
<ref>lreplace(n)</ref>
</seealso>
<keywords>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>order</keyword>
<keyword>sort</keyword>
</keywords>
</manpage>
<manpage version="8.1" cat="fun" title="Tcl_MacSetEventProc" id="Macintosh">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Macintosh.3,v 1.5 2003/07/18 16:56:41 dgp Exp $
 -->
<?TROFF.TH title="Tcl_MacSetEventProc" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_MacSetEventProc</name>
<name>Tcl_MacConvertTextResource</name>
<name>Tcl_MacEvalResource</name>
<name>Tcl_MacFindResource</name>
<name>Tcl_GetOSTypeFromObj</name>
<name>Tcl_SetOSTypeObj</name>
<name>Tcl_NewOSTypeObj</name>
<desc>procedures to handle Macintosh resources and other Macintosh specifics</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_MacEvalResource</fun>(<m>interp</m>, <m>resourceName</m>, <m>resourceNumber</m>, <m>fileName</m>)

char*
<fun>Tcl_MacConvertTextResource</fun>(<m>resource</m>)

Handle
<fun>Tcl_MacFindResource</fun>(<m>interp</m>, <m>resourceType</m>, <m>resourceName</m>, <m>resourceNumber</m>, <m>resFileRef</m>, <m>releaseIt</m>)

Tcl_Obj*
<fun>Tcl_NewOSTypeObj</fun>(<m>newOSType</m>)

void
<fun>Tcl_SetOSTypeObj</fun>(<m>objPtr</m>, <m>newOSType</m>)

int
<fun>Tcl_GetOSTypeFromObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>osTypePtr</m>)

void
<fun>Tcl_MacSetEventProc</fun>(<m>procPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting, or NULL if no error reporting is
desired.
</desc>
</argdef>
<argdef>
<argtype>CONST char</argtype>
<name name="resourceName">*resourceName</name>
<argmode>in</argmode>
<desc>Name of TEXT resource to source, NULL if number should be used.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>resourceNumber</name>
<argmode>in</argmode>
<desc>Resource id of source.
</desc>
</argdef>
<argdef>
<argtype>CONST char</argtype>
<name name="fileName">*fileName</name>
<argmode>in</argmode>
<desc>Name of file to process. NULL if application resource.
</desc>
</argdef>
<argdef>
<argtype>Handle</argtype>
<name>resource</name>
<argmode>in</argmode>
<desc>Handle to TEXT resource.
</desc>
</argdef>
<argdef>
<argtype>long</argtype>
<name>resourceType</name>
<argmode>in</argmode>
<desc>Type of resource to load.
</desc>
</argdef>
<argdef>
<argtype>CONST char</argtype>
<name name="resFileRef">*resFileRef</name>
<argmode>in</argmode>
<desc>Registered resource file reference, NULL if searching all open resource files.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="releaseIt">*releaseIt</name>
<argmode>out</argmode>
<desc>Should we release this resource when done.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>newOSType</name>
<argmode>in</argmode>
<desc>Int used to initialize the new object or set the object's value.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Object whose internal representation is to be set or retrieved.
</desc>
</argdef>
<argdef>
<argtype>osTypePtr</argtype>
<name>out</name>
<argmode/>
<desc>Place to store the resulting integer.
</desc>
</argdef>
<argdef>
<argtype>Tcl_MacConvertEventPtr</argtype>
<name>procPtr</name>
<argmode>in</argmode>
<desc>Reference to the new function to handle all incoming Mac events.

</desc>
</argdef>
</arglist>
</section>
<section>
<title>INTRODUCTION</title>
<p>The described routines are used to implement the Macintosh specific
<b>resource</b> command and the Mac specific notifier.. They manipulate
or use Macintosh resources and provide administration for open
resource file references.

</p>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_MacEvalResource</fun> extends the <b cat="AMBIGUOUS ambiguous cmd">source</b> command to
Macintosh resources.  It sources Tcl code from a Text resource.
Currently only sources the resource by name, file IDs may be supported
at a later date.
</p>
<p><fun>Tcl_MacConvertTextResource</fun> converts a TEXT resource into a Tcl
suitable string. It mallocs the returned memory, converts ``\r'' to
``\n'', and appends a null. The caller has the responsibility for
freeing the memory.
</p>
<p><fun>Tcl_MacFindResource</fun> provides a higher level interface for
loading resources. It is used by <b>resource read</b>.
</p>
<p><fun>Tcl_NewOSTypeObj</fun> is used to create a new resource name type
object. The object type is "ostype".
</p>
<p><fun>Tcl_SetOSTypeObj</fun> modifies an object to be a resource type and to
have the specified long value.
</p>
<p><fun>Tcl_GetOSTypeFromObj</fun> attempts to return an int from the Tcl
object "objPtr". If the object is not already an int, an attempt will
be made to convert it to one.
</p>
<p><fun>Tcl_MacSetEventProc</fun> sets the event handling procedure for the
application. This function will be passed all incoming Mac events.
This function usually controls the console or some other entity like
Tk.

</p>
</section>
<section>
<title>RESOURCE TYPES</title>
<p>Resource types are 4-byte values used by the macintosh resource
facility to tag parts of the resource fork in a file so that the OS
knows how to handle them. As all 4 bytes are restricted to printable
characters such a type can be interpreted as a 4 character string too.

</p>
</section>
<keywords>
<keyword>macintosh</keyword>
<keyword>mac</keyword>
<keyword>resource</keyword>
<keyword>notifier</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_MainLoop" id="MainLoop">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MainLoop.3,v 1.2 1998/09/14 18:22:52 stanton Exp $
 -->
<?TROFF.TH title="Tk_MainLoop" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MainLoop</name>
<desc>loop for events until all windows are deleted</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_MainLoop</fun>()
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_MainLoop</fun> is a procedure that loops repeatedly calling
<fun>Tcl_DoOneEvent</fun>.  It returns only when there are no applications
left in this process (i.e. no main windows exist anymore).  Most
windowing applications will call <fun>Tk_MainLoop</fun> after
initialization; the main execution of the application will consist
entirely of callbacks invoked via <fun>Tcl_DoOneEvent</fun>.

</p>
</section>
<keywords>
<keyword>application</keyword>
<keyword>event</keyword>
<keyword>main loop</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_MaintainGeometry" id="MaintGeom">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MaintGeom.3,v 1.3 2000/10/05 00:50:00 ericm Exp $
 -->
<?TROFF.TH title="Tk_MaintainGeometry" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MaintainGeometry</name>
<name>Tk_UnmaintainGeometry</name>
<desc>maintain geometry of one window relative to another</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_MaintainGeometry</fun>(<m>slave</m>, <m>master</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m>)

<fun>Tk_UnmaintainGeometry</fun>(<m>slave</m>, <m>master</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>slave</name>
<argmode>in</argmode>
<desc>Window whose geometry is to be controlled.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>master</name>
<argmode>in</argmode>
<desc>Window relative to which <i>slave</i>'s geometry will be controlled.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>Desired x-coordinate of <i>slave</i> in <i>master</i>, measured in pixels
from the inside of <i>master</i>'s left border to the outside of
<i>slave</i>'s left border.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Desired y-coordinate of <i>slave</i> in <i>master</i>, measured in pixels
from the inside of <i>master</i>'s top border to the outside of
<i>slave</i>'s top border.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>Desired width for <i>slave</i>, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>Desired height for <i>slave</i>, in pixels.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_MaintainGeometry</fun> and <fun>Tk_UnmaintainGeometry</fun> make it
easier for geometry managers to deal with slaves whose masters are not
their parents.
Three problems arise if the master for a slave is not its parent:
</p>
<ol>
<li>The x- and y-position of the slave must be translated from the
coordinate system of the master to that of the parent before
positioning the slave.
</li>
<li>If the master window, or any of its ancestors up to the slave's
parent, is moved, then the slave must be repositioned within its
parent in order to maintain the correct position relative to the
master.
</li>
<li>If the master or one of its ancestors is mapped or unmapped, then
the slave must be mapped or unmapped to correspond.
</li>
</ol>
<p>None of these problems is an issue if the parent and master are
the same.  For example, if the master or one of its ancestors
is unmapped, the slave is automatically removed by the screen
by X.
</p>
<p><fun>Tk_MaintainGeometry</fun> deals with these problems for slaves
whose masters aren't their parents, as well as handling the simpler
case of slaves whose masters are their parents.
<fun>Tk_MaintainGeometry</fun> is typically called by a window manager
once it has decided where a slave should be positioned relative
to its master.
<fun>Tk_MaintainGeometry</fun> translates the coordinates to the
coordinate system of <i>slave</i>'s parent and then moves and
resizes the slave appropriately.
Furthermore, it remembers the desired position and creates event
handlers to monitor the master and all of its ancestors up
to (but not including) the slave's parent.
If any of these windows is moved, mapped, or unmapped,
the slave will be adjusted so that it is mapped only when the
master is mapped and its geometry relative to the master
remains as specified by <i>x</i>, <i>y</i>, <i>width</i>, and
<i>height</i>.
</p>
<p>When a window manager relinquishes control over a window, or
if it decides that it does not want the window to appear on the
screen under any conditions, it calls <fun>Tk_UnmaintainGeometry</fun>.
<fun>Tk_UnmaintainGeometry</fun> unmaps the window and cancels any
previous calls to <fun>Tk_MaintainGeometry</fun> for the
<i>master</i>-<i>slave</i> pair, so that the slave's
geometry and mapped state are no longer maintained
automatically.
<fun>Tk_UnmaintainGeometry</fun> need not be called by a geometry
manager if the slave, the master, or any of the master's ancestors
is destroyed:  Tk will call it automatically.
</p>
<p>If <fun>Tk_MaintainGeometry</fun> is called repeatedly for the same
<i>master</i>-<i>slave</i> pair, the information from the most
recent call supersedes any older information.
If <fun>Tk_UnmaintainGeometry</fun> is called for a <i>master</i>-<i>slave</i>
pair that is isn't currently managed, the call has no effect.

</p>
</section>
<keywords>
<keyword>geometry manager</keyword>
<keyword>map</keyword>
<keyword>master</keyword>
<keyword>parent</keyword>
<keyword>position</keyword>
<keyword>slave</keyword>
<keyword>unmap</keyword>
</keywords>
</manpage>
<manpage version="7.0" cat="fun" title="Tk_MainWindow" id="MainWin">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MainWin.3,v 1.3 2000/04/25 01:42:18 ericm Exp $
 -->
<?TROFF.TH title="Tk_MainWindow" section="3" date="7.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MainWindow</name>
<name>Tk_GetNumMainWindows</name>
<desc>functions for querying main
window information</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_MainWindow</fun>(<m>interp</m>)

int
<fun>Tk_GetNumMainWindows</fun>()

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>Interpreter associated with the application.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>A main window is a special kind of toplevel window used as the
outermost window in an application.
</p>
<p>If <i>interp</i> is associated with a Tk application then <fun>Tk_MainWindow</fun>
returns the application's main window. If there is no Tk application
associated with <i>interp</i> then <fun>Tk_MainWindow</fun> returns NULL and
leaves an error message in <i>interp-&gt;result</i>.
</p>
<p><fun>Tk_GetNumMainWindows</fun> returns a count of the number of main
windows currently open in the process.

</p>
</section>
<keywords>
<keyword>application</keyword>
<keyword>main window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ManageGeom" version="4.0" title="Tk_ManageGeometry">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ManageGeom.3,v 1.4 2007/01/03 05:06:27 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_ManageGeometry" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ManageGeometry</name>
<desc>arrange to handle geometry requests for a window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_ManageGeometry</fun>(<m>tkwin</m>, <m>mgrPtr</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window to be managed.
</desc>
</argdef>
<argdef>
<argtype>const Tk_GeomMgr</argtype>
<name name="mgrPtr">*mgrPtr</name>
<argmode>in</argmode>
<desc>Pointer to data structure containing information about the
geometry manager, or NULL to indicate that <i>tkwin</i>'s geometry
shouldn't be managed anymore.
The data structure pointed to by <i>mgrPtr</i> must be static:
Tk keeps a reference to it as long as the window is managed.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to geometry manager callbacks.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_ManageGeometry</fun> arranges for a particular geometry manager,
described by the <i>mgrPtr</i> argument, to control the geometry
of a particular slave window, given by <i>tkwin</i>.
If <i>tkwin</i> was previously managed by some other geometry manager,
the previous manager loses control in favor of the new one.
If <i>mgrPtr</i> is NULL, geometry management is cancelled for
<i>tkwin</i>.
</p>
<p>The structure pointed to by <i>mgrPtr</i> contains information about
the geometry manager:
</p>
<syntax cat="type" name="Tk_GeomMgr" scope="global">
typedef struct {
    const char *<i>name</i>;
    Tk_GeomRequestProc *<i>requestProc</i>;
    Tk_GeomLostSlaveProc *<i>lostSlaveProc</i>;
} Tk_GeomMgr;
</syntax>
<p>The <i>name</i> field is the textual name for the geometry manager,
such as <cmd>pack</cmd> or <cmd>place</cmd>;  this value will be returned
by the command <b>winfo manager</b>.
</p>
<p><i>requestProc</i> is a procedure in the geometry manager that
will be invoked whenever <fun>Tk_GeometryRequest</fun> is called by the
slave to change its desired geometry.
<i>requestProc</i> should have arguments and results that match the
type <type>Tk_GeomRequestProc</type>:
</p>
<syntax cat="type" name="Tk_GeomRequestProc" scope="global">
typedef void Tk_GeomRequestProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>);
</syntax>
<p>The parameters to <i>requestProc</i> will be identical to the
corresponding parameters passed to <fun>Tk_ManageGeometry</fun>.
<i>clientData</i> usually points to a data
structure containing application-specific information about
how to manage <i>tkwin</i>'s geometry.
</p>
<p>The <i>lostSlaveProc</i> field of <i>mgrPtr</i> points to another
procedure in the geometry manager.
Tk will invoke <i>lostSlaveProc</i> if some other manager
calls <fun>Tk_ManageGeometry</fun> to claim
<i>tkwin</i> away from the current geometry manager.
<i>lostSlaveProc</i> is not invoked if <fun>Tk_ManageGeometry</fun> is
called with a NULL value for <i>mgrPtr</i> (presumably the current
geometry manager has made this call, so it already knows that the
window is no longer managed), nor is it called if <i>mgrPtr</i>
is the same as the window's current geometry manager.
<i>lostSlaveProc</i> should have
arguments and results that match the following prototype:
</p>
<syntax cat="type" name="Tk_GeomLostSlaveProc" scope="global">
typedef void Tk_GeomLostSlaveProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>);
</syntax>
<p>The parameters to <i>lostSlaveProc</i> will be identical to the
corresponding parameters passed to <fun>Tk_ManageGeometry</fun>.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>geometry</keyword>
<keyword>managed</keyword>
<keyword>request</keyword>
<keyword>unmanaged</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_MapWindow" id="MapWindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MapWindow.3,v 1.4 1999/04/21 21:53:22 rjohnson Exp $
 -->
<?TROFF.TH title="Tk_MapWindow" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MapWindow</name>
<name>Tk_UnmapWindow</name>
<desc>map or unmap a window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Window
<fun>Tk_MapWindow</fun>(<m>tkwin</m>)

<fun>Tk_UnmapWindow</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures may be used to map and unmap windows
managed by Tk.  <fun>Tk_MapWindow</fun> maps the window given
by <i>tkwin</i>, and also creates an X window corresponding
to <i>tkwin</i> if it doesn't already exist.  See the
<fun>Tk_CreateWindow</fun> manual entry for information on
deferred window creation.
<fun>Tk_UnmapWindow</fun> unmaps <i>tkwin</i>'s window
from the screen.
</p>
<p>If <i>tkwin</i> is a child window (i.e. <fun>Tk_CreateWindow</fun> was
used to create a child window), then event handlers interested in map 
and unmap events are invoked immediately.  If <i>tkwin</i> isn't an 
internal window, then the event handlers will be invoked later, after 
X has seen the request and returned an event for it.
</p>
<p>These procedures should be used in place of the X procedures
<b>XMapWindow</b> and <b>XUnmapWindow</b>, since they update
Tk's local data structure for <i>tkwin</i>.  Applications
using Tk should not invoke <b>XMapWindow</b> and <b>XUnmapWindow</b>
directly.

</p>
</section>
<keywords>
<keyword>map</keyword>
<keyword>unmap</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="mathfunc" version="8.5" title="mathfunc">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-2000 Sun Microsystems, Inc.
     Copyright (c) 2005 by Kevin B. Kenny <kennykb@acm.org>. All rights reserved
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: mathfunc.n,v 1.13 2006/12/06 01:42:00 das Exp $
 -->
<?TROFF.TH title="mathfunc" section="n" date="8.5" source="Tcl" manual="Tcl Mathematical Functions" ?>
<namesection>
<name>mathfunc</name>
<desc>Mathematical functions for Tcl expressions</desc>
</namesection>
<synopsis>
<syntax>
package require <b>Tcl 8.5</b>

<b>::tcl::mathfunc::abs</b> <m>arg</m>

<b>::tcl::mathfunc::acos</b> <m>arg</m>

<b>::tcl::mathfunc::asin</b> <m>arg</m>

<b>::tcl::mathfunc::atan</b> <m>arg</m>

<b>::tcl::mathfunc::atan2</b> <m>y</m> <m>x</m>

<b>::tcl::mathfunc::bool</b> <m>arg</m>

<b>::tcl::mathfunc::ceil</b> <m>arg</m>

<b>::tcl::mathfunc::cos</b> <m>arg</m>

<b>::tcl::mathfunc::cosh</b> <m>arg</m>

<b>::tcl::mathfunc::double</b> <m>arg</m>

<new version="8.5"><b>::tcl::mathfunc::entier</b> <m>arg</m>

</new><b>::tcl::mathfunc::exp</b> <m>arg</m>

<b>::tcl::mathfunc::floor</b> <m>arg</m>

<b>::tcl::mathfunc::fmod</b> <m>x</m> <m>y</m>

<b>::tcl::mathfunc::hypot</b> <m>x</m> <m>y</m>

<b>::tcl::mathfunc::int</b> <m>arg</m>

<b>::tcl::mathfunc::isqrt</b> <m>arg</m>

<b>::tcl::mathfunc::log</b> <m>arg</m>

<b>::tcl::mathfunc::log10</b> <m>arg</m>

<b>::tcl::mathfunc::max</b> <m>arg</m> ?<m>arg</m> ...?

<b>::tcl::mathfunc::min</b> <m>arg</m> ?<m>arg</m> ...?

<b>::tcl::mathfunc::pow</b> <m>x</m> <m>y</m>

<b>::tcl::mathfunc::rand</b>

<b>::tcl::mathfunc::round</b> <m>arg</m>

<b>::tcl::mathfunc::sin</b> <m>arg</m>

<b>::tcl::mathfunc::sinh</b> <m>arg</m>

<b>::tcl::mathfunc::sqrt</b> <m>arg</m>

<b>::tcl::mathfunc::srand</b> <m>arg</m>

<b>::tcl::mathfunc::tan</b> <m>arg</m>

<b>::tcl::mathfunc::tanh</b> <m>arg</m>

<b>::tcl::mathfunc::wide</b> <m>arg</m>

</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <cmd>expr</cmd> command handles mathematical functions of the form
<b>sin($x)</b> or <b>atan2($y,$x)</b> by converting them to calls of the
form <b>[tcl::mathfunc::sin [expr {$x}]]</b> or
<b>[tcl::mathfunc::atan2 [expr {$y}] [expr {$x}]]</b>.
A number of math functions are available by default within the
namespace <b>::tcl::mathfunc</b>; these functions are also available
for code apart from <cmd>expr</cmd>, by invoking the given commands
directly.
</p>
<p>Tcl supports the following mathematical functions in expressions, all
of which work solely with floating-point numbers unless otherwise noted:
</p>
<?TABSTOPS 3c 6c 9c?>
<sl cols="4">
<li>abs</li>
<li>acos</li>
<li>asin</li>
<li>atan</li>
<li>atan2</li>
<li>bool</li>
<li>ceil</li>
<li>cos</li>
<li>cosh</li>
<li>double</li>
<li>entier</li>
<li>exp</li>
<li>floor</li>
<li>fmod</li>
<li>hypot</li>
<li>int</li>
<li>isqrt</li>
<li>log</li>
<li>log10</li>
<li>max</li>
<li>min</li>
<li>pow</li>
<li>rand</li>
<li>round</li>
<li>sin</li>
<li>sinh</li>
<li>sqrt</li>
<li>srand</li>
<li>tan</li>
<li>tanh</li>
<li>wide</li>
</sl>
<dl>
<dle>
<dt><b>abs(</b><m>arg</m><b>)</b></dt>
<dd>Returns the absolute value of <i>arg</i>.  <i>Arg</i> may be either
integer or floating-point, and the result is returned in the same form.
</dd>
</dle>
<dle>
<dt><b>acos(</b><m>arg</m><b>)</b></dt>
<dd>Returns the arc cosine of <i>arg</i>, in the range [<i>0</i>,<i>pi</i>]
radians. <i>Arg</i> should be in the range [<i>-1</i>,<i>1</i>].
</dd>
</dle>
<dle>
<dt><b>asin(</b><m>arg</m><b>)</b></dt>
<dd>Returns the arc sine of <i>arg</i>, in the range [<i>-pi/2</i>,<i>pi/2</i>]
radians.  <i>Arg</i> should be in the range [<i>-1</i>,<i>1</i>].
</dd>
</dle>
<dle>
<dt><b>atan(</b><m>arg</m><b>)</b></dt>
<dd>Returns the arc tangent of <i>arg</i>, in the range [<i>-pi/2</i>,<i>pi/2</i>]
radians.
</dd>
</dle>
<dle>
<dt><b>atan2(</b><m>y, x</m><b>)</b></dt>
<dd>Returns the arc tangent of <i>y</i>/<i>x</i>, in the range [<i>-pi</i>,<i>pi</i>]
radians.  <i>x</i> and <i>y</i> cannot both be 0.  If <i>x</i> is greater
than <i>0</i>, this is equivalent to <b>atan(</b><i>y/x</i><b>)</b>.
</dd>
</dle>
<dle>
<dt><b>bool(</b><m>arg</m><b>)</b></dt>
<dd>Accepts any numeric value, or any string acceptable to
<b>string is boolean</b>, and returns the corresponding 
boolean value <b>0</b> or <b>1</b>.  Non-zero numbers are true.
Other numbers are false.  Non-numeric strings produce boolean value in
agreement with <b>string is true</b> and <b>string is false</b>.
</dd>
</dle>
<dle>
<dt><b>ceil(</b><m>arg</m><b>)</b></dt>
<dd>Returns the smallest integral floating-point value (i.e. with a zero
fractional part) not less than <i>arg</i>.  The argument may be any
numeric value.
</dd>
</dle>
<dle>
<dt><b>cos(</b><m>arg</m><b>)</b></dt>
<dd>Returns the cosine of <i>arg</i>, measured in radians.
</dd>
</dle>
<dle>
<dt><b>cosh(</b><m>arg</m><b>)</b></dt>
<dd>Returns the hyperbolic cosine of <i>arg</i>.  If the result would cause
an overflow, an error is returned.
</dd>
</dle>
<dle>
<dt><b>double(</b><m>arg</m><b>)</b></dt>
<dd>The argument may be any numeric value,
If <i>arg</i> is a floating-point value, returns <i>arg</i>, otherwise converts
<i>arg</i> to floating-point and returns the converted value.  May return
<b>Inf</b> or <b>-Inf</b> when the argument is a numeric value that exceeds
the floating-point range.
</dd>
</dle>
<dle>
<dt><b>entier(</b><m>arg</m><b>)</b></dt>
<dd><new version="8.5">The argument may be any numeric value.  The integer part of <i>arg</i>
is determined and returned.  The integer range returned by this function
is unlimited, unlike functions <b>int()</b> and <b>wide()</b> which
truncate their range to fit in particular storage widths.
</new></dd>
</dle>
<dle>
<dt><b>exp(</b><m>arg</m><b>)</b></dt>
<dd>Returns the exponential of <i>arg</i>, defined as <i>e</i>**<i>arg</i>.
If the result would cause an overflow, an error is returned.
</dd>
</dle>
<dle>
<dt><b>floor(</b><m>arg</m><b>)</b></dt>
<dd>Returns the largest integral floating-point value (i.e. with a zero
fractional part) not greater than <i>arg</i>.  The argument may be
any numeric value.
</dd>
</dle>
<dle>
<dt><b>fmod(</b><m>x, y</m><b>)</b></dt>
<dd>Returns the floating-point remainder of the division of <i>x</i> by
<i>y</i>.  If <i>y</i> is 0, an error is returned.
</dd>
</dle>
<dle>
<dt><b>hypot(</b><m>x, y</m><b>)</b></dt>
<dd>Computes the length of the hypotenuse of a right-angled triangle
<b>sqrt(</b><i>x</i>*<i>x</i>+<i>y</i>*<i>y</i><b>)</b>.
</dd>
</dle>
<dle>
<dt><b>int(</b><m>arg</m><b>)</b></dt>
<dd>The argument may be any numeric value.  The integer part of <i>arg</i>
is determined, and then the low order bits of that integer value up
to the machine word size are returned as an integer value.  For reference,
the number of bytes in the machine word are stored in
<b>tcl_platform(wordSize)</b>.
</dd>
</dle>
<dle>
<dt><b>isqrt(</b><m>arg</m><b>)</b></dt>
<dd>Computes the integer part of the square root of <i>arg</i>.  <i>Arg</i> must be
a positive value, either an integer or a floating point number.
Unlike <b cat="mathfunc">sqrt</b>, which is limited to the precision of a floating point
number, <i>isqrt</i> will return a result of arbitrary precision.
</dd>
</dle>
<dle>
<dt><b>log(</b><m>arg</m><b>)</b></dt>
<dd>Returns the natural logarithm of <i>arg</i>.  <i>Arg</i> must be a
positive value.
</dd>
</dle>
<dle>
<dt><b>log10(</b><m>arg</m><b>)</b></dt>
<dd>Returns the base 10 logarithm of <i>arg</i>.  <i>Arg</i> must be a
positive value.
</dd>
</dle>
<dle>
<dt><b>max(</b><m>arg</m><b>,</b> <m>...</m><b>)</b></dt>
<dd>Accepts one or more numeric arguments.  Returns the one argument
with the greatest value.
</dd>
</dle>
<dle>
<dt><b>min(</b><m>arg</m><b>,</b> <m>...</m><b>)</b></dt>
<dd>Accepts one or more numeric arguments.  Returns the one argument
with the least value.
</dd>
</dle>
<dle>
<dt><b>pow(</b><m>x, y</m><b>)</b></dt>
<dd>Computes the value of <i>x</i> raised to the power <i>y</i>.  If <i>x</i>
is negative, <i>y</i> must be an integer value.
</dd>
</dle>
<dle>
<dt><b>rand()</b></dt>
<dd>Returns a pseudo-random floating-point value in the range (<i>0</i>,<i>1</i>).  
The generator algorithm is a simple linear congruential generator that
is not cryptographically secure.  Each result from <b cat="mathfunc">rand</b> completely
determines all future results from subsequent calls to <b cat="mathfunc">rand</b>, so
<b cat="mathfunc">rand</b> should not be used to generate a sequence of secrets, such as
one-time passwords.  The seed of the generator is initialized from the
internal clock of the machine or may be set with the <b cat="mathfunc">srand</b> function.
</dd>
</dle>
<dle>
<dt><b>round(</b><m>arg</m><b>)</b></dt>
<dd>If <i>arg</i> is an integer value, returns <i>arg</i>, otherwise converts
<i>arg</i> to integer by rounding and returns the converted value.
</dd>
</dle>
<dle>
<dt><b>sin(</b><m>arg</m><b>)</b></dt>
<dd>Returns the sine of <i>arg</i>, measured in radians.
</dd>
</dle>
<dle>
<dt><b>sinh(</b><m>arg</m><b>)</b></dt>
<dd>Returns the hyperbolic sine of <i>arg</i>.  If the result would cause
an overflow, an error is returned.
</dd>
</dle>
<dle>
<dt><b>sqrt(</b><m>arg</m><b>)</b></dt>
<dd>The argument may be any non-negative numeric value.  Returns a floating-point
value that is the square root of <i>arg</i>.  May return <b>Inf</b> when the
argument is a numeric value that exceeds the square of the maximum value of
the floating-point range.
</dd>
</dle>
<dle>
<dt><b>srand(</b><m>arg</m><b>)</b></dt>
<dd>The <i>arg</i>, which must be an integer, is used to reset the seed for
the random number generator of <b cat="mathfunc">rand</b>.  Returns the first random
number (see <b>rand()</b>) from that seed.  Each interpreter has its own seed.
</dd>
</dle>
<dle>
<dt><b>tan(</b><m>arg</m><b>)</b></dt>
<dd>Returns the tangent of <i>arg</i>, measured in radians.
</dd>
</dle>
<dle>
<dt><b>tanh(</b><m>arg</m><b>)</b></dt>
<dd>Returns the hyperbolic tangent of <i>arg</i>.
</dd>
</dle>
<dle>
<dt><b>wide(</b><m>arg</m><b>)</b></dt>
<dd>The argument may be any numeric value.  The integer part of <i>arg</i>
is determined, and then the low order 64 bits of that integer value
are returned as an integer value.  
</dd>
</dle>
</dl>
<p>In addition to these predefined functions, applications may
define additional functions by using <cmd>proc</cmd> (or any other method,
such as <b>interp alias</b> or <fun>Tcl_CreateObjCommand</fun>) to define
new commands in the <b>tcl::mathfunc</b> namespace.  In addition, an
obsolete interface named <fun>Tcl_CreateMathFunc</fun>() is available to
extensions that are written in C. The latter interface is not recommended
for new implementations.
</p>
</section>
<seealso>
<ref>expr(n)</ref>
<ref>namespace(n)</ref>
</seealso>
<section>
<title>COPYRIGHT</title>
<p>Copyright (c) 1993 The Regents of the University of California.
<br/>Copyright (c) 1994-2000 Sun Microsystems Incorporated.
<br/>Copyright (c) 2005, 2006 by Kevin B. Kenny &lt;kennykb@acm.org&gt;.
</p>
</section>
</manpage>
<manpage cat="cmd" id="mathop" version="8.5" title="mathop">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  -*- nroff -*-
     Copyright (c) 2006 Donal K. Fellows.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: mathop.n,v 1.4 2006/12/19 14:22:06 dkf Exp $
 -->
<?TROFF.TH title="mathop" section="n" date="8.5" source="Tcl" manual="Tcl Mathematical Operator Commands" ?>
<namesection>
<name>mathop</name>
<desc>Mathematical operators as Tcl commands</desc>
</namesection>
<synopsis>
<syntax>
package require <b>Tcl 8.5</b>

<b>::tcl::mathop::!</b> <m>number</m>

<b>::tcl::mathop::~</b> <m>number</m>

<b>::tcl::mathop::+</b> ?<m>number</m> ...?

<b>::tcl::mathop::-</b> <m>number</m> ?<m>number</m> ...?

<b>::tcl::mathop::*</b> ?<m>number</m> ...?

<b>::tcl::mathop::/</b> <m>number</m> ?<m>number</m> ...?

<b>::tcl::mathop::%</b> <m>number number</m>

<b>::tcl::mathop::**</b> ?<m>number</m> ...?

<b>::tcl::mathop::&amp;</b> ?<m>number</m> ...?

<b>::tcl::mathop::|</b> ?<m>number</m> ...?

<b>::tcl::mathop::^</b> ?<m>number</m> ...?

<b>::tcl::mathop::&lt;&lt;</b> <m>number number</m>

<b>::tcl::mathop::&gt;&gt;</b> <m>number number</m>

<b>::tcl::mathop::==</b> ?<m>arg</m> ...?

<b>::tcl::mathop::!=</b> <m>arg arg</m>

<b>::tcl::mathop::&lt;</b> ?<m>arg</m> ...?

<b>::tcl::mathop::&lt;=</b> ?<m>arg</m> ...?

<b>::tcl::mathop::=&gt;</b> ?<m>arg</m> ...?

<b>::tcl::mathop::&gt;</b> ?<m>arg</m> ...?

<b>::tcl::mathop::eq</b> ?<m>arg</m> ...?

<b>::tcl::mathop::ne</b> <m>arg arg</m>

<b>::tcl::mathop::in</b> <m>arg list</m>

<b>::tcl::mathop::ni</b> <m>arg list</m>

</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The commands in the <b>::tcl::mathop</b> namespace implement the same set of
operations as supported by the <cmd>expr</cmd> command. All are exported from the
namespace, but are not imported into any other namespace by default. Note that
renaming, reimplementing or deleting any of the commands in the namespace does
<i>not</i> alter the way that the <cmd>expr</cmd> command behaves, and nor does
defining any new commands in the <b>::tcl::mathop</b> namespace.
</p>
<p>The following operator commands are supported:
</p>
<?TABSTOPS 2c 4c 6c 8c?>
<sl cols="5">
<li>!</li>
<li>!=</li>
<li>%</li>
<li>&amp;</li>
<li>*</li>
<li>**</li>
<li>+</li>
<li>-</li>
<li>/</li>
<li>&lt;</li>
<li>&lt;&lt;</li>
<li>&lt;=</li>
<li>==</li>
<li>&gt;</li>
<li>&gt;=</li>
<li>&gt;&gt;</li>
<li>^</li>
<li>eq</li>
<li>in</li>
<li>ne</li>
<li>ni</li>
<li>|</li>
<li>~</li>
</sl>
<p>The behaviors of the operator commands are as follows:
</p>
<dl>
<dle>
<dt><b>~</b> <m>number</m></dt>
<dd>Returns the bit-wise negation of <i>number</i>. <i>Number</i> may be an integer
of any size.
</dd>
</dle>
<dle>
<dt><b>!</b> <m>number</m></dt>
<dd>Returns the boolean negation of <i>number</i>. <i>Number</i> may be any numeric
value or any other form of boolean value.
</dd>
</dle>
<dle>
<dt><b>+</b> ?<m>number</m> ...?</dt>
<dd>Returns the sum of arbitrarily many arguments. Each <i>number</i> may be any
numeric value. If no arguments are given, the result will be zero.
</dd>
</dle>
<dle>
<dt><b>-</b> <m>number</m> ?<m>number</m> ...?</dt>
<dd>Returns the either the negation of the first argument (if only one argument is
given) or the result of subtracting arbitrarily many additional arguments from
the first argument. Each <i>number</i> may be any numeric value. At least one
argument must be given.
</dd>
</dle>
<dle>
<dt><b>*</b> ?<m>number</m> ...?</dt>
<dd>Returns the product of arbitrarily many arguments. Each <i>number</i> may be
any numeric value. If no arguments are given, the result will be one.
</dd>
</dle>
<dle>
<dt><b>/</b> <m>number</m> ?<m>number</m> ...?</dt>
<dd>Returns the either the reciprocal of the first argument (if only one argument
is given) or the result of dividing the first argument by arbitrarily many
additional arguments. Each <i>number</i> may be any numeric value. At least one
argument must be given.
</dd>
</dle>
<dle>
<dt><b>%</b> <m>number number</m></dt>
<dd>Returns the integral modulus of the first argument with respect to the second.
Each <i>number</i> must have an integral value.
</dd>
</dle>
<dle>
<dt><b>**</b> ?<m>number</m> ...?</dt>
<dd>Returns the result of raising each value to the power of the result of
recursively operating on the result of processing the following arguments, so
<b>** 2 3 4</b> is the same as <b>** 2 [** 3 4]</b>. Each <i>number</i> may be
any numeric value, though the second number must not be fractional if the
first is negative. If no arguments are given, the result will be one, and if
only one argument is given, the result will be that argument.
</dd>
</dle>
<dle>
<dt><b>&amp;</b> ?<m>number</m> ...?</dt>
<dd>Returns the bit-wise AND of each of the arbitrarily many arguments. Each
<i>number</i> must have an integral value. If no arguments are given, the
result will be minus one.
</dd>
</dle>
<dle>
<dt><b>|</b> ?<m>number</m> ...?</dt>
<dd>Returns the bit-wise OR of each of the arbitrarily many arguments. Each
<i>number</i> must have an integral value. If no arguments are given, the
result will be zero.
</dd>
</dle>
<dle>
<dt><b>^</b> ?<m>number</m> ...?</dt>
<dd>Returns the bit-wise XOR of each of the arbitrarily many arguments. Each
<i>number</i> must have an integral value. If no arguments are given, the
result will be zero.
</dd>
</dle>
<dle>
<dt><b>&lt;&lt;</b> <m>number number</m></dt>
<dd>Returns the result of shifting the first argument left by the number of bits
specified in the second argument. Each <i>number</i> must have an integral
value.
</dd>
</dle>
<dle>
<dt><b>&gt;&gt;</b> <m>number number</m></dt>
<dd>Returns the result of shifting the first argument right by the number of bits
specified in the second argument. Each <i>number</i> must have an integral
value.
</dd>
</dle>
<dle>
<dt><b>==</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether each argument is equal to the arguments on each side of it in
the sense of the <cmd>expr</cmd> == operator (<i>i.e.</i>, numeric comparison if
possible). If fewer than two arguments are given, this operation always
returns a true value.
</dd>
</dle>
<dle>
<dt><b>eq</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether each argument is equal to the arguments on each side of it
using exact string comparison. If fewer than two arguments are given, this
operation always returns a true value.
</dd>
</dle>
<dle>
<dt><b>!=</b> <m>arg arg</m></dt>
<dd>Returns whether the two arguments are not equal to each other, in the sense of
the <cmd>expr</cmd> != operator (<i>i.e.</i>, numeric comparison if possible).
</dd>
</dle>
<dle>
<dt><b>ne</b> <m>arg arg</m></dt>
<dd>Returns whether the two arguments are not equal to each other using exact
string comparison.
</dd>
</dle>
<dle>
<dt><b>&lt;</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether the arbitrarily-many arguments are ordered, with each argument
after the first having to be strictly more than the one preceding it.
Comparisons are performed preferentially on the numeric values. If fewer than
two arguments are present, this operation always returns a true value.
</dd>
</dle>
<dle>
<dt><b>&lt;=</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether the arbitrarily-many arguments are ordered, with each argument
after the first having to be equal to or more than the one preceding it.
Comparisons are performed preferentially on the numeric values. If fewer than
two arguments are present, this operation always returns a true value.
</dd>
</dle>
<dle>
<dt><b>&gt;</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether the arbitrarily-many arguments are ordered, with each argument
after the first having to be strictly less than the one preceding it.
Comparisons are performed preferentially on the numeric values. If fewer than
two arguments are present, this operation always returns a true value.
</dd>
</dle>
<dle>
<dt><b>&gt;=</b> ?<m>arg</m> ...?</dt>
<dd>Returns whether the arbitrarily-many arguments are ordered, with each argument
after the first having to be equal to or less than the one preceding it.
Comparisons are performed preferentially on the numeric values. If fewer than
two arguments are present, this operation always returns a true value.
</dd>
</dle>
<dle>
<dt><b>in</b> <m>arg list</m></dt>
<dd>Returns whether the value <i>arg</i> is present in the list <i>list</i>.
</dd>
</dle>
<dle>
<dt><b>ni</b> <m>arg list</m></dt>
<dd>Returns whether the value <i>arg</i> is not present in the list <i>list</i>.
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLES</title>
<p>The simplest way to use the operators is often by using <b>namespace path</b>
to make the commands available. This has the advantage of not affecting the
set of commands defined by the current namespace.
</p>
<example>
namespace path {::tcl::mathop ::tcl::mathfunc}

<i># Compute the sum of some numbers</i>
set sum [<b>+</b> 1 2 3]

<i># Compute the average of a list</i>
set list {1 2 3 4 5 6}
set mean [<b>/</b> [<b>+</b> {expand}$list] [double [llength $list]]]

<i># Test for list membership</i>
set gotIt [<b>in</b> 3 $list]

<i># Test to see if a value is within some defined range</i>
set inRange [<b>&lt;=</b> 1 $x 5]
</example>
</section>
<seealso>
<ref>expr(n)</ref>
<ref>mathfunc(n)</ref>
<ref>namespace(n)</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>expression</keyword>
<keyword>operator</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="MeasureChar" version="8.1" title="Tk_MeasureChars">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MeasureChar.3,v 1.7 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="Tk_MeasureChars" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MeasureChars</name>
<name>Tk_TextWidth</name>
<name>Tk_DrawChars</name>
<name>Tk_UnderlineChars</name>
<desc>routines to measure and display simple single-line strings.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<b>Tk_MeasureChars(</b><m>tkfont</m>, <m>string</m>, <m>numBytes</m>, <m>maxPixels</m>, <m>flags</m>, <m>lengthPtr</m><b>)</b>

int
<b>Tk_TextWidth(</b><m>tkfont</m>, <m>string</m>, <m>numBytes</m><b>)</b>

void
<b>Tk_DrawChars(</b><m>display</m>, <m>drawable</m>, <m>gc</m>, <m>tkfont</m>, <m>string</m>, <m>numBytes</m>, <m>x</m>, <m>y</m><b>)</b>

void
<b>Tk_UnderlineChars(</b><m>display</m>, <m>drawable</m>, <m>gc</m>, <m>tkfont</m>, <m>string</m>, <m>x</m>, <m>y</m>, <m>firstByte</m>, <m>lastByte</m><b>)</b>

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Font</argtype>
<name>tkfont</name>
<argmode>in</argmode>
<desc>Token for font in which text is to be drawn or measured.  Must have been
returned by a previous call to <fun>Tk_GetFont</fun>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Text to be measured or displayed.  Need not be null terminated.  Any
non-printing meta-characters in the string (such as tabs, newlines, and
other control characters) will be measured or displayed in a
platform-dependent manner.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numBytes</name>
<argmode>in</argmode>
<desc>The maximum number of bytes to consider when measuring or drawing
<i>string</i>.  Must be greater than or equal to 0.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>maxPixels</name>
<argmode>in</argmode>
<desc>If <i>maxPixels</i> is &gt;= 0, it specifies the longest permissible
line length in pixels.  Characters from <i>string</i> are processed only
until this many pixels have been covered.  If <i>maxPixels</i> is &lt; 0, then
the line length is unbounded and the <i>flags</i> argument is ignored.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Various flag bits OR-ed together: <b>TK_PARTIAL_OK</b> means include a character
as long as any part of it fits in the length given by <i>maxPixels</i>;
otherwise, a character must fit completely to be considered.
<b>TK_WHOLE_WORDS</b> means stop on a word boundary, if possible.  If
<b>TK_AT_LEAST_ONE</b> is set, it means return at least one character even if no
characters could fit in the length given by <i>maxPixels</i>.  If
<b>TK_AT_LEAST_ONE</b> is set and <b>TK_WHOLE_WORDS</b> is also set, it means that if
not even one word fits on the line, return the first few letters of the
word that did fit; if not even one letter of the word fit, then the first
letter will still be returned.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="lengthPtr">*lengthPtr</name>
<argmode>out</argmode>
<desc>Filled with the number of pixels occupied by the number of characters
returned as the result of <fun>Tk_MeasureChars</fun>.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display on which to draw.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>Window or pixmap in which to draw.
</desc>
</argdef>
<argdef>
<argtype>GC</argtype>
<name>gc</name>
<argmode>in</argmode>
<desc>Graphics context for drawing characters.  The font selected into this GC 
must be the same as the <i>tkfont</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x, y</name>
<argmode>in</argmode>
<desc>Coordinates at which to place the left edge of the baseline when displaying
<i>string</i>.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>firstByte</name>
<argmode>in</argmode>
<desc>The index of the first byte of the first character to underline in the
<i>string</i>.  Underlining begins at the left edge of this character.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>lastByte</name>
<argmode>in</argmode>
<desc>The index of the first byte of the last character up to which the
underline will be drawn.  The character specified by <i>lastByte</i>
will not itself be underlined.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These routines are for measuring and displaying simple single-font,
single-line strings.  To measure and display single-font, multi-line,
justified text, refer to the documentation for <fun>Tk_ComputeTextLayout</fun>.
There is no programming interface in the core of Tk that supports
multi-font, multi-line text; support for that behavior must be built on
top of simpler layers.  
Note that the interfaces described here are
byte-oriented not character-oriented, so index values coming from Tcl
scripts need to be converted to byte offsets using the
<fun>Tcl_UtfAtIndex</fun> and related routines.
</p>
<p>A glyph is the displayable picture of a letter, number, or some other
symbol.  Not all character codes in a given font have a glyph.
Characters such as tabs, newlines/returns, and control characters that
have no glyph are measured and displayed by these procedures in a
platform-dependent manner; under X, they are replaced with backslashed
escape sequences, while under Windows and Macintosh hollow or solid boxes
may be substituted.  Refer to the documentation for
<fun>Tk_ComputeTextLayout</fun> for a programming interface that supports the
platform-independent expansion of tab characters into columns and
newlines/returns into multi-line text.  
</p>
<p><fun>Tk_MeasureChars</fun> is used both to compute the length of a given
string and to compute how many characters from a string fit in a given
amount of space.  The return value is the number of bytes from
<i>string</i> that fit in the space specified by <i>maxPixels</i> subject to
the conditions described by <i>flags</i>.  If all characters fit, the return
value will be <i>numBytes</i>.  <i>*lengthPtr</i> is filled with the computed
width, in pixels, of the portion of the string that was measured.  For
example, if the return value is 5, then <i>*lengthPtr</i> is filled with the
distance between the left edge of <i>string</i>[0] and the right edge of
<i>string</i>[4]. 
</p>
<p><fun>Tk_TextWidth</fun> is a wrapper function that provides a simpler interface
to the <fun>Tk_MeasureChars</fun> function.  The return value is how much
space in pixels the given <i>string</i> needs.
</p>
<p><fun>Tk_DrawChars</fun> draws the <i>string</i> at the given location in the
given <i>drawable</i>.
</p>
<p><fun>Tk_UnderlineChars</fun> underlines the given range of characters in the
given <i>string</i>.  It doesn't draw the characters (which are assumed to
have been displayed previously by <fun>Tk_DrawChars</fun>); it just draws the
underline.  This procedure is used to underline a few characters without
having to construct an underlined font.  To produce natively underlined
text, the appropriate underlined font should be constructed and used. 

</p>
</section>
<keywords>
<keyword>font</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="memory" title="memory" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992-1999 by Karl Lehenbauer and Mark Diekhans
     Copyright (c) 2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: memory.n,v 1.6 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="memory" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>memory</name>
<desc>Control Tcl memory debugging capabilities</desc>
</namesection>
<synopsis>
<syntax>
<b>memory</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b>memory</b> command gives the Tcl developer control of Tcl's memory
debugging capabilities.  The memory command has several suboptions, which are
described below.  It is only available when Tcl has been compiled with
memory debugging enabled (when <b>TCL_MEM_DEBUG</b> is defined at
compile time), and after <fun>Tcl_InitMemory</fun> has been called.
</p>
<dl>
<dle>
<dt><b>memory active</b> <m>file</m></dt>
<dd>Write a list of all currently allocated memory to the specified <i>file</i>.
</dd>
</dle>
<dle>
<dt><b>memory break_on_malloc</b> <m>count</m></dt>
<dd>After the <i>count</i> allocations have been performed, <fun>ckalloc</fun>
outputs a message to this effect and that it is now attempting to enter
the C debugger.  Tcl will then issue a <i>SIGINT</i> signal against itself.
If you are running Tcl under a C debugger, it should then enter the debugger
command mode.
</dd>
</dle>
<dle>
<dt><b>memory info</b></dt>
<dd>Returns a report containing the total allocations and frees since 
Tcl began, the current packets allocated (the current
number of calls to <fun>ckalloc</fun> not met by a corresponding call 
to <fun>ckfree</fun>), the current bytes allocated, and the maximum number
of packets and bytes allocated.
</dd>
</dle>
<dle>
<dt> <b>memory init [on|off]</b></dt>
<dd>Turn on or off the pre-initialization of all allocated memory
with bogus bytes.  Useful for detecting the use of uninitialized values.
</dd>
</dle>
<dle>
<dt><b>memory onexit</b> <m>file</m></dt>
<dd>Causes a list of all allocated memory to be written to the specified <i>file</i>
during the finalization of Tcl's memory subsystem.  Useful for checking
that memory is properly cleaned up during process exit.
</dd>
</dle>
<dle>
<dt><b>memory tag</b> <m>string</m></dt>
<dd>Each packet of memory allocated by <fun>ckalloc</fun> can have associated
with it a string-valued tag.  In the lists of allocated memory generated
by <b>memory active</b> and <b>memory onexit</b>, the tag for each packet
is printed along with other information about the packet.  The
<b>memory tag</b> command sets the tag value for subsequent calls
to <fun>ckalloc</fun> to be <i>string</i>.  
</dd>
</dle>
<dle>
<dt><b>memory trace [on|off]</b></dt>
<dd><p>Turns memory tracing on or off.  When memory tracing is on, every call
to <fun>ckalloc</fun> causes a line of trace information to be written to
<i>stderr</i>, consisting of the word <i>ckalloc</i>, followed by the
address returned, the amount of memory allocated, and the C filename
and line number of the code performing the allocation.  For example:
</p><example>
ckalloc 40e478 98 tclProc.c 1406
</example><p>Calls to <fun>ckfree</fun> are traced in the same manner.
</p></dd>
</dle>
<dle>
<dt><b>memory trace_on_at_malloc</b> <m>count</m></dt>
<dd>Enable memory tracing after <i>count</i> <fun>ckalloc</fun>'s have been performed.
For example, if you enter <b>memory trace_on_at_malloc 100</b>,
after the 100th call to <fun>ckalloc</fun>, memory trace information will begin
being displayed for all allocations and frees.  Since there can be a lot
of memory activity before a problem occurs, judicious use of this option
can reduce the slowdown caused by tracing (and the amount of trace information
produced), if you can identify a number of allocations that occur before
the problem sets in.  The current number of memory allocations that have 
occurred since Tcl started is printed on a guard zone failure.
</dd>
</dle>
<dle>
<dt><b>memory validate [on|off]</b></dt>
<dd>Turns memory validation on or off. When memory validation is enabled,
on every call to <fun>ckalloc</fun> or <fun>ckfree</fun>, the guard zones are
checked for every piece of memory currently in existence that was
allocated by <fun>ckalloc</fun>.  This has a large performance impact and
should only be used when overwrite problems are strongly suspected.
The advantage of enabling memory validation is that a guard zone
overwrite can be detected on the first call to <fun>ckalloc</fun> or
<fun>ckfree</fun> after the overwrite occurred, rather than when the
specific memory with the overwritten guard zone(s) is freed, which may
occur long after the overwrite occurred.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>ckalloc</ref>
<ref>ckfree</ref>
<ref>Tcl_ValidateAllMemory</ref>
<ref>Tcl_DumpActiveMemory</ref>
<ref>TCL_MEM_DEBUG</ref>
</seealso>
<keywords>
<keyword>memory</keyword>
<keyword>debug</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="menu" version="4.1" title="menu">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: menu.n,v 1.14 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="menu" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>menu</name>
<name>tk_menuSetFocus</name>
<desc>Create and manipulate menu widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">menu</b> <m>pathName</m> ?<m>options</m>?
<cmd>tk_menuSetFocus</cmd> <m>pathName</m>
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeborderwidth</li>
<li>-activeforeground</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-relief</li>
<li>-takefocus</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-postcommand</name>
<dbname>postCommand</dbname>
<dbclass>Command</dbclass>
<desc>If this option is specified then it provides a Tcl command to execute
each time the menu is posted.  The command is invoked by the <b>post</b>
widget command before posting the menu. Note that in Tk 8.0 on Macintosh
and Windows, all post-commands in a system of menus are executed before any
of those menus are posted.
This is due to the limitations in the individual platforms' menu managers.
</desc>
</optiondef>
<optiondef>
<name>-selectcolor</name>
<dbname>selectColor</dbname>
<dbclass>Background</dbclass>
<desc>For menu entries that are check buttons or radio buttons, this option
specifies the color to display in the indicator when the check button
or radio button is selected.
</desc>
</optiondef>
<optiondef>
<name>-tearoff</name>
<dbname>tearOff</dbname>
<dbclass>TearOff</dbclass>
<desc>This option must have a proper boolean value, which specifies
whether or not the menu should include a tear-off entry at the
top.  If so, it will exist as entry 0 of the menu and the other
entries will number starting at 1.  The default
menu bindings arrange for the menu to be torn off when the tear-off
entry is invoked.
</desc>
</optiondef>
<optiondef>
<name>-tearoffcommand</name>
<dbname>tearOffCommand</dbname>
<dbclass>TearOffCommand</dbclass>
<desc>If this option has a non-empty value, then it specifies a Tcl command
to invoke whenever the menu is torn off.  The actual command will
consist of the value of this option, followed by a space, followed
by the name of the menu window, followed by a space, followed by
the name of the name of the torn off menu window.  For example, if
the option's is ``<b>a b</b>'' and menu <b>.x.y</b> is torn off to
create a new menu <b>.x.tearoff1</b>, then the command
``<b>a b .x.y .x.tearoff1</b>'' will be invoked.
</desc>
</optiondef>
<optiondef>
<name>-title</name>
<dbname>title</dbname>
<dbclass>Title</dbclass>
<desc>The string will be used to title the window created when this menu is
torn off. If the title is NULL, then the window will have the title
of the menubutton or the text of the cascade item from which this menu
was invoked.
</desc>
</optiondef>
<optiondef>
<name>-type</name>
<dbname>type</dbname>
<dbclass>Type</dbclass>
<desc>This option can be one of <cmd>menubar</cmd>, <b>tearoff</b>, or
<b>normal</b>, and is set when the menu is created. While the string
returned by the configuration database will change if this option is
changed, this does not affect the menu widget's behavior. This is used
by the cloning mechanism and is not normally set outside of the Tk
library.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>INTRODUCTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">menu</b> command creates a new top-level window (given
by the <i>pathName</i> argument) and makes it into a menu widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the menu such as its colors and font.
The <b cat="AMBIGUOUS widget cmd">menu</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A menu is a widget that displays a collection of one-line entries arranged
in one or more columns.  There exist several different types of entries,
each with different properties.  Entries of different types may be
combined in a single menu.  Menu entries are not the same as
entry widgets.  In fact, menu entries are not even distinct widgets;
the entire menu is one widget.
</p>
<p>Menu entries are displayed with up to three separate fields.
The main field is a label in the form of a text string,
a bitmap, or an image, controlled by the <b>-label</b>,
<b>-bitmap</b>, and <b>-image</b> options for the entry.
If the  <b>-accelerator</b> option is specified for an entry then a second
textual field is displayed to the right of the label.  The accelerator
typically describes a keystroke sequence that may be typed in the
application to cause the same result as invoking the menu entry.
The third field is an <i>indicator</i>.  The indicator is present only for
checkbutton or radiobutton entries.  It indicates whether the entry
is selected or not, and is displayed to the left of the entry's
string.
</p>
<p>In normal use, an entry becomes active (displays itself differently)
whenever the mouse pointer is over the entry.  If a mouse
button is released over the entry then the entry is <i>invoked</i>.
The effect of invocation is different for each type of entry;
these effects are described below in the sections on individual
entries.
</p>
<p>Entries may be <i>disabled</i>, which causes their labels
and accelerators to be displayed
with dimmer colors.
The default menu bindings will not allow
a disabled entry to be activated or invoked.
Disabled entries may be re-enabled, at which point it becomes
possible to activate and invoke them again.
</p>
<p>Whenever a menu's active entry is changed, a &lt;&lt;MenuSelect&gt;&gt; virtual
event is send to the menu. The active item can then be queried from
the menu, and an action can be taken, such as setting
context-sensitive help text for the entry.
</p>
</section>
<section>
<title>TYPES OF ENTRIES</title>
<subsection>
<title>COMMAND ENTRIES</title>
<p>The most common kind of menu entry is a command entry, which
behaves much like a button widget.  When a command entry is
invoked, a Tcl command is executed.  The Tcl
command is specified with the <b>-command</b> option.
</p>
</subsection>
<subsection>
<title>SEPARATOR ENTRIES</title>
<p>A separator is an entry that is displayed as a horizontal dividing
line.  A separator may not be activated or invoked, and it has
no behavior other than its display appearance.
</p>
</subsection>
<subsection>
<title>CHECKBUTTON ENTRIES</title>
<p>A checkbutton menu entry behaves much like a checkbutton widget.
When it is invoked it toggles back and forth between the selected
and deselected states.  When the entry is selected, a particular
value is stored in a particular global variable (as determined by
the <b>-onvalue</b> and <b>-variable</b> options for the entry);  when
the entry is deselected another value (determined by the
<b>-offvalue</b> option) is stored in the global variable.
An indicator box is displayed to the left of the label in a checkbutton
entry.  If the entry is selected then the indicator's center is displayed
in the color given by the <b>-selectcolor</b> option for the entry;
otherwise the indicator's center is displayed in the background color for
the menu.  If a <b>-command</b> option is specified for a checkbutton
entry, then its value is evaluated as a Tcl command each time the entry
is invoked;  this happens after toggling the entry's
selected state.
</p>
</subsection>
<subsection>
<title>RADIOBUTTON ENTRIES</title>
<p>A radiobutton menu entry behaves much like a radiobutton widget.
Radiobutton entries are organized in groups of which only one
entry may be selected at a time.  Whenever a particular entry
becomes selected it stores a particular value into a particular
global variable (as determined by the <b>-value</b> and
<b>-variable</b> options for the entry).  This action
causes any previously-selected entry in the same group
to deselect itself.
Once an entry has become selected, any change to the entry's
associated variable will cause the entry to deselect itself.
Grouping of radiobutton entries is determined by their
associated variables:  if two entries have the same associated
variable then they are in the same group.
An indicator diamond is displayed to the left of the label in each
radiobutton entry.  If the entry is selected then the indicator's
center is displayed in the color given by the <b>-selectcolor</b> option
for the entry;
otherwise the indicator's center is displayed in the background color for
the menu.  If a <b>-command</b> option is specified for a radiobutton
entry, then its value is evaluated as a Tcl command each time the entry
is invoked;  this happens after selecting the entry.
</p>
</subsection>
<subsection>
<title>CASCADE ENTRIES</title>
<p>A cascade entry is one with an associated menu (determined
by the <b>-menu</b> option).  Cascade entries allow the construction
of cascading menus.
The <b>postcascade</b> widget command can be used to post and unpost
the associated menu just next to of the cascade entry.
The associated menu must be a child of the menu containing
the cascade entry (this is needed in order for menu traversal to
work correctly).
</p>
<p>A cascade entry posts its associated menu by invoking a
Tcl command of the form
</p>
<example>
<i>menu</i> <b>post</b> <i>x y</i>
</example>
<p>where <i>menu</i> is the path name of the associated menu, and <i>x</i>
and <i>y</i> are the root-window coordinates of the upper-right
corner of the cascade entry.
On Unix, the lower-level menu is unposted by executing a Tcl command with
the form
</p>
<example>
<i>menu</i> <b>unpost</b>
</example>
<p>where <i>menu</i> is the name of the associated menu.
On other platforms, the platform's native code takes care of unposting the
menu.
</p>
<p>If a <b>-command</b> option is specified for a cascade entry then it is
evaluated as a Tcl command whenever the entry is invoked. This is not
supported on Windows.
</p>
</subsection>
<subsection>
<title>TEAR-OFF ENTRIES</title>
<p>A tear-off entry appears at the top of the menu if enabled with the
<b>tearOff</b> option.  It is not like other menu entries in that
it cannot be created with the <b>add</b> widget command and
cannot be deleted with the <b>delete</b> widget command.
When a tear-off entry is created it appears as a dashed line at
the top of the menu.  Under the default bindings, invoking the
tear-off entry causes a torn-off copy to be made of the menu and
all of its submenus.
</p>
</subsection>
</section>
<section>
<title>MENUBARS</title>
<p>Any menu can be set as a menubar for a toplevel window (see
<b cat="AMBIGUOUS widget cmd">toplevel</b> command for syntax). On the Macintosh, whenever the
toplevel is in front, this menu's cascade items will appear in the
menubar across the top of the main monitor. On Windows and Unix, this
menu's items will be displayed in a menubar across the top of the
window. These menus will behave according to the interface guidelines
of their platforms. For every menu set as a menubar, a clone menu is
made. See the <ref refid="clones">CLONES</ref> section for more information.
</p>
<p>As noted, menubars may behave differently on different platforms.  One
example of this concerns the handling of checkbuttons and radiobuttons
within the menu.  While it is permitted to put these menu elements on
menubars, they may not be drawn with indicators on some platforms, due
to system restrictions.
</p>
<subsection>
<title>SPECIAL MENUS IN MENUBARS</title>
<p>Certain menus in a menubar will be treated specially.  On the Macintosh,
access to the special Apple and Help menus is provided. On Windows,
access to the Windows System menu in each window is provided. On X Windows,
a special right-justified help menu is provided. In all cases, these
menus must be created with the command name of the menubar menu concatenated
with the special name. So for a menubar named .menubar, on the Macintosh,
the special menus would be .menubar.apple and .menubar.help; on Windows,
the special menu would be .menubar.system; on X Windows, the help
menu would be .menubar.help.
</p>
<p>When Tk sees an Apple menu on the Macintosh, that menu's contents make
up the first items of the Apple menu on the screen whenever the window
containing the menubar is in front. The menu is the
first one that the user sees and has a title which is an Apple logo.
After all of the Tk-defined items, the menu will have a separator,
followed by all of the items in the user's Apple Menu Items folder.
Since the System uses a different menu definition procedure for
the Apple menu than Tk uses for its menus, and the system APIs do
not fully support everything Tk tries to do, the menu item will only
have its text displayed. No font attributes, images, bitmaps, or colors
will be displayed. In addition, a menu with a tearoff item will have
the tearoff item displayed as "(TearOff)".
</p>
<p>When Tk see a Help menu on the Macintosh, the menu's contents are
appended to the standard help menu on the right of the user's menubar
whenever the user's menubar is in front. The first items in the menu
are provided by Apple. Similar to the Apple Menu, customization in this
menu is limited to what the system provides.
</p>
<p>When Tk sees a System menu on Windows, its items are appended to the 
system menu that the menubar is attached to. This menu has an icon
representing a spacebar, and can be invoked with the mouse or by typing
Alt+Spacebar.  Due to limitations in the Windows API, any font changes,
colors, images, bitmaps, or tearoff images will not appear in the
system menu.
</p>
<p>When Tk see a Help menu on X Windows, the menu is moved to be last in
the menubar and is right justified.
</p>
</subsection>
</section>
<section id="clones">
<title>CLONES</title>
<p>When a menu is set as a menubar for a toplevel window, or when a menu
is torn off, a clone of the menu is made. This clone is a menu widget
in its own right, but it is a child of the original. Changes in the
configuration of the original are reflected in the
clone. Additionally, any cascades that are pointed to are also cloned
so that menu traversal will work right. Clones are destroyed when
either the tearoff or menubar goes away, or when the original menu is
destroyed. 
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">menu</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.
</p>
<p>Many of the widget commands for a menu take as one argument an
indicator of which entry of the menu to operate on.  These
indicators are called <i>index</i>es and may be specified in
any of the following forms:
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>Specifies the entry numerically, where 0 corresponds
to the top-most entry of the menu, 1 to the entry below it, and
so on.
</dd>
</dle>
<dle>
<dt><b>active</b></dt>
<dd>Indicates the entry that is currently active.  If no entry is
active then this form is equivalent to <b>none</b>.  This form may
not be abbreviated.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the bottommost entry in the menu.  If there are no
entries in the menu then this form is equivalent to <b>none</b>.
This form may not be abbreviated.
</dd>
</dle>
<dle>
<dt><b>last</b></dt>
<dd>Same as <b>end</b>.
</dd>
</dle>
<dle>
<dt><b>none</b></dt>
<dd>Indicates ``no entry at all'';  this is used most commonly with
the <b>activate</b> option to deactivate all the entries in the
menu.  In most cases the specification of <b>none</b> causes
nothing to happen in the widget command.
This form may not be abbreviated.
</dd>
</dle>
<dle>
<dt><b>@</b><m>number</m></dt>
<dd>In this form, <i>number</i> is treated as a y-coordinate in the
menu's window;  the entry closest to that y-coordinate is used.
For example, ``<b>@0</b>'' indicates the top-most entry in the
window.
</dd>
</dle>
<dle>
<dt><m>pattern</m></dt>
<dd>If the index doesn't satisfy one of the above forms then this
form is used.  <i>Pattern</i> is pattern-matched against the label of
each entry in the menu, in order from the top down, until a
matching entry is found.  The rules of <fun>Tcl_StringMatch</fun>
are used.
</dd>
</dle>
</dl>
<p>The following widget commands are possible for menu widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>activate</b> <m>index</m></dt>
<dd>Change the state of the entry indicated by <i>index</i> to <b>active</b>
and redisplay it using its active colors.
Any previously-active entry is deactivated.  If <i>index</i>
is specified as <b>none</b>, or if the specified entry is
disabled, then the menu ends up with no active entry.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>add</b> <m>type</m> ?<m>option value option value ...</m>?</dt>
<dd>Add a new entry to the bottom of the menu.  The new entry's type
is given by <i>type</i> and must be one of <b>cascade</b>,
<b cat="AMBIGUOUS widget cmd">checkbutton</b>, <b>command</b>, <b cat="AMBIGUOUS widget cmd">radiobutton</b>, or <b>separator</b>,
or a unique abbreviation of one of the above.  If additional arguments
are present, they specify any of the following options:
<dl>
<dle>
<dt><b>-activebackground</b> <m>value</m></dt>
<dd>Specifies a background color to use for displaying this entry when it
is active.
If this option is specified as an empty string (the default), then the
<b>activeBackground</b> option for the overall menu is used.
If the <b>tk_strictMotif</b> variable has been set to request strict
Motif compliance, then this option is ignored and the <b>-background</b>
option is used in its place.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-activeforeground</b> <m>value</m></dt>
<dd>Specifies a foreground color to use for displaying this entry when it
is active.
If this option is specified as an empty string (the default), then the
<b>activeForeground</b> option for the overall menu is used.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-accelerator</b> <m>value</m></dt>
<dd>Specifies a string to display at the right side of the menu entry.
Normally describes an accelerator keystroke sequence that may be
typed to invoke the same function as the menu entry.  This option
is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-background</b> <m>value</m></dt>
<dd>Specifies a background color to use for displaying this entry when it
is in the normal state (neither active nor disabled).
If this option is specified as an empty string (the default), then the
<b>background</b> option for the overall menu is used.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-bitmap</b> <m>value</m></dt>
<dd>Specifies a bitmap to display in the menu instead of a textual
label, in any of the forms accepted by <fun>Tk_GetBitmap</fun>.
This option overrides the <b>-label</b> option
(as controlled by the <b>-compound</b> option)
but may be reset
to an empty string to enable a textual label to be displayed.
If a <b>-image</b> option has been specified, it overrides
<b>-bitmap</b>.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-columnbreak</b> <m>value</m></dt>
<dd>When this option is zero, the entry appears below the previous entry. When
this option is one, the entry appears at the top of a new column in the
menu.
</dd>
</dle>
<dle>
<dt><b>-command</b> <m>value</m></dt>
<dd>Specifies a Tcl command to execute when the menu entry is invoked.
Not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-compound</b> <m>value</m></dt>
<dd>Specifies whether the menu entry should display both an image and text,
and if so, where the image should be placed relative to the text.
Valid values for this option are <b>bottom</b>, <b>center</b>,
<b>left</b>, <b>none</b>, <b>right</b> and <b>top</b>.  The default value
is <b>none</b>, meaning that the button will display either an image or
text, depending on the values of the <b>-image</b> and <b>-bitmap</b>
options.
</dd>
</dle>
<dle>
<dt><b>-font</b> <m>value</m></dt>
<dd>Specifies the font to use when drawing the label or accelerator
string in this entry.
If this option is specified as an empty string (the default) then
the <cmd>font</cmd> option for the overall menu is used.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-foreground</b> <m>value</m></dt>
<dd>Specifies a foreground color to use for displaying this entry when it
is in the normal state (neither active nor disabled).
If this option is specified as an empty string (the default), then the
<b>foreground</b> option for the overall menu is used.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-hidemargin</b> <m>value</m></dt>
<dd>Specifies whether the standard margins should be drawn for this menu
entry. This is useful when creating palette with images in them, i.e.,
color palettes, pattern palettes, etc. 1 indicates that the margin for
the entry is hidden; 0 means that the margin is used.
</dd>
</dle>
<dle>
<dt><b>-image</b> <m>value</m></dt>
<dd>Specifies an image to display in the menu instead of a text string
or bitmap.
The image must have been created by some previous invocation of
<b>image create</b>.
This option overrides the <b>-label</b> and <b>-bitmap</b> options
(as controlled by the <b>-compound</b> option)
but may be reset to an empty string to enable a textual or
bitmap label to be displayed.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-indicatoron</b> <m>value</m></dt>
<dd>Available only for checkbutton and radiobutton entries.
<i>Value</i> is a boolean that determines whether or not the
indicator should be displayed.
</dd>
</dle>
<dle>
<dt><b>-label</b> <m>value</m></dt>
<dd>Specifies a string to display as an identifying label in the menu
entry.  Not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-menu</b> <m>value</m></dt>
<dd>Available only for cascade entries.  Specifies the path name of
the submenu associated with this entry.
The submenu must be a child of the menu.
</dd>
</dle>
<dle>
<dt><b>-offvalue</b> <m>value</m></dt>
<dd>Available only for checkbutton entries.  Specifies the value to
store in the entry's associated variable when the entry is
deselected.
</dd>
</dle>
<dle>
<dt><b>-onvalue</b> <m>value</m></dt>
<dd>Available only for checkbutton entries.  Specifies the value to
store in the entry's associated variable when the entry is selected.
</dd>
</dle>
<dle>
<dt><b>-selectcolor</b> <m>value</m></dt>
<dd>Available only for checkbutton and radiobutton entries.
Specifies the color to display in the indicator when the entry is
selected.
If the value is an empty string (the default) then the <b>selectColor</b>
option for the menu determines the indicator color.
</dd>
</dle>
<dle>
<dt><b>-selectimage</b> <m>value</m></dt>
<dd>Available only for checkbutton and radiobutton entries.
Specifies an image to display in the entry (in place of
the <b>-image</b> option) when it is selected.
<i>Value</i> is the name of an image, which must have been created
by some previous invocation of <b>image create</b>.
This option is ignored unless the <b>-image</b> option has
been specified.
</dd>
</dle>
<dle>
<dt><b>-state</b> <m>value</m></dt>
<dd>Specifies one of three states for the entry:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the entry is displayed using the
<b>foreground</b> option for the menu and the <b>background</b>
option from the entry or the menu.
The active state is typically used when the pointer is over the entry.
In active state the entry is displayed using the <b>activeForeground</b>
option for the menu along with the <b>activebackground</b> option from
the entry.  Disabled state means that the entry
should be insensitive:  the default bindings will refuse to activate
or invoke the entry.
In this state the entry is displayed according to the 
<b>disabledForeground</b> option for the menu and the
<b>background</b> option from the entry.
This option is not available for separator entries.
</dd>
</dle>
<dle>
<dt><b>-underline</b> <m>value</m></dt>
<dd>Specifies the integer index of a character to underline in the entry.
This option is also queried by the default bindings and used to
implement keyboard traversal.
0 corresponds to the first character of the text displayed in the entry,
1 to the next character, and so on.
If a bitmap or image is displayed in the entry then this option is ignored.
This option is not available for separator or tear-off entries.
</dd>
</dle>
<dle>
<dt><b>-value</b> <m>value</m></dt>
<dd>Available only for radiobutton entries.  Specifies the value to
store in the entry's associated variable when the entry is selected.
If an empty string is specified, then the <b>-label</b> option
for the entry as the value to store in the variable.
</dd>
</dle>
<dle>
<dt><b>-variable</b> <m>value</m></dt>
<dd>Available only for checkbutton and radiobutton entries.  Specifies
the name of a global value to set when the entry is selected.
For checkbutton entries the variable is also set when the entry
is deselected.  For radiobutton entries, changing the variable
causes the currently-selected entry to deselect itself.
</dd>
</dle>
</dl><p>The <b>add</b> widget command returns an empty string.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">menu</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>clone</b> <m>newPathname ?cloneType?</m></dt>
<dd>Makes a clone of the current menu named <i>newPathName</i>. This clone
is a menu in its own right, but any changes to the clone are
propogated to the original menu and vice versa. <i>cloneType</i> can be
<b>normal</b>, <cmd>menubar</cmd>, or <b>tearoff</b>. Should not normally be
called outside of the Tk library. See the <ref refid="clones">CLONES</ref> section for
more information.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">menu</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>index1</m> ?<m>index2</m>?</dt>
<dd>Delete all of the menu entries between <i>index1</i> and
<i>index2</i> inclusive.
If <i>index2</i> is omitted then it defaults to <i>index1</i>.
Attempts to delete a tear-off menu entry are ignored (instead, you
should change the <b>tearOff</b> option to remove the tear-off entry).
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>entrycget</b> <m>index option</m></dt>
<dd>Returns the current value of a configuration option for
the entry given by <i>index</i>.
<i>Option</i> may have any of the values accepted by the <b>add</b>
widget command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>entryconfigure</b> <m>index</m> ?<m>options</m>?</dt>
<dd>This command is similar to the <b>configure</b> command, except that
it applies to the options for an individual entry, whereas <b>configure</b>
applies to the options for the menu as a whole.
<i>Options</i> may have any of the values accepted by the <b>add</b>
widget command.  If <i>options</i> are specified, options are modified
as indicated
in the command and the command returns an empty string.
If no <i>options</i> are specified, returns a list describing
the current options for entry <i>index</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the numerical index corresponding to <i>index</i>, or
<b>none</b> if <i>index</i> was specified as <b>none</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index</m> <m>type</m> ?<m>option value option value ...</m>?</dt>
<dd>Same as the <b>add</b> widget command except that it inserts the new
entry just before the entry given by <i>index</i>, instead of appending
to the end of the menu.  The <i>type</i>, <i>option</i>, and <i>value</i>
arguments have the same interpretation as for the <b>add</b> widget
command.  It is not possible to insert new menu entries before the
tear-off entry, if the menu has one.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>invoke</b> <m>index</m></dt>
<dd>Invoke the action of the menu entry.  See the sections on the
individual entries above for details on what happens.  If the
menu entry is disabled then nothing happens.  If the
entry has a command associated with it then the result of that
command is returned as the result of the <b>invoke</b> widget
command.  Otherwise the result is an empty string.  Note:  invoking
a menu entry does not automatically unpost the menu;  the default
bindings normally take care of this before invoking the <b>invoke</b>
widget command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>post</b> <m>x y</m></dt>
<dd>Arrange for the menu to be displayed on the screen at the root-window
coordinates given by <i>x</i> and <i>y</i>.  These coordinates are
adjusted if necessary to guarantee that the entire menu is visible on
the screen.  This command normally returns an empty string.
If the <b>postCommand</b> option has been specified, then its value is
executed as a Tcl script before posting the menu and the result of
that script is returned as the result of the <b>post</b> widget
command.
If an error returns while executing the command, then the error is
returned without posting the menu.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>postcascade</b> <m>index</m></dt>
<dd>Posts the submenu associated with the cascade entry given by
<i>index</i>, and unposts any previously posted submenu.
If <i>index</i> doesn't correspond to a cascade entry,
or if <i>pathName</i> isn't posted,
the command has no effect except to unpost any currently posted
submenu.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>type</b> <m>index</m></dt>
<dd>Returns the type of the menu entry given by <i>index</i>.
This is the <i>type</i> argument passed to the <b>add</b> widget
command when the entry was created, such as <b>command</b>
or <b>separator</b>, or <b>tearoff</b> for a tear-off entry.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>unpost</b></dt>
<dd>Unmap the window so that it is no longer displayed.  If a
lower-level cascaded menu is posted, unpost that menu.  Returns an
empty string. This subcommand does not work on Windows and the
Macintosh, as those platforms have their own way of unposting menus.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xposition</b> <m>index</m></dt>
<dd><new version="8.5">Returns a decimal string giving the x-coordinate within the menu
window of the leftmost pixel in the entry specified by <i>index</i>.
</new></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yposition</b> <m>index</m></dt>
<dd>Returns a decimal string giving the y-coordinate within the menu
window of the topmost pixel in the entry specified by <i>index</i>.
</dd>
</dle>
</dl>
</section>
<section>
<title>MENU CONFIGURATIONS</title>
<p>The default bindings support four different ways of using menus:
</p>
<dl>
<dle>
<dt><b>Pulldown Menus in Menubar</b></dt>
<dd>This is the most command case. You create a menu widget that will become the
menu bar. You then add cascade entries to this menu, specifying the
pull down menus you wish to use in your menu bar. You then create all
of the pulldowns. Once you have done this, specify the menu using the
<b>-menu</b> option of the toplevel's widget command. See the
<b cat="AMBIGUOUS widget cmd">toplevel</b> manual entry for details.
</dd>
</dle>
<dle>
<dt><b>Pulldown Menus in Menu Buttons</b></dt>
<dd>This is the compatable way to do menu bars.  You create one menubutton
widget for each top-level menu, and typically you arrange a series of
menubuttons in a row in a menubar window.  You also create the top-level menus
and any cascaded submenus, and tie them together with <b>-menu</b>
options in menubuttons and cascade menu entries.  The top-level menu must
be a child of the menubutton, and each submenu must be a child of the
menu that refers to it.  Once you have done this, the default bindings
will allow users to traverse and invoke the tree of menus via its
menubutton;  see the <b cat="AMBIGUOUS widget cmd">menubutton</b> manual entry for details.
</dd>
</dle>
<dle>
<dt><b>Popup Menus</b></dt>
<dd>Popup menus typically post in response to a mouse button press or
keystroke.  You create the popup menus and any cascaded submenus,
then you call the <cmd>tk_popup</cmd> procedure at the appropriate time
to post the top-level menu.
</dd>
</dle>
<dle>
<dt><b>Option Menus</b></dt>
<dd>An option menu consists of a menubutton with an associated menu
that allows you to select one of several values.  The current value
is displayed in the menubutton and is also stored in a global
variable.  Use the <b>tk_optionMenu</b> procedure to create option
menubuttons and their menus.
</dd>
</dle>
<dle>
<dt><b>Torn-off Menus</b></dt>
<dd>You create a torn-off menu by invoking the tear-off entry at
the top of an existing menu.  The default bindings will create a new menu
that is a copy of the original menu and leave it permanently
posted as a top-level window.  The torn-off menu behaves just
the same as the original menu.
</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for menus that give them
the following default behavior:
</p>
<ol>
<li>When the mouse enters a menu, the entry underneath the mouse
cursor activates;  as the mouse moves around the menu, the active
entry changes to track the mouse.
</li>
<li>When the mouse leaves a menu all of the entries in the menu
deactivate, except in the special case where the mouse moves from
a menu to a cascaded submenu.
</li>
<li>When a button is released over a menu, the active entry (if any) is invoked.
The menu also unposts unless it is a torn-off menu.
</li>
<li>The Space and Return keys invoke the active entry and
unpost the menu.
</li>
<li>If any of the entries in a menu have letters underlined with
the <b>-underline</b> option, then pressing one of the underlined
letters (or its upper-case or lower-case equivalent) invokes that
entry and unposts the menu.
</li>
<li>The Escape key aborts a menu selection in progress without invoking any
entry.  It also unposts the menu unless it is a torn-off menu.
</li>
<li>The Up and Down keys activate the next higher or lower entry
in the menu.  When one end of the menu is reached, the active
entry wraps around to the other end.
</li>
<li>The Left key moves to the next menu to the left.
If the current menu is a cascaded submenu, then the submenu is
unposted and the current menu entry becomes the cascade entry
in the parent.
If the current menu is a top-level menu posted from a
menubutton, then the current menubutton is unposted and the
next menubutton to the left is posted.
Otherwise the key has no effect.
The left-right order of menubuttons is determined by their stacking
order:  Tk assumes that the lowest menubutton (which by default
is the first one created) is on the left.
</li>
<li>The Right key moves to the next menu to the right.
If the current entry is a cascade entry, then the submenu is
posted and the  current menu entry becomes the first entry
in the submenu.
Otherwise, if the current menu was posted from a
menubutton, then the current menubutton is unposted and the
next menubutton to the right is posted.
</li>
</ol>
<p>Disabled menu entries are non-responsive:  they don't activate and
they ignore mouse button presses and releases.
</p>
<p>Several of the bindings make use of the command <cmd>tk_menuSetFocus</cmd>.
It saves the current focus and sets the focus to its <i>pathName</i>
argument, which is a menu widget.
</p>
<p>The behavior of menus can be changed by defining new bindings for
individual widgets or by redefining the class bindings.
</p>
</section>
<section>
<title>BUGS</title>
<p>At present it isn't possible to use the
option database to specify values for the options to individual
entries.

</p>
</section>
<seealso>
<ref>bind(n)</ref>
<ref>menubutton(n)</ref>
<ref>ttk_menubutton(n)</ref>
<ref>toplevel(n)</ref>
</seealso>
<keywords>
<keyword>menu</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="menubar" title="tk_menuBar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: menubar.n,v 1.3 2004/06/21 14:45:52 dkf Exp $
 -->
<?TROFF.TH title="tk_menuBar" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_menuBar</name>
<name>tk_bindForTraversal</name>
<desc>Obsolete support for menu bars</desc>
</namesection>
<synopsis>
<syntax>
<b>tk_menuBar</b> <m>frame</m> ?<m>menu menu ...</m>?

<b>tk_bindForTraversal</b> <m>arg arg ...</m> 
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>These procedures were used in Tk 3.6 and earlier releases to help
manage pulldown menus and to implement keyboard traversal of menus.
In Tk 4.0 and later releases they are no
longer needed.  Stubs for these procedures have been retained for
backward compatibility, but they have no effect.  You should remove
calls to these procedures from your code, since eventually the
procedures will go away.
</p>
<p>From Tk 8.0 onwards, you should instead construct your menubar as a
normal <b cat="AMBIGUOUS widget cmd">menu</b> and then attach it to the <b cat="AMBIGUOUS widget cmd">toplevel</b> of your
choice using the <b>-menu</b> option of that widget.

</p>
</section>
<seealso>
<ref>menu(n)</ref>
<ref>toplevel(n)</ref>
</seealso>
<keywords>
<keyword>keyboard traversal</keyword>
<keyword>menu</keyword>
<keyword>menu bar</keyword>
<keyword>post</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="menubutton" version="4.0" title="menubutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: menubutton.n,v 1.7 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="menubutton" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>menubutton</name>
<desc>Create and manipulate menubutton widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">menubutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeforeground</li>
<li>-anchor</li>
<li>-background</li>
<li>-bitmap</li>
<li>-borderwidth</li>
<li>-compound</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-image</li>
<li>-justify</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-wraplength</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-direction</name>
<dbname>direction</dbname>
<dbclass>Height</dbclass>
<desc>Specifies where the menu is going to be popup up. <b>above</b> tries to
pop the menu above the menubutton. <b>below</b> tries to pop the menu
below the menubutton. <b>left</b> tries to pop the menu to the left of
the menubutton. <b>right</b> tries to pop the menu to the right of the
menu button. <b cat="AMBIGUOUS ambiguous cmd">flush</b> pops the menu directly over the menubutton.
In the case of <b>above</b> or <b>below</b>, the direction will be
reversed if the menu would show offscreen.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired height for the menubutton.
If an image or bitmap is being displayed in the menubutton then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in lines of text.
If this option isn't specified, the menubutton's desired height is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
<optiondef>
<name>-indicatoron</name>
<dbname>indicatorOn</dbname>
<dbclass>IndicatorOn</dbclass>
<desc>The value must be a proper boolean value.  If it is true then
a small indicator rectangle will be displayed on the right side
of the menubutton and the default menu bindings will treat this
as an option menubutton.  If false then no indicator will be
displayed.
</desc>
</optiondef>
<optiondef>
<name>-menu</name>
<dbname>menu</dbname>
<dbclass>MenuName</dbclass>
<desc>Specifies the path name of the menu associated with this menubutton.
The menu must be a child of the menubutton.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the menubutton:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the menubutton is displayed using the
<b>foreground</b> and <b>background</b> options.  The active state is
typically used when the pointer is over the menubutton.  In active state
the menubutton is displayed using the <b>activeForeground</b> and
<b>activeBackground</b> options.  Disabled state means that the menubutton
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the <b>disabledForeground</b> and
<b>background</b> options determine how the button is displayed.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies a desired width for the menubutton.
If an image or bitmap is being displayed in the menubutton then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in characters.
If this option isn't specified, the menubutton's desired width is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>INTRODUCTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">menubutton</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a menubutton widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the menubutton such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">menubutton</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A menubutton is a widget that displays a textual string, bitmap, or image
and is associated with a menu widget.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the <b>wrapLength</b> option) and
one of the characters may optionally be underlined using the
<b>underline</b> option.  In normal usage, pressing
mouse button 1 over the menubutton causes the associated menu to
be posted just underneath the menubutton.  If the mouse is moved over
the menu before releasing the mouse button, the button release
causes the underlying menu entry to be invoked.  When the button
is released, the menu is unposted.
</p>
<p>Menubuttons are typically organized into groups called menu bars
that allow scanning:
if the mouse button is pressed over one menubutton (causing it
to post its menu) and the mouse is moved over another menubutton
in the same menu bar without releasing the mouse button, then the
menu of the first menubutton is unposted and the menu of the
new menubutton is posted instead.
</p>
<p>There are several interactions between menubuttons and menus;  see
the <b cat="AMBIGUOUS widget cmd">menu</b> manual entry for information on various menu configurations,
such as pulldown menus and option menus.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">menubutton</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for menubutton widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">menubutton</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">menubutton</b>
command.

</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for menubuttons that give them
the following default behavior:
</p>
<ol>
<li>A menubutton activates whenever the mouse passes over it and deactivates
whenever the mouse leaves it.
</li>
<li>Pressing mouse button 1 over a menubutton posts the menubutton:
its relief changes to raised and its associated menu is posted
under the menubutton.  If the mouse is dragged down into the menu
with the button still down, and if the mouse button is then
released over an entry in the menu, the menubutton is unposted
and the menu entry is invoked.
</li>
<li>If button 1 is pressed over a menubutton and then released over that
menubutton, the menubutton stays posted: you can still move the mouse
over the menu and click button 1 on an entry to invoke it.
Once a menu entry has been invoked, the menubutton unposts itself.
</li>
<li>If button 1 is pressed over a menubutton and then dragged over some
other menubutton, the original menubutton unposts itself and the
new menubutton posts.
</li>
<li>If button 1 is pressed over a menubutton and released outside
any menubutton or menu, the menubutton unposts without invoking
any menu entry.
</li>
<li>When a menubutton is posted, its associated menu claims the input
focus to allow keyboard traversal of the menu and its submenus.
See the <b cat="AMBIGUOUS widget cmd">menu</b> manual entry for details on these bindings.
</li>
<li>If the <b>underline</b> option has been specified for a menubutton
then keyboard traversal may be used to post the menubutton:
Alt+<i>x</i>, where <i>x</i> is the underlined character (or its
lower-case or upper-case equivalent), may be typed in any window
under the menubutton's toplevel to post the menubutton.
</li>
<li>The F10 key may be typed in any window to post the first menubutton
under its toplevel window that isn't disabled.
</li>
<li>If a menubutton has the input focus, the space and return keys
post the menubutton.
</li>
</ol>
<p>If the menubutton's state is <b>disabled</b> then none of the above
actions occur:  the menubutton is completely non-responsive.
</p>
<p>The behavior of menubuttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<seealso>
<ref>ttk_menubutton(n)</ref>
<ref>menu(n)</ref>
</seealso>
<keywords>
<keyword>menubutton</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="message" title="message" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: message.n,v 1.4 2004/08/17 22:37:24 dkf Exp $
 -->
<?TROFF.TH title="message" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>message</name>
<desc>Create and manipulate message widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">message</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-anchor</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-width</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-aspect</name>
<dbname>aspect</dbname>
<dbclass>Aspect</dbclass>
<desc>Specifies a non-negative integer value indicating desired
aspect ratio for the text.  The aspect ratio is specified as
100*width/height.  100 means the text should
be as wide as it is tall, 200 means the text should
be twice as wide as it is tall, 50 means the text should
be twice as tall as it is wide, and so on.
Used to choose line length for text if <b>width</b> option
isn't specified.
Defaults to 150.
</desc>
</optiondef>
<optiondef>
<name>-justify</name>
<dbname>justify</dbname>
<dbclass>Justify</dbclass>
<desc>Specifies how to justify lines of text.
Must be one of <b>left</b>, <b>center</b>, or <b>right</b>.  Defaults
to <b>left</b>.
This option works together with the <b>anchor</b>, <b>aspect</b>,
<b>padX</b>, <b>padY</b>, and <b>width</b> options to provide a variety
of arrangements of the text within the window.
The <b>aspect</b> and <b>width</b> options determine the amount of
screen space needed to display the text.
The <b>anchor</b>, <b>padX</b>, and <b>padY</b> options determine where this
rectangular area is displayed within the widget's window, and the
<b>justify</b> option determines how each line is displayed within that
rectangular region.
For example, suppose <b>anchor</b> is <b>e</b> and <b>justify</b> is
<b>left</b>, and that the message window is much larger than needed
for the text.
The text will be displayed so that the left edges of all the lines
line up and the right edge of the longest line is <b>padX</b> from
the right side of the window;  the entire text block will be centered
in the vertical span of the window.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the length of lines in the window.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
If this option has a value greater than zero then the <b>aspect</b>
option is ignored and the <b>width</b> option determines the line
length.
If this option has a value less than or equal to zero, then
the <b>aspect</b> option determines the line length.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">message</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a message widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the message such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">message</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A message is a widget that displays a textual string.  A message
widget has three special features.  First, it breaks up
its string into lines in order to produce a given aspect ratio
for the window.  The line breaks are chosen at word boundaries
wherever possible (if not even a single word would fit on a
line, then the word will be split across lines).  Newline characters
in the string will force line breaks;  they can be used, for example,
to leave blank lines in the display.
</p>
<p>The second feature of a message widget is justification.  The text
may be displayed left-justified (each line starts at the left side of
the window), centered on a line-by-line basis, or right-justified
(each line ends at the right side of the window).
</p>
<p>The third feature of a message widget is that it handles control
characters and non-printing characters specially.  Tab characters
are replaced with enough blank space to line up on the next
8-character boundary.  Newlines cause line breaks.  Other control
characters (ASCII code less than 0x20) and characters not defined
in the font are displayed as a four-character sequence <b>\x</b><i>hh</i> where
<i>hh</i> is the two-digit hexadecimal number corresponding to
the character.  In the unusual case where the font doesn't contain
all of the characters in ``0123456789abcdef\x'' then control
characters and undefined characters are not displayed at all.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">message</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for message widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">message</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">message</b>
command.

</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>When a new message is created, it has no default event bindings:
messages are intended for output purposes only.

</p>
</section>
<section>
<title>BUGS</title>
<p>Tabs don't work very well with text that is centered or right-justified.
The most common result is that the line is justified wrong.

</p>
</section>
<keywords>
<keyword>message</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="messageBox" title="tk_messageBox" version="4.2">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: messageBox.n,v 1.8 2004/10/28 10:22:51 dkf Exp $
 -->
<?TROFF.TH title="tk_messageBox" section="n" date="4.2" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_messageBox</name>
<desc>pops up a message window and waits for user response.</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk_messageBox</cmd> ?<m>option value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This procedure creates and displays a message window with an
application-specified message, an icon and a set of buttons.  Each of
the buttons in the message window is identified by a unique symbolic
name (see the <b>-type</b> options).  After the message window is
popped up, <cmd>tk_messageBox</cmd> waits for the user to select one of the
buttons. Then it returns the symbolic name of the selected button.

The following option-value pairs are supported:
</p>
<dl>
<dle>
<dt><b>-default</b> <m>name</m></dt>
<dd><i>Name</i> gives the symbolic name of the default button for
this message window ('ok', 'cancel', and so on). See <b>-type</b> 
for a list of the symbolic names.  If this option is not specified,
the first button in the dialog will be made the default.
</dd>
</dle>
<dle>
<dt><b>-detail</b> <m>string</m></dt>
<dd><new version="8.5">Specifies an auxiliary message to the main message given by the
<b>-message</b> option.  Where supported by the underlying OS, the
message detail will be presented in a less emphasized font than the
main message.
</new></dd>
</dle>
<dle>
<dt><b>-icon</b> <m>iconImage</m></dt>
<dd>Specifies an icon to display. <i>IconImage</i> must be one of the
following: <b cat="AMBIGUOUS ambiguous cmd">error</b>, <b cat="AMBIGUOUS ambiguous cmd">info</b>, <b>question</b> or
<b>warning</b>. If this option is not specified, then the info icon will be
displayed.
</dd>
</dle>
<dle>
<dt><b>-message</b> <m>string</m></dt>
<dd>Specifies the message to display in this message box.
</dd>
</dle>
<dle>
<dt><b>-parent</b> <m>window</m></dt>
<dd>Makes <i>window</i> the logical parent of the message box. The message
box is displayed on top of its parent window.
</dd>
</dle>
<dle>
<dt><b>-title</b> <m>titleString</m></dt>
<dd>Specifies a string to display as the title of the message box. The
default value is an empty string.
</dd>
</dle>
<dle>
<dt><b>-type</b> <m>predefinedType</m></dt>
<dd>Arranges for a predefined set of buttons to be displayed. The
following values are possible for <i>predefinedType</i>:
<dl>
<dle>
<dt><b>abortretryignore</b></dt>
<dd>Displays three buttons whose symbolic names are <b>abort</b>,
<b>retry</b> and <b>ignore</b>.
</dd>
</dle>
<dle>
<dt><b>ok</b></dt>
<dd>Displays one button whose symbolic name is <b>ok</b>.
</dd>
</dle>
<dle>
<dt><b>okcancel</b></dt>
<dd>Displays two buttons whose symbolic names are <b>ok</b> and <b>cancel</b>.
</dd>
</dle>
<dle>
<dt><b>retrycancel</b></dt>
<dd>Displays two buttons whose symbolic names are <b>retry</b> and <b>cancel</b>.
</dd>
</dle>
<dle>
<dt><b>yesno</b></dt>
<dd>Displays two buttons whose symbolic names are <b>yes</b> and <b>no</b>.
</dd>
</dle>
<dle>
<dt><b>yesnocancel</b></dt>
<dd>Displays three buttons whose symbolic names are <b>yes</b>, <b>no</b>
and <b>cancel</b>.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<example>
set answer [<cmd>tk_messageBox</cmd> -message "Really quit?" \
        -icon question -type yesno \
        -detail "Select \"Yes\" to make the application exit"]
switch -- $answer {
    yes exit
    no {<cmd>tk_messageBox</cmd> -message "I know you like this application!" \
            -type ok}
}
</example>


</section>
<keywords>
<keyword>message box</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_MoveToplevelWindow" id="MoveToplev">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: MoveToplev.3,v 1.2 1998/09/14 18:22:52 stanton Exp $
 -->
<?TROFF.TH title="Tk_MoveToplevelWindow" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_MoveToplevelWindow</name>
<desc>Adjust the position of a top-level window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<b>Tk_MoveToplevelWindow(</b><m>tkwin</m>, <m>x</m>, <m>y</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for top-level window to move.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>New x-coordinate for the top-left pixel of <i>tkwin</i>'s border, or the
top-left pixel of the decorative border supplied for <i>tkwin</i> by the
window manager, if there is one.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>New y-coordinate for the top-left pixel of <i>tkwin</i>'s border, or the
top-left pixel of the decorative border supplied for <i>tkwin</i> by the
window manager, if there is one.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>In general, a window should never set its own position;  this should be
done only by the geometry manger that is responsible for the window.
For top-level windows the window manager is effectively the geometry
manager;  Tk provides interface code between the application and the
window manager to convey the application's desires to the geometry
manager.  The desired size for a top-level window is conveyed using
the usual <fun>Tk_GeometryRequest</fun> mechanism.  The procedure
<fun>Tk_MoveToplevelWindow</fun> may be used by an application to request
a particular position for a top-level window;  this procedure is
similar in function to the <b>wm geometry</b> Tcl command except that
negative offsets cannot be specified.  It is invoked by widgets such as
menus that want to appear at a particular place on the screen.
</p>
<p>When <fun>Tk_MoveToplevelWindow</fun> is called it doesn't immediately
pass on the new desired location to the window manager;  it defers
this action until all other outstanding work has been completed,
using the <b>Tk_DoWhenIdle</b> mechanism.

</p>
</section>
<keywords>
<keyword>position</keyword>
<keyword>top-level window</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage cat="package" id="msgcat" version="1.4" title="msgcat">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998 Mark Harrison.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     SCCS: @(#) msgcat.n
 -->
<?TROFF.TH title="msgcat" section="n" date="1.4" source="msgcat" manual="Tcl Bundled Packages" ?>
<namesection>
<name>msgcat</name>
<desc>Tcl message catalog</desc>
</namesection>
<synopsis>
<syntax>
<b>package require Tcl 8.5</b>

<b>package require msgcat 1.4.2</b>

<b>::msgcat::mc</b> <m>src-string</m> ?<m>arg arg ...</m>?

<b>::msgcat::mcmax ?</b><m>src-string src-string ...</m>?

<b>::msgcat::mclocale</b> ?<m>newLocale</m>?

<b>::msgcat::mcpreferences</b>

<b>::msgcat::mcload</b> <m>dirname</m>

<b>::msgcat::mcset</b> <m>locale src-string</m> ?<m>translate-string</m>?

<b>::msgcat::mcmset</b> <m>locale src-trans-list</m>

<b>::msgcat::mcunknown</b> <m>locale src-string</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b>msgcat</b> package provides a set of functions
that can be used to manage multi-lingual user interfaces.
Text strings are defined in a ``message catalog'' which
is independent from the application, and
which can be edited or localized without modifying
the application source code.  New languages
or locales are provided by adding a new file to
the message catalog.
</p>
<p>Use of the message catalog is optional by any application
or package, but is encouraged if the application or package
wishes to be enabled for multi-lingual applications.
</p>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><b>::msgcat::mc</b> <m>src-string</m> ?<m>arg arg ...</m>?</dt>
<dd>Returns a translation of <i>src-string</i> according to the
user's current locale.  If additional arguments past <i>src-string</i>
are given, the <b cat="AMBIGUOUS ambiguous cmd">format</b> command is used to substitute the
additional arguments in the translation of <i>src-string</i>.
</dd>
</dle>
</dl>
<p><b>::msgcat::mc</b> will search the messages defined
in the current namespace for a translation of <i>src-string</i>; if
none is found, it will search in the parent of the current namespace,
and so on until it reaches the global namespace.  If no translation
string exists, <b>::msgcat::mcunknown</b> is called and the string
returned from <b>::msgcat::mcunknown</b> is returned.
</p>
<p><b>::msgcat::mc</b> is the main function used to localize an
application.  Instead of using an English string directly, an
application can pass the English string through <b>::msgcat::mc</b> and
use the result.  If an application is written for a single language in
this fashion, then it is easy to add support for additional languages
later simply by defining new message catalog entries.
</p>
<dl>
<dle>
<dt><b>::msgcat::mcmax ?</b><m>src-string src-string ...</m>?</dt>
<dd>Given several source strings, <b>::msgcat::mcmax</b> returns the length
of the longest translated string.  This is useful when designing
localized GUIs, which may require that all buttons, for example, be a
fixed width (which will be the width of the widest button).
</dd>
</dle>
<dle>
<dt><b>::msgcat::mclocale</b> ?<m>newLocale</m>?  </dt>
<dd>This function sets the locale to <i>newLocale</i>.  If <i>newLocale</i>
is omitted, the current locale is returned, otherwise the current locale
is set to <i>newLocale</i>.  msgcat stores and compares the locale in a
case-insensitive manner, and returns locales in lowercase.
The initial locale is determined by the locale specified in
the user's environment.  See <ref refid="locale-specification">LOCALE SPECIFICATION</ref>
below for a description of the locale string format.
</dd>
</dle>
<dle>
<dt><b>::msgcat::mcpreferences</b></dt>
<dd>Returns an ordered list of the locales preferred by
the user, based on the user's language specification.
The list is ordered from most specific to least
preference.  The list is derived from the current
locale set in msgcat by <b>::msgcat::mclocale</b>, and
cannot be set independently.  For example, if the
current locale is en_US_funky, then <b>::msgcat::mcpreferences</b>
<new version="1.4">returns <b>{en_US_funky en_US en {}}</b>.
</new></dd>
</dle>
<dle>
<dt><b>::msgcat::mcload</b> <m>dirname</m></dt>
<dd>Searches the specified directory for files that match
the language specifications returned by <b>::msgcat::mcpreferences</b>
(note that these are all lowercase), extended by the file
extension ``.msg''.  Each matching file is 
read in order, assuming a UTF-8 encoding.  The file contents are
then evaluated as a Tcl script.  This means that Unicode characters
may be present in the message file either directly in their UTF-8
encoded form, or by use of the backslash-u quoting recognized by Tcl
evaluation.  The number of message files which matched the specification
and were loaded is returned.
</dd>
</dle>
<dle>
<dt><b>::msgcat::mcset</b> <m>locale src-string</m> ?<m>translate-string</m>?</dt>
<dd>Sets the translation for <i>src-string</i> to <i>translate-string</i>
in the specified <i>locale</i> and the current namespace.  If
<i>translate-string</i> is not specified, <i>src-string</i> is used
for both.  The function returns <i>translate-string</i>.
</dd>
</dle>
<dle>
<dt><b>::msgcat::mcmset</b> <m>locale src-trans-list</m></dt>
<dd>Sets the translation for multiple source strings in
<i>src-trans-list</i> in the specified <i>locale</i> and the current
namespace.
<i>src-trans-list</i> must have an even number of elements and is in
the form {<i>src-string translate-string</i> ?<i>src-string
translate-string ...</i>?} <b>::msgcat::mcmset</b> can be significantly
faster than multiple invocations of <b>::msgcat::mcset</b>. The function
returns the number of translations set.
</dd>
</dle>
<dle>
<dt><b>::msgcat::mcunknown</b> <m>locale src-string</m></dt>
<dd>This routine is called by <b>::msgcat::mc</b> in the case when
a translation for <i>src-string</i> is not defined in the
current locale.  The default action is to return
<i>src-string</i>.  This procedure can be redefined by the
application, for example to log error messages for each unknown
string.  The <b>::msgcat::mcunknown</b> procedure is invoked at the
same stack context as the call to <b>::msgcat::mc</b>.  The return value
of <b>::msgcat::mcunknown</b> is used as the return value for the call
to <b>::msgcat::mc</b>.  
</dd>
</dle>
</dl>
</section>
<section id="locale-specification">
<title>LOCALE SPECIFICATION</title>
<p>The locale is specified to <b>msgcat</b> by a locale string
passed to <b>::msgcat::mclocale</b>.
The locale string consists of
a language code, an optional country code, and an optional
system-specific code, each separated by ``_''.  The country and language
codes are specified in standards ISO-639 and ISO-3166.
For example, the locale ``en'' specifies English and ``en_US'' specifies
U.S. English.
</p>
<p>When the msgcat package is first loaded, the locale is initialized
according to the user's environment.  The variables <b>env(LC_ALL)</b>,
<b>env(LC_MESSAGES)</b>, and <b>env(LANG)</b> are examined in order.
The first of them to have a non-empty value is used to determine the
initial locale.  The value is parsed according to the XPG4 pattern
</p>
<example>
language[_country][.codeset][@modifier]
</example>
<p>to extract its parts.  The initial locale is then set by calling
<b>::msgcat::mclocale</b> with the argument 
</p>
<example>
language[_country][_modifier]
</example>
<p>On Windows, if none of those environment variables is set, msgcat will
attempt to extract locale information from the
registry.  If all these attempts to discover an initial locale
from the user's environment fail, msgcat defaults to an initial
locale of ``C''.
</p>
<p>When a locale is specified by the user, a ``best match'' search is
performed during string translation.  For example, if a user specifies
<new version="1.4">en_GB_Funky, the locales ``en_GB_Funky'', ``en_GB'', ``en'' and ``''
(the empty string)
</new>are searched in order until a matching translation
string is found.  If no translation string is available, then
<b>::msgcat::mcunknown</b> is called.
</p>
</section>
<section>
<title>NAMESPACES AND MESSAGE CATALOGS</title>
<p>Strings stored in the message catalog are stored relative
to the namespace from which they were added.  This allows
multiple packages to use the same strings without fear
of collisions with other packages.  It also allows the
source string to be shorter and less prone to typographical
error.
</p>
<p>For example, executing the code
</p>
<example>
<b>::msgcat::mcset</b> en hello "hello from ::"
namespace eval foo {
   <b>::msgcat::mcset</b> en hello "hello from ::foo"
}
puts [<b>::msgcat::mc</b> hello]
namespace eval foo {puts [<b>::msgcat::mc</b> hello]}
</example>
<p>will print
</p>
<example>
hello from ::
hello from ::foo
</example>
<p>When searching for a translation of a message, the
message catalog will search first the current namespace,
then the parent of the current namespace, and so on until
the global namespace is reached.  This allows child namespaces
to "inherit" messages from their parent namespace.
</p>
<p>For example, executing (in the ``en'' locale) the code 
</p>
<example>
<b>::msgcat::mcset</b> en m1 ":: message1"
<b>::msgcat::mcset</b> en m2 ":: message2"
<b>::msgcat::mcset</b> en m3 ":: message3"
namespace eval ::foo {
   <b>::msgcat::mcset</b> en m2 "::foo message2"
   <b>::msgcat::mcset</b> en m3 "::foo message3"
}
namespace eval ::foo::bar {
   <b>::msgcat::mcset</b> en m3 "::foo::bar message3"
}
namespace import <b>::msgcat::mc</b>
puts "[<b>mc</b> m1]; [<b>mc</b> m2]; [<b>mc</b> m3]"
namespace eval ::foo {puts "[<b>mc</b> m1]; [<b>mc</b> m2]; [<b>mc</b> m3]"}
namespace eval ::foo::bar {puts "[<b>mc</b> m1]; [<b>mc</b> m2]; [<b>mc</b> m3]"}
</example>
<p>will print
</p>
<example>
:: message1; :: message2; :: message3
:: message1; ::foo message2; ::foo message3
:: message1; ::foo message2; ::foo::bar message3
</example>
</section>
<section>
<title>LOCATION AND FORMAT OF MESSAGE FILES</title>
<p>Message files can be located in any directory, subject
to the following conditions:
</p>
<ol>
<li>All message files for a package are in the same directory.
</li>
<li>The message file name is a msgcat locale specifier (all lowercase)
followed by ``.msg''.  For example:
<example>
es.msg    -- spanish
en_gb.msg -- United Kingdom English
</example><new version="1.4"><i>Exception:</i> The message file for the root locale ``'' is
called <b>ROOT.msg</b>.  This exception is made so as not to
cause peculiar behavior, such as marking the message file as
``hidden'' on Unix file systems.
</new></li>
<li>The file contains a series of calls to <b>mcset</b> and
<b>mcmset</b>, setting the necessary translation strings
for the language, likely enclosed in a <b>namespace eval</b>
so that all source strings are tied to the namespace of
the package. For example, a short <b>es.msg</b> might contain:
<example>
namespace eval ::mypackage {
   <b>::msgcat::mcset</b> es "Free Beer!" "Cerveza Gracias!"
}
</example></li>
</ol>
</section>
<section>
<title>RECOMMENDED MESSAGE SETUP FOR PACKAGES</title>
<p>If a package is installed into a subdirectory of the
<b cat="variable">tcl_pkgPath</b> and loaded via <b>package require</b>, the
following procedure is recommended.
</p>
<ol>
<li>During package installation, create a subdirectory
<b>msgs</b> under your package directory.
</li>
<li>Copy your *.msg files into that directory.
</li>
<li> Add the following command to your package
initialization script:
<example>
# load language files, stored in msgs subdirectory
<b>::msgcat::mcload</b> [file join [file dirname [info script]] msgs]
</example></li>
</ol>
</section>
<section>
<title>POSITIONAL CODES FOR FORMAT AND SCAN COMMANDS</title>
<p>It is possible that a message string used as an argument
to <b cat="AMBIGUOUS ambiguous cmd">format</b> might have positionally dependent parameters that
might need to be repositioned.  For example, it might be
syntactically desirable to rearrange the sentence structure
while translating.
</p>
<example>
format "We produced %d units in location %s" $num $city
format "In location %s we produced %d units" $city $num
</example>
<p>This can be handled by using the positional
parameters:
</p>
<example>
format "We produced %1\$d units in location %2\$s" $num $city
format "In location %2\$s we produced %1\$d units" $num $city
</example>
<p>Similarly, positional parameters can be used with <b cat="AMBIGUOUS ambiguous cmd">scan</b> to
extract values from internationalized strings.
</p>
</section>
<section>
<title>CREDITS</title>
<p>The message catalog code was developed by Mark Harrison.

</p>
</section>
<seealso>
<ref>format(n)</ref>
<ref>scan(n)</ref>
<ref>namespace(n)</ref>
<ref>package(n)</ref>
</seealso>
<keywords>
<keyword>internationalization</keyword>
<keyword>i18n</keyword>
<keyword>localization</keyword>
<keyword>l10n</keyword>
<keyword>message</keyword>
<keyword>text</keyword>
<keyword>translation</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Name" title="Tk_Name">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Name.3,v 1.5 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_Name" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_Name</name>
<name>Tk_PathName</name>
<name>Tk_NameToWindow</name>
<desc>convert between names and window tokens</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_Uid
<fun>Tk_Name</fun>(<m>tkwin</m>)

char *
<fun>Tk_PathName</fun>(<m>tkwin</m>)

Tk_Window
<fun>Tk_NameToWindow</fun>(<m>interp</m>, <m>pathName</m>, <m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pathName">*pathName</name>
<argmode>in</argmode>
<desc>Character string containing path name of window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Each window managed by Tk has two names, a short name that identifies
a window among children of the same parent, and a path name that
identifies the window uniquely among all the windows belonging to the
same main window.  The path name is used more often in Tk than the
short name;  many commands, like <cmd>bind</cmd>, expect path names as
arguments.
</p>
<p>The <fun>Tk_Name</fun> macro returns a window's
short name, which is the same as the <i>name</i> argument
passed to <fun>Tk_CreateWindow</fun> when
the window was created.  The value is returned
as a Tk_Uid, which may be used just like a string pointer but also has
the properties of a unique identifier (see the manual entry for
<fun>Tk_GetUid</fun> for details).
</p>
<p>The <fun>Tk_PathName</fun> macro returns a
hierarchical name for <i>tkwin</i>.
Path names have a structure similar to file names in Unix but with
dots between elements instead of slashes:  the main window for
an application has the path name ``.'';  its children have names like
``.a'' and ``.b''; their children have names like ``.a.aa'' and
``.b.bb''; and so on.  A window is considered to be a child of
another window for naming purposes if the second window was named
as the first window's <i>parent</i> when the first window was created.
This is not always the same as the X window hierarchy.  For
example, a pop-up
is created as a child of the root window, but its logical parent will
usually be a window within the application.
</p>
<p>The procedure <fun>Tk_NameToWindow</fun> returns the token for a window
given its path name (the <i>pathName</i> argument) and another window
belonging to the same main window (<i>tkwin</i>).  It normally
returns a token for the named window, but if no such window exists
<fun>Tk_NameToWindow</fun> leaves an error message in <i>interp-&gt;result</i>
and returns NULL.  The <i>tkwin</i> argument to <fun>Tk_NameToWindow</fun>
is needed because path names are only unique within a single
application hierarchy.  If, for example, a single process has opened
two main windows, each will have a separate naming hierarchy and the
same path name might appear in each of the hierarchies.  Normally
<i>tkwin</i> is the main window of the desired hierarchy, but this
need not be the case:  any window in the desired hierarchy may be used.

</p>
</section>
<keywords>
<keyword>name</keyword>
<keyword>path name</keyword>
<keyword>token</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="NameOfImg" version="4.0" title="Tk_NameOfImage">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: NameOfImg.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_NameOfImage" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_NameOfImage</name>
<desc>Return name of image.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

const char *
<fun>Tk_NameOfImage</fun>(<m>typePtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_ImageMaster</argtype>
<name name="masterPtr">*masterPtr</name>
<argmode>in</argmode>
<desc>Token for image, which was passed to image manager's <i>createProc</i> when
the image was created.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is invoked by image managers to find out the name
of an image.  Given the token for the image, it returns the
string name for the image.

</p>
</section>
<keywords>
<keyword>image manager</keyword>
<keyword>image name</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Namespace" version="8.5" title="Tcl_Namespace">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Namespace.3,v 1.8 2006/02/01 18:27:43 dgp Exp $
     
     Note that some of these functions do not seem to belong, but they
     were all introduced with the same TIP (#139)
 -->
<?TROFF.TH title="Tcl_Namespace" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_AppendExportList</name>
<name>Tcl_CreateNamespace</name>
<name>Tcl_DeleteNamespace</name>
<name>Tcl_Export</name>
<name>Tcl_FindCommand</name>
<name>Tcl_FindNamespace</name>
<name>Tcl_ForgetImport</name>
<name>Tcl_GetCurrentNamespace</name>
<name>Tcl_GetGloblaNamespace</name>
<name>Tcl_GetNamespaceUnknownHandler</name>
<name>Tcl_Import</name>
<name>Tcl_SetNamespaceUnknownHandler</name>
<desc>manipulate namespaces</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Namespace *
<fun>Tcl_CreateNamespace</fun>(<m>interp</m>, <m>name</m>, <m>clientData</m>, <m>deleteProc</m>)

<fun>Tcl_DeleteNamespace</fun>(<m>nsPtr</m>)

int
<fun>Tcl_AppendExportList</fun>(<m>interp</m>, <m>nsPtr</m>, <m>objPtr</m>)

int
<fun>Tcl_Export</fun>(<m>interp</m>, <m>nsPtr</m>, <m>pattern</m>, <m>resetListFirst</m>)

int
<fun>Tcl_Import</fun>(<m>interp</m>, <m>nsPtr</m>, <m>pattern</m>, <m>allowOverwrite</m>)

int
<fun>Tcl_ForgetImport</fun>(<m>interp</m>, <m>nsPtr</m>, <m>pattern</m>)

Tcl_Namespace *
<fun>Tcl_GetCurrentNamespace</fun>(<m>interp</m>)

Tcl_Namespace *
<fun>Tcl_GetGlobalNamespace</fun>(<m>interp</m>)

Tcl_Namespace *
<fun>Tcl_FindNamespace</fun>(<m>interp</m>, <m>name</m>, <m>contextNsPtr</m>, <m>flags</m>)

Tcl_Command
<fun>Tcl_FindCommand</fun>(<m>interp</m>, <m>name</m>, <m>contextNsPtr</m>, <m>flags</m>)

Tcl_Obj *
<b>Tcl_GetNamespaceUnknownHandler(</b><m>interp</m>, <m>nsPtr</m>)

int
<b>Tcl_SetNamespaceUnknownHandler(</b><m>interp</m>, <m>nsPtr</m>, <m>handlerPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in/out</argmode>
<desc>The interpreter in which the namespace exists and where name lookups
are performed. Also where error result messages are written.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>The name of the namespace or command to be created or accessed.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>A context pointer by the creator of the namespace.  Not interpreted by
Tcl at all.
</desc>
</argdef>
<argdef>
<argtype>Tcl_NamespaceDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>A pointer to function to call when the namespace is deleted, or NULL
if no such callback is to be performed.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Namespace</argtype>
<name name="nsPtr">*nsPtr</name>
<argmode>in</argmode>
<desc>The namespace to be manipulated, or NULL (for other than
<fun>Tcl_DeleteNamespace</fun>) to manipulate the current namespace.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>out</argmode>
<desc>A reference to an unshared object to which the function output will be
written.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>The glob-style pattern (see <fun>Tcl_StringMatch</fun>) that describes the
commands to be imported or exported.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>resetListFirst</name>
<argmode>in</argmode>
<desc>Whether the list of export patterns should be reset before adding the
current pattern to it.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>allowOverwrite</name>
<argmode>in</argmode>
<desc>Whether new commands created by this import action can overwrite
existing commands.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Namespace</argtype>
<name name="contextNsPtr">*contextNsPtr</name>
<argmode>in</argmode>
<desc>The location in the namespace hierarchy where the search for a
namespace or command should be conducted relative to when the search
term is not rooted at the global namespace.  NULL indicates the
current namespace.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>OR-ed combination of bits controlling how the search is to be
performed.  The following flags are supported: <b>TCL_GLOBAL_ONLY</b>
(indicates that the search is always to be conducted relative to the
global namespace), <b>TCL_NAMESPACE_ONLY</b> (just for <fun>Tcl_FindCommand</fun>;
indicates that the search is always to be conducted relative to the
context namespace), and <b>TCL_LEAVE_ERR_MSG</b> (indicates that an error
message should be left in the interpreter if the search fails.)
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="handlerPtr">*handlerPtr</name>
<argmode>in</argmode>
<desc>A script fragment to be installed as the unknown command handler for the
namespace, or NULL to reset the handler to its default.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>Namespaces are hierarchic naming contexts that can contain commands
and variables.  They also maintain a list of patterns that describes
what commands are exported, and can import commands that have been
exported by other namespaces.  Namespaces can also be manipulated
through the Tcl command <cmd>namespace</cmd>.
</p>
<p>The <i>Tcl_Namespace</i> structure encapsulates a namespace, and is
guaranteed to have the following fields in it: <i>name</i> (the local
name of the namespace, with no namespace separator characters in it,
with empty denoting the global namespace), <i>fullName</i> (the fully
specified name of the namespace), <i>clientData</i>, <i>deleteProc</i>
(the values specified in the call to <fun>Tcl_CreateNamespace</fun>), and
<i>parentPtr</i> (a pointer to the containing namespace, or NULL for
the global namespace.)
</p>
<p><fun>Tcl_CreateNamespace</fun> creates a new namespace.  The
<i>deleteProc</i> will have the following type signature:
</p>
<syntax cat="type" name="Tcl_NamespaceDeleteProc" scope="global">
typedef void (Tcl_NamespaceDeleteProc) (ClientData clientData);
</syntax>
<p><fun>Tcl_DeleteNamespace</fun> deletes a namespace.
</p>
<p><fun>Tcl_AppendExportList</fun> retrieves the export patterns for a
namespace given namespace and appends them (as list items) to
<i>objPtr</i>.
</p>
<p><fun>Tcl_Export</fun> sets and appends to the export patterns for a
namespace.  Patterns are appended unless the <i>resetListFirst</i> flag
is true.
</p>
<p><fun>Tcl_Import</fun> imports commands matching a pattern into a
namespace.  Note that the pattern must include the name of the
namespace to import from.  This function returns an error if
an attempt to import a command over an existing command is made,
unless the <i>allowOverwrite</i> flag has been set.
</p>
<p><fun>Tcl_ForgetImport</fun> removes imports matching a pattern.
</p>
<p><fun>Tcl_GetCurrentNamespace</fun> returns the current namespace for an
interpreter.
</p>
<p><fun>Tcl_GetGlobalNamespace</fun> returns the global namespace for an
interpreter.
</p>
<p><fun>Tcl_FindNamespace</fun> searches for a namespace named <i>name</i>
within the context of the namespace <i>contextNsPtr</i>.  If the
namespace cannot be found, NULL is returned.
</p>
<p><fun>Tcl_FindCommand</fun> searches for a command named <i>name</i> within
the context of the namespace <i>contextNsPtr</i>.  If the command
cannot be found, NULL is returned.
</p>
<p><b>Tcl_GetNamespaceUnknownHandler</b> returns the unknown command handler
for the namespace, or NULL if none is set.
</p>
<p><b>Tcl_SetNamespaceUnknownHandler</b> sets the unknown command handler for
the namespace. If <i>handlerPtr</i> is NULL, then the handler is reset to
its default.

</p>
</section>
<seealso>
<ref>Tcl_CreateCommand</ref>
<ref>Tcl_ListObjAppendElements</ref>
<ref>Tcl_SetVar</ref>
</seealso>
<keywords>
<keyword>namespace</keyword>
<keyword>command</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Notifier" version="8.1" title="Notifier">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-1999 Scriptics Corporation
     Copyright (c) 1995-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Notifier.3,v 1.15 2005/05/10 18:33:56 kennykb Exp $
 -->
<?TROFF.TH title="Notifier" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CreateEventSource</name>
<name>Tcl_DeleteEventSource</name>
<name>Tcl_SetMaxBlockTime</name>
<name>Tcl_QueueEvent</name>
<name>Tcl_ThreadQueueEvent</name>
<name>Tcl_ThreadAlert</name>
<name>Tcl_GetCurrentThread</name>
<name>Tcl_DeleteEvents</name>
<name>Tcl_InitNotifier</name>
<name>Tcl_FinalizeNotifier</name>
<name>Tcl_WaitForEvent</name>
<name>Tcl_AlertNotifier</name>
<name>Tcl_SetTimer</name>
<name>Tcl_ServiceAll</name>
<name>Tcl_ServiceEvent</name>
<name>Tcl_GetServiceMode</name>
<name>Tcl_SetServiceMode</name>
<desc>the event queue and notifier interfaces</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_CreateEventSource</fun>(<m>setupProc</m>, <m>checkProc</m>, <m>clientData</m>)

void
<fun>Tcl_DeleteEventSource</fun>(<m>setupProc</m>, <m>checkProc</m>, <m>clientData</m>)

void
<fun>Tcl_SetMaxBlockTime</fun>(<m>timePtr</m>)

void
<fun>Tcl_QueueEvent</fun>(<m>evPtr</m>, <m>position</m>)

void
<fun>Tcl_ThreadQueueEvent</fun>(<m>threadId</m>, <m>evPtr</m>, <m>position</m>)

void
<fun>Tcl_ThreadAlert</fun>(<m>threadId</m>)

Tcl_ThreadId
<fun>Tcl_GetCurrentThread</fun>()

void
<fun>Tcl_DeleteEvents</fun>(<m>deleteProc</m>, <m>clientData</m>)

ClientData
<fun>Tcl_InitNotifier</fun>()

void
<fun>Tcl_FinalizeNotifier</fun>(<m>clientData</m>)

int
<fun>Tcl_WaitForEvent</fun>(<m>timePtr</m>)

void
<fun>Tcl_AlertNotifier</fun>(<m>clientData</m>)

void
<fun>Tcl_SetTimer</fun>(<m>timePtr</m>)

int
<fun>Tcl_ServiceAll</fun>()

int
<fun>Tcl_ServiceEvent</fun>(<m>flags</m>)

int
<fun>Tcl_GetServiceMode</fun>()

int
<fun>Tcl_SetServiceMode</fun>(<m>mode</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_EventSetupProc</argtype>
<name name="setupProc">*setupProc</name>
<argmode>in</argmode>
<desc>Procedure to invoke to prepare for event wait in <fun>Tcl_DoOneEvent</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_EventCheckProc</argtype>
<name name="checkProc">*checkProc</name>
<argmode>in</argmode>
<desc>Procedure for <fun>Tcl_DoOneEvent</fun> to invoke after waiting for
events.  Checks to see if any events have occurred and, if so,
queues them.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>setupProc</i>, <i>checkProc</i>, or
<i>deleteProc</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Time</argtype>
<name name="timePtr">*timePtr</name>
<argmode>in</argmode>
<desc>Indicates the maximum amount of time to wait for an event.  This
is specified as an interval (how long to wait), not an absolute
time (when to wakeup).  If the pointer passed to <fun>Tcl_WaitForEvent</fun>
is NULL, it means there is no maximum wait time:  wait forever if
necessary.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Event</argtype>
<name name="evPtr">*evPtr</name>
<argmode>in</argmode>
<desc>An event to add to the event queue.  The storage for the event must
have been allocated by the caller using <fun>Tcl_Alloc</fun> or <fun>ckalloc</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_QueuePosition</argtype>
<name>position</name>
<argmode>in</argmode>
<desc>Where to add the new event in the queue:  <b>TCL_QUEUE_TAIL</b>,
<b>TCL_QUEUE_HEAD</b>, or <b>TCL_QUEUE_MARK</b>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ThreadId</argtype>
<name>threadId</name>
<argmode>in</argmode>
<desc>A unique identifier for a thread.
</desc>
</argdef>
<argdef>
<argtype>Tcl_EventDeleteProc</argtype>
<name name="deleteProc">*deleteProc</name>
<argmode>in</argmode>
<desc>Procedure to invoke for each queued event in <fun>Tcl_DeleteEvents</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>What types of events to service.  These flags are the same as those
passed to <fun>Tcl_DoOneEvent</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>mode</name>
<argmode>in</argmode>
<desc>Indicates whether events should be serviced by <fun>Tcl_ServiceAll</fun>.
Must be one of <b>TCL_SERVICE_NONE</b> or <b>TCL_SERVICE_ALL</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>INTRODUCTION</title>
<p>The interfaces described here are used to customize the Tcl event
loop.  The two most common customizations are to add new sources of
events and to merge Tcl's event loop with some other event loop, such
as one provided by an application in which Tcl is embedded.  Each of
these tasks is described in a separate section below.
</p>
<p>The procedures in this manual entry are the building blocks out of which
the Tcl event notifier is constructed.  The event notifier is the lowest
layer in the Tcl event mechanism.  It consists of three things:
</p>
<ol>
<li>Event sources: these represent the ways in which events can be
generated.  For example, there is a timer event source that implements
the <fun>Tcl_CreateTimerHandler</fun> procedure and the <cmd>after</cmd>
command, and there is a file event source that implements the
<fun>Tcl_CreateFileHandler</fun> procedure on Unix systems.  An event
source must work with the notifier to detect events at the right
times, record them on the event queue, and eventually notify
higher-level software that they have occurred.  The procedures
<fun>Tcl_CreateEventSource</fun>, <fun>Tcl_DeleteEventSource</fun>,
and <fun>Tcl_SetMaxBlockTime</fun>, <fun>Tcl_QueueEvent</fun>, and
<fun>Tcl_DeleteEvents</fun> are used primarily by event sources.
</li>
<li>The event queue: for non-threaded applications,
there is a single queue for the whole application,
containing events that have been detected but not yet serviced.  Event
sources place events onto the queue so that they may be processed in
order at appropriate times during the event loop. The event queue
guarantees a fair discipline of event handling, so that no event
source can starve the others.  It also allows events to be saved for
servicing at a future time.  Threaded applications work in a
similar manner, except that there is a separate event queue for
each thread containing a Tcl interpreter.
<fun>Tcl_QueueEvent</fun> is used (primarily
by event sources) to add events to the event queue and 
<fun>Tcl_DeleteEvents</fun> is used to remove events from the queue without
processing them.  In a threaded application, <fun>Tcl_QueueEvent</fun> adds
an event to the current thread's queue, and <fun>Tcl_ThreadQueueEvent</fun>
adds an event to a queue in a specific thread.
</li>
<li>The event loop: in order to detect and process events, the application
enters a loop that waits for events to occur, places them on the event
queue, and then processes them.  Most applications will do this by
calling the procedure <fun>Tcl_DoOneEvent</fun>, which is described in a
separate manual entry.
</li>
</ol>
<p>Most Tcl applications need not worry about any of the internals of
the Tcl notifier.  However, the notifier now has enough flexibility
to be retargeted either for a new platform or to use an external event
loop (such as the Motif event loop, when Tcl is embedded in a Motif
application).  The procedures <fun>Tcl_WaitForEvent</fun> and
<fun>Tcl_SetTimer</fun> are normally implemented by Tcl, but may be
replaced with new versions to retarget the notifier (the
<fun>Tcl_InitNotifier</fun>, <fun>Tcl_AlertNotifier</fun>,
<fun>Tcl_FinalizeNotifier</fun>, <fun>Tcl_Sleep</fun>,
<fun>Tcl_CreateFileHandler</fun>, and <fun>Tcl_DeleteFileHandler</fun> must
also be replaced; see <ref refid="creating-a-new-notifier">CREATING A NEW NOTIFIER</ref> below for details).
The procedures <fun>Tcl_ServiceAll</fun>, <fun>Tcl_ServiceEvent</fun>,
<fun>Tcl_GetServiceMode</fun>, and <fun>Tcl_SetServiceMode</fun> are provided
to help connect Tcl's event loop to an external event loop such as
Motif's.
</p>
</section>
<section>
<title>NOTIFIER BASICS</title>
<p>The easiest way to understand how the notifier works is to consider
what happens when <fun>Tcl_DoOneEvent</fun> is called.
<fun>Tcl_DoOneEvent</fun> is passed a <i>flags</i> argument that indicates
what sort of events it is OK to process and also whether or not to
block if no events are ready.  <fun>Tcl_DoOneEvent</fun> does the following
things:
</p>
<ol>
<li>Check the event queue to see if it contains any events that can
be serviced.  If so, service the first possible event, remove it
from the queue, and return.  It does this by calling
<fun>Tcl_ServiceEvent</fun> and passing in the <i>flags</i> argument.
</li>
<li>Prepare to block for an event.  To do this, <fun>Tcl_DoOneEvent</fun>
invokes a <i>setup procedure</i> in each event source.
The event source will perform event-source specific initialization and
possibly call <fun>Tcl_SetMaxBlockTime</fun> to limit how long
<fun>Tcl_WaitForEvent</fun> will block if no new events occur.
</li>
<li>Call <fun>Tcl_WaitForEvent</fun>.  This procedure is implemented differently
on different platforms;  it waits for an event to occur, based on the
information provided by the event sources.
It may cause the application to block if <i>timePtr</i> specifies
an interval other than 0.
<fun>Tcl_WaitForEvent</fun> returns when something has happened,
such as a file becoming readable or the interval given by <i>timePtr</i>
expiring.  If there are no events for <fun>Tcl_WaitForEvent</fun> to
wait for, so that it would block forever, then it returns immediately
and <fun>Tcl_DoOneEvent</fun> returns 0.
</li>
<li>Call a <i>check procedure</i> in each event source.  The check
procedure determines whether any events of interest to this source
occurred.  If so, the events are added to the event queue.
</li>
<li>Check the event queue to see if it contains any events that can
be serviced.  If so, service the first possible event, remove it
from the queue, and return.
</li>
<li>See if there are idle callbacks pending. If so, invoke all of them and
return.
</li>
<li>Either return 0 to indicate that no events were ready, or go back to
step [2] if blocking was requested by the caller.

</li>
</ol>
</section>
<section>
<title>CREATING A NEW EVENT SOURCE</title>
<p>An event source consists of three procedures invoked by the notifier,
plus additional C procedures that are invoked by higher-level code
to arrange for event-driven callbacks.  The three procedures called
by the notifier consist of the setup and check procedures described
above, plus an additional procedure that is invoked when an event
is removed from the event queue for servicing.
</p>
<p>The procedure <fun>Tcl_CreateEventSource</fun> creates a new event source.
Its arguments specify the setup procedure and check procedure for
the event source.
<i>SetupProc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_EventSetupProc" scope="global">
typedef void Tcl_EventSetupProc(
        ClientData <i>clientData</i>,
        int <i>flags</i>);
</syntax>
<p>The <i>clientData</i> argument will be the same as the <i>clientData</i>
argument to <fun>Tcl_CreateEventSource</fun>;  it is typically used to
point to private information managed by the event source.
The <i>flags</i> argument will be the same as the <i>flags</i>
argument passed to <fun>Tcl_DoOneEvent</fun> except that it will never
be 0 (<fun>Tcl_DoOneEvent</fun> replaces 0 with <b>TCL_ALL_EVENTS</b>).
<i>Flags</i> indicates what kinds of events should be considered;
if the bit corresponding to this event source isn't set, the event
source should return immediately without doing anything.  For
example, the file event source checks for the <b>TCL_FILE_EVENTS</b>
bit.
</p>
<p><i>SetupProc</i>'s job is to make sure that the application wakes up
when events of the desired type occur.  This is typically done in a
platform-dependent fashion.  For example, under Unix an event source
might call <fun>Tcl_CreateFileHandler</fun>; under Windows it might
request notification with a Windows event.  For timer-driven event
sources such as timer events or any polled event, the event source
can call <fun>Tcl_SetMaxBlockTime</fun> to force the application to wake
up after a specified time even if no events have occurred.
If no event source calls <fun>Tcl_SetMaxBlockTime</fun>
then <fun>Tcl_WaitForEvent</fun> will wait as long as necessary for an
event to occur; otherwise, it will only wait as long as the shortest
interval passed to <fun>Tcl_SetMaxBlockTime</fun> by one of the event
sources.  If an event source knows that it already has events ready to
report, it can request a zero maximum block time.  For example, the
setup procedure for the X event source looks to see if there are
events already queued.  If there are, it calls
<fun>Tcl_SetMaxBlockTime</fun> with a 0 block time so that
<fun>Tcl_WaitForEvent</fun> does not block if there is no new data on the X
connection.
The <i>timePtr</i> argument to <fun>Tcl_WaitForEvent</fun> points to
a structure that describes a time interval in seconds and
microseconds:
</p>
<syntax cat="type" name="Tcl_Time" scope="global">
typedef struct Tcl_Time {
        long <i>sec</i>;
        long <i>usec</i>;
} Tcl_Time;
</syntax>
<p>The <i>usec</i> field should be less than 1000000.
</p>
<p>Information provided to <fun>Tcl_SetMaxBlockTime</fun>
is only used for the next call to <fun>Tcl_WaitForEvent</fun>; it is
discarded after <fun>Tcl_WaitForEvent</fun> returns.
The next time an event wait is done each of the event sources'
setup procedures will be called again, and they can specify new
information for that event wait.
</p>
<p>If the application uses an external event loop rather than
<fun>Tcl_DoOneEvent</fun>, the event sources may need to call
<fun>Tcl_SetMaxBlockTime</fun> at other times.  For example, if a new event
handler is registered that needs to poll for events, the event source
may call <fun>Tcl_SetMaxBlockTime</fun> to set the block time to zero to
force the external event loop to call Tcl.  In this case,
<fun>Tcl_SetMaxBlockTime</fun> invokes <fun>Tcl_SetTimer</fun> with the shortest
interval seen since the last call to <fun>Tcl_DoOneEvent</fun> or
<fun>Tcl_ServiceAll</fun>.
</p>
<p>In addition to the generic procedure <fun>Tcl_SetMaxBlockTime</fun>, other
platform-specific procedures may also be available for
<i>setupProc</i>, if there is additional information needed by
<fun>Tcl_WaitForEvent</fun> on that platform.  For example, on Unix systems
the <fun>Tcl_CreateFileHandler</fun> interface can be used to wait for file events.
</p>
<p>The second procedure provided by each event source is its check
procedure, indicated by the <i>checkProc</i> argument to
<fun>Tcl_CreateEventSource</fun>.  <i>CheckProc</i> must match the
following prototype:
</p>
<syntax cat="type" name="Tcl_EventCheckProc" scope="global">
typedef void Tcl_EventCheckProc(
        ClientData <i>clientData</i>,
        int <i>flags</i>);
</syntax>
<p>The arguments to this procedure are the same as those for <i>setupProc</i>.
<b>CheckProc</b> is invoked by <fun>Tcl_DoOneEvent</fun> after it has waited
for events.  Presumably at least one event source is now prepared to
queue an event.  <fun>Tcl_DoOneEvent</fun> calls each of the event sources
in turn, so they all have a chance to queue any events that are ready.
The check procedure does two things.  First, it must see if any events
have triggered.  Different event sources do this in different ways.
</p>
<p>If an event source's check procedure detects an interesting event, it
must add the event to Tcl's event queue.  To do this, the event source
calls <fun>Tcl_QueueEvent</fun>.  The <i>evPtr</i> argument is a pointer to
a dynamically allocated structure containing the event (see below for
more information on memory management issues).  Each event source can
define its own event structure with whatever information is relevant
to that event source.  However, the first element of the structure
must be a structure of type <type>Tcl_Event</type>, and the address of this
structure is used when communicating between the event source and the
rest of the notifier.  A <type>Tcl_Event</type> has the following definition:
</p>
<syntax cat="type" name="Tcl_Event" scope="global">
typedef struct {
    Tcl_EventProc *<i>proc</i>;
    struct Tcl_Event *<i>nextPtr</i>;
} Tcl_Event;
</syntax>
<p>The event source must fill in the <i>proc</i> field of
the event before calling <fun>Tcl_QueueEvent</fun>.
The <i>nextPtr</i> is used to link together the events in the queue
and should not be modified by the event source.
</p>
<p>An event may be added to the queue at any of three positions, depending
on the <i>position</i> argument to <fun>Tcl_QueueEvent</fun>:
</p>
<dl>
<dle>
<dt><b>TCL_QUEUE_TAIL</b></dt>
<dd>Add the event at the back of the queue, so that all other pending
events will be serviced first.  This is almost always the right
place for new events.
</dd>
</dle>
<dle>
<dt><b>TCL_QUEUE_HEAD</b></dt>
<dd>Add the event at the front of the queue, so that it will be serviced
before all other queued events.
</dd>
</dle>
<dle>
<dt><b>TCL_QUEUE_MARK</b></dt>
<dd>Add the event at the front of the queue, unless there are other
events at the front whose position is <b>TCL_QUEUE_MARK</b>;  if so,
add the new event just after all other <b>TCL_QUEUE_MARK</b> events.
This value of <i>position</i> is used to insert an ordered sequence of
events at the front of the queue, such as a series of
Enter and Leave events synthesized during a grab or ungrab operation
in Tk.
</dd>
</dle>
</dl>
<p>When it is time to handle an event from the queue (steps 1 and 4
above) <fun>Tcl_ServiceEvent</fun> will invoke the <i>proc</i> specified
in the first queued <type>Tcl_Event</type> structure.
<i>Proc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_EventProc" scope="global">
typedef int Tcl_EventProc(
        Tcl_Event *<i>evPtr</i>,
        int <i>flags</i>);
</syntax>
<p>The first argument to <i>proc</i> is a pointer to the event, which will
be the same as the first argument to the <fun>Tcl_QueueEvent</fun> call that
added the event to the queue.
The second argument to <i>proc</i> is the <i>flags</i> argument for the
current call to <fun>Tcl_ServiceEvent</fun>;  this is used by the event source
to return immediately if its events are not relevant.
</p>
<p>It is up to <i>proc</i> to handle the event, typically by invoking
one or more Tcl commands or C-level callbacks.
Once the event source has finished handling the event it returns 1
to indicate that the event can be removed from the queue.
If for some reason the event source decides that the event cannot
be handled at this time, it may return 0 to indicate that the event
should be deferred for processing later;  in this case <fun>Tcl_ServiceEvent</fun>
will go on to the next event in the queue and attempt to service it.
There are several reasons why an event source might defer an event.
One possibility is that events of this type are excluded by the
<i>flags</i> argument.
For example, the file event source will always return 0 if the
<b>TCL_FILE_EVENTS</b> bit isn't set in <i>flags</i>.
Another example of deferring events happens in Tk if
<fun>Tk_RestrictEvents</fun> has been invoked to defer certain kinds
of window events.
</p>
<p>When <i>proc</i> returns 1, <fun>Tcl_ServiceEvent</fun> will remove the
event from the event queue and free its storage.
Note that the storage for an event must be allocated by
the event source (using <fun>Tcl_Alloc</fun> or the Tcl macro <fun>ckalloc</fun>)
before calling <fun>Tcl_QueueEvent</fun>, but it
will be freed by <fun>Tcl_ServiceEvent</fun>, not by the event source.
</p>
<p>Threaded applications work in a
similar manner, except that there is a separate event queue for
each thread containing a Tcl interpreter.
Calling <fun>Tcl_QueueEvent</fun> in a multithreaded application adds
an event to the current thread's queue.
To add an event to another thread's queue, use <fun>Tcl_ThreadQueueEvent</fun>.
<fun>Tcl_ThreadQueueEvent</fun> accepts as an argument a Tcl_ThreadId argument,
which uniquely identifies a thread in a Tcl application.  To obtain the
Tcl_ThreadID for the current thread, use the <fun>Tcl_GetCurrentThread</fun>
procedure.  (A thread would then need to pass this identifier to other
threads for those threads to be able to add events to its queue.)
After adding an event to another thread's queue, you then typically
need to call <fun>Tcl_ThreadAlert</fun> to "wake up" that thread's notifier to
alert it to the new event.
</p>
<p><fun>Tcl_DeleteEvents</fun> can be used to explicitly remove one or more
events from the event queue.  <fun>Tcl_DeleteEvents</fun> calls <i>proc</i>
for each event in the queue, deleting those for with the procedure
returns 1.  Events for which the procedure returns 0 are left in the
queue.  <i>Proc</i> should match the following prototype:
</p>
<syntax cat="type" name="Tcl_EventDeleteProc" scope="global">
typedef int Tcl_EventDeleteProc(
        Tcl_Event *<i>evPtr</i>,
        ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> argument will be the same as the <i>clientData</i>
argument to <fun>Tcl_DeleteEvents</fun>; it is typically used to point to
private information managed by the event source.  The <i>evPtr</i> will
point to the next event in the queue.
</p>
<p><fun>Tcl_DeleteEventSource</fun> deletes an event source.  The <i>setupProc</i>,
<i>checkProc</i>, and <i>clientData</i> arguments must exactly match those
provided to the <fun>Tcl_CreateEventSource</fun> for the event source to be deleted.
If no such source exists, <fun>Tcl_DeleteEventSource</fun> has no effect.

</p>
</section>
<section id="creating-a-new-notifier">
<title>CREATING A NEW NOTIFIER</title>
<p>The notifier consists of all the procedures described in this manual
entry, plus <fun>Tcl_DoOneEvent</fun> and <fun>Tcl_Sleep</fun>, which are
available on all platforms, and <fun>Tcl_CreateFileHandler</fun> and
<fun>Tcl_DeleteFileHandler</fun>, which are Unix-specific.  Most of these
procedures are generic, in that they are the same for all notifiers.
However, eight of the procedures are notifier-dependent:
<fun>Tcl_InitNotifier</fun>, <fun>Tcl_AlertNotifier</fun>, <fun>Tcl_FinalizeNotifier</fun>, 
<fun>Tcl_SetTimer</fun>, <fun>Tcl_Sleep</fun>, <fun>Tcl_WaitForEvent</fun>,
<fun>Tcl_CreateFileHandler</fun> and <fun>Tcl_DeleteFileHandler</fun>.  To
support a new platform or to integrate Tcl with an
application-specific event loop, you must write new versions of these
procedures.
</p>
<p><fun>Tcl_InitNotifier</fun> initializes the notifier state and returns
a handle to the notifier state.  Tcl calls this
procedure when initializing a Tcl interpreter.  Similarly,
<fun>Tcl_FinalizeNotifier</fun> shuts down the notifier, and is
called by <fun>Tcl_Finalize</fun> when shutting down a Tcl interpreter.
</p>
<p><fun>Tcl_WaitForEvent</fun> is the lowest-level procedure in the notifier;
it is responsible for waiting for an ``interesting'' event to occur or
for a given time to elapse.  Before <fun>Tcl_WaitForEvent</fun> is invoked,
each of the event sources' setup procedure will have been invoked.
The <i>timePtr</i> argument to
<fun>Tcl_WaitForEvent</fun> gives the maximum time to block for an event,
based on calls to <fun>Tcl_SetMaxBlockTime</fun> made by setup procedures
and on other information (such as the <b>TCL_DONT_WAIT</b> bit in
<i>flags</i>).
</p>
<p>Ideally, <fun>Tcl_WaitForEvent</fun> should only wait for an event
to occur; it should not actually process the event in any way.
Later on, the
event sources will process the raw events and create Tcl_Events on
the event queue in their <i>checkProc</i> procedures.
However, on some platforms (such as Windows) this isn't possible;
events may be processed in <fun>Tcl_WaitForEvent</fun>, including queuing
Tcl_Events and more (for example, callbacks for native widgets may be
invoked).  The return value from <fun>Tcl_WaitForEvent</fun> must be either
0, 1, or -1.  On platforms such as Windows where events get processed in
<fun>Tcl_WaitForEvent</fun>, a return value of 1 means that there may be more
events still pending that haven't been processed.  This is a sign to the
caller that it must call <fun>Tcl_WaitForEvent</fun> again if it wants all
pending events to be processed. A 0 return value means that calling
<fun>Tcl_WaitForEvent</fun> again will not have any effect: either this is a
platform where <fun>Tcl_WaitForEvent</fun> only waits without doing any event
processing, or <fun>Tcl_WaitForEvent</fun> knows for sure that there are no
additional events to process (e.g. it returned because the time
elapsed).  Finally, a return value of -1 means that the event loop is
no longer operational and the application should probably unwind and
terminate.  Under Windows this happens when a WM_QUIT message is received;
under Unix it happens when <fun>Tcl_WaitForEvent</fun> would have waited
forever because there were no active event sources and the timeout was
infinite.
</p>
<p><fun>Tcl_AlertNotifier</fun> is used in multithreaded applications to allow
any thread to "wake up" the notifier to alert it to new events on its
queue.  <fun>Tcl_AlertNotifier</fun> requires as an argument the notifier
handle returned by <fun>Tcl_InitNotifier</fun>.
</p>
<p>If the notifier will be used with an external event loop, then it must
also support the <fun>Tcl_SetTimer</fun> interface.  <fun>Tcl_SetTimer</fun> is
invoked by <fun>Tcl_SetMaxBlockTime</fun> whenever the maximum blocking
time has been reduced.  <fun>Tcl_SetTimer</fun> should arrange for the
external event loop to invoke <fun>Tcl_ServiceAll</fun> after the specified
interval even if no events have occurred.  This interface is needed
because <fun>Tcl_WaitForEvent</fun> isn't invoked when there is an external
event loop.  If the
notifier will only be used from <fun>Tcl_DoOneEvent</fun>, then
<fun>Tcl_SetTimer</fun> need not do anything.
</p>
<p>On Unix systems, the file event source also needs support from the
notifier.  The file event source consists of the
<fun>Tcl_CreateFileHandler</fun> and <fun>Tcl_DeleteFileHandler</fun>
procedures, which are described in the <fun>Tcl_CreateFileHandler</fun>
manual page.
</p>
<p>The <fun>Tcl_Sleep</fun> and <fun>Tcl_DoOneEvent</fun> interfaces are described
in their respective manual pages.
</p>
<p>The easiest way to create a new notifier is to look at the code
for an existing notifier, such as the files <b>unix/tclUnixNotfy.c</b>
or <b>win/tclWinNotify.c</b> in the Tcl source distribution.

</p>
</section>
<section>
<title>EXTERNAL EVENT LOOPS</title>
<p>The notifier interfaces are designed so that Tcl can be embedded into
applications that have their own private event loops.  In this case,
the application does not call <fun>Tcl_DoOneEvent</fun> except in the case
of recursive event loops such as calls to the Tcl commands <cmd>update</cmd>
or <cmd>vwait</cmd>.  Most of the time is spent in the external event loop
of the application.  In this case the notifier must arrange for the
external event loop to call back into Tcl when something
happens on the various Tcl event sources.  These callbacks should
arrange for appropriate Tcl events to be placed on the Tcl event queue.
</p>
<p>Because the external event loop is not calling <fun>Tcl_DoOneEvent</fun> on
a regular basis, it is up to the notifier to arrange for
<fun>Tcl_ServiceEvent</fun> to be called whenever events are pending on the
Tcl event queue.  The easiest way to do this is to invoke
<fun>Tcl_ServiceAll</fun> at the end of each callback from the external
event loop.  This will ensure that all of the event sources are
polled, any queued events are serviced, and any pending idle handlers
are processed before returning control to the application.  In
addition, event sources that need to poll for events can call
<fun>Tcl_SetMaxBlockTime</fun> to force the external event loop to call
Tcl even if no events are available on the system event queue.
</p>
<p>As a side effect of processing events detected in the main external
event loop, Tcl may invoke <fun>Tcl_DoOneEvent</fun> to start a recursive event
loop in commands like <cmd>vwait</cmd>.  <fun>Tcl_DoOneEvent</fun> will invoke
the external event loop, which will result in callbacks as described
in the preceding paragraph, which will result in calls to
<fun>Tcl_ServiceAll</fun>.  However, in these cases it is undesirable to
service events in <fun>Tcl_ServiceAll</fun>.  Servicing events there is
unnecessary because control will immediately return to the
external event loop and hence to <fun>Tcl_DoOneEvent</fun>, which can
service the events itself.  Furthermore, <fun>Tcl_DoOneEvent</fun> is
supposed to service only a single event, whereas <fun>Tcl_ServiceAll</fun>
normally services all pending events.  To handle this situation,
<fun>Tcl_DoOneEvent</fun> sets a flag for <fun>Tcl_ServiceAll</fun>
that causes it to return without servicing any events.
This flag is called the <i>service mode</i>;
<fun>Tcl_DoOneEvent</fun> restores it to its previous value before it returns.
</p>
<p>In some cases, however, it may be necessary for <fun>Tcl_ServiceAll</fun>
to service events
even when it has been invoked from <fun>Tcl_DoOneEvent</fun>.  This happens
when there is yet another recursive event loop invoked via an
event handler called by <fun>Tcl_DoOneEvent</fun> (such as one that is
part of a native widget).  In this case, <fun>Tcl_DoOneEvent</fun> may not
have a chance to service events so <fun>Tcl_ServiceAll</fun> must service
them all.  Any recursive event loop that calls an external event
loop rather than <fun>Tcl_DoOneEvent</fun> must reset the service mode so
that all events get processed in <fun>Tcl_ServiceAll</fun>.  This is done
by invoking the <fun>Tcl_SetServiceMode</fun> procedure.  If
<fun>Tcl_SetServiceMode</fun> is passed <b>TCL_SERVICE_NONE</b>, then calls
to <fun>Tcl_ServiceAll</fun> will return immediately without processing any
events.  If <fun>Tcl_SetServiceMode</fun> is passed <b>TCL_SERVICE_ALL</b>,
then calls to <fun>Tcl_ServiceAll</fun> will behave normally.
<fun>Tcl_SetServiceMode</fun> returns the previous value of the service
mode, which should be restored when the recursive loop exits.
<fun>Tcl_GetServiceMode</fun> returns the current value of the service
mode.

</p>
</section>
<seealso>
<ref>Tcl_CreateFileHandler</ref>
<ref>Tcl_DeleteFileHandler</ref>
<ref>Tcl_Sleep</ref>
<ref>Tcl_DoOneEvent</ref>
<ref>Thread(3)</ref>
</seealso>
<keywords>
<keyword>event</keyword>
<keyword>notifier</keyword>
<keyword>event queue</keyword>
<keyword>event sources</keyword>
<keyword>file events</keyword>
<keyword>timer</keyword>
<keyword>idle</keyword>
<keyword>service mode</keyword>
<keyword>threads</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Object" version="8.5" title="Tcl_Obj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Object.3,v 1.15 2006/08/03 22:46:34 nijtmans Exp $
 -->
<?TROFF.TH title="Tcl_Obj" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewObj</name>
<name>Tcl_DuplicateObj</name>
<name>Tcl_IncrRefCount</name>
<name>Tcl_DecrRefCount</name>
<name>Tcl_IsShared</name>
<name>Tcl_InvalidateStringRep</name>
<desc>manipulate Tcl objects</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewObj</fun>()

Tcl_Obj *
<fun>Tcl_DuplicateObj</fun>(<m>objPtr</m>)

<fun>Tcl_IncrRefCount</fun>(<m>objPtr</m>)

<fun>Tcl_DecrRefCount</fun>(<m>objPtr</m>)

int
<fun>Tcl_IsShared</fun>(<m>objPtr</m>)

<fun>Tcl_InvalidateStringRep</fun>(<m>objPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Points to an object;
must have been the result of a previous call to <fun>Tcl_NewObj</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>INTRODUCTION</title>
<p>This man page presents an overview of Tcl objects and how they are used.
It also describes generic procedures for managing Tcl objects.
These procedures are used to create and copy objects,
and increment and decrement the count of references (pointers) to objects.
The procedures are used in conjunction with ones
that operate on specific types of objects such as
<fun>Tcl_GetIntFromObj</fun> and <fun>Tcl_ListObjAppendElement</fun>.
The individual procedures are described along with the data structures
they manipulate.
</p>
<p>Tcl's <i>dual-ported</i> objects provide a general-purpose mechanism
for storing and exchanging Tcl values.
They largely replace the use of strings in Tcl.
For example, they are used to store variable values,
command arguments, command results, and scripts.
Tcl objects behave like strings but also hold an internal representation
that can be manipulated more efficiently.
For example, a Tcl list is now represented as an object
that holds the list's string representation
as well as an array of pointers to the objects for each list element.
Dual-ported objects avoid most runtime type conversions.
They also improve the speed of many operations
since an appropriate representation is immediately available.
The compiler itself uses Tcl objects to
cache the instruction bytecodes resulting from compiling scripts.
</p>
<p>The two representations are a cache of each other and are computed lazily.
That is, each representation is only computed when necessary,
it is computed from the other representation,
and, once computed, it is saved.
In addition, a change in one representation invalidates the other one.
As an example, a Tcl program doing integer calculations can
operate directly on a variable's internal machine integer
representation without having to constantly convert
between integers and strings.
Only when it needs a string representing the variable's value,
say to print it,
will the program regenerate the string representation from the integer.
Although objects contain an internal representation,
their semantics are defined in terms of strings:
an up-to-date string can always be obtained,
and any change to the object will be reflected in that string
when the object's string representation is fetched.
Because of this representation invalidation and regeneration,
it is dangerous for extension writers to access
<type>Tcl_Obj</type> fields directly.
It is better to access Tcl_Obj information using
procedures like <fun>Tcl_GetStringFromObj</fun> and <fun>Tcl_GetString</fun>.
</p>
<p>Objects are allocated on the heap
and are referenced using a pointer to their <type>Tcl_Obj</type> structure.
Objects are shared as much as possible.
This significantly reduces storage requirements
because some objects such as long lists are very large.
Also, most Tcl values are only read and never modified.
This is especially true for procedure arguments,
which can be shared between the caller and the called procedure.
Assignment and argument binding is done by
simply assigning a pointer to the value. 
Reference counting is used to determine when it is safe to
reclaim an object's storage.
</p>
<p>Tcl objects are typed.
An object's internal representation is controlled by its type.
Seven types are predefined in the Tcl core
including integer, double, list, and bytecode.
Extension writers can extend the set of types
by using the procedure <fun>Tcl_RegisterObjType</fun> .

</p>
</section>
<section>
<title>THE TCL_OBJ STRUCTURE</title>
<p>Each Tcl object is represented by a <type>Tcl_Obj</type> structure
which is defined as follows.
</p>
<syntax cat="type" name="Tcl_Obj" scope="global">
typedef struct Tcl_Obj {
        int <i>refCount</i>;
        char *<i>bytes</i>;
        int <i>length</i>;
        Tcl_ObjType *<i>typePtr</i>;
        union {
                long <i>longValue</i>;
                double <i>doubleValue</i>;
                void *<i>otherValuePtr</i>;
                Tcl_WideInt <i>wideValue</i>;
                struct {
                        void *<i>ptr1</i>;
                        void *<i>ptr2</i>;
                } <i>twoPtrValue</i>;
                struct {
                        void *<i>ptr</i>;
                        unsigned long <i>value</i>;
                } <i>ptrAndLongRep</i>;
        } <i>internalRep</i>;
} Tcl_Obj;
</syntax>
<p>The <i>bytes</i> and the <i>length</i> members together hold
an object's UTF-8 string representation,
which is a <i>counted string</i> not containing null bytes (UTF-8 null
characters should be encoded as a two byte sequence: 192, 128.)
<i>bytes</i> points to the first byte of the string representation.
The <i>length</i> member gives the number of bytes.
The byte array must always have a null byte after the last data byte,
at offset <i>length</i>;
this allows string representations
to be treated as conventional null-terminated C strings.
C programs use <fun>Tcl_GetStringFromObj</fun> and <fun>Tcl_GetString</fun> to get
an object's string representation.
If <i>bytes</i> is NULL,
the string representation is invalid.
</p>
<p>An object's type manages its internal representation.
The member <i>typePtr</i> points to the Tcl_ObjType structure
that describes the type.
If <i>typePtr</i> is NULL,
the internal representation is invalid.
</p>
<p>The <i>internalRep</i> union member holds
an object's internal representation.
This is either a (long) integer, a double-precision floating-point number,
a pointer to a value containing additional information
needed by the object's type to represent the object, a Tcl_WideInt
integer, two arbitrary pointers, or a pair made up of an unsigned long
integer and a pointer.
</p>
<p>The <i>refCount</i> member is used to tell when it is safe to free
an object's storage.
It holds the count of active references to the object.
Maintaining the correct reference count is a key responsibility
of extension writers.
Reference counting is discussed below
in the section <ref refid="storage-management-of-objects">STORAGE MANAGEMENT OF OBJECTS</ref>.
</p>
<p>Although extension writers can directly access
the members of a Tcl_Obj structure,
it is much better to use the appropriate procedures and macros.
For example, extension writers should never
read or update <i>refCount</i> directly;
they should use macros such as
<fun>Tcl_IncrRefCount</fun> and <fun>Tcl_IsShared</fun> instead.
</p>
<p>A key property of Tcl objects is that they hold two representations.
An object typically starts out containing only a string representation:
it is untyped and has a NULL <i>typePtr</i>.
An object containing an empty string or a copy of a specified string
is created using <fun>Tcl_NewObj</fun> or <fun>Tcl_NewStringObj</fun> respectively.
An object's string value is gotten with
<fun>Tcl_GetStringFromObj</fun> or <fun>Tcl_GetString</fun>
and changed with <fun>Tcl_SetStringObj</fun>.
If the object is later passed to a procedure like <fun>Tcl_GetIntFromObj</fun>
that requires a specific internal representation,
the procedure will create one and set the object's <i>typePtr</i>.
The internal representation is computed from the string representation.
An object's two representations are duals of each other:
changes made to one are reflected in the other.
For example, <fun>Tcl_ListObjReplace</fun> will modify an object's
internal representation and the next call to <fun>Tcl_GetStringFromObj</fun>
or <fun>Tcl_GetString</fun> will reflect that change.
</p>
<p>Representations are recomputed lazily for efficiency.
A change to one representation made by a procedure
such as <fun>Tcl_ListObjReplace</fun> is not reflected immediately
in the other representation.
Instead, the other representation is marked invalid
so that it is only regenerated if it is needed later.
Most C programmers never have to be concerned with how this is done
and simply use procedures such as <fun>Tcl_GetBooleanFromObj</fun> or
<fun>Tcl_ListObjIndex</fun>.
Programmers that implement their own object types
must check for invalid representations
and mark representations invalid when necessary.
The procedure <fun>Tcl_InvalidateStringRep</fun> is used
to mark an object's string representation invalid and to
free any storage associated with the old string representation.
</p>
<p>Objects usually remain one type over their life,
but occasionally an object must be converted from one type to another.
For example, a C program might build up a string in an object
with repeated calls to <fun>Tcl_AppendToObj</fun>,
and then call <fun>Tcl_ListObjIndex</fun> to extract a list element from
the object.
The same object holding the same string value
can have several different internal representations
at different times.
Extension writers can also force an object to be converted from one type
to another using the <fun>Tcl_ConvertToType</fun> procedure.
Only programmers that create new object types need to be concerned
about how this is done.
A procedure defined as part of the object type's implementation
creates a new internal representation for an object
and changes its <i>typePtr</i>.
See the man page for <fun>Tcl_RegisterObjType</fun>
to see how to create a new object type.

</p>
</section>
<section>
<title>EXAMPLE OF THE LIFETIME OF AN OBJECT</title>
<p>As an example of the lifetime of an object,
consider the following sequence of commands:
</p>
<example>
<b>set x 123</b>
</example>
<p>This assigns to <i>x</i> an untyped object whose
<i>bytes</i> member points to <b>123</b> and <i>length</i> member contains 3.
The object's <i>typePtr</i> member is NULL.
</p>
<example>
<b>puts "x is $x"</b>
</example>
<p><i>x</i>'s string representation is valid (since <i>bytes</i> is non-NULL)
and is fetched for the command.
</p>
<example>
<b>incr x</b>
</example>
<p>The <cmd>incr</cmd> command first gets an integer from <i>x</i>'s object
by calling <fun>Tcl_GetIntFromObj</fun>.
This procedure checks whether the object is already an integer object.
Since it is not, it converts the object
by setting the object's <i>internalRep.longValue</i> member
to the integer <b>123</b>
and setting the object's <i>typePtr</i>
to point to the integer Tcl_ObjType structure.
Both representations are now valid.
<cmd>incr</cmd> increments the object's integer internal representation
then invalidates its string representation
(by calling <fun>Tcl_InvalidateStringRep</fun>)
since the string representation
no longer corresponds to the internal representation.
</p>
<example>
<b>puts "x is now $x"</b>
</example>
<p>The string representation of <i>x</i>'s object is needed
and is recomputed.
The string representation is now <b>124</b>
and both representations are again valid.

</p>
</section>
<section id="storage-management-of-objects">
<title>STORAGE MANAGEMENT OF OBJECTS</title>
<p>Tcl objects are allocated on the heap and are shared as much as possible
to reduce storage requirements.
Reference counting is used to determine when an object is
no longer needed and can safely be freed.
An object just created by <fun>Tcl_NewObj</fun> or <fun>Tcl_NewStringObj</fun>
has <i>refCount</i> 0.
The macro <fun>Tcl_IncrRefCount</fun> increments the reference count
when a new reference to the object is created.
The macro <fun>Tcl_DecrRefCount</fun> decrements the count
when a reference is no longer needed and,
if the object's reference count drops to zero, frees its storage.
An object shared by different code or data structures has
<i>refCount</i> greater than 1.
Incrementing an object's reference count ensures that
it won't be freed too early or have its value change accidentally.
</p>
<p>As an example, the bytecode interpreter shares argument objects
between calling and called Tcl procedures to avoid having to copy objects.
It assigns the call's argument objects to the procedure's
formal parameter variables.
In doing so, it calls <fun>Tcl_IncrRefCount</fun> to increment
the reference count of each argument since there is now a new
reference to it from the formal parameter.
When the called procedure returns,
the interpreter calls <fun>Tcl_DecrRefCount</fun> to decrement
each argument's reference count.
When an object's reference count drops less than or equal to zero,
<fun>Tcl_DecrRefCount</fun> reclaims its storage.
Most command procedures do not have to be concerned about
reference counting since they use an object's value immediately
and don't retain a pointer to the object after they return.
However, if they do retain a pointer to an object in a data structure,
they must be careful to increment its reference count
since the retained pointer is a new reference.
</p>
<p>Command procedures that directly modify objects
such as those for <cmd>lappend</cmd> and <cmd>linsert</cmd> must be careful to
copy a shared object before changing it.
They must first check whether the object is shared
by calling <fun>Tcl_IsShared</fun>.
If the object is shared they must copy the object
by using <fun>Tcl_DuplicateObj</fun>;
this returns a new duplicate of the original object
that has <i>refCount</i> 0.
If the object is not shared,
the command procedure "owns" the object and can safely modify it directly.
For example, the following code appears in the command procedure
that implements <cmd>linsert</cmd>.
This procedure modifies the list object passed to it in <i>objv[1]</i>
by inserting <i>objc-3</i> new elements before <i>index</i>.
</p>
<example>
listPtr = objv[1];
if (Tcl_IsShared(listPtr)) {
        listPtr = Tcl_DuplicateObj(listPtr);
}
result = Tcl_ListObjReplace(interp, listPtr, index, 0, (objc-3), &amp;(objv[3]));
</example>
<p>As another example, <cmd>incr</cmd>'s command procedure
must check whether the variable's object is shared before
incrementing the integer in its internal representation.
If it is shared, it needs to duplicate the object
in order to avoid accidentally changing values in other data structures.

</p>
</section>
<seealso>
<ref>Tcl_ConvertToType</ref>
<ref>Tcl_GetIntFromObj</ref>
<ref>Tcl_ListObjAppendElement</ref>
<ref>Tcl_ListObjIndex</ref>
<ref>Tcl_ListObjReplace</ref>
<ref>Tcl_RegisterObjType</ref>
</seealso>
<keywords>
<keyword>internal representation</keyword>
<keyword>object</keyword>
<keyword>object creation</keyword>
<keyword>object type</keyword>
<keyword>reference count</keyword>
<keyword>string representation</keyword>
<keyword>type conversion</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ObjectType" version="8.0" title="Tcl_ObjType">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ObjectType.3,v 1.13 2006/08/03 22:41:27 nijtmans Exp $
 -->
<?TROFF.TH title="Tcl_ObjType" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_RegisterObjType</name>
<name>Tcl_GetObjType</name>
<name>Tcl_AppendAllObjTypes</name>
<name>Tcl_ConvertToType</name>
<desc>manipulate Tcl object types</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_RegisterObjType</fun>(<m>typePtr</m>)

Tcl_ObjType *
<fun>Tcl_GetObjType</fun>(<m>typeName</m>)

int
<fun>Tcl_AppendAllObjTypes</fun>(<m>interp</m>, <m>objPtr</m>)

int
<fun>Tcl_ConvertToType</fun>(<m>interp</m>, <m>objPtr</m>, <m>typePtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_ObjType</argtype>
<name name="typePtr">*typePtr</name>
<argmode>in</argmode>
<desc>Points to the structure containing information about the Tcl object type.
This storage must live forever,
typically by being statically allocated.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="typeName">*typeName</name>
<argmode>in</argmode>
<desc>The name of a Tcl object type that <fun>Tcl_GetObjType</fun> should look up.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for error reporting.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>For <fun>Tcl_AppendAllObjTypes</fun>, this points to the object onto which
it appends the name of each object type as a list element.
For <fun>Tcl_ConvertToType</fun>, this points to an object that
must have been the result of a previous call to <fun>Tcl_NewObj</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures in this man page manage Tcl object types.
They are used to register new object types, look up types,
and force conversions from one type to another.
</p>
<p><fun>Tcl_RegisterObjType</fun> registers a new Tcl object type
in the table of all object types supported by Tcl.
The argument <i>typePtr</i> points to a Tcl_ObjType structure that
describes the new type by giving its name
and by supplying pointers to four procedures
that implement the type.
If the type table already contains a type
with the same name as in <i>typePtr</i>,
it is replaced with the new type.
The Tcl_ObjType structure is described
in the section <ref refid="the-tcl_objtype-structure">THE TCL_OBJTYPE STRUCTURE</ref> below.
</p>
<p><fun>Tcl_GetObjType</fun> returns a pointer to the Tcl_ObjType
with name <i>typeName</i>.
It returns NULL if no type with that name is registered.
</p>
<p><fun>Tcl_AppendAllObjTypes</fun> appends the name of each object type
as a list element onto the Tcl object referenced by <i>objPtr</i>.
The return value is <b>TCL_OK</b> unless there was an error
converting <i>objPtr</i> to a list object;
in that case <b>TCL_ERROR</b> is returned.
</p>
<p><fun>Tcl_ConvertToType</fun> converts an object from one type to another
if possible.
It creates a new internal representation for <i>objPtr</i>
appropriate for the target type <i>typePtr</i>
and sets its <i>typePtr</i> member to that type.
Any internal representation for <i>objPtr</i>'s old type is freed.
If an error occurs during conversion, it returns <b>TCL_ERROR</b>
and leaves an error message in the result object for <i>interp</i>
unless <i>interp</i> is NULL.
Otherwise, it returns <b>TCL_OK</b>.
Passing a NULL <i>interp</i> allows this procedure to be used
as a test whether the conversion can be done (and in fact was done).

</p>
</section>
<section id="the-tcl_objtype-structure">
<title>THE TCL_OBJTYPE STRUCTURE</title>
<p>Extension writers can define new object types by defining four
procedures,
initializing a Tcl_ObjType structure to describe the type,
and calling <fun>Tcl_RegisterObjType</fun>.
The <type>Tcl_ObjType</type> structure is defined as follows:
</p>
<syntax cat="type" name="Tcl_ObjType" scope="global">
typedef struct Tcl_ObjType {
        char *<i>name</i>;
        Tcl_FreeInternalRepProc *<i>freeIntRepProc</i>;
        Tcl_DupInternalRepProc *<i>dupIntRepProc</i>;
        Tcl_UpdateStringProc *<i>updateStringProc</i>;
        Tcl_SetFromAnyProc *<i>setFromAnyProc</i>;
} Tcl_ObjType;
</syntax>
<p>The <i>name</i> member describes the name of the type, e.g. <b cat="mathfunc">int</b>.
Extension writers can look up an object type using its name
with the <fun>Tcl_GetObjType</fun> procedure.
The remaining four members are pointers to procedures
called by the generic Tcl object code:
</p>
<p>The <i>setFromAnyProc</i> member contains the address of a function
called to create a valid internal representation
from an object's string representation.
</p>
<syntax cat="type" name="Tcl_SetFromAnyProc" scope="global">
typedef int (Tcl_SetFromAnyProc) (Tcl_Interp *<i>interp</i>, Tcl_Obj *<i>objPtr</i>);
</syntax>
<p>If an internal representation can't be created from the string,
it returns <b>TCL_ERROR</b> and puts a message
describing the error in the result object for <i>interp</i>
unless <i>interp</i> is NULL.
If <i>setFromAnyProc</i> is successful,
it stores the new internal representation,
sets <i>objPtr</i>'s <i>typePtr</i> member to point to
<i>setFromAnyProc</i>'s <type>Tcl_ObjType</type>, and returns <b>TCL_OK</b>.
Before setting the new internal representation,
the <i>setFromAnyProc</i> must free any internal representation
of <i>objPtr</i>'s old type;
it does this by calling the old type's <i>freeIntRepProc</i>
if it is not NULL.
As an example, the <i>setFromAnyProc</i> for the built-in Tcl integer type
gets an up-to-date string representation for <i>objPtr</i>
by calling <fun>Tcl_GetStringFromObj</fun>.
It parses the string to obtain an integer and,
if this succeeds,
stores the integer in <i>objPtr</i>'s internal representation
and sets <i>objPtr</i>'s <i>typePtr</i> member to point to the integer type's
Tcl_ObjType structure.
Do not release <i>objPtr</i>'s old internal representation unless you
replace it with a new one or reset the <i>typePtr</i> member to NULL.
</p>
<p>The <i>updateStringProc</i> member contains the address of a function
called to create a valid string representation
from an object's internal representation.
</p>
<syntax cat="type" name="Tcl_UpdateStringProc" scope="global">
typedef void (Tcl_UpdateStringProc) (Tcl_Obj *<i>objPtr</i>);
</syntax>
<p><i>objPtr</i>'s <i>bytes</i> member is always NULL when it is called.
It must always set <i>bytes</i> non-NULL before returning.
We require the string representation's byte array
to have a null after the last byte, at offset <i>length</i>;
this allows string representations that do not contain null bytes
to be treated as conventional null character-terminated C strings.
Storage for the byte array must be allocated in the heap by <fun>Tcl_Alloc</fun>
or <fun>ckalloc</fun>.  Note that <i>updateStringProc</i>s must allocate
enough storage for the string's bytes and the terminating null byte.
The <i>updateStringProc</i> for Tcl's built-in list type, for example,
builds an array of strings for each element object
and then calls <fun>Tcl_Merge</fun>
to construct a string with proper Tcl list structure.
It stores this string as the list object's string representation.
</p>
<p>The <i>dupIntRepProc</i> member contains the address of a function
called to copy an internal representation from one object to another.
</p>
<syntax cat="type" name="Tcl_DupInternalRepProc" scope="global">
typedef void (Tcl_DupInternalRepProc) (Tcl_Obj *<i>srcPtr</i>, Tcl_Obj *<i>dupPtr</i>);
</syntax>
<p><i>dupPtr</i>'s internal representation is made a copy of <i>srcPtr</i>'s
internal representation.
Before the call,
<i>srcPtr</i>'s internal representation is valid and <i>dupPtr</i>'s is not.
<i>srcPtr</i>'s object type determines what
copying its internal representation means.
For example, the <i>dupIntRepProc</i> for the Tcl integer type
simply copies an integer.
The built-in list type's <i>dupIntRepProc</i>
allocates a new array that points at the original element objects;
the elements are shared between the two lists
(and their reference counts are incremented to reflect the new references).
</p>
<p>The <i>freeIntRepProc</i> member contains the address of a function
that is called when an object is freed.
</p>
<syntax cat="type" name="Tcl_FreeInternalRepProc" scope="global">
typedef void (Tcl_FreeInternalRepProc) (Tcl_Obj *<i>objPtr</i>);
</syntax>
<p>The <i>freeIntRepProc</i> function can deallocate the storage
for the object's internal representation
and do other type-specific processing necessary when an object is freed.
For example, Tcl list objects have an <i>internalRep.otherValuePtr</i>
that points to an array of pointers to each element in the list.
The list type's <i>freeIntRepProc</i> decrements
the reference count for each element object
(since the list will no longer refer to those objects),
then deallocates the storage for the array of pointers.
The <i>freeIntRepProc</i> member can be set to NULL
to indicate that the internal representation does not require freeing.
The <i>freeIntRepProc</i> implementation should not access the
<i>bytes</i> member of the object, as this may potentially have already
been deleted.

</p>
</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_DecrRefCount</ref>
<ref>Tcl_IncrRefCount</ref>
</seealso>
<keywords>
<keyword>internal representation</keyword>
<keyword>object</keyword>
<keyword>object type</keyword>
<keyword>string representation</keyword>
<keyword>type conversion</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="open" version="8.3" title="open">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: open.n,v 1.28 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="open" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>open</name>
<desc>Open a file-based or command pipeline channel</desc>
</namesection>
<synopsis>
<syntax>

<b cat="AMBIGUOUS ambiguous cmd">open</b> <m>fileName</m>

<b cat="AMBIGUOUS ambiguous cmd">open</b> <m>fileName access</m>

<b cat="AMBIGUOUS ambiguous cmd">open</b> <m>fileName access permissions</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command opens a file, serial port, or command pipeline and returns a
channel identifier that may be used in future invocations of commands like
<b cat="AMBIGUOUS ambiguous cmd">read</b>, <cmd>puts</cmd>, and <cmd>close</cmd>.
If the first character of <i>fileName</i> is not <b>|</b> then
the command opens a file:
<i>fileName</i> gives the name of the file to open, and it must conform to the
conventions described in the <b>filename</b> manual entry.
</p>
<p>The <i>access</i> argument, if present, indicates the way in which the file
(or command pipeline) is to be accessed.
In the first form <i>access</i> may have any of the following values:
</p>
<dl>
<dle>
<dt><b>r</b></dt>
<dd>Open the file for reading only; the file must already exist. This is the
default value if <i>access</i> is not specified.
</dd>
</dle>
<dle>
<dt><b>r+</b></dt>
<dd>Open the file for both reading and writing; the file must
already exist.
</dd>
</dle>
<dle>
<dt><b>w</b></dt>
<dd>Open the file for writing only.  Truncate it if it exists.  If it doesn't
exist, create a new file.
</dd>
</dle>
<dle>
<dt><b>w+</b></dt>
<dd>Open the file for reading and writing.  Truncate it if it exists.
If it doesn't exist, create a new file.
</dd>
</dle>
<dle>
<dt><b>a</b></dt>
<dd>Open the file for writing only.  If the file doesn't exist,
create a new empty file.
Set the file pointer to the end of the file prior to each write.
</dd>
</dle>
<dle>
<dt><b>a+</b></dt>
<dd>Open the file for reading and writing.  If the file doesn't exist,
create a new empty file.
Set the initial access position  to the end of the file.
</dd>
</dle>
</dl>
<p version="8.5">All of the legal <i>access</i> values above may have the character
<b>b</b> added as the second or third character in the value to
indicate that the opened channel should be configured with the
<b>-translation binary</b> option, making the channel suitable for 
reading or writing of binary data.
</p>
<p>In the second form, <i>access</i> consists of a list of any of the
following flags, all of which have the standard POSIX meanings.
One of the flags must be either <b>RDONLY</b>, <b>WRONLY</b> or <b>RDWR</b>.
</p>
<dl>
<dle>
<dt><b>RDONLY</b></dt>
<dd>Open the file for reading only.
</dd>
</dle>
<dle>
<dt><b>WRONLY</b></dt>
<dd>Open the file for writing only.
</dd>
</dle>
<dle>
<dt><b>RDWR</b></dt>
<dd>Open the file for both reading and writing.
</dd>
</dle>
<dle>
<dt><b>APPEND</b></dt>
<dd>Set the file pointer to the end of the file prior to each write.
</dd>
</dle>
<dle version="8.5">
<dt><b>BINARY</b></dt>
<dd>Configure the opened channel with the <b>-translation binary</b> option.
</dd>
</dle>
<dle>
<dt><b>CREAT</b></dt>
<dd>Create the file if it doesn't already exist (without this flag it
is an error for the file not to exist).
</dd>
</dle>
<dle>
<dt><b>EXCL</b></dt>
<dd>If <b>CREAT</b> is also specified, an error is returned if the
file already exists.
</dd>
</dle>
<dle>
<dt><b>NOCTTY</b></dt>
<dd>If the file is a terminal device, this flag prevents the file from
becoming the controlling terminal of the process.
</dd>
</dle>
<dle>
<dt><b>NONBLOCK</b></dt>
<dd>Prevents the process from blocking while opening the file, and
possibly in subsequent I/O operations.  The exact behavior of
this flag is system- and device-dependent;  its use is discouraged
(it is better to use the <cmd>fconfigure</cmd> command to put a file
in nonblocking mode).
For details refer to your system documentation on the <b cat="AMBIGUOUS ambiguous cmd">open</b> system
call's <b>O_NONBLOCK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TRUNC</b></dt>
<dd>If the file exists it is truncated to zero length.
</dd>
</dle>
</dl>
<p>If a new file is created as part of opening it, <i>permissions</i>
(an integer) is used to set the permissions for the new file in
conjunction with the process's file mode creation mask.
<i>Permissions</i> defaults to 0666.

</p>
</section>
<section>
<title>COMMAND PIPELINES</title>
<p>If the first character of <i>fileName</i> is ``|'' then the
remaining characters of <i>fileName</i> are treated as a list of arguments
that describe a command pipeline to invoke, in the same style as the
arguments for <cmd>exec</cmd>.
In this case, the channel identifier returned by <b cat="AMBIGUOUS ambiguous cmd">open</b> may be used
to write to the command's input pipe or read from its output pipe,
depending on the value of <i>access</i>.
If write-only access is used (e.g. <i>access</i> is <b>w</b>), then
standard output for the pipeline is directed to the current standard
output unless overridden by the command.
If read-only access is used (e.g. <i>access</i> is <b>r</b>),
standard input for the pipeline is taken from the current standard
input unless overridden by the command.
The id of the spawned process is accessible through the <cmd>pid</cmd>
command, using the channel id returned by <b cat="AMBIGUOUS ambiguous cmd">open</b> as argument.
</p>
<p>If the command (or one of the commands) executed in the command
pipeline returns an error (according to the definition in <cmd>exec</cmd>),
a Tcl error is generated when <cmd>close</cmd> is called on the channel
unless the pipeline is in non-blocking mode then no exit status is
returned (a silent <cmd>close</cmd> with -blocking 0).
</p>
<p>It is often useful to use the <cmd>fileevent</cmd> command with pipelines
so other processing may happen at the same time as running the command
in the background.
</p>
</section>
<section>
<title>SERIAL COMMUNICATIONS</title>
<p>If <i>fileName</i> refers to a serial port, then the specified serial port
is opened and initialized in a platform-dependent manner.  Acceptable
values for the <i>fileName</i> to use to open a serial port are described in
the PORTABILITY ISSUES section.
</p>
<p>The <cmd>fconfigure</cmd> command can be used to query and set additional
configuration options specific to serial ports (where supported):
</p>
<dl>
<dle>
<dt><b>-mode</b> <m>baud</m><b>,</b><m>parity</m><b>,</b><m>data</m><b>,</b><m>stop</m></dt>
<dd>This option is a set of 4 comma-separated values: the baud rate, parity,
number of data bits, and number of stop bits for this serial port.  The
<i>baud</i> rate is a simple integer that specifies the connection speed.
<i>Parity</i> is one of the following letters: <b>n</b>, <b>o</b>, <b>e</b>,
<b>m</b>, <b>s</b>; respectively signifying the parity options of ``none'',
``odd'', ``even'', ``mark'', or ``space''.  <i>Data</i> is the number of
data bits and should be an integer from 5 to 8, while <i>stop</i> is the
number of stop bits and should be the integer 1 or 2.
</dd>
</dle>
<dle>
<dt><b>-handshake</b> <m>type</m></dt>
<dd>(Windows and Unix). This option is used to setup automatic handshake
control. Note that not all handshake types maybe supported by your operating
system. The <i>type</i> parameter is case-independent.
<p>If <i>type</i> is <b>none</b> then any handshake is switched off.
<b>rtscts</b> activates hardware handshake. Hardware handshake signals
are described below.
For software handshake <b>xonxoff</b> the handshake characters can be redefined
with <b>-xchar</b>.
An additional hardware handshake <b>dtrdsr</b> is available only under Windows.
There is no default handshake configuration, the initial value depends
on your operating system settings.
The <b>-handshake</b> option cannot be queried.
</p></dd>
</dle>
<dle>
<dt><b>-queue</b></dt>
<dd>(Windows and Unix). The <b>-queue</b> option can only be queried.
It returns a list of two integers representing the current number
of bytes in the input and output queue respectively.
</dd>
</dle>
<dle>
<dt><b>-timeout</b> <m>msec</m></dt>
<dd>(Windows and Unix). This option is used to set the timeout for blocking
read operations. It specifies the maximum interval between the
reception of two bytes in milliseconds.
For Unix systems the granularity is 100 milliseconds.
The <b>-timeout</b> option does not affect write operations or
nonblocking reads.
This option cannot be queried.
</dd>
</dle>
<dle>
<dt><b>-ttycontrol</b> <m>{signal boolean signal boolean ...}</m></dt>
<dd>(Windows and Unix). This option is used to setup the handshake
output lines (see below) permanently or to send a BREAK over the serial line.
The <i>signal</i> names are case-independent.
<b>{RTS 1 DTR 0}</b> sets the RTS output to high and the DTR output to low.
The BREAK condition (see below) is enabled and disabled with <b>{BREAK 1}</b> and
<b>{BREAK 0}</b> respectively.
It's not a good idea to change the <b>RTS</b> (or <b>DTR</b>) signal
with active hardware handshake <b>rtscts</b> (or <b>dtrdsr</b>).
The result is unpredictable.
The <b>-ttycontrol</b> option cannot be queried.
</dd>
</dle>
<dle>
<dt><b>-ttystatus</b></dt>
<dd>(Windows and Unix). The <b>-ttystatus</b> option can only be
queried.  It returns the current modem status and handshake input signals
(see below).
The result is a list of signal,value pairs with a fixed order,
e.g. <b>{CTS 1 DSR 0 RING 1 DCD 0}</b>.
The <i>signal</i> names are returned upper case.
</dd>
</dle>
<dle>
<dt><b>-xchar</b> <m>{xonChar xoffChar}</m></dt>
<dd>(Windows and Unix). This option is used to query or change the software
handshake characters. Normally the operating system default should be
DC1 (0x11) and DC3 (0x13) representing the ASCII standard
XON and XOFF characters.
</dd>
</dle>
<dle>
<dt><b>-pollinterval</b> <m>msec</m></dt>
<dd>(Windows only). This option is used to set the maximum time between
polling for fileevents.
This affects the time interval between checking for events throughout the Tcl
interpreter (the smallest value always wins).  Use this option only if
you want to poll the serial port more or less often than 10 msec
(the default).
</dd>
</dle>
<dle>
<dt><b>-sysbuffer</b> <m>inSize</m></dt>
<dd/>
</dle>
<dle>
<dt><b>-sysbuffer</b> <m>{inSize outSize}</m></dt>
<dd>(Windows only). This option is used to change the size of Windows
system buffers for a serial channel. Especially at higher communication
rates the default input buffer size of 4096 bytes can overrun
for latent systems. The first form specifies the input buffer size,
in the second form both input and output buffers are defined.
</dd>
</dle>
<dle>
<dt><b>-lasterror</b></dt>
<dd>(Windows only). This option is query only.
In case of a serial communication error, <b cat="AMBIGUOUS ambiguous cmd">read</b> or <cmd>puts</cmd>
returns a general Tcl file I/O error.
<b>fconfigure -lasterror</b> can be called to get a list of error details.
See below for an explanation of the various error codes.

</dd>
</dle>
</dl>
</section>
<section>
<title>SERIAL PORT SIGNALS</title>
<p>RS-232 is the most commonly used standard electrical interface for serial
communications. A negative voltage (-3V..-12V) define a mark (on=1) bit and
a positive voltage (+3..+12V) define a space (off=0) bit (RS-232C).  The
following signals are specified for incoming and outgoing data, status
lines and handshaking. Here we are using the terms <i>workstation</i> for
your computer and <i>modem</i> for the external device, because some signal
names (DCD, RI) come from modems. Of course your external device may use
these signal lines for other purposes.

</p>
<dl>
<dle>
<dt><b>TXD(output)</b></dt>
<dd><b>Transmitted Data:</b> Outgoing serial data.
</dd>
</dle>
<dle>
<dt><b>RXD(input)</b></dt>
<dd><b>Received Data:</b>Incoming serial data.
</dd>
</dle>
<dle>
<dt><b>RTS(output)</b></dt>
<dd><b>Request To Send:</b> This hardware handshake line informs the modem that
your workstation is ready to receive data. Your workstation may
automatically reset this signal to indicate that the input buffer is full.
</dd>
</dle>
<dle>
<dt><b>CTS(input)</b></dt>
<dd><b>Clear To Send:</b> The complement to RTS. Indicates that the modem is
ready to receive data.
</dd>
</dle>
<dle>
<dt><b>DTR(output)</b></dt>
<dd><b>Data Terminal Ready:</b> This signal tells the modem that the workstation
is ready to establish a link. DTR is often enabled automatically whenever a
serial port is opened.
</dd>
</dle>
<dle>
<dt><b>DSR(input)</b></dt>
<dd><b>Data Set Ready:</b> The complement to DTR. Tells the workstation that the
modem is ready to establish a link.
</dd>
</dle>
<dle>
<dt><b>DCD(input)</b></dt>
<dd><b>Data Carrier Detect:</b> This line becomes active when a modem detects
a "Carrier" signal.
</dd>
</dle>
<dle>
<dt><b>RI(input)</b></dt>
<dd><b>Ring Indicator:</b> Goes active when the modem detects an incoming call.
</dd>
</dle>
<dle>
<dt><b>BREAK</b></dt>
<dd>A BREAK condition is not a hardware signal line, but a logical zero on the
TXD or RXD lines for a long period of time, usually 250 to 500
milliseconds.  Normally a receive or transmit data signal stays at the mark
(on=1) voltage until the next character is transferred. A BREAK is sometimes
used to reset the communications line or change the operating mode of
communications hardware.

</dd>
</dle>
</dl>
</section>
<section>
<title>ERROR CODES (Windows only)</title>
<p>A lot of different errors may occur during serial read operations or during
event polling in background. The external device may have been switched
off, the data lines may be noisy, system buffers may overrun or your mode
settings may be wrong.  That's why a reliable software should always
<cmd>catch</cmd> serial read operations.  In cases of an error Tcl returns a
general file I/O error.  Then <b>fconfigure -lasterror</b> may help to
locate the problem.  The following error codes may be returned.

</p>
<dl>
<dle>
<dt><b>RXOVER</b></dt>
<dd>Windows input buffer overrun. The data comes faster than your scripts reads
it or your system is overloaded. Use <b>fconfigure -sysbuffer</b> to avoid a
temporary bottleneck and/or make your script faster.
</dd>
</dle>
<dle>
<dt><b>TXFULL</b></dt>
<dd>Windows output buffer overrun. Complement to RXOVER. This error should
practically not happen, because Tcl cares about the output buffer status.
</dd>
</dle>
<dle>
<dt><b>OVERRUN</b></dt>
<dd>UART buffer overrun (hardware) with data lost.
The data comes faster than the system driver receives it.
Check your advanced serial port settings to enable the FIFO (16550) buffer
and/or setup a lower(1) interrupt threshold value.
</dd>
</dle>
<dle>
<dt><b>RXPARITY</b></dt>
<dd>A parity error has been detected by your UART.
Wrong parity settings with <b>fconfigure -mode</b> or a noisy data line (RXD)
may cause this error.
</dd>
</dle>
<dle>
<dt><b>FRAME</b></dt>
<dd>A stop-bit error has been detected by your UART.
Wrong mode settings with <b>fconfigure -mode</b> or a noisy data line (RXD)
may cause this error.
</dd>
</dle>
<dle>
<dt><b>BREAK</b></dt>
<dd>A BREAK condition has been detected by your UART (see above).

</dd>
</dle>
</dl>
</section>
<section id="portability-issues">
<title>PORTABILITY ISSUES</title>
<dl>
<dle>
<dt><b>Windows</b> (all versions)</dt>
<dd>Valid values for <i>fileName</i> to open a serial port are of the form
<b>com</b><i>X</i><b>:</b>, where <i>X</i> is a number, generally from 1 to 4.
This notation only works for serial ports from 1 to 9, if the system
happens to have more than four.  An attempt to open a serial port that
does not exist or has a number greater than 9 will fail.  An alternate
form of opening serial ports is to use the filename <b>\\.\comX</b>,
where X is any number that corresponds to a serial port; please note
that this method is considerably slower on Windows 95 and Windows 98.
</dd>
</dle>
<dle>
<dt><b>Windows NT</b></dt>
<dd>When running Tcl interactively, there may be some strange interactions
between the real console, if one is present, and a command pipeline that uses
standard input or output.  If a command pipeline is opened for reading, some
of the lines entered at the console will be sent to the command pipeline and
some will be sent to the Tcl evaluator.  If a command pipeline is opened for
writing, keystrokes entered into the console are not visible until the
pipe is closed.  This behavior occurs whether the command pipeline is
executing 16-bit or 32-bit applications.  These problems only occur because
both Tcl and the child application are competing for the console at
the same time.  If the command pipeline is started from a script, so that Tcl
is not accessing the console, or if the command pipeline does not use
standard input or output, but is redirected from or to a file, then the
above problems do not occur.  
</dd>
</dle>
<dle>
<dt><b>Windows 95</b> </dt>
<dd>A command pipeline that executes a 16-bit DOS application cannot be opened
for both reading and writing, since 16-bit DOS applications that receive
standard input from a pipe and send standard output to a pipe run
synchronously.  Command pipelines that do not execute 16-bit DOS
applications run asynchronously and can be opened for both reading and
writing.  
<p>When running Tcl interactively, there may be some strange interactions
between the real console, if one is present, and a command pipeline that uses
standard input or output.  If a command pipeline is opened for reading from
a 32-bit application, some of the keystrokes entered at the console will be
sent to the command pipeline and some will be sent to the Tcl evaluator.  If
a command pipeline is opened for writing to a 32-bit application, no output
is visible on the console until the pipe is closed.  These problems only
occur because both Tcl and the child application are competing for the
console at the same time.  If the command pipeline is started from a script,
so that Tcl is not accessing the console, or if the command pipeline does
not use standard input or output, but is redirected from or to a file, then
the above problems do not occur.  
</p><p>Whether or not Tcl is running interactively, if a command pipeline is opened
for reading from a 16-bit DOS application, the call to <b cat="AMBIGUOUS ambiguous cmd">open</b> will not
return until end-of-file has been received from the command pipeline's
standard output.  If a command pipeline is opened for writing to a 16-bit DOS
application, no data will be sent to the command pipeline's standard output
until the pipe is actually closed.  This problem occurs because 16-bit DOS
applications are run synchronously, as described above.  
</p></dd>
</dle>
<dle>
<dt><b>Unix</b>       </dt>
<dd>Valid values for <i>fileName</i> to open a serial port are generally of the
form <b>/dev/tty</b><i>X</i>, where <i>X</i> is <b>a</b> or <b>b</b>, but the name
of any pseudo-file that maps to a serial port may be used.
Advanced configuration options are only supported for serial ports
when Tcl is built to use the POSIX serial interface.
<p>When running Tcl interactively, there may be some strange interactions
between the console, if one is present, and a command pipeline that uses
standard input.  If a command pipeline is opened for reading, some
of the lines entered at the console will be sent to the command pipeline and
some will be sent to the Tcl evaluator.  This problem only occurs because
both Tcl and the child application are competing for the console at the
same time.  If the command pipeline is started from a script, so that Tcl is
not accessing the console, or if the command pipeline does not use standard
input, but is redirected from a file, then the above problem does not occur.  
</p></dd>
</dle>
</dl>
<p>See the <ref refid="portability-issues">PORTABILITY ISSUES</ref> section of the <cmd>exec</cmd> command for additional
information not specific to command pipelines about executing
applications on the various platforms
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Open a command pipeline and catch any errors:
</p>
<example>
set fl [<b cat="AMBIGUOUS ambiguous cmd">open</b> "| ls this_file_does_not_exist"]
set data [read $fl]
if {[catch {close $fl} err]} {
    puts "ls command failed: $err"
}
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>close(n)</ref>
<ref>filename(n)</ref>
<ref>fconfigure(n)</ref>
<ref>gets(n)</ref>
<ref>read(n)</ref>
<ref>puts(n)</ref>
<ref>exec(n)</ref>
<ref>pid(n)</ref>
<ref>fopen(3)</ref>
</seealso>
<keywords>
<keyword>access mode</keyword>
<keyword>append</keyword>
<keyword>create</keyword>
<keyword>file</keyword>
<keyword>non-blocking</keyword>
<keyword>open</keyword>
<keyword>permissions</keyword>
<keyword>pipeline</keyword>
<keyword>process</keyword>
<keyword>serial</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="OpenFileChnl" version="8.3" title="Tcl_OpenFileChannel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: OpenFileChnl.3,v 1.32 2005/06/06 23:45:42 dkf Exp $
 -->
<?TROFF.TH title="Tcl_OpenFileChannel" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_OpenFileChannel</name>
<name>Tcl_OpenCommandChannel</name>
<name>Tcl_MakeFileChannel</name>
<name>Tcl_GetChannel</name>
<name>Tcl_GetChannelNames</name>
<name>Tcl_GetChannelNamesEx</name>
<name>Tcl_RegisterChannel</name>
<name>Tcl_UnregisterChannel</name>
<name>Tcl_DetachChannel</name>
<name>Tcl_IsStandardChannel</name>
<name>Tcl_Close</name>
<name>Tcl_ReadChars</name>
<name>Tcl_Read</name>
<name>Tcl_GetsObj</name>
<name>Tcl_Gets</name>
<name>Tcl_WriteObj</name>
<name>Tcl_WriteChars</name>
<name>Tcl_Write</name>
<name>Tcl_Flush</name>
<name>Tcl_Seek</name>
<name>Tcl_Tell</name>
<name>Tcl_TruncateChannel</name>
<name>Tcl_GetChannelOption</name>
<name>Tcl_SetChannelOption</name>
<name>Tcl_Eof</name>
<name>Tcl_InputBlocked</name>
<name>Tcl_InputBuffered</name>
<name>Tcl_OutputBuffered</name>
<name>Tcl_Ungets</name>
<name>Tcl_ReadRaw</name>
<name>Tcl_WriteRaw</name>
<desc>buffered I/O facilities using channels</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Channel
<fun>Tcl_OpenFileChannel</fun>(<m>interp</m>, <m>fileName</m>, <m>mode</m>, <m>permissions</m>)

Tcl_Channel
<fun>Tcl_OpenCommandChannel</fun>(<m>interp</m>, <m>argc</m>, <m>argv</m>, <m>flags</m>)

Tcl_Channel
<fun>Tcl_MakeFileChannel</fun>(<m>handle</m>, <m>readOrWrite</m>)

Tcl_Channel
<fun>Tcl_GetChannel</fun>(<m>interp</m>, <m>channelName</m>, <m>modePtr</m>)

int
<fun>Tcl_GetChannelNames</fun>(<m>interp</m>)

int
<fun>Tcl_GetChannelNamesEx</fun>(<m>interp</m>, <m>pattern</m>)

void
<fun>Tcl_RegisterChannel</fun>(<m>interp</m>, <m>channel</m>)

int
<fun>Tcl_UnregisterChannel</fun>(<m>interp</m>, <m>channel</m>)

int
<fun>Tcl_DetachChannel</fun>(<m>interp</m>, <m>channel</m>)

int
<fun>Tcl_IsStandardChannel</fun>(<m>channel</m>)

int
<fun>Tcl_Close</fun>(<m>interp</m>, <m>channel</m>)

int
<fun>Tcl_ReadChars</fun>(<m>channel</m>, <m>readObjPtr</m>, <m>charsToRead</m>, <m>appendFlag</m>)

int
<fun>Tcl_Read</fun>(<m>channel</m>, <m>readBuf</m>, <m>bytesToRead</m>)

int
<fun>Tcl_GetsObj</fun>(<m>channel</m>, <m>lineObjPtr</m>)

int
<fun>Tcl_Gets</fun>(<m>channel</m>, <m>lineRead</m>)

int
<fun>Tcl_Ungets</fun>(<m>channel</m>, <m>input</m>, <m>inputLen</m>, <m>addAtEnd</m>)

int
<fun>Tcl_WriteObj</fun>(<m>channel</m>, <m>writeObjPtr</m>)

int
<fun>Tcl_WriteChars</fun>(<m>channel</m>, <m>charBuf</m>, <m>bytesToWrite</m>)

int
<fun>Tcl_Write</fun>(<m>channel</m>, <m>byteBuf</m>, <m>bytesToWrite</m>)

int
<fun>Tcl_ReadRaw</fun>(<m>channel</m>, <m>readBuf</m>, <m>bytesToRead</m>)

int
<fun>Tcl_WriteRaw</fun>(<m>channel</m>, <m>byteBuf</m>, <m>bytesToWrite</m>)

int
<fun>Tcl_Eof</fun>(<m>channel</m>)

int
<fun>Tcl_Flush</fun>(<m>channel</m>)

int
<fun>Tcl_InputBlocked</fun>(<m>channel</m>)

int
<fun>Tcl_InputBuffered</fun>(<m>channel</m>)

int
<fun>Tcl_OutputBuffered</fun>(<m>channel</m>)

Tcl_WideInt
<fun>Tcl_Seek</fun>(<m>channel</m>, <m>offset</m>, <m>seekMode</m>)

Tcl_WideInt
<fun>Tcl_Tell</fun>(<m>channel</m>)

<new version="8.5">int
<b>Tcl_TruncateChannel</b>(<m>channel</m>, <m>length</m>)
</new>
int
<fun>Tcl_GetChannelOption</fun>(<m>interp</m>, <m>channel</m>, <m>optionName</m>, <m>optionValue</m>)

int
<fun>Tcl_SetChannelOption</fun>(<m>interp</m>, <m>channel</m>, <m>optionName</m>, <m>newValue</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Used for error reporting and to look up a channel registered in it.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="fileName">*fileName</name>
<argmode>in</argmode>
<desc>The name of a local or network file.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="mode">*mode</name>
<argmode>in</argmode>
<desc>Specifies how the file is to be accessed.  May have any of the values
allowed for the <i>mode</i> argument to the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b> command.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>permissions</name>
<argmode>in</argmode>
<desc>POSIX-style permission flags such as 0644.  If a new file is created, these
permissions will be set on the created file.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>The number of elements in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argv">**argv</name>
<argmode>in</argmode>
<desc>Arguments for constructing a command pipeline.  These values have the same
meaning as the non-switch arguments to the Tcl <cmd>exec</cmd> command.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Specifies the disposition of the stdio handles in pipeline: OR-ed
combination of <b>TCL_STDIN</b>, <b>TCL_STDOUT</b>, <b>TCL_STDERR</b>, and
<b>TCL_ENFORCE_MODE</b>. If <b>TCL_STDIN</b> is set, stdin for the first child
in the pipe is the pipe channel, otherwise it is the same as the standard
input of the invoking process; likewise for <b>TCL_STDOUT</b> and
<b>TCL_STDERR</b>. If <b>TCL_ENFORCE_MODE</b> is not set, then the pipe can
redirect stdio handles to override the stdio handles for which
<b>TCL_STDIN</b>, <b>TCL_STDOUT</b> and <b>TCL_STDERR</b> have been set.  If it
is set, then such redirections cause an error.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>handle</name>
<argmode>in</argmode>
<desc>Operating system specific handle for I/O to a file. For Unix this is a
file descriptor, for Windows it is a HANDLE.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>readOrWrite</name>
<argmode>in</argmode>
<desc>OR-ed combination of <b>TCL_READABLE</b> and <b>TCL_WRITABLE</b> to indicate
what operations are valid on <i>handle</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="channelName">*channelName</name>
<argmode>in</argmode>
<desc>The name of the channel. 
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="modePtr">*modePtr</name>
<argmode>out</argmode>
<desc>Points at an integer variable that will receive an OR-ed combination of
<b>TCL_READABLE</b> and <b>TCL_WRITABLE</b> denoting whether the channel is
open for reading and writing.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>The pattern to match on, passed to Tcl_StringMatch, or NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>channel</name>
<argmode>in</argmode>
<desc>A Tcl channel for input or output.  Must have been the return value
from a procedure such as <fun>Tcl_OpenFileChannel</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="readObjPtr">*readObjPtr</name>
<argmode>in/out</argmode>
<desc>A pointer to a Tcl Object in which to store the characters read from the
channel.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>charsToRead</name>
<argmode>in</argmode>
<desc>The number of characters to read from the channel.  If the channel's encoding 
is <b cat="AMBIGUOUS ambiguous cmd">binary</b>, this is equivalent to the number of bytes to read from the 
channel.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>appendFlag</name>
<argmode>in</argmode>
<desc>If non-zero, data read from the channel will be appended to the object.
Otherwise, the data will replace the existing contents of the object.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="readBuf">*readBuf</name>
<argmode>out</argmode>
<desc>A buffer in which to store the bytes read from the channel.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>bytesToRead</name>
<argmode>in</argmode>
<desc>The number of bytes to read from the channel.  The buffer <i>readBuf</i> must
be large enough to hold this many bytes.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="lineObjPtr">*lineObjPtr</name>
<argmode>in/out</argmode>
<desc>A pointer to a Tcl object in which to store the line read from the
channel.  The line read will be appended to the current value of the
object. 
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="lineRead">*lineRead</name>
<argmode>in/out</argmode>
<desc>A pointer to a Tcl dynamic string in which to store the line read from the
channel.  Must have been initialized by the caller.  The line read will be
appended to any data already in the dynamic string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="input">*input</name>
<argmode>in</argmode>
<desc>The input to add to a channel buffer.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>inputLen</name>
<argmode>in</argmode>
<desc>Length of the input
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>addAtEnd</name>
<argmode>in</argmode>
<desc>Flag indicating whether the input should be added to the end or
beginning of the channel buffer.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="writeObjPtr">*writeObjPtr</name>
<argmode>in</argmode>
<desc>A pointer to a Tcl Object whose contents will be output to the channel.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="charBuf">*charBuf</name>
<argmode>in</argmode>
<desc>A buffer containing the characters to output to the channel.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="byteBuf">*byteBuf</name>
<argmode>in</argmode>
<desc>A buffer containing the bytes to output to the channel.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>bytesToWrite</name>
<argmode>in</argmode>
<desc>The number of bytes to consume from <i>charBuf</i> or <i>byteBuf</i> and
output to the channel.
</desc>
</argdef>
<argdef>
<argtype>Tcl_WideInt</argtype>
<name>offset</name>
<argmode>in</argmode>
<desc>How far to move the access point in the channel at which the next input or
output operation will be applied, measured in bytes from the position
given by <i>seekMode</i>.  May be either positive or negative.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>seekMode</name>
<argmode>in</argmode>
<desc>Relative to which point to seek; used with <i>offset</i> to calculate the new
access point for the channel. Legal values are <b>SEEK_SET</b>,
<b>SEEK_CUR</b>, and <b>SEEK_END</b>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_WideInt</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>The (non-negative) length to truncate the channel the channel to.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="optionName">*optionName</name>
<argmode>in</argmode>
<desc>The name of an option applicable to this channel, such as <b>-blocking</b>.
May have any of the values accepted by the <cmd>fconfigure</cmd> command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="optionValue">*optionValue</name>
<argmode>in</argmode>
<desc>Where to store the value of an option or a list of all options and their
values. Must have been initialized by the caller.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="newValue">*newValue</name>
<argmode>in</argmode>
<desc>New value for the option given by <i>optionName</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The Tcl channel mechanism provides a device-independent and
platform-independent mechanism for performing buffered input
and output operations on a variety of file, socket, and device
types.
The channel mechanism is extensible to new channel types, by
providing a low-level channel driver for the new type; the channel driver
interface is described in the manual entry for <fun>Tcl_CreateChannel</fun>. The
channel mechanism provides a buffering scheme modeled after
Unix's standard I/O, and it also allows for nonblocking I/O on
channels.
</p>
<p>The procedures described in this manual entry comprise the C APIs of the
generic layer of the channel architecture. For a description of the channel
driver architecture and how to implement channel drivers for new types of
channels, see the manual entry for <fun>Tcl_CreateChannel</fun>.

</p>
</section>
<section>
<title>TCL_OPENFILECHANNEL</title>
<p><fun>Tcl_OpenFileChannel</fun> opens a file specified by <i>fileName</i> and
returns a channel handle that can be used to perform input and output on
the file. This API is modeled after the <b>fopen</b> procedure of
the Unix standard I/O library.
The syntax and meaning of all arguments is similar to those
given in the Tcl <b cat="AMBIGUOUS ambiguous cmd">open</b> command when opening a file.
If an error occurs while opening the channel, <fun>Tcl_OpenFileChannel</fun>
returns NULL and records a POSIX error code that can be
retrieved with <fun>Tcl_GetErrno</fun>.
In addition, if <i>interp</i> is non-NULL, <fun>Tcl_OpenFileChannel</fun>
leaves an error message in <i>interp</i>'s result after any error.  
As of Tcl 8.4, the object-based API <fun>Tcl_FSOpenFileChannel</fun> should 
be used in preference to <fun>Tcl_OpenFileChannel</fun> wherever possible.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>, described below.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>TCL_OPENCOMMANDCHANNEL</title>
<p><fun>Tcl_OpenCommandChannel</fun> provides a C-level interface to the
functions of the <cmd>exec</cmd> and <b cat="AMBIGUOUS ambiguous cmd">open</b> commands.
It creates a sequence of subprocesses specified
by the <i>argv</i> and <i>argc</i> arguments and returns a channel that can
be used to communicate with these subprocesses.
The <i>flags</i> argument indicates what sort of communication will
exist with the command pipeline.
</p>
<p>If the <b>TCL_STDIN</b> flag is set then the standard input for the
first subprocess will be tied to the channel: writing to the channel
will provide input to the subprocess.  If <b>TCL_STDIN</b> is not set,
then standard input for the first subprocess will be the same as this
application's standard input.  If <b>TCL_STDOUT</b> is set then
standard output from the last subprocess can be read from the channel;
otherwise it goes to this application's standard output.  If
<b>TCL_STDERR</b> is set, standard error output for all subprocesses is
returned to the channel and results in an error when the channel is
closed; otherwise it goes to this application's standard error.  If
<b>TCL_ENFORCE_MODE</b> is not set, then <i>argc</i> and <i>argv</i> can
redirect the stdio handles to override <b>TCL_STDIN</b>,
<b>TCL_STDOUT</b>, and <b>TCL_STDERR</b>; if it is set, then it is an
error for argc and argv to override stdio channels for which
<b>TCL_STDIN</b>, <b>TCL_STDOUT</b>, and <b>TCL_STDERR</b> have been set.
</p>
<p>If an error occurs while opening the channel, <fun>Tcl_OpenCommandChannel</fun>
returns NULL and records a POSIX error code that can be retrieved with
<fun>Tcl_GetErrno</fun>.
In addition, <fun>Tcl_OpenCommandChannel</fun> leaves an error message in
the interpreter's result if <i>interp</i> is not NULL.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>, described below.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>TCL_MAKEFILECHANNEL</title>
<p><fun>Tcl_MakeFileChannel</fun> makes a <type>Tcl_Channel</type> from an existing,
platform-specific, file handle.
The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>, described below.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>TCL_GETCHANNEL</title>
<p><fun>Tcl_GetChannel</fun> returns a channel given the <i>channelName</i> used to
create it with <fun>Tcl_CreateChannel</fun> and a pointer to a Tcl interpreter in
<i>interp</i>. If a channel by that name is not registered in that interpreter,
the procedure returns NULL. If the <i>modePtr</i> argument is not NULL, it
points at an integer variable that will receive an OR-ed combination of
<b>TCL_READABLE</b> and <b>TCL_WRITABLE</b> describing whether the channel is
open for reading and writing.
</p>
<p><fun>Tcl_GetChannelNames</fun> and <fun>Tcl_GetChannelNamesEx</fun> write the
names of the registered channels to the interpreter's result as a
list object.  <fun>Tcl_GetChannelNamesEx</fun> will filter these names
according to the <i>pattern</i>.  If <i>pattern</i> is NULL, then it
will not do any filtering.  The return value is <b>TCL_OK</b> if no
errors occurred writing to the result, otherwise it is <b>TCL_ERROR</b>,
and the error message is left in the interpreter's result.

</p>
</section>
<section>
<title>TCL_REGISTERCHANNEL</title>
<p><fun>Tcl_RegisterChannel</fun> adds a channel to the set of channels accessible
in <i>interp</i>. After this call, Tcl programs executing in that
interpreter can refer to the channel in input or output operations using
the name given in the call to <fun>Tcl_CreateChannel</fun>.  After this call,
the channel becomes the property of the interpreter, and the caller should
not call <fun>Tcl_Close</fun> for the channel; the channel will be closed
automatically when it is unregistered from the interpreter.
</p>
<p>Code executing outside of any Tcl interpreter can call
<fun>Tcl_RegisterChannel</fun> with <i>interp</i> as NULL, to indicate that it
wishes to hold a reference to this channel. Subsequently, the channel can
be registered in a Tcl interpreter and it will only be closed when the
matching number of calls to <fun>Tcl_UnregisterChannel</fun> have been made.
This allows code executing outside of any interpreter to safely hold a
reference to a channel that is also registered in a Tcl interpreter.
</p>
<p>This procedure interacts with the code managing the standard
channels. If no standard channels were initialized before the first
call to <fun>Tcl_RegisterChannel</fun>, they will get initialized by that
call. See <fun>Tcl_StandardChannels</fun> for a general treatise about
standard channels and the behaviour of the Tcl library with regard to
them.

</p>
</section>
<section>
<title>TCL_UNREGISTERCHANNEL</title>
<p><fun>Tcl_UnregisterChannel</fun> removes a channel from the set of channels
accessible in <i>interp</i>. After this call, Tcl programs will no longer be
able to use the channel's name to refer to the channel in that interpreter.
If this operation removed the last registration of the channel in any
interpreter, the channel is also closed and destroyed.
</p>
<p>Code not associated with a Tcl interpreter can call
<fun>Tcl_UnregisterChannel</fun> with <i>interp</i> as NULL, to indicate to Tcl
that it no longer holds a reference to that channel. If this is the last
reference to the channel, it will now be closed.  <fun>Tcl_UnregisterChannel</fun>
is very similar to <fun>Tcl_DetachChannel</fun> except that it will also
close the channel if no further references to it exist.

</p>
</section>
<section>
<title>TCL_DETACHCHANNEL</title>
<p><fun>Tcl_DetachChannel</fun> removes a channel from the set of channels
accessible in <i>interp</i>. After this call, Tcl programs will no longer be
able to use the channel's name to refer to the channel in that interpreter.
Beyond that, this command has no further effect.  It cannot be used on
the standard channels (stdout, stderr, stdin), and will return
<b>TCL_ERROR</b> if passed one of those channels.
</p>
<p>Code not associated with a Tcl interpreter can call
<fun>Tcl_DetachChannel</fun> with <i>interp</i> as NULL, to indicate to Tcl
that it no longer holds a reference to that channel. If this is the last
reference to the channel, unlike <fun>Tcl_UnregisterChannel</fun>, 
it will not be closed.

</p>
</section>
<section>
<title>TCL_ISSTANDARDCHANNEL</title>
<p><fun>Tcl_IsStandardChannel</fun> tests whether a channel is one of the
three standard channels, stdin, stdout or stderr.  If so, it returns
1, otherwise 0.
</p>
<p>No attempt is made to check whether the given channel or the standard 
channels are initialized or otherwise valid.

</p>
</section>
<section>
<title>TCL_CLOSE</title>
<p><fun>Tcl_Close</fun> destroys the channel <i>channel</i>, which must denote a
currently open channel. The channel should not be registered in any
interpreter when <fun>Tcl_Close</fun> is called. Buffered output is flushed to
the channel's output device prior to destroying the channel, and any
buffered input is discarded.  If this is a blocking channel, the call does
not return until all buffered data is successfully sent to the channel's
output device.  If this is a nonblocking channel and there is buffered
output that cannot be written without blocking, the call returns
immediately; output is flushed in the background and the channel will be
closed once all of the buffered data has been output.  In this case errors
during flushing are not reported.
</p>
<p>If the channel was closed successfully, <fun>Tcl_Close</fun> returns <b>TCL_OK</b>.
If an error occurs, <fun>Tcl_Close</fun> returns <b>TCL_ERROR</b> and records a
POSIX error code that can be retrieved with <fun>Tcl_GetErrno</fun>.
If the channel is being closed synchronously and an error occurs during
closing of the channel and <i>interp</i> is not NULL, an error message is
left in the interpreter's result.
</p>
<p>Note: it is not safe to call <fun>Tcl_Close</fun> on a channel that has been
registered using <fun>Tcl_RegisterChannel</fun>; see the documentation for
<fun>Tcl_RegisterChannel</fun>, above, for details. If the channel has ever
been given as the <b>chan</b> argument in a call to
<fun>Tcl_RegisterChannel</fun>, you should instead use
<fun>Tcl_UnregisterChannel</fun>, which will internally call <fun>Tcl_Close</fun>
when all calls to <fun>Tcl_RegisterChannel</fun> have been matched by
corresponding calls to <fun>Tcl_UnregisterChannel</fun>.

</p>
</section>
<section>
<title>TCL_READCHARS AND TCL_READ</title>
<p><fun>Tcl_ReadChars</fun> consumes bytes from <i>channel</i>, converting the bytes
to UTF-8 based on the channel's encoding and storing the produced data in 
<i>readObjPtr</i>'s string representation.  The return value of
<fun>Tcl_ReadChars</fun> is the number of characters, up to <i>charsToRead</i>,
that were stored in <i>readObjPtr</i>.  If an error occurs while reading, the
return value is -1 and <fun>Tcl_ReadChars</fun> records a POSIX error code that
can be retrieved with <fun>Tcl_GetErrno</fun>.
</p>
<p>Setting <i>charsToRead</i> to <b>-1</b> will cause the command to read
all characters currently available (non-blocking) or everything until
eof (blocking mode).
</p>
<p>The return value may be smaller than the value to read, indicating that less
data than requested was available.  This is called a <i>short read</i>.  In
blocking mode, this can only happen on an end-of-file.  In nonblocking mode,
a short read can also occur if there is not enough input currently
available:  <fun>Tcl_ReadChars</fun> returns a short count rather than waiting
for more data.
</p>
<p>If the channel is in blocking mode, a return value of zero indicates an
end-of-file condition.  If the channel is in nonblocking mode, a return
value of zero indicates either that no input is currently available or an
end-of-file condition.  Use <fun>Tcl_Eof</fun> and <fun>Tcl_InputBlocked</fun> to tell
which of these conditions actually occurred.
</p>
<p><fun>Tcl_ReadChars</fun> translates the various end-of-line representations into
the canonical <b>\n</b> internal representation according to the current
end-of-line recognition mode.  End-of-line recognition and the various
platform-specific modes are described in the manual entry for the Tcl
<cmd>fconfigure</cmd> command.
</p>
<p>As a performance optimization, when reading from a channel with the encoding
<b cat="AMBIGUOUS ambiguous cmd">binary</b>, the bytes are not converted to UTF-8 as they are read.
Instead, they are stored in <i>readObjPtr</i>'s internal representation as a
byte-array object.  The string representation of this object will only be
constructed if it is needed (e.g., because of a call to
<fun>Tcl_GetStringFromObj</fun>).  In this way, byte-oriented data can be read
from a channel, manipulated by calling <fun>Tcl_GetByteArrayFromObj</fun> and
related functions, and then written to a channel without the expense of ever
converting to or from UTF-8.
</p>
<p><fun>Tcl_Read</fun> is similar to <fun>Tcl_ReadChars</fun>, except that it doesn't do
encoding conversions, regardless of the channel's encoding.  It is deprecated
and exists for backwards compatibility with non-internationalized Tcl
extensions.  It consumes bytes from <i>channel</i> and stores them in
<i>readBuf</i>, performing end-of-line translations on the way.  The return value
of <fun>Tcl_Read</fun> is the number of bytes, up to <i>bytesToRead</i>, written in
<i>readBuf</i>.  The buffer produced by <fun>Tcl_Read</fun> is not null-terminated.
Its contents are valid from the zeroth position up to and excluding the
position indicated by the return value.  
</p>
<p><fun>Tcl_ReadRaw</fun> is the same as <fun>Tcl_Read</fun> but does not
compensate for stacking. While <fun>Tcl_Read</fun> (and the other functions
in the API) always get their data from the topmost channel in the
stack the supplied channel is part of, <fun>Tcl_ReadRaw</fun> does
not. Thus this function is <b>only</b> usable for transformational
channel drivers, i.e. drivers used in the middle of a stack of
channels, to move data from the channel below into the transformation.

</p>
</section>
<section>
<title>TCL_GETSOBJ AND TCL_GETS</title>
<p><fun>Tcl_GetsObj</fun> consumes bytes from <i>channel</i>, converting the bytes to
UTF-8 based on the channel's encoding, until a full line of input has been
seen.  If the channel's encoding is <b cat="AMBIGUOUS ambiguous cmd">binary</b>, each byte read from the
channel is treated as an individual Unicode character.  All of the
characters of the line except for the terminating end-of-line character(s)
are appended to <i>lineObjPtr</i>'s string representation.  The end-of-line
character(s) are read and discarded.
</p>
<p>If a line was successfully read, the return value is greater than or equal
to zero and indicates the number of bytes stored in <i>lineObjPtr</i>.  If an
error occurs, <fun>Tcl_GetsObj</fun> returns -1 and records a POSIX error code
that can be retrieved with <fun>Tcl_GetErrno</fun>.  <fun>Tcl_GetsObj</fun> also
returns -1 if the end of the file is reached; the <fun>Tcl_Eof</fun> procedure
can be used to distinguish an error from an end-of-file condition.
</p>
<p>If the channel is in nonblocking mode, the return value can also be -1 if
no data was available or the data that was available did not contain an
end-of-line character.  When -1 is returned, the <fun>Tcl_InputBlocked</fun>
procedure may be invoked to determine if the channel is blocked because
of input unavailability.
</p>
<p><fun>Tcl_Gets</fun> is the same as <fun>Tcl_GetsObj</fun> except the resulting
characters are appended to the dynamic string given by
<i>lineRead</i> rather than a Tcl object.

</p>
</section>
<section>
<title>TCL_UNGETS</title>
<p><fun>Tcl_Ungets</fun> is used to add data to the input queue of a channel,
at either the head or tail of the queue.  The pointer <i>input</i> points
to the data that is to be added.  The length of the input to add is given
by <i>inputLen</i>.  A non-zero value of <i>addAtEnd</i> indicates that the
data is to be added at the end of queue; otherwise it will be added at the
head of the queue.  If <i>channel</i> has a "sticky" EOF set, no data will be
added to the input queue.  <fun>Tcl_Ungets</fun> returns <i>inputLen</i> or
-1 if an error occurs.

</p>
</section>
<section>
<title>TCL_WRITECHARS, TCL_WRITEOBJ, AND TCL_WRITE</title>
<p><fun>Tcl_WriteChars</fun> accepts <i>bytesToWrite</i> bytes of character data at
<i>charBuf</i>.  The UTF-8 characters in the buffer are converted to the
channel's encoding and queued for output to <i>channel</i>.  If
<i>bytesToWrite</i> is negative, <fun>Tcl_WriteChars</fun> expects <i>charBuf</i>
to be null-terminated and it outputs everything up to the null.
</p>
<p>Data queued for output may not appear on the output device immediately, due
to internal buffering.  If the data should appear immediately, call
<fun>Tcl_Flush</fun> after the call to <fun>Tcl_WriteChars</fun>, or set the 
<b>-buffering</b> option on the channel to <b>none</b>.  If you wish the data
to appear as soon as a complete line is accepted for output, set the
<b>-buffering</b> option on the channel to <b cat="canvasitemtype">line</b> mode.
</p>
<p>The return value of <fun>Tcl_WriteChars</fun> is a count of how many bytes were
accepted for output to the channel.  This is either greater than zero to
indicate success or -1 to indicate that an error occurred.  If an error
occurs, <fun>Tcl_WriteChars</fun> records a POSIX error code that may be
retrieved with <fun>Tcl_GetErrno</fun>.
</p>
<p>Newline characters in the output data are translated to platform-specific
end-of-line sequences according to the <b>-translation</b> option for the
channel.  This is done even if the channel has no encoding.
</p>
<p><fun>Tcl_WriteObj</fun> is similar to <fun>Tcl_WriteChars</fun> except it
accepts a Tcl object whose contents will be output to the channel.  The
UTF-8 characters in <i>writeObjPtr</i>'s string representation are converted
to the channel's encoding and queued for output to <i>channel</i>.  
As a performance optimization, when writing to a channel with the encoding
<b cat="AMBIGUOUS ambiguous cmd">binary</b>, UTF-8 characters are not converted as they are written.
Instead, the bytes in <i>writeObjPtr</i>'s internal representation as a
byte-array object are written to the channel.  The byte-array representation
of the object will be constructed if it is needed.  In this way,
byte-oriented data can be read from a channel, manipulated by calling
<fun>Tcl_GetByteArrayFromObj</fun> and related functions, and then written to a
channel without the expense of ever converting to or from UTF-8.
</p>
<p><fun>Tcl_Write</fun> is similar to <fun>Tcl_WriteChars</fun> except that it doesn't do
encoding conversions, regardless of the channel's encoding.  It is
deprecated and exists for backwards compatibility with non-internationalized
Tcl extensions.  It accepts <i>bytesToWrite</i> bytes of data at
<i>byteBuf</i> and queues them for output to <i>channel</i>.  If
<i>bytesToWrite</i> is negative, <fun>Tcl_Write</fun> expects <i>byteBuf</i> to be
null-terminated and it outputs everything up to the null.
</p>
<p><fun>Tcl_WriteRaw</fun> is the same as <fun>Tcl_Write</fun> but does not
compensate for stacking. While <fun>Tcl_Write</fun> (and the other
functions in the API) always feed their input to the topmost channel
in the stack the supplied channel is part of, <fun>Tcl_WriteRaw</fun> does
not. Thus this function is <b>only</b> usable for transformational
channel drivers, i.e. drivers used in the middle of a stack of
channels, to move data from the transformation into the channel below
it.

</p>
</section>
<section>
<title>TCL_FLUSH</title>
<p><fun>Tcl_Flush</fun> causes all of the buffered output data for <i>channel</i>
to be written to its underlying file or device as soon as possible.
If the channel is in blocking mode, the call does not return until
all the buffered data has been sent to the channel or some error occurred.
The call returns immediately if the channel is nonblocking; it starts
a background flush that will write the buffered data to the channel
eventually, as fast as the channel is able to absorb it.
</p>
<p>The return value is normally <b>TCL_OK</b>.
If an error occurs, <fun>Tcl_Flush</fun> returns <b>TCL_ERROR</b> and
records a POSIX error code that can be retrieved with <fun>Tcl_GetErrno</fun>.

</p>
</section>
<section>
<title>TCL_SEEK</title>
<p><fun>Tcl_Seek</fun> moves the access point in <i>channel</i> where subsequent
data will be read or written. Buffered output is flushed to the channel and
buffered input is discarded, prior to the seek operation.
</p>
<p><fun>Tcl_Seek</fun> normally returns the new access point.
If an error occurs, <fun>Tcl_Seek</fun> returns -1 and records a POSIX error
code that can be retrieved with <fun>Tcl_GetErrno</fun>.
After an error, the access point may or may not have been moved.

</p>
</section>
<section>
<title>TCL_TELL</title>
<p><fun>Tcl_Tell</fun> returns the current access point for a channel. The returned
value is -1 if the channel does not support seeking.

</p>
</section>
<section>
<title>TCL_TRUNCATECHANNEL</title>
<p><new version="8.5"><b>Tcl_TruncateChannel</b> truncates the file underlying <i>channel</i>
to a given <i>length</i> of bytes. It returns <b>TCL_OK</b> if the
operation succeeded, and <b>TCL_ERROR</b> otherwise.
</new>
</p>
</section>
<section>
<title>TCL_GETCHANNELOPTION</title>
<p><fun>Tcl_GetChannelOption</fun> retrieves, in <i>optionValue</i>, the value of one of
the options currently in effect for a channel, or a list of all options and
their values.  The <i>channel</i> argument identifies the channel for which
to query an option or retrieve all options and their values.
If <i>optionName</i> is not NULL, it is the name of the
option to query; the option's value is copied to the Tcl dynamic string
denoted by <i>optionValue</i>. If
<i>optionName</i> is NULL, the function stores an alternating list of option
names and their values in <i>optionValue</i>, using a series of calls to
<fun>Tcl_DStringAppendElement</fun>. The various preexisting options and
their possible values are described in the manual entry for the Tcl
<cmd>fconfigure</cmd> command. Other options can be added by each channel type.
These channel type specific options are described in the manual entry for
the Tcl command that creates a channel of that type; for example, the
additional options for TCP based channels are described in the manual entry
for the Tcl <cmd>socket</cmd> command.
The procedure normally returns <b>TCL_OK</b>. If an error occurs, it returns
<b>TCL_ERROR</b> and calls <fun>Tcl_SetErrno</fun> to store an appropriate POSIX
error code.

</p>
</section>
<section>
<title>TCL_SETCHANNELOPTION</title>
<p><fun>Tcl_SetChannelOption</fun> sets a new value <i>newValue</i>
for an option <i>optionName</i> on <i>channel</i>.
The procedure normally returns <b>TCL_OK</b>.  If an error occurs,
it returns <b>TCL_ERROR</b>;  in addition, if <i>interp</i> is non-NULL,
<fun>Tcl_SetChannelOption</fun> leaves an error message in the interpreter's result.

</p>
</section>
<section>
<title>TCL_EOF</title>
<p><fun>Tcl_Eof</fun> returns a nonzero value if <i>channel</i> encountered
an end of file during the last input operation.

</p>
</section>
<section>
<title>TCL_INPUTBLOCKED</title>
<p><fun>Tcl_InputBlocked</fun> returns a nonzero value if <i>channel</i> is in
nonblocking mode and the last input operation returned less data than
requested because there was insufficient data available.
The call always returns zero if the channel is in blocking mode.

</p>
</section>
<section>
<title>TCL_INPUTBUFFERED</title>
<p><fun>Tcl_InputBuffered</fun> returns the number of bytes of input currently
buffered in the internal buffers for a channel. If the channel is not open
for reading, this function always returns zero.

</p>
</section>
<section>
<title>TCL_OUTPUTBUFFERED</title>
<p><fun>Tcl_OutputBuffered</fun> returns the number of bytes of output
currently buffered in the internal buffers for a channel. If the
channel is not open for writing, this function always returns zero.

</p>
</section>
<section>
<title>PLATFORM ISSUES</title>
<p>The handles returned from <fun>Tcl_GetChannelHandle</fun> depend on the
platform and the channel type.  On Unix platforms, the handle is
always a Unix file descriptor as returned from the <b cat="AMBIGUOUS ambiguous cmd">open</b> system
call.  On Windows platforms, the handle is a file <b>HANDLE</b> when
the channel was created with <fun>Tcl_OpenFileChannel</fun>,
<fun>Tcl_OpenCommandChannel</fun>, or <fun>Tcl_MakeFileChannel</fun>.  Other
channel types may return a different type of handle on Windows
platforms.

</p>
</section>
<seealso>
<ref>DString(3)</ref>
<ref>fconfigure(n)</ref>
<ref>filename(n)</ref>
<ref>fopen(3)</ref>
<ref>Tcl_CreateChannel(3)</ref>
</seealso>
<keywords>
<keyword>access point</keyword>
<keyword>blocking</keyword>
<keyword>buffered I/O</keyword>
<keyword>channel</keyword>
<keyword>channel driver</keyword>
<keyword>end of file</keyword>
<keyword>flush</keyword>
<keyword>input</keyword>
<keyword>nonblocking</keyword>
<keyword>output</keyword>
<keyword>read</keyword>
<keyword>seek</keyword>
<keyword>write</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="OpenTcp" version="8.0" title="Tcl_OpenTcpClient">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996-7 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: OpenTcp.3,v 1.11 2006/11/15 09:23:01 dkf Exp $
 -->
<?TROFF.TH title="Tcl_OpenTcpClient" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_OpenTcpClient</name>
<name>Tcl_MakeTcpClientChannel</name>
<name>Tcl_OpenTcpServer</name>
<desc>procedures to open channels using TCP sockets</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b> 

Tcl_Channel
<fun>Tcl_OpenTcpClient</fun>(<m>interp</m>, <m>port</m>, <m>host</m>, <m>myaddr</m>, <m>myport</m>, <m>async</m>)

Tcl_Channel
<fun>Tcl_MakeTcpClientChannel</fun>(<m>sock</m>)

Tcl_Channel
<fun>Tcl_OpenTcpServer</fun>(<m>interp</m>, <m>port</m>, <m>myaddr</m>, <m>proc</m>, <m>clientData</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter to use for error reporting.  If non-NULL and an
error occurs, an error message is left in the interpreter's result.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>port</name>
<argmode>in</argmode>
<desc>A port number to connect to as a client or to listen on as a server.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="host">*host</name>
<argmode>in</argmode>
<desc>A string specifying a host name or address for the remote end of the connection.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>myport</name>
<argmode>in</argmode>
<desc>A port number for the client's end of the socket.  If 0, a port number
is allocated at random.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="myaddr">*myaddr</name>
<argmode>in</argmode>
<desc>A string specifying the host name or address for network interface to use
for the local end of the connection.  If NULL, a default interface is
chosen.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>async</name>
<argmode>in</argmode>
<desc>If nonzero, the client socket is connected asynchronously to the server.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>sock</name>
<argmode>in</argmode>
<desc>Platform-specific handle for client TCP socket.
</desc>
</argdef>
<argdef>
<argtype>Tcl_TcpAcceptProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Pointer to a procedure to invoke each time a new connection is
accepted via the socket.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These functions are convenience procedures for creating
channels that communicate over TCP sockets.
The operations on a channel
are described in the manual entry for <fun>Tcl_OpenFileChannel</fun>.

</p>
</section>
<section>
<title>TCL_OPENTCPCLIENT</title>
<p><fun>Tcl_OpenTcpClient</fun> opens a client TCP socket connected to a <i>port</i>
on a specific <i>host</i>, and returns a channel that can be used to
communicate with the server. The host to connect to can be specified either
as a domain name style name (e.g. <b>www.sunlabs.com</b>), or as a string
containing the alphanumeric representation of its four-byte address (e.g.
<b>127.0.0.1</b>). Use the string <b>localhost</b> to connect to a TCP socket on
the host on which the function is invoked.
</p>
<p>The <i>myaddr</i> and <i>myport</i> arguments allow a client to specify an
address for the local end of the connection.  If <i>myaddr</i> is NULL, then
an interface is chosen automatically by the operating system.
If <i>myport</i> is 0, then a port number is chosen at random by
the operating system.
</p>
<p>If <i>async</i> is zero, the call to <fun>Tcl_OpenTcpClient</fun> returns only
after the client socket has either successfully connected to the server, or
the attempted connection has failed.
If <i>async</i> is nonzero the socket is connected asynchronously and the
returned channel may not yet be connected to the server when the call to
<fun>Tcl_OpenTcpClient</fun> returns. If the channel is in blocking mode and an
input or output operation is done on the channel before the connection is
completed or fails, that operation will wait until the connection either
completes successfully or fails. If the channel is in nonblocking mode, the
input or output operation will return immediately and a subsequent call to
<fun>Tcl_InputBlocked</fun> on the channel will return nonzero.
</p>
<p>The returned channel is opened for reading and writing.
If an error occurs in opening the socket, <fun>Tcl_OpenTcpClient</fun> returns
NULL and records a POSIX error code that can be retrieved
with <fun>Tcl_GetErrno</fun>.
In addition, if <i>interp</i> is non-NULL, an error message
is left in the interpreter's result.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>TCL_MAKETCPCLIENTCHANNEL</title>
<p><fun>Tcl_MakeTcpClientChannel</fun> creates a <type>Tcl_Channel</type> around an
existing, platform specific, handle for a client TCP socket.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>TCL_OPENTCPSERVER</title>
<p><fun>Tcl_OpenTcpServer</fun> opens a TCP socket on the local host on a specified
<i>port</i> and uses the Tcl event mechanism to accept requests from clients
to connect to it. The <i>myaddr</i> argument specifies the network interface.
If <i>myaddr</i> is NULL the special address INADDR_ANY should be used to
allow connections from any network interface.
Each time a client connects to this socket, Tcl creates a channel
for the new connection and invokes <i>proc</i> with information about
the channel. <i>Proc</i> must match the following prototype:
</p>
<syntax cat="type" name="Tcl_TcpAcceptProc" scope="global">
typedef void Tcl_TcpAcceptProc(
        ClientData <i>clientData</i>,
        Tcl_Channel <i>channel</i>,
        char *<i>hostName</i>,
        int <i>port</i>);
</syntax>
<p>The <i>clientData</i> argument will be the same as the <i>clientData</i>
argument to <fun>Tcl_OpenTcpServer</fun>, <i>channel</i> will be the handle
for the new channel, <i>hostName</i> points to a string containing
the name of the client host making the connection, and <i>port</i>
will contain the client's port number.
The new channel
is opened for both input and output. 
If <i>proc</i> raises an error, the connection is closed automatically.
<i>Proc</i> has no return value, but if it wishes to reject the
connection it can close <i>channel</i>.
</p>
<p><fun>Tcl_OpenTcpServer</fun> normally returns a pointer to a channel
representing the server socket.
If an error occurs, <fun>Tcl_OpenTcpServer</fun> returns NULL and
records a POSIX error code that can be retrieved with <fun>Tcl_GetErrno</fun>.
In addition, if the interpreter is non-NULL, an error message
is left in the interpreter's result.
</p>
<p>The channel returned by <fun>Tcl_OpenTcpServer</fun> cannot be used for
either input or output.
It is simply a handle for the socket used to accept connections.
The caller can close the channel to shut down the server and disallow
further connections from new clients.
</p>
<p>TCP server channels operate correctly only in applications that dispatch
events through <fun>Tcl_DoOneEvent</fun> or through Tcl commands such as
<cmd>vwait</cmd>; otherwise Tcl will never notice that a connection request from
a remote client is pending.
</p>
<p>The newly created channel is not registered in the supplied interpreter; to
register it, use <fun>Tcl_RegisterChannel</fun>.
If one of the standard channels, <b>stdin, stdout</b> or <b>stderr</b> was
previously closed, the act of creating the new channel also assigns it as a
replacement for the standard channel.

</p>
</section>
<section>
<title>PLATFORM ISSUES</title>
<p>On Unix platforms, the socket handle is a Unix file descriptor as
returned by the <cmd>socket</cmd> system call.  On the Windows platform, the
socket handle is a <b>SOCKET</b> as defined in the WinSock API.

</p>
</section>
<seealso>
<ref>Tcl_OpenFileChannel(3)</ref>
<ref>Tcl_RegisterChannel(3)</ref>
<ref>vwait(n)</ref>
</seealso>
<keywords>
<keyword>client</keyword>
<keyword>server</keyword>
<keyword>TCP</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="option" title="option">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: option.n,v 1.5 2004/10/28 12:25:53 dkf Exp $
 -->
<?TROFF.TH title="option" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>option</name>
<desc>Add/retrieve window options to/from the option database</desc>
</namesection>
<synopsis>
<syntax>
<b>option add</b> <m>pattern value</m> ?<m>priority</m>?
<b>option clear</b>
<b>option get</b> <m>window name class</m>
<b>option readfile</b> <m>fileName</m> ?<m>priority</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>option</cmd> command allows you to add entries to the Tk option
database or to retrieve options from the database.  The <b>add</b>
form of the command adds a new option to the database.
<i>Pattern</i> contains
the option being specified, and consists of names and/or classes
separated by asterisks or dots, in the usual X format.  <i>Value</i>
contains a text string to associate with <i>pattern</i>;  this is the
value that will be returned in calls to <fun>Tk_GetOption</fun> or by
invocations of the <b>option get</b> command.  If <i>priority</i>
is specified, it indicates the priority level for this option (see
below for legal values);  it defaults to <b>interactive</b>.
This command always returns an empty string.
</p>
<p>The <b>option clear</b> command clears the option database.  Default
options (from the
<b>RESOURCE_MANAGER</b> property or the <b>.Xdefaults</b>
file) will be reloaded automatically the next time an
option is added to the database or removed from it.  This command
always returns an empty string.
</p>
<p>The <b>option get</b> command returns the value of the option
specified for <i>window</i>
under <i>name</i> and <i>class</i>.  If several entries in the option
database match <i>window</i>, <i>name</i>, and <i>class</i>, then
the command returns whichever was created with highest
<i>priority</i> level.  If there are several matching
entries at the same priority level, then it returns whichever entry
was most recently entered into the option database.  If there are
no matching entries, then the empty string is returned.
</p>
<p>The <b>readfile</b> form of the command reads <i>fileName</i>,
which should have the standard format for an
X resource database such as <b>.Xdefaults</b>, and adds all the
options specified in that file to the option database.  If <i>priority</i>
is specified, it indicates the priority level at which to enter the
options;  <i>priority</i> defaults to <b>interactive</b>.
</p>
<p>The <i>priority</i> arguments to the <cmd>option</cmd> command are
normally specified symbolically using one of the following values:
</p>
<dl>
<dle>
<dt><b>widgetDefault</b></dt>
<dd>Level 20.  Used for default values hard-coded into widgets.
</dd>
</dle>
<dle>
<dt><b>startupFile</b></dt>
<dd>Level 40.  Used for options specified in application-specific
startup files.
</dd>
</dle>
<dle>
<dt><b>userDefault</b></dt>
<dd>Level 60.  Used for options specified in user-specific defaults
files, such as <b>.Xdefaults</b>, resource databases loaded into
the X server, or user-specific startup files.
</dd>
</dle>
<dle>
<dt><b>interactive</b></dt>
<dd>Level 80.  Used for options specified interactively after the application
starts running.  If <i>priority</i> isn't specified, it defaults to
this level.
</dd>
</dle>
</dl>
<p>Any of the above keywords may be abbreviated.  In addition, priorities
may be specified numerically using integers between 0 and 100,
inclusive.  The numeric form is probably a bad idea except for new priority
levels other than the ones given above.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Instruct every button in the application to have red text on it unless
explicitly overridden:
</p>
<example>
<b>option add</b> *button.foreground red startupFile
</example>
<p>Allow users to control what happens in an entry widget when the Return
key is pressed by specifying a script in the option database and add a
default option for that which rings the bell:
</p>
<example>
entry .e
bind .e &lt;Return&gt; [<b>option get</b> .e returnCommand Command]
<b>option add</b> *.e.returnCommand bell widgetDefault
</example>


</section>
<keywords>
<keyword>database</keyword>
<keyword>option</keyword>
<keyword>priority</keyword>
<keyword>retrieve</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="optionMenu" title="tk_optionMenu" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: optionMenu.n,v 1.3 2004/06/21 14:48:04 dkf Exp $
 -->
<?TROFF.TH title="tk_optionMenu" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_optionMenu</name>
<desc>Create an option menubutton and its menu</desc>
</namesection>
<synopsis>
<syntax>
<b>tk_optionMenu</b> <m>w varName value</m> ?<m>value value ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This procedure creates an option menubutton whose name is <i>w</i>,
plus an associated menu.
Together they allow the user to select one of the values
given by the <i>value</i> arguments.
The current value will be stored in the global variable whose
name is given by <i>varName</i> and it will also be displayed as the label
in the option menubutton.
The user can click on the menubutton to display a menu containing
all of the <i>value</i>s and thereby select a new value.
Once a new value is selected, it will be stored in the variable
and appear in the option menubutton.
The current value can also be changed by setting the variable.
</p>
<p>The return value from <b>tk_optionMenu</b> is the name of the menu
associated with <i>w</i>, so that the caller can change its configuration
options or manipulate it in other ways.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
tk_optionMenu .foo myVar Foo Bar Boo Spong Wibble
pack .foo
</example>


</section>
<keywords>
<keyword>option menu</keyword>
</keywords>
</manpage>
<manpage cat="stdopt" id="options" version="4.4" title="options">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: options.n,v 1.11 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="options" section="n" date="4.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>options</name>
<desc>Standard options supported by widgets</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>This manual entry describes the common configuration options supported
by widgets in the Tk toolkit.  Every widget does not necessarily support
every option (see the manual entries for individual widgets for a list
of the standard options supported by that widget), but if a widget does
support an option with one of the names listed below, then the option
has exactly the effect described below.
</p>
<p>In the descriptions below, ``Command-Line Name'' refers to the
switch used in class commands and <b>configure</b> widget commands to
set this value.  For example, if an option's command-line switch is
<b>-foreground</b> and there exists a widget <b>.a.b.c</b>, then the
command
</p>
<example>
<b>.a.b.c  configure  -foreground black</b>
</example>
<p>may be used to specify the value <b>black</b> for the option in
the widget <b>.a.b.c</b>.  Command-line switches may be abbreviated,
as long as the abbreviation is unambiguous.
``Database Name'' refers to the option's name in the option database (e.g.
in .Xdefaults files).  ``Database Class'' refers to the option's class value
in the option database.
</p>
<optionlist cat="stdopt" scope="global">
<optiondef>
<name>-activebackground</name>
<dbname>activeBackground</dbname>
<dbclass>Foreground</dbclass>
<desc>Specifies background color to use when drawing active elements.
An element (a widget or portion of a widget) is active if the
mouse cursor is positioned over the element and pressing a mouse button
will cause some action to occur.
If strict Motif compliance has been requested by setting the
<b>tk_strictMotif</b> variable, this option will normally be
ignored;  the normal background color will be used instead.
For some elements on Windows and Macintosh systems, the active color
will only be used while mouse button 1 is pressed over the element.
</desc>
</optiondef>
<optiondef>
<name>-activeborderwidth</name>
<dbname>activeBorderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>Specifies a non-negative value indicating
the width of the 3-D border drawn around active elements.  See above for
definition of active elements.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
This option is typically only available in widgets displaying more
than one element at a time (e.g. menus but not buttons).
</desc>
</optiondef>
<optiondef>
<name>-activeforeground</name>
<dbname>activeForeground</dbname>
<dbclass>Background</dbclass>
<desc>Specifies foreground color to use when drawing active elements.
See above for definition of active elements.
</desc>
</optiondef>
<optiondef>
<name>-anchor</name>
<dbname>anchor</dbname>
<dbclass>Anchor</dbclass>
<desc>Specifies how the information in a widget (e.g. text or a bitmap)
is to be displayed in the widget.
Must be one of the values <b>n</b>, <b>ne</b>, <b>e</b>, <b>se</b>,
<b>s</b>, <b>sw</b>, <b>w</b>, <b>nw</b>, or <b>center</b>.
For example, <b>nw</b> means display the information such that its
top-left corner is at the top-left corner of the widget.
</desc>
</optiondef>
<optiondef>
<name name="-background">-background or -bg</name>
<dbname>background</dbname>
<dbclass>Background</dbclass>
<desc>Specifies the normal background color to use when displaying the
widget.
</desc>
</optiondef>
<optiondef>
<name>-bitmap</name>
<dbname>bitmap</dbname>
<dbclass>Bitmap</dbclass>
<desc>Specifies a bitmap to display in the widget, in any of the forms
acceptable to <fun>Tk_GetBitmap</fun>.
The exact way in which the bitmap is displayed may be affected by
other options such as <b>anchor</b> or <b>justify</b>.
Typically, if this option is specified then it overrides other
options that specify a textual value to display in the widget
but this is controlled by the <b>compound</b> option;
the <b cat="canvasitemtype">bitmap</b> option may be reset to an empty string to re-enable
a text display.
In widgets that support both <b cat="canvasitemtype">bitmap</b> and <b cat="AMBIGUOUS canvasitemtype cmd">image</b> options,
<b cat="AMBIGUOUS canvasitemtype cmd">image</b> will usually override <b cat="canvasitemtype">bitmap</b>.
</desc>
</optiondef>
<optiondef>
<name name="-borderwidth">-borderwidth or -bd</name>
<dbname>borderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>Specifies a non-negative value indicating the width
of the 3-D border to draw around the outside of the widget (if such a
border is being drawn;  the <b>relief</b> option typically determines
this).  The value may also be used when drawing 3-D effects in the
interior of the widget.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-cursor</name>
<dbname>cursor</dbname>
<dbclass>Cursor</dbclass>
<desc>Specifies the mouse cursor to be used for the widget.
The value may have any of the forms acceptable to <fun>Tk_GetCursor</fun>.
In addition, if an empty string is specified, it indicates that the
widget should defer to its parent for cursor specification.
</desc>
</optiondef>
<optiondef>
<name>-compound</name>
<dbname>compound</dbname>
<dbclass>Compound</dbclass>
<desc>Specifies if the widget should display text and bitmaps/images at the
same time, and if so, where the bitmap/image should be placed relative
to the text.  Must be one of the values <b>none</b>, <b>bottom</b>,
<b>top</b>, <b>left</b>, <b>right</b>, or <b>center</b>.  For example, the
(default) value <b>none</b> specifies that the bitmap or image should
(if defined) be displayed instead of the text, the value <b>left</b>
specifies that the bitmap or image should be displayed to the left of
the text, and the value <b>center</b> specifies that the bitmap or
image should be displayed on top of the text.
</desc>
</optiondef>
<optiondef>
<name>-disabledforeground</name>
<dbname>disabledForeground</dbname>
<dbclass>DisabledForeground</dbclass>
<desc>Specifies foreground color to use when drawing a disabled element.
If the option is specified as an empty string (which is typically the
case on monochrome displays), disabled elements are drawn with the
normal foreground color but they are dimmed by drawing them
with a stippled fill pattern.
</desc>
</optiondef>
<optiondef>
<name>-exportselection</name>
<dbname>exportSelection</dbname>
<dbclass>ExportSelection</dbclass>
<desc>Specifies whether or not a selection in the widget should also be
the X selection.
The value may have any of the forms accepted by <fun>Tcl_GetBoolean</fun>,
such as <b>true</b>, <b>false</b>, <b>0</b>, <b>1</b>, <b>yes</b>, or <b>no</b>.
If the selection is exported, then selecting in the widget deselects
the current X selection, selecting outside the widget deselects any
widget selection, and the widget will respond to selection retrieval
requests when it has a selection.  The default is usually for widgets
to export selections.
</desc>
</optiondef>
<optiondef>
<name>-font</name>
<dbname>font</dbname>
<dbclass>Font</dbclass>
<desc>Specifies the font to use when drawing text inside the widget.
The value may have any of the forms accepted by <fun>Tk_GetFont</fun>.
</desc>
</optiondef>
<optiondef>
<name name="-foreground">-foreground or -fg</name>
<dbname>foreground</dbname>
<dbclass>Foreground</dbclass>
<desc>Specifies the normal foreground color to use when displaying the widget.
</desc>
</optiondef>
<optiondef>
<name>-highlightbackground</name>
<dbname>highlightBackground</dbname>
<dbclass>HighlightBackground</dbclass>
<desc>Specifies the color to display in the traversal highlight region when
the widget does not have the input focus.
</desc>
</optiondef>
<optiondef>
<name>-highlightcolor</name>
<dbname>highlightColor</dbname>
<dbclass>HighlightColor</dbclass>
<desc>Specifies the color to use for the traversal highlight rectangle that is
drawn around the widget when it has the input focus.
</desc>
</optiondef>
<optiondef>
<name>-highlightthickness</name>
<dbname>highlightThickness</dbname>
<dbclass>HighlightThickness</dbclass>
<desc>Specifies a non-negative value indicating the width of the highlight
rectangle to draw around the outside of the widget when it has the
input focus.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
If the value is zero, no focus highlight is drawn around the widget.
</desc>
</optiondef>
<optiondef>
<name>-image</name>
<dbname>image</dbname>
<dbclass>Image</dbclass>
<desc>Specifies an image to display in the widget, which must have been
created with the <b>image create</b> command.
Typically, if the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option is specified then it overrides other
options that specify a bitmap or textual value to display in the
widget, though this is controlled by the <b>compound</b> option;
the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option may be reset to an empty string to re-enable
a bitmap or text display.
</desc>
</optiondef>
<optiondef>
<name>-insertbackground</name>
<dbname>insertBackground</dbname>
<dbclass>Foreground</dbclass>
<desc>Specifies the color to use as background in the area covered by the
insertion cursor.  This color will normally override either the normal
background for the widget (or the selection background if the insertion
cursor happens to fall in the selection).
</desc>
</optiondef>
<optiondef>
<name>-insertborderwidth</name>
<dbname>insertBorderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>Specifies a non-negative value indicating the width
of the 3-D border to draw around the insertion cursor.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-insertofftime</name>
<dbname>insertOffTime</dbname>
<dbclass>OffTime</dbclass>
<desc>Specifies a non-negative integer value indicating the number of
milliseconds the insertion cursor should remain ``off'' in each blink cycle.
If this option is zero then the cursor doesn't blink:  it is on
all the time.
</desc>
</optiondef>
<optiondef>
<name>-insertontime</name>
<dbname>insertOnTime</dbname>
<dbclass>OnTime</dbclass>
<desc>Specifies a non-negative integer value indicating the number of
milliseconds the insertion cursor should remain ``on'' in each blink cycle.
</desc>
</optiondef>
<optiondef>
<name>-insertwidth</name>
<dbname>insertWidth</dbname>
<dbclass>InsertWidth</dbclass>
<desc>Specifies a  value indicating the total width of the insertion cursor.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
If a border has been specified for the insertion
cursor (using the <b>insertBorderWidth</b> option), the border
will be drawn inside the width specified by the <b>insertWidth</b>
option.
</desc>
</optiondef>
<optiondef>
<name>-jump</name>
<dbname>jump</dbname>
<dbclass>Jump</dbclass>
<desc>For widgets with a slider that can be dragged to adjust a value,
such as scrollbars, this option determines when
notifications are made about changes in the value.
The option's value must be a boolean of the form accepted by
<fun>Tcl_GetBoolean</fun>.
If the value is false, updates are made continuously as the
slider is dragged.
If the value is true, updates are delayed until the mouse button
is released to end the drag;  at that point a single notification
is made (the value ``jumps'' rather than changing smoothly).
</desc>
</optiondef>
<optiondef>
<name>-justify</name>
<dbname>justify</dbname>
<dbclass>Justify</dbclass>
<desc>When there are multiple lines of text displayed in a widget, this
option determines how the lines line up with each other.
Must be one of <b>left</b>, <b>center</b>, or <b>right</b>.
<b>Left</b> means that the lines' left edges all line up, <b>center</b>
means that the lines' centers are aligned, and <b>right</b> means
that the lines' right edges line up.
</desc>
</optiondef>
<optiondef>
<name>-orient</name>
<dbname>orient</dbname>
<dbclass>Orient</dbclass>
<desc>For widgets that can lay themselves out with either a horizontal
or vertical orientation, such as scrollbars, this option specifies
which orientation should be used.  Must be either <b>horizontal</b>
or <b>vertical</b> or an abbreviation of one of these.
</desc>
</optiondef>
<optiondef>
<name>-padx</name>
<dbname>padX</dbname>
<dbclass>Pad</dbclass>
<desc>Specifies a non-negative value indicating how much extra space
to request for the widget in the X-direction.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
When computing how large a window it needs, the widget will
add this amount to the width it would normally need (as determined
by the width of the things displayed in the widget);  if the geometry
manager can satisfy this request, the widget will end up with extra
internal space to the left and/or right of what it displays inside.
Most widgets only use this option for padding text:  if they are
displaying a bitmap or image, then they usually ignore padding
options.
</desc>
</optiondef>
<optiondef>
<name>-pady</name>
<dbname>padY</dbname>
<dbclass>Pad</dbclass>
<desc>Specifies a non-negative value indicating how much extra space
to request for the widget in the Y-direction.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
When computing how large a window it needs, the widget will add
this amount to the height it would normally need (as determined by
the height of the things displayed in the widget);  if the geometry
manager can satisfy this request, the widget will end up with extra
internal space above and/or below what it displays inside.
Most widgets only use this option for padding text:  if they are
displaying a bitmap or image, then they usually ignore padding
options.
</desc>
</optiondef>
<optiondef>
<name>-relief</name>
<dbname>relief</dbname>
<dbclass>Relief</dbclass>
<desc>Specifies the 3-D effect desired for the widget.  Acceptable
values are <b>raised</b>, <b>sunken</b>, <b>flat</b>, <b>ridge</b>,
<b>solid</b>, and <b>groove</b>.
The value
indicates how the interior of the widget should appear relative
to its exterior;  for example, <b>raised</b> means the interior of
the widget should appear to protrude from the screen, relative to
the exterior of the widget.
</desc>
</optiondef>
<optiondef>
<name>-repeatdelay</name>
<dbname>repeatDelay</dbname>
<dbclass>RepeatDelay</dbclass>
<desc>Specifies the number of milliseconds a button or key must be held
down before it begins to auto-repeat.  Used, for example, on the
up- and down-arrows in scrollbars.
</desc>
</optiondef>
<optiondef>
<name>-repeatinterval</name>
<dbname>repeatInterval</dbname>
<dbclass>RepeatInterval</dbclass>
<desc>Used in conjunction with <b>repeatDelay</b>:  once auto-repeat
begins, this option determines the number of milliseconds between
auto-repeats.
</desc>
</optiondef>
<optiondef>
<name>-selectbackground</name>
<dbname>selectBackground</dbname>
<dbclass>Foreground</dbclass>
<desc>Specifies the background color to use when displaying selected
items.
</desc>
</optiondef>
<optiondef>
<name>-selectborderwidth</name>
<dbname>selectBorderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>Specifies a non-negative value indicating the width
of the 3-D border to draw around selected items.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-selectforeground</name>
<dbname>selectForeground</dbname>
<dbclass>Background</dbclass>
<desc>Specifies the foreground color to use when displaying selected
items.
</desc>
</optiondef>
<optiondef>
<name>-setgrid</name>
<dbname>setGrid</dbname>
<dbclass>SetGrid</dbclass>
<desc>Specifies a boolean value that determines whether this widget controls the
resizing grid for its top-level window.
This option is typically used in text widgets, where the information
in the widget has a natural size (the size of a character) and it makes
sense for the window's dimensions to be integral numbers of these units.
These natural window sizes form a grid.
If the <b>setGrid</b> option is set to true then the widget will
communicate with the window manager so that when the user interactively
resizes the top-level window that contains the widget, the dimensions of
the window will be displayed to the user in grid units and the window
size will be constrained to integral numbers of grid units.
See the section <b>GRIDDED GEOMETRY MANAGEMENT</b> in the <cmd>wm</cmd> manual
entry for more details.
</desc>
</optiondef>
<optiondef>
<name>-takefocus</name>
<dbname>takeFocus</dbname>
<dbclass>TakeFocus</dbclass>
<desc>Determines whether the window accepts the focus during keyboard
traversal (e.g., Tab and Shift-Tab).
Before setting the focus to a window, the traversal scripts
consult the value of the <b>takeFocus</b> option.
A value of <b>0</b> means that the window should be skipped entirely
during keyboard traversal. 
<b>1</b> means that the window should receive the input
focus as long as it is viewable (it and all of its ancestors are mapped).
An empty value for the option means that the traversal scripts make
the decision about whether or not to focus on the window:  the current
algorithm is to skip the window if it is
disabled, if it has no key bindings, or if it is not viewable.
If the value has any other form, then the traversal scripts take
the value, append the name of the window to it (with a separator space),
and evaluate the resulting string as a Tcl script.
The script must return <b>0</b>, <b>1</b>, or an empty string:  a 
<b>0</b> or <b>1</b> value specifies whether the window will receive
the input focus, and an empty string results in the default decision
described above.
Note: this interpretation of the option is defined entirely by
the Tcl scripts that implement traversal:  the widget implementations
ignore the option entirely, so you can change its meaning if you
redefine the keyboard traversal scripts.
</desc>
</optiondef>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>Specifies a string to be displayed inside the widget.  The way in which
the string is displayed depends on the particular widget and may be
determined by other options, such as <b>anchor</b> or <b>justify</b>.
</desc>
</optiondef>
<optiondef>
<name>-textvariable</name>
<dbname>textVariable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies the name of a variable.  The value of the variable is a text
string to be displayed inside the widget;  if the variable value changes
then the widget will automatically update itself to reflect the new value.
The way in which the string is displayed in the widget depends on the
particular widget and may be determined by other options, such as
<b>anchor</b> or <b>justify</b>.
</desc>
</optiondef>
<optiondef>
<name>-troughcolor</name>
<dbname>troughColor</dbname>
<dbclass>Background</dbclass>
<desc>Specifies the color to use for the rectangular trough areas
in widgets such as scrollbars and scales.  This option is ignored for
scrollbars on Windows (native widget doesn't recognize this option).
</desc>
</optiondef>
<optiondef>
<name>-underline</name>
<dbname>underline</dbname>
<dbclass>Underline</dbclass>
<desc>Specifies the integer index of a character to underline in the widget.
This option is used by the default bindings to implement keyboard
traversal for menu buttons and menu entries.
0 corresponds to the first character of the text displayed in the
widget, 1 to the next character, and so on.
</desc>
</optiondef>
<optiondef>
<name>-wraplength</name>
<dbname>wrapLength</dbname>
<dbclass>WrapLength</dbclass>
<desc>For widgets that can perform word-wrapping, this option specifies
the maximum line length.
Lines that would exceed this length are wrapped onto the next line,
so that no line is longer than the specified length.
The value may be specified in any of the standard forms for
screen distances.
If this value is less than or equal to 0 then no wrapping is done:  lines
will break only at newline characters in the text.
</desc>
</optiondef>
<optiondef>
<name>-xscrollcommand</name>
<dbname>xScrollCommand</dbname>
<dbclass>ScrollCommand</dbclass>
<desc>Specifies the prefix for a command used to communicate with horizontal
scrollbars.
When the view in the widget's window changes (or
whenever anything else occurs that could change the display in a
scrollbar, such as a change in the total size of the widget's
contents), the widget will
generate a Tcl command by concatenating the scroll command and
two numbers.
Each of the numbers is a fraction between 0 and 1, which indicates
a position in the document.  0 indicates the beginning of the document,
1 indicates the end, .333 indicates a position one third the way through
the document, and so on.
The first fraction indicates the first information in the document
that is visible in the window, and the second fraction indicates
the information just after the last portion that is visible.
The command is
then passed to the Tcl interpreter for execution.  Typically the
<b>xScrollCommand</b> option consists of the path name of a scrollbar
widget followed by ``set'', e.g. ``.x.scrollbar set'':  this will cause
the scrollbar to be updated whenever the view in the window changes.
If this option is not specified, then no command will be executed.
</desc>
</optiondef>
<optiondef>
<name>-yscrollcommand</name>
<dbname>yScrollCommand</dbname>
<dbclass>ScrollCommand</dbclass>
<desc>Specifies the prefix for a command used to communicate with vertical
scrollbars.  This option is treated in the same way as the
<b>xScrollCommand</b> option, except that it is used for vertical
scrollbars and is provided by widgets that support vertical scrolling.
See the description of <b>xScrollCommand</b> for details
on how this option is used.

</desc>
</optiondef>
</optionlist>
</section>
<seealso>
<ref>colors</ref>
<ref>cursors</ref>
<ref>font</ref>
</seealso>
<keywords>
<keyword>class</keyword>
<keyword>name</keyword>
<keyword>standard option</keyword>
<keyword>switch</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_OwnSelection" id="OwnSelect">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: OwnSelect.3,v 1.2 1998/09/14 18:22:53 stanton Exp $
 -->
<?TROFF.TH title="Tk_OwnSelection" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_OwnSelection</name>
<desc>make a window the owner of the primary selection</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_OwnSelection</fun>(<m>tkwin</m>, <m>selection</m>, <m>proc</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window that is to become new selection owner.
</desc>
</argdef>
<argdef>
<argtype>Atom</argtype>
<name>selection</name>
<argmode>in</argmode>
<desc>The name of the selection to be owned, such as XA_PRIMARY.
</desc>
</argdef>
<argdef>
<argtype>Tk_LostSelProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke when <i>tkwin</i> loses selection ownership later.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_OwnSelection</fun> arranges for <i>tkwin</i> to become the
new owner of the selection specified by the atom
<i>selection</i>.  After this call completes, future requests
for the selection will be directed to handlers created for
<i>tkwin</i> using <fun>Tk_CreateSelHandler</fun>.  When <i>tkwin</i>
eventually loses the selection ownership, <i>proc</i> will be
invoked so that the window can clean itself up (e.g. by
unhighlighting the selection).  <i>Proc</i> should have arguments and
result that match the type <type>Tk_LostSelProc</type>:
</p>
<syntax name="Tk_LostSelProc" cat="type" scope="global">
typedef void Tk_LostSelProc(ClientData <i>clientData</i>);
</syntax>
<p>The <i>clientData</i> parameter to <i>proc</i> is a copy of the
<i>clientData</i> argument given to <fun>Tk_OwnSelection</fun>, and is
usually a pointer to a data structure containing application-specific
information about <i>tkwin</i>.

</p>
</section>
<keywords>
<keyword>own</keyword>
<keyword>selection owner</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="pack-old" title="pack-old" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: pack-old.n,v 1.3 2004/11/19 10:22:06 rmax Exp $
 -->
<?TROFF.TH title="pack-old" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>pack-old</name>
<desc>Obsolete syntax for packer geometry manager</desc>
</namesection>
<synopsis>
<syntax>
<b>pack after</b> <m>sibling</m> <m>window options</m> ?<m>window options</m> ...?

<b>pack append</b> <m>parent</m> <m>window options</m> ?<m>window options</m> ...?

<b>pack before</b> <m>sibling</m> <m>window options</m> ?<m>window options</m> ...?

<b>pack unpack</b> <m>window</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><i>Note: this manual entry describes the syntax for the</i> <cmd>pack</cmd>
<i>command as it existed before Tk version 3.3.
Although this syntax continues to be supported for backward
compatibility, it is obsolete and should not be used anymore.
At some point in the future it may cease to be supported.</i>
</p>
<p>The packer is a geometry manager that arranges the
children of a parent by packing them in order around the edges of
the parent.  The first child is placed against one side of
the window, occupying the entire span of the window along that
side.  This reduces the space remaining for other children as
if the side had been moved in by the size of the first child.
Then the next child is placed against one side of the remaining
cavity, and so on until all children have been placed or there
is no space left in the cavity.
</p>
<p>The <b>before</b>, <cmd>after</cmd>, and <cmd>append</cmd> forms of the <cmd>pack</cmd>
command are used to insert one or more children into the packing order
for their parent.  The <b>before</b> form inserts the children before
window <i>sibling</i> in the order;  all of the other windows must be
siblings of <i>sibling</i>.  The <cmd>after</cmd> form inserts the windows
after <i>sibling</i>, and the <cmd>append</cmd> form appends one or more
windows to the end of the packing order for <i>parent</i>.  If a
<i>window</i> named in any of these commands is already packed in
its parent, it is removed from its current position in the packing
order and repositioned as indicated by the command.  All of these
commands return an empty string as result.
</p>
<p>The <b>unpack</b> form of the <cmd>pack</cmd> command removes <i>window</i>
from the packing order of its parent and unmaps it.  After the
execution of this command the packer will no longer manage
<i>window</i>'s geometry.
</p>
<p>The placement of each child is actually a four-step process;
the <i>options</i> argument following each <i>window</i> consists of
a list of one or more fields that govern the placement of that
window.  In the discussion below, the term <i>cavity</i> refers
to the space left in a parent when a particular child is placed
(i.e. all the space that wasn't claimed by earlier children in
the packing order).  The term <i>parcel</i> refers to the space
allocated to a particular child;  this is not necessarily the
same as the child window's final geometry.
</p>
<p>The first step in placing a child is to determine which side of
the cavity it will lie against.  Any one of the following options
may be used to specify a side:
</p>
<dl>
<dle>
<dt><b>top</b></dt>
<dd>Position the child's parcel against the top of the cavity,
occupying the full width of the cavity.
</dd>
</dle>
<dle>
<dt><b>bottom</b></dt>
<dd>Position the child's parcel against the bottom of the cavity,
occupying the full width of the cavity.
</dd>
</dle>
<dle>
<dt><b>left</b></dt>
<dd>Position the child's parcel against the left side of the cavity,
occupying the full height of the cavity.
</dd>
</dle>
<dle>
<dt><b>right</b></dt>
<dd>Position the child's parcel against the right side of the cavity,
occupying the full height of the cavity.
</dd>
</dle>
</dl>
<p>At most one of these options should be specified for any given window.
If no side is specified, then the default is <b>top</b>.
</p>
<p>The second step is to decide on a parcel for the child.  For <b>top</b>
and <b>bottom</b> windows, the desired parcel width is normally the cavity
width and the desired parcel height is the window's requested height,
as passed to <fun>Tk_GeometryRequest</fun>. For <b>left</b> and <b>right</b>
windows, the desired parcel height is normally the cavity height and the
desired width is the window's requested width.  However, extra
space may be requested for the window using any of the following
options:
</p>
<dl>
<dle>
<dt><b>padx</b> <m>num</m></dt>
<dd>Add <i>num</i> pixels to the window's requested width before computing
the parcel size as described above.
</dd>
</dle>
<dle>
<dt><b>pady</b> <m>num</m></dt>
<dd>Add <i>num</i> pixels to the window's requested height before computing
the parcel size as described above.
</dd>
</dle>
<dle>
<dt><b>expand</b></dt>
<dd>This option requests that the window's parcel absorb any extra space left over
in the parent's cavity after packing all the children.
The amount of space left over depends on the sizes requested by the
other children, and may be zero.  If several windows have all specified
<b>expand</b> then the extra width will be divided equally among all the
<b>left</b> and <b>right</b> windows that specified <b>expand</b> and
the extra height will be divided equally among all the <b>top</b> and
<b>bottom</b> windows that specified <b>expand</b>.
</dd>
</dle>
</dl>
<p>If the desired width or height for a parcel is larger than the corresponding
dimension of the cavity, then the cavity's dimension is used instead.
</p>
<p>The third step in placing the window is to decide on the window's
width and height.  The default is for the window to receive either
its requested width and height or the those of the parcel, whichever
is smaller.  If the parcel is larger than the window's requested
size, then the following options may be used to expand the
window to partially or completely fill the parcel:
</p>
<dl>
<dle>
<dt><b>fill</b></dt>
<dd>Set the window's size to equal the parcel size.
</dd>
</dle>
<dle>
<dt><b>fillx</b></dt>
<dd>Increase the window's width to equal the parcel's width, but retain
the window's requested height.
</dd>
</dle>
<dle>
<dt><b>filly</b></dt>
<dd>Increase the window's height to equal the parcel's height, but retain
the window's requested width.
</dd>
</dle>
</dl>
<p>The last step is to decide the window's location within its parcel.
If the window's size equals the parcel's size, then the window simply
fills the entire parcel.  If the parcel is larger than the window,
then one of
the following options may be used to specify where the window should
be positioned within its parcel:
</p>
<commandlist>
<commanddef>
<command><b>frame center</b></command>
<desc>Center the window in its parcel.  This is the default if no framing
option is specified.
</desc>
</commanddef>
<commanddef>
<command><b>frame n</b></command>
<desc>Position the window with its top edge centered on the top edge of
the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame ne</b></command>
<desc>Position the window with its upper-right corner at the upper-right corner
of the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame e</b></command>
<desc>Position the window with its right edge centered on the right edge of
the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame se</b></command>
<desc>Position the window with its lower-right corner at the lower-right corner
of the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame s</b></command>
<desc>Position the window with its bottom edge centered on the bottom edge of
the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame sw</b></command>
<desc>Position the window with its lower-left corner at the lower-left corner
of the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame w</b></command>
<desc>Position the window with its left edge centered on the left edge of
the parcel.
</desc>
</commanddef>
<commanddef>
<command><b>frame nw</b></command>
<desc>Position the window with its upper-left corner at the upper-left corner
of the parcel.
</desc>
</commanddef>
</commandlist>
<p>The packer manages the mapped/unmapped state of all the packed
children windows.  It automatically maps the windows when it packs
them, and it unmaps any windows for which there was no space left
in the cavity.
</p>
<p>The packer makes geometry requests on behalf of the parent windows
it manages.  For each parent window it requests a size large enough
to accommodate all the options specified by all the packed children,
such that zero space would be leftover for <b>expand</b> options.

</p>
</section>
<keywords>
<keyword>geometry manager</keyword>
<keyword>location</keyword>
<keyword>packer</keyword>
<keyword>parcel</keyword>
<keyword>size</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="pack" title="pack" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: pack.n,v 1.7 2004/10/28 12:25:53 dkf Exp $
 -->
<?TROFF.TH title="pack" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>pack</name>
<desc>Geometry manager that packs around edges of cavity</desc>
</namesection>
<synopsis>
<syntax>
<cmd>pack</cmd> <m>option arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>pack</cmd> command is used to communicate with the packer,
a geometry manager that arranges the children of a parent by
packing them in order around the edges of the parent.
The <cmd>pack</cmd> command can have any of several forms, depending
on the <i>option</i> argument:
</p>
<commandlist>
<commanddef>
<command><b>pack</b> <m>slave</m> ?<m>slave ...</m>? ?<m>options</m>?</command>
<desc>If the first argument to <cmd>pack</cmd> is a window name (any value
starting with ``.''), then the command is processed in the same
way as <b>pack configure</b>.
</desc>
</commanddef>
<commanddef>
<command><b>pack configure</b> <m>slave</m> ?<m>slave ...</m>? ?<m>options</m>?</command>
<desc>The arguments consist of the names of one or more slave windows
followed by pairs of arguments that specify how
to manage the slaves.
See ``<ref refid="the-packer-algorithm">THE PACKER ALGORITHM</ref>'' below for details on how the options
are used by the packer.
The following options are supported:
<dl>
<dle>
<dt><b>-after</b> <m>other</m></dt>
<dd><i>Other</i> must the name of another window.
Use its master as the master for the slaves, and insert
the slaves just after <i>other</i> in the packing order.
</dd>
</dle>
<dle>
<dt><b>-anchor</b> <m>anchor</m></dt>
<dd><i>Anchor</i> must be a valid anchor position such as <b>n</b>
or <b>sw</b>; it specifies where to position each slave in its
parcel.
Defaults to <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-before</b> <m>other</m></dt>
<dd><i>Other</i> must the name of another window.
Use its master as the master for the slaves, and insert
the slaves just before <i>other</i> in the packing order.
</dd>
</dle>
<dle>
<dt><b>-expand</b> <m>boolean</m></dt>
<dd>Specifies whether the slaves should be expanded to consume
extra space in their master.
<i>Boolean</i> may have any proper boolean value, such as <b>1</b>
or <b>no</b>.
Defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-fill</b> <m>style</m></dt>
<dd>If a slave's parcel is larger than its requested dimensions, this
option may be used to stretch the slave.
<i>Style</i> must have one of the following values:
<dl>
<dle>
<dt><b>none</b></dt>
<dd>Give the slave its requested dimensions plus any internal padding
requested with <b>-ipadx</b> or <b>-ipady</b>.  This is the default.
</dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>Stretch the slave horizontally to fill the entire width of its
parcel (except leave external padding as specified by <b>-padx</b>).
</dd>
</dle>
<dle>
<dt><b>y</b></dt>
<dd>Stretch the slave vertically to fill the entire height of its
parcel (except leave external padding as specified by <b>-pady</b>).
</dd>
</dle>
<dle>
<dt><b>both</b></dt>
<dd>Stretch the slave both horizontally and vertically.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>-in</b> <m>other</m></dt>
<dd>Insert the slave(s) at the end of the packing order for the master
window given by <i>other</i>.
</dd>
</dle>
<dle>
<dt><b>-ipadx</b> <m>amount</m></dt>
<dd><i>Amount</i> specifies how much horizontal internal padding to
leave on each side of the slave(s).
<i>Amount</i> must be a valid screen distance, such as <b>2</b> or <b>.5c</b>.
It defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-ipady</b> <m>amount</m></dt>
<dd><i>Amount</i> specifies how much vertical internal padding to
leave on each side of the slave(s).
<i>Amount</i>  defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-padx</b> <m>amount</m></dt>
<dd><i>Amount</i> specifies how much horizontal external padding to
leave on each side of the slave(s).  <i>Amount</i> may be a list
of two values to specify padding for left and right separately.
<i>Amount</i> defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-pady</b> <m>amount</m></dt>
<dd><i>Amount</i> specifies how much vertical external padding to
leave on each side of the slave(s).  <i>Amount</i> may be a list
of two values to specify padding for top and bottom separately.
<i>Amount</i> defaults to 0.
</dd>
</dle>
<dle>
<dt><b>-side</b> <m>side</m></dt>
<dd>Specifies which side of the master the slave(s) will be packed against.
Must be <b>left</b>, <b>right</b>, <b>top</b>, or <b>bottom</b>.
Defaults to <b>top</b>.
</dd>
</dle>
</dl><p>If no <b>-in</b>, <b>-after</b> or <b>-before</b> option is specified
then each of the slaves will be inserted at the end of the packing list
for its parent unless it is already managed by the packer (in which
case it will be left where it is).
If one of these options is specified then all the slaves will be
inserted at the specified point.
If any of the slaves are already managed by the geometry manager
then any unspecified options for them retain their previous values rather
than receiving default values.
</p></desc>
</commanddef>
<commanddef>
<command><b>pack forget</b> <m>slave</m> ?<m>slave ...</m>?</command>
<desc>Removes each of the <i>slave</i>s from the packing order for its
master and unmaps their windows.
The slaves will no longer be managed by the packer.
</desc>
</commanddef>
<commanddef>
<command><b>pack info</b> <m>slave</m></command>
<desc>Returns a list whose elements are the current configuration state of
the slave given by <i>slave</i> in the same option-value form that
might be specified to <b>pack configure</b>.
The first two elements of the list are ``<b>-in</b> <i>master</i>'' where
<i>master</i> is the slave's master.
</desc>
</commanddef>
<commanddef>
<command><b>pack propagate</b> <m>master</m> ?<m>boolean</m>?</command>
<desc>If <i>boolean</i> has a true boolean value such as <b>1</b> or <b>on</b>
then propagation is enabled for <i>master</i>, which must be a window
name (see ``<ref refid="geometry-propagation">GEOMETRY PROPAGATION</ref>'' below).
If <i>boolean</i> has a false boolean value then propagation is
disabled for <i>master</i>.
In either of these cases an empty string is returned.
If <i>boolean</i> is omitted then the command returns <b>0</b> or
<b>1</b> to indicate whether propagation is currently enabled
for <i>master</i>.
Propagation is enabled by default.
</desc>
</commanddef>
<commanddef>
<command><b>pack slaves</b> <m>master</m></command>
<desc>Returns a list of all of the slaves in the packing order for <i>master</i>.
The order of the slaves in the list is the same as their order in
the packing order.
If <i>master</i> has no slaves then an empty string is returned.
</desc>
</commanddef>
</commandlist>
</section>
<section id="the-packer-algorithm">
<title>THE PACKER ALGORITHM</title>
<p>For each master the packer maintains an ordered list of slaves
called the <i>packing list</i>.
The <b>-in</b>, <b>-after</b>, and <b>-before</b> configuration
options are used to specify the master for each slave and the slave's
position in the packing list.
If none of these options is given for a slave then the slave
is added to the end of the packing list for its parent.
</p>
<p>The packer arranges the slaves for a master by scanning the
packing list in order.
At the time it processes each slave, a rectangular area within
the master is still unallocated.
This area is called the <i>cavity</i>;  for the first slave it
is the entire area of the master.
</p>
<p>For each slave the packer carries out the following steps:
</p>
<ol>
<li>The packer allocates a rectangular <i>parcel</i> for the slave
along the side of the cavity given by the slave's <b>-side</b> option.
If the side is top or bottom then the width of the parcel is
the width of the cavity and its height is the requested height
of the slave plus the <b>-ipady</b> and <b>-pady</b> options.
For the left or right side the height of the parcel is
the height of the cavity and the width is the requested width
of the slave plus the <b>-ipadx</b> and <b>-padx</b> options.
The parcel may be enlarged further because of the <b>-expand</b>
option (see ``<ref refid="expansion">EXPANSION</ref>'' below)
</li>
<li>The packer chooses the dimensions of the slave.
The width will normally be the slave's requested width plus
twice its <b>-ipadx</b> option and the height will normally be
the slave's requested height plus twice its <b>-ipady</b>
option.
However, if the <b>-fill</b> option is <b>x</b> or <b>both</b>
then the width of the slave is expanded to fill the width of the parcel,
minus twice the <b>-padx</b> option.
If the <b>-fill</b> option is <b>y</b> or <b>both</b>
then the height of the slave is expanded to fill the width of the parcel,
minus twice the <b>-pady</b> option.
</li>
<li>The packer positions the slave over its parcel.
If the slave is smaller than the parcel then the <b>-anchor</b>
option determines where in the parcel the slave will be placed.
If <b>-padx</b> or <b>-pady</b> is non-zero, then the given
amount of external padding will always be left between the
slave and the edges of the parcel.
</li>
</ol>
<p>Once a given slave has been packed, the area of its parcel
is subtracted from the cavity, leaving a smaller rectangular
cavity for the next slave.
If a slave doesn't use all of its parcel, the unused space
in the parcel will not be used by subsequent slaves.
If the cavity should become too small to meet the needs of
a slave then the slave will be given whatever space is
left in the cavity.
If the cavity shrinks to zero size, then all remaining slaves
on the packing list will be unmapped from the screen until
the master window becomes large enough to hold them again.
</p>
<subsection id="expansion">
<title>EXPANSION</title>
<p>If a master window is so large that there will be extra space
left over after all of its slaves have been packed, then the
extra space is distributed uniformly among all of the slaves
for which the <b>-expand</b> option is set.
Extra horizontal space is distributed among the expandable
slaves whose <b>-side</b> is <b>left</b> or <b>right</b>,
and extra vertical space is distributed among the expandable
slaves whose <b>-side</b> is <b>top</b> or <b>bottom</b>.
</p>
</subsection>
<subsection id="geometry-propagation">
<title>GEOMETRY PROPAGATION</title>
<p>The packer normally computes how large a master must be to
just exactly meet the needs of its slaves, and it sets the
requested width and height of the master to these dimensions.
This causes geometry information to propagate up through a
window hierarchy to a top-level window so that the entire
sub-tree sizes itself to fit the needs of the leaf windows.
However, the <b>pack propagate</b> command may be used to
turn off propagation for one or more masters.
If propagation is disabled then the packer will not set
the requested width and height of the packer.
This may be useful if, for example, you wish for a master
window to have a fixed size that you specify.
</p>
</subsection>
</section>
<section>
<title>RESTRICTIONS ON MASTER WINDOWS</title>
<p>The master for each slave must either be the slave's parent
(the default) or a descendant of the slave's parent.
This restriction is necessary to guarantee that the
slave can be placed over any part of its master that is
visible without danger of the slave being clipped by its parent.
</p>
</section>
<section>
<title>PACKING ORDER</title>
<p>If the master for a slave is not its parent then you must make sure
that the slave is higher in the stacking order than the master.
Otherwise the master will obscure the slave and it will appear as
if the slave hasn't been packed correctly.
The easiest way to make sure the slave is higher than the master is
to create the master window first:  the most recently created window
will be highest in the stacking order.
Or, you can use the <cmd>raise</cmd> and <b cat="AMBIGUOUS ambiguous cmd">lower</b> commands to change
the stacking order of either the master or the slave.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
# Make the widgets
label .t -text "This widget is at the top"    -bg red
label .b -text "This widget is at the bottom" -bg green
label .l -text "Left\nHand\nSide"
label .r -text "Right\nHand\nSide"
text .mid
.mid insert end "This layout is like Java's BorderLayout"
# Lay them out
<cmd>pack</cmd> .t   -side top    -fill x
<cmd>pack</cmd> .b   -side bottom -fill x
<cmd>pack</cmd> .l   -side left   -fill y
<cmd>pack</cmd> .r   -side right  -fill y
<cmd>pack</cmd> .mid -expand 1    -fill both
</example>


</section>
<seealso>
<ref>grid(n)</ref>
<ref>place(n)</ref>
</seealso>
<keywords>
<keyword>geometry manager</keyword>
<keyword>location</keyword>
<keyword>packer</keyword>
<keyword>parcel</keyword>
<keyword>propagation</keyword>
<keyword>size</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="package" version="7.5" title="package">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: package.n,v 1.15 2006/10/05 05:13:13 hobbs Exp $
 -->
<?TROFF.TH title="package" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>package</name>
<desc>Facilities for package loading and version control</desc>
</namesection>
<synopsis>
<syntax>
<b>package forget ?</b><m>package package ...</m>?
<b>package ifneeded</b> <m>package version</m> ?<m>script</m>?
<b>package names</b>
<b>package present</b> ?<b>-exact</b>? <m>package</m> ?<m>version</m>?
<b>package provide</b> <m>package</m> ?<m>version</m>?
<b>package require</b> ?<b>-exact</b>? <m>package</m> ?<m>requirement...</m>?
<b>package unknown</b> ?<m>command</m>?
<b>package vcompare</b> <m>version1 version2</m>
<b>package versions</b> <m>package</m>
<b>package vsatisfies</b> <m>version requirement...</m>
<b>package prefer</b> ?<b>latest</b>|<b>stable</b>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command keeps a simple database of the packages available for
use by the current interpreter and how to load them into the
interpreter.
It supports multiple versions of each package and arranges
for the correct version of a package to be loaded based on what
is needed by the application.
This command also detects and reports version clashes.
Typically, only the <b>package require</b> and <b>package provide</b>
commands are invoked in normal Tcl scripts;  the other commands are used
primarily by system scripts that maintain the package database.
</p>
<p>The behavior of the <cmd>package</cmd> command is determined by its first argument.
The following forms are permitted:
</p>
<commandlist>
<commanddef>
<command><b>package forget ?</b><m>package package ...</m>?</command>
<desc>Removes all information about each specified package from this interpreter,
including information provided by both <b>package ifneeded</b> and
<b>package provide</b>.
</desc>
</commanddef>
<commanddef>
<command><b>package ifneeded</b> <m>package version</m> ?<m>script</m>?</command>
<desc>This command typically appears only in system configuration
scripts to set up the package database.
It indicates that a particular version of
a particular package is available if needed, and that the package
can be added to the interpreter by executing <i>script</i>.
The script is saved in a database for use by subsequent
<b>package require</b> commands;  typically, <i>script</i>
sets up auto-loading for the commands in the package (or calls
<b cat="AMBIGUOUS ambiguous cmd">load</b> and/or <b cat="AMBIGUOUS ambiguous cmd">source</b> directly), then invokes
<b>package provide</b> to indicate that the package is present.
There may be information in the database for several different
versions of a single package.
If the database already contains information for <i>package</i>
and <i>version</i>, the new <i>script</i> replaces the existing
one.
If the <i>script</i> argument is omitted, the current script for
version <i>version</i> of package <i>package</i> is returned,
or an empty string if no <b>package ifneeded</b> command has
been invoked for this <i>package</i> and <i>version</i>.
</desc>
</commanddef>
<commanddef>
<command><b>package names</b></command>
<desc>Returns a list of the names of all packages in the
interpreter for which a version has been provided (via
<b>package provide</b>) or for which a <b>package ifneeded</b>
script is available.
The order of elements in the list is arbitrary.
</desc>
</commanddef>
<commanddef>
<command><b>package present</b> ?<b>-exact</b>? <m>package</m> ?<m>version</m>?</command>
<desc>This command is equivalent to <b>package require</b> except that it
does not try and load the package if it is not already loaded.
</desc>
</commanddef>
<commanddef>
<command><b>package provide</b> <m>package</m> ?<m>version</m>?</command>
<desc>This command is invoked to indicate that version <i>version</i>
of package <i>package</i> is now present in the interpreter.
It is typically invoked once as part of an <b>ifneeded</b> script,
and again by the package itself when it is finally loaded.
An error occurs if a different version of <i>package</i> has been
provided by a previous <b>package provide</b> command.
If the <i>version</i> argument is omitted, then the command
returns the version number that is currently provided, or an
empty string if no <b>package provide</b> command has been
invoked for <i>package</i> in this interpreter.  
</desc>
</commanddef>
<commanddef>
<command><b>package require</b> <b>-exact</b> <m>package</m> <m>version</m></command>
<desc>This form of the command is translated to the form below using the
bounded requirement "version-(version+1)", making only the given
<i>version</i> acceptable, within the specified level of detail. Deeper
levels are allowed to vary. Examples:
<example>
	-exact 8      =&gt; 8-9
	-exact 8.4    =&gt; 8.4-8.5
	-exact 8.4.14 =&gt; 8.4.14-8.4.15
</example><p>For more explanations see below.
</p></desc>
</commanddef>
<commanddef>
<command><b>package require</b> <m>package</m> ?<m>requirement...</m>?</command>
<desc>This command is typically invoked by Tcl code that wishes to use
a particular version of a particular package.  The arguments
indicate which package is wanted, and the command ensures that
a suitable version of the package is loaded into the interpreter.
If the command succeeds, it returns the version number that is
loaded;  otherwise it generates an error.
<p>A suitable version of the package is any version which satisfies at
least one of the requirements, per the rules of <b>package
vsatisfies</b>. If multiple versions are suitable the implementation
with the highest version is chosen. This last part is additionally
influenced by the selection mode set with <b>package prefer</b>.
</p><p>In the "stable" selection mode the command will select the highest
stable version satisfying the requirements, if any. If no stable
version satisfies the requirements, the highest unstable version
satisfying the requirements will be selected.  In the "latest"
selection mode the command will accept the highest version satisfying
all the requirements, regardless of its stableness.
</p><p>If a version of <i>package</i> has already been provided (by invoking
the <b>package provide</b> command), then its version number must
satisfy the <i>requirement</i>s and the command returns immediately.
Otherwise, the command searches the database of information provided by
previous <b>package ifneeded</b> commands to see if an acceptable
version of the package is available.
If so, the script for the highest acceptable version number is evaluated
in the global namespace;
it must do whatever is necessary to load the package,
including calling <b>package provide</b> for the package.
If the <b>package ifneeded</b> database does not contain an acceptable
version of the package and a <b>package unknown</b> command has been
specified for the interpreter then that command is evaluated in the
global namespace;  when
it completes, Tcl checks again to see if the package is now provided
or if there is a <b>package ifneeded</b> script for it.
If all of these steps fail to provide an acceptable version of the
package, then the command returns an error.
</p></desc>
</commanddef>
<commanddef>
<command><b>package unknown</b> ?<m>command</m>?</command>
<desc>This command supplies a ``last resort'' command to invoke during
<b>package require</b> if no suitable version of a package can be found
in the <b>package ifneeded</b> database.
If the <i>command</i> argument is supplied, it contains the first part
of a command;  when the command is invoked during a <b>package require</b>
command, Tcl appends one or more additional arguments giving the desired
package name and requirements.
For example, if <i>command</i> is <b>foo bar</b> and later the command
<b>package require test 2.4</b> is invoked, then Tcl will execute
the command <b>foo bar test 2.4</b> to load the package.
If no requirements are supplied to the <b>package require</b> command,
then only the name will be added to invoked command.
If the <b>package unknown</b> command is invoked without a <i>command</i>
argument, then the current <b>package unknown</b> script is returned,
or an empty string if there is none.
If <i>command</i> is specified as an empty string, then the current
<b>package unknown</b> script is removed, if there is one.
</desc>
</commanddef>
<commanddef>
<command><b>package vcompare</b> <m>version1 version2</m></command>
<desc>Compares the two version numbers given by <i>version1</i> and <i>version2</i>.
Returns -1 if <i>version1</i> is an earlier version than <i>version2</i>,
0 if they are equal, and 1 if <i>version1</i> is later than <b>version2</b>.
</desc>
</commanddef>
<commanddef>
<command><b>package versions</b> <m>package</m></command>
<desc>Returns a list of all the version numbers of <i>package</i>
for which information has been provided by <b>package ifneeded</b>
commands.
</desc>
</commanddef>
<commanddef>
<command><b>package vsatisfies</b> <m>version requirement...</m></command>
<desc>Returns 1 if the <i>version</i> satisfies at least one of the given
requirements, and 0 otherwise. Each <i>requirement</i> is allowed to
have any of the forms:
<dl>
<dle>
<dt>min</dt>
<dd>This form is called "min-bounded".
</dd>
</dle>
<dle>
<dt>min-</dt>
<dd>This form is called "min-unbound".
</dd>
</dle>
<dle>
<dt>min-max</dt>
<dd>This form is called "bounded".
</dd>
</dle>
</dl><p>where "min" and "max" are valid version numbers. The legacy syntax is
a special case of the extended syntax, keeping backward
compatibility. Regarding satisfaction the rules are:
</p><ol>
<li>The <i>version</i> has to pass at least one of the listed
<i>requirement</i>s to be satisfactory.
</li>
<li>A version satisfies a "bounded" requirement when
<dl>
<dle>
<dt>[a]</dt>
<dd>For <i>min</i> equal to the <i>max</i> if, and only if the <i>version</i>
is equal to the <i>min</i>.
</dd>
</dle>
<dle>
<dt>[b]</dt>
<dd>Otherwise if, and only if the <i>version</i> is greater than or equal
to the <i>min</i>, and less than the <i>max</i>, where both <i>min</i>
and <i>max</i> have been padded internally with 'a0'. Note that while
the comparison to <i>min</i> is inclusive, the comparison to
<i>max</i> is exclusive.
</dd>
</dle>
</dl></li>
<li>A "min-bounded" requirement is a "bounded" requirement in disguise,
with the <i>max</i> part implicitly specified as the next higher major
version number of the <i>min</i> part. A version satisfies it per the
rules above.
</li>
<li>A <i>version</i> satisfies a "min-unbound" requirement if, and only if
it is greater than or equal to the <i>min</i>, where the <i>min</i> has
been padded internally with 'a0'. There is no constraint to a maximum.
</li>
</ol></desc>
</commanddef>
<commanddef>
<command><b>package prefer</b> ?<b>latest</b>|<b>stable</b>?</command>
<desc>With no arguments, the commands returns either "latest" or "stable",
whichever describes the current mode of selection logic used by
<b>package require</b>.
<p>When passed the argument "latest", it sets the selection logic mode to
"latest".
</p><p>When passed the argument "stable", if the mode is already "stable",
that value is kept.  If the mode is already "latest", then the attempt
to set it back to "stable" is ineffective and the mode value remains
"latest".
</p><p>When passed any other value as an argument, raise an invalid argument
error.
</p><p>When an interpreter is created, its initial selection mode value is set to
"stable" unless the environment variable <b>TCL_PKG_PREFER_LATEST</b>
is set.  If that environment variable is defined (with any value) then
the initial (and permanent) selection mode value is set to "latest".
</p></desc>
</commanddef>
</commandlist>
</section>
<section>
<title>VERSION NUMBERS</title>
<p>Version numbers consist of one or more decimal numbers separated
by dots, such as 2 or 1.162 or 3.1.13.1.
The first number is called the major version number.
Larger numbers correspond to later versions of a package, with
leftmost numbers having greater significance.
For example, version 2.1 is later than 1.3 and version
3.4.6 is later than 3.3.5.
Missing fields are equivalent to zeroes:  version 1.3 is the
same as version 1.3.0 and 1.3.0.0, so it is earlier than 1.3.1 or 1.3.0.2.
In addition, the letters 'a' (alpha) and/or 'b' (beta) may appear
exactly once to replace a dot for separation. These letters
semantically add a negative specifier into the version, where 'a' is
-2, and 'b' is -1. Each may be specified only once, and 'a' or 'b' are
mutually exclusive in a specifier. Thus 1.3a1 becomes (semantically)
1.3.-2.1, 1.3b1 is 1.3.-1.1. Negative numbers are not directly allowed
in version specifiers.
A version number not containing the letters 'a' or 'b' as specified
above is called a <b>stable</b> version, whereas presence of the letters
causes the version to be called is <b>unstable</b>.
A later version number is assumed to be upwards compatible with
an earlier version number as long as both versions have the same
major version number.
For example, Tcl scripts written for version 2.3 of a package should
work unchanged under versions 2.3.2, 2.4, and 2.5.1.
Changes in the major version number signify incompatible changes:
if code is written to use version 2.1 of a package, it is not guaranteed
to work unmodified with either version 1.7.3 or version 3.1.
</p>
</section>
<section>
<title>PACKAGE INDICES</title>
<p>The recommended way to use packages in Tcl is to invoke <b>package require</b>
and <b>package provide</b> commands in scripts, and use the procedure
<cmd>pkg_mkIndex</cmd> to create package index files.
Once you've done this, packages will be loaded automatically
in response to <b>package require</b> commands.
See the documentation for <cmd>pkg_mkIndex</cmd> for details.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>To state that a Tcl script requires the Tk and http packages, put this
at the top of the script:
</p>
<example>
<b>package require</b> Tk
<b>package require</b> http
</example>
<p>To test to see if the Snack package is available and load if it is
(often useful for optional enhancements to programs where the loss of
the functionality is not critical) do this:
</p>
<example>
if {[catch {<b>package require</b> Snack}]} {
   # Error thrown - package not found.
   # Set up a dummy interface to work around the absence
} else {
   # We have the package, configure the app to use it
}
</example>


</section>
<seealso>
<ref>msgcat(n)</ref>
<ref>packagens(n)</ref>
<ref>pkgMkIndex(n)</ref>
</seealso>
<keywords>
<keyword>package</keyword>
<keyword>version</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="packagens" title="pkg::create" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: packagens.n,v 1.5 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="pkg::create" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>pkg::create</name>
<desc>Construct an appropriate `package ifneeded' command for a given package specification</desc>
</namesection>
<synopsis>
<syntax>
<cmd>::pkg::create</cmd> <m>-name packageName</m> <m>-version packageVersion</m> ?<m>-load filespec</m>? ... ?<m>-source filespec</m>? ...
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><cmd>::pkg::create</cmd> is a utility procedure that is part of the standard Tcl
library.  It is used to create an appropriate <b>package ifneeded</b>
command for a given package specification.  It can be used to construct a
<b>pkgIndex.tcl</b> file for use with the <cmd>package</cmd> mechanism.

</p>
</section>
<section>
<title>OPTIONS</title>
<p>The parameters supported are:
</p>
<dl>
<dle>
<dt><b>-name</b> <m>packageName</m></dt>
<dd>This parameter specifies the name of the package.  It is required.
</dd>
</dle>
<dle>
<dt><b>-version</b> <m>packageVersion</m></dt>
<dd>This parameter specifies the version of the package.  It is required.
</dd>
</dle>
<dle>
<dt><b>-load</b> <m>filespec</m></dt>
<dd>This parameter specifies a binary library that must be loaded with the
<b cat="AMBIGUOUS ambiguous cmd">load</b> command.  <i>filespec</i> is a list with two elements.  The
first element is the name of the file to load.  The second, optional
element is a list of commands supplied by loading that file.  If the
list of procedures is empty or omitted, <cmd>::pkg::create</cmd> will
set up the library for direct loading (see <cmd>pkg_mkIndex</cmd>).  Any
number of <b>-load</b> parameters may be specified.
</dd>
</dle>
<dle>
<dt><b>-source</b> <m>filespec</m></dt>
<dd>This parameter is similar to the <b>-load</b> parameter, except that it
specifies a Tcl library that must be loaded with the
<b cat="AMBIGUOUS ambiguous cmd">source</b> command.  Any number of <b>-source</b> parameters may be
specified.
</dd>
</dle>
</dl>
<p>At least one <b>-load</b> or <b>-source</b> parameter must be given.

</p>
</section>
<seealso>
<ref>package(n)</ref>
</seealso>
<keywords>
<keyword>auto-load</keyword>
<keyword>index</keyword>
<keyword>package</keyword>
<keyword>version</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="cmd" title="tk_setPalette" id="palette">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: palette.n,v 1.2 1998/09/14 18:22:58 stanton Exp $
 -->
<?TROFF.TH title="tk_setPalette" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_setPalette</name>
<name>tk_bisque</name>
<desc>Modify the Tk color palette</desc>
</namesection>
<synopsis>
<syntax>
<b>tk_setPalette</b> <m>background</m>

<b>tk_setPalette</b> <m>name value</m> ?<m>name value ...</m>?

<b>tk_bisque</b>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b>tk_setPalette</b> procedure changes the color scheme for Tk.
It does this by modifying the colors of existing widgets and by changing
the option database so that future widgets will use the new color scheme.
If <b>tk_setPalette</b> is invoked with a single argument, the
argument is the name of a color to use as the normal background
color;  <b>tk_setPalette</b> will compute a complete color palette
from this background color.
Alternatively, the arguments to <b>tk_setPalette</b> may consist of any number
of <i>name</i>-<i>value</i> pairs, where the first argument of the pair
is the name of an option in the Tk option database and the second
argument is the new value to use for that option.  The following
database names are currently supported:
</p>
<?TABSTOPS 4c 8c?>
<sl cols="3">
<li>activeBackground</li>
<li>activeForeground</li>
<li>background</li>
<li>disabledForeground</li>
<li>foreground</li>
<li>highlightBackground</li>
<li>highlightColor</li>
<li>insertBackground</li>
<li>selectBackground</li>
<li>selectColor</li>
<li>selectForeground</li>
<li>troughColor</li>
</sl>
<p><b>tk_setPalette</b> tries to compute reasonable defaults for any
options that you don't specify.  You can specify options other
than the above ones and Tk will change those options on widgets as
well.  This feature may be useful if you are using custom widgets with
additional color options.
</p>
<p>Once it has computed the new value to use for each of the color options,
<b>tk_setPalette</b> scans the widget hierarchy to modify the options
of all existing widgets.  For each widget, it checks to see if any
of the above options is defined for the widget.  If so, and if the
option's current value is the default, then the value is changed;  if
the option has a value other than the default, <b>tk_setPalette</b>
will not change it.  The default for an option is the one provided by
the widget (<b>[lindex [$w configure $option] 3]</b>) unless
<b>tk_setPalette</b> has been run previously, in which case it is the
value specified in the previous invocation of <b>tk_setPalette</b>.
</p>
<p>After modifying all the widgets in the application, <b>tk_setPalette</b>
adds options to the option database to change the defaults for
widgets created in the future.  The new options are added at
priority <b>widgetDefault</b>, so they will be overridden by options
from the .Xdefaults file or options specified on the command-line
that creates a widget.
</p>
<p>The procedure <b>tk_bisque</b> is provided for backward compatibility:
it restores the application's colors to the light brown (``bisque'')
color scheme used in Tk 3.6 and earlier versions.

</p>
</section>
<keywords>
<keyword>bisque</keyword>
<keyword>color</keyword>
<keyword>palette</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="panedwindow" version="8.4" title="panedwindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: panedwindow.n,v 1.10 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="panedwindow" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>panedwindow</name>
<desc>Create and manipulate panedwindow widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">panedwindow</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-height</li>
<li>-orient</li>
<li>-relief</li>
<li>-width</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-handlepad</name>
<dbname>handlePad</dbname>
<dbclass>HandlePad</dbclass>
<desc>When sash handles are drawn, specifies the distance from the top or
left end of the sash (depending on the orientation of the widget) at
which to draw the handle.  May be any value accepted by <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-handlesize</name>
<dbname>handleSize</dbname>
<dbclass>HandleSize</dbclass>
<desc>Specifies the side length of a sash handle.  Handles are always
drawn as squares.  May be any value accepted by <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-opaqueresize</name>
<dbname>opaqueResize</dbname>
<dbclass>OpaqueResize</dbclass>
<desc>Specifies whether panes should be resized as a sash is moved (true),
or if resizing should be deferred until the sash is placed (false).
</desc>
</optiondef>
<optiondef>
<name>-sashcursor</name>
<dbname>sashCursor</dbname>
<dbclass>SashCursor</dbclass>
<desc>Mouse cursor to use when over a sash.  If null,
<b>sb_h_double_arrow</b> will be used for horizontal panedwindows, and
<b>sb_v_double_arrow</b> will be used for vertical panedwindows.
</desc>
</optiondef>
<optiondef>
<name>-sashpad</name>
<dbname>sashPad</dbname>
<dbclass>SashPad</dbclass>
<desc>Specifies the amount of padding to leave of each side of a sash.  May
be any value accepted by <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-sashrelief</name>
<dbname>sashRelief</dbname>
<dbclass>SashRelief</dbclass>
<desc>Relief to use when drawing a sash.  May be any of the standard Tk
relief values.
</desc>
</optiondef>
<optiondef>
<name>-sashwidth</name>
<dbname>sashWidth</dbname>
<dbclass>SashWidth</dbclass>
<desc>Specifies the width of each sash.  May be any value accepted by
<fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-showhandle</name>
<dbname>showHandle</dbname>
<dbclass>ShowHandle</dbclass>
<desc>Specifies whether sash handles should be shown.  May be any valid Tcl
boolean value.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">panedwindow</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a panedwindow widget.
Additional options, described above, may be specified on the command
line or in the option database to configure aspects of the panedwindow
such as its default background color and relief.  The
<b cat="AMBIGUOUS widget cmd">panedwindow</b> command returns the path name of the new window.
</p>
<p>A panedwindow widget contains any number of panes, arranged
horizontally or vertically, according to the value of the
<b>-orient</b> option.  Each pane contains one widget, and each pair of
panes is separated by a moveable (via mouse movements) sash.  Moving a
sash causes the widgets on either side of the sash to be resized.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">panedwindow</b> command creates a new Tcl command whose name is
the same as the path name of the panedwindow's window.  This command
may be used to invoke various operations on the widget.  It has the
following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>PathName</i> is the name of the command, which is the same as
the panedwindow widget's path name.  <i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for panedwindow widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>add</b> <m>window ?window ...? ?option value ...?</m></dt>
<dd>Add one or more windows to the panedwindow, each in a separate pane.
The arguments consist of the names of one or more windows
followed by pairs of arguments that specify how to manage the windows.
<i>Option</i> may have any of the values accepted by the
<b>configure</b> subcommand.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given by
<i>option</i>.  <i>Option</i> may have any of the values accepted by the
<b cat="AMBIGUOUS widget cmd">panedwindow</b> command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> <m>?option? ?value option value ...?</m></dt>
<dd>Query or modify the configuration options of the widget.  If no
<i>option</i> is specified, returns a list describing all of the
available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string. <i>Option</i> may have
any of the values accepted by the <b cat="AMBIGUOUS widget cmd">panedwindow</b> command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>forget</b> <m>window ?window ...?</m></dt>
<dd>Remove the pane containing <i>window</i> from the panedwindow.  All
geometry management options for <i>window</i> will be forgotten.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Identify the panedwindow component underneath the point given by
<i>x</i> and <i>y</i>, in window coordinates.  If the point is over a
sash or a sash handle, the result is a two element list containing the
index of the sash or handle, and a word indicating whether it is over
a sash or a handle, such as {0 sash} or {2 handle}.  If the point is
over any other part of the panedwindow, the result is an empty list.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>proxy</b> <m>?args?</m></dt>
<dd>This command is used to query and change the position of the sash
proxy, used for rubberband-style pane resizing. It can take any of
the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>proxy coord</b></dt>
<dd>Return a list containing the x and y coordinates of the most recent
proxy location.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>proxy forget</b></dt>
<dd>Remove the proxy from the display.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>proxy place</b> <m>x y</m></dt>
<dd>Place the proxy at the given <i>x</i> and <i>y</i> coordinates.  
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>sash</b> <m>?args?</m></dt>
<dd>This command is used to query and change the position of sashes in the
panedwindow.  It can take any of the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>sash coord</b> <m>index</m></dt>
<dd>Return the current x and y coordinate pair for the sash given by
<i>index</i>.  <i>Index</i> must be an integer between 0 and 1 less than
the number of panes in the panedwindow.  The coordinates given are
those of the top left corner of the region containing the sash.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>sash dragto</b> <m>index x y</m></dt>
<dd>This command computes the difference between the given coordinates and the
coordinates given to the last <b>sash mark</b> command for the given
sash.  It then moves that sash the computed difference.  The return
value is the empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>sash mark</b> <m>index x y</m></dt>
<dd>Records <i>x</i> and <i>y</i> for the sash given by <i>index</i>; used in
conjunction with later <b>sash dragto</b> commands to move the sash.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>sash place</b> <m>index x y</m></dt>
<dd>Place the sash given by <i>index</i> at the given coordinates.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>panecget</b> <m>window option</m></dt>
<dd>Query a management option for <i>window</i>.  <i>Option</i> may be any
value allowed by the <b>paneconfigure</b> subcommand.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>paneconfigure</b> <m>window ?option? ?value option value ...?</m></dt>
<dd>Query or modify the management options for <i>window</i>.  If no
<i>option</i> is specified, returns a list describing all of the
available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.  The following options
are supported:
<dl>
<dle>
<dt><b>-after</b> <m>window</m></dt>
<dd>Insert the window after the window specified.  <i>window</i> should be the
name of a window already managed by <i>pathName</i>.
</dd>
</dle>
<dle>
<dt><b>-before</b> <m>window</m></dt>
<dd>Insert the window before the window specified.  <i>window</i> should be
the name of a window already managed by <i>pathName</i>.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>size</m></dt>
<dd>Specify a height for the window.  The height will be the outer
dimension of the window including its border, if any.  If <i>size</i>
is an empty string, or if <b>-height</b> is not specified, then the
height requested internally by the window will be used initially; the
height may later be adjusted by the movement of sashes in the
panedwindow.  <i>Size</i> may be any value accepted by <fun>Tk_GetPixels</fun>.
</dd>
</dle>
<dle>
<dt><b>-hide</b> <m>boolean</m></dt>
<dd><new version="8.5">Controls the visibility of a pane.  When the <i>boolean</i> is true
(according to <fun>Tcl_GetBoolean</fun>) the pane will not be visible, but
it will still be maintained in the list of panes.
</new></dd>
</dle>
<dle>
<dt><b>-minsize</b> <m>n</m></dt>
<dd>Specifies that the size of the window cannot be made less than
<i>n</i>.  This constraint only affects the size of the widget in the
paned dimension -- the x dimension for horizontal panedwindows, the y
dimension for vertical panedwindows.  May be any value accepted by
<fun>Tk_GetPixels</fun>.
</dd>
</dle>
<dle>
<dt><b>-padx</b> <m>n</m></dt>
<dd>Specifies a non-negative value indicating how much extra space to
leave on each side of the window in the X-direction.  The value may 
have any of the forms accepted by <fun>Tk_GetPixels</fun>.
</dd>
</dle>
<dle>
<dt><b>-pady</b> <m>n</m></dt>
<dd>Specifies a non-negative value indicating how much extra space to
leave on each side of the window in the Y-direction.  The value may 
have any of the forms accepted by <fun>Tk_GetPixels</fun>.
</dd>
</dle>
<dle>
<dt><b>-sticky</b> <m>style</m></dt>
<dd>If a window's pane is larger than the requested dimensions of the
window, this option may be used to position (or stretch) the window
within its pane.  <i>Style</i>  is a string that contains zero or more
of the characters <b>n</b>, <b>s</b>, <b>e</b> or <b>w</b>.  The string
can optionally contains spaces or commas, but they are ignored.  Each
letter refers to a side (north, south, east, or west) that the window
will "stick" to.  If both <b>n</b> and <b>s</b> (or <b>e</b> and <b>w</b>)
are specified, the window will be stretched to fill the entire height
(or width) of its cavity.
</dd>
</dle>
<dle>
<dt><b>-stretch</b> <m>when</m></dt>
<dd><new version="8.5">Controls how extra space is allocated to each of the panes.
<i>When</i> is one of <b>always</b>, <b>first</b>, <b>last</b>,
<b>middle</b>, and <b>never</b>.
The panedwindow will calculate the required size of all its panes. Any
remaining (or deficit) space will be distributed to those panes marked
for stretching. The space will be distributed based on each panes
current ratio of the whole.  The <i>when</i> values have the following
definition:
<dl>
<dle>
<dt><b>always</b></dt>
<dd>This pane will always stretch.
</dd>
</dle>
<dle>
<dt><b>first</b></dt>
<dd>Only if this pane is the first pane (left-most or top-most) will it 
stretch.
</dd>
</dle>
<dle>
<dt><b>last</b></dt>
<dd>Only if this pane is the last pane (right-most or bottom-most) will it 
stretch.  This is the default value.
</dd>
</dle>
<dle>
<dt><b>middle</b></dt>
<dd>Only if this pane is not the first or last pane will it stretch.
</dd>
</dle>
<dle>
<dt><b>never</b></dt>
<dd>This pane will never stretch.
</dd>
</dle>
</dl></new></dd>
</dle>
<dle>
<dt><b>-width</b> <m>size</m></dt>
<dd>Specify a width for the window.  The width will be the outer
dimension of the window including its border, if any.  If <i>size</i>
is an empty string, or if <b>-width</b> is not specified, then the
width requested internally by the window will be used initially; the
width may later be adjusted by the movement of sashes in the
panedwindow.  <i>Size</i> may be any value accepted by <fun>Tk_GetPixels</fun>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>panes</b></dt>
<dd>Returns an ordered list of the widgets managed by <i>pathName</i>.

</dd>
</dle>
</dl>
</section>
<section>
<title>RESIZING PANES</title>
<p>A pane is resized by grabbing the sash (or sash handle if present) and
dragging with the mouse.  This is accomplished via mouse motion
bindings on the widget.  When a sash is moved, the sizes of the panes
on each side of the sash, and thus the widgets in those panes, are
adjusted.
</p>
<p>When a pane is resized from outside (e.g. it is packed to expand and
fill, and the containing toplevel is resized), space is added to the final
(rightmost or bottommost) pane in the window.

</p>
</section>
<seealso>
<ref>ttk_panedwindow(n)</ref>
</seealso>
<keywords>
<keyword>panedwindow</keyword>
<keyword>widget</keyword>
<keyword>geometry management</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Panic" version="8.4" title="Tcl_Panic">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Panic.3,v 1.8 2005/09/13 21:23:51 dgp Exp $
 -->
<?TROFF.TH title="Tcl_Panic" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Panic</name>
<name>Tcl_PanicVA</name>
<name>Tcl_SetPanicProc</name>
<desc>report fatal error and abort</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_Panic</fun>(<m>format</m>, <m>arg</m>, <m>arg</m>, <m>...</m>)

void
<fun>Tcl_PanicVA</fun>(<m>format</m>, <m>argList</m>)

void
<fun>Tcl_SetPanicProc</fun>(<m>panicProc</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char*</argtype>
<name>format</name>
<argmode>in</argmode>
<desc>A printf-style format string.
</desc>
</argdef>
<argdef>
<argtype/>
<name>arg</name>
<argmode>in</argmode>
<desc>Arguments matching the format string.
</desc>
</argdef>
<argdef>
<argtype>va_list</argtype>
<name>argList</name>
<argmode>in</argmode>
<desc>An argument list of arguments matching the format string.
Must have been initialized using <b>va_start</b>,
and cleared using <b>va_end</b>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_PanicProc</argtype>
<name name="panicProc">*panicProc</name>
<argmode>in</argmode>
<desc>Procedure to report fatal error message and abort.

</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>When the Tcl library detects that its internal data structures are in an
inconsistent state, or that its C procedures have been called in a
manner inconsistent with their documentation, it calls <fun>Tcl_Panic</fun>
to display a message describing the error and abort the process.  The
<i>format</i> argument is a format string describing how to format the
remaining arguments <i>arg</i> into an error message, according to the
same formatting rules used by the <b>printf</b> family of functions.  The
same formatting rules are also used by the built-in Tcl command
<b cat="AMBIGUOUS ambiguous cmd">format</b>.
</p>
<p>In a freshly loaded Tcl library, <fun>Tcl_Panic</fun> prints the formatted
error message to the standard error file of the process, and then
calls <b>abort</b> to terminate the process.  <fun>Tcl_Panic</fun> does not
return.
</p>
<p><fun>Tcl_SetPanicProc</fun> may be used to modify the behavior of
<fun>Tcl_Panic</fun>.  The <i>panicProc</i> argument should match the
type <type>Tcl_PanicProc</type>:
</p>
<syntax cat="type" name="Tcl_PanicProc" scope="global">
typedef void Tcl_PanicProc(
        const char *<b cat="AMBIGUOUS ambiguous cmd">format</b>,
        <b>arg</b>, <b>arg</b>,...);
</syntax>
<p>After <fun>Tcl_SetPanicProc</fun> returns, any future calls to
<fun>Tcl_Panic</fun> will call <i>panicProc</i>, passing along the
<i>format</i> and <i>arg</i> arguments.  To maintain consistency with the
callers of <fun>Tcl_Panic</fun>, <i>panicProc</i> must not return; it must
call <b>abort</b>.  <i>panicProc</i> should avoid making calls into the
Tcl library, or into other libraries that may call the Tcl library,
since the original call to <fun>Tcl_Panic</fun> indicates the Tcl library is
not in a state of reliable operation.  
</p>
<p>The typical use of <fun>Tcl_SetPanicProc</fun> arranges for the error message
to be displayed or reported in a manner more suitable for the
application or the platform.  As an example, the Windows implementation
of <b>wish</b> calls <fun>Tcl_SetPanicProc</fun> to force all panic messages
to be displayed in a system dialog box, rather than to be printed to the
standard error file (usually not visible under Windows).
</p>
<p>Although the primary callers of <fun>Tcl_Panic</fun> are the procedures of
the Tcl library, <fun>Tcl_Panic</fun> is a public function and may be called
by any extension or application that wishes to abort the process and
have a panic message displayed the same way that panic messages from Tcl
will be displayed.
</p>
<p><fun>Tcl_PanicVA</fun> is the same as <fun>Tcl_Panic</fun> except that instead of
taking a variable number of arguments it takes an argument list.

</p>
</section>
<seealso>
<ref>abort(3)</ref>
<ref>printf(3)</ref>
<ref>exec(n)</ref>
<ref>format(n)</ref>
</seealso>
<keywords>
<keyword>abort</keyword>
<keyword>fatal</keyword>
<keyword>error</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ParseArgv" title="Tk_ParseArgv">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ParseArgv.3,v 1.6 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_ParseArgv" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ParseArgv</name>
<desc>process command-line options</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_ParseArgv</fun>(<m>interp</m>, <m>tkwin</m>, <m>argcPtr</m>, <m>argv</m>, <m>argTable</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter to use for returning error messages.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window to use when arguments specify Tk options.  If NULL, then
no Tk options will be processed.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argcPtr</name>
<argmode>in/out</argmode>
<desc>Pointer to number of arguments in argv;  gets modified to hold
number of unprocessed arguments that remain after the call.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argv">**argv</name>
<argmode>in/out</argmode>
<desc>Command line arguments passed to main program.  Modified to
hold unprocessed arguments that remain after the call.
</desc>
</argdef>
<argdef>
<argtype>Tk_ArgvInfo</argtype>
<name name="argTable">*argTable</name>
<argmode>in</argmode>
<desc>Array of argument descriptors, terminated by element with
type <b>TK_ARGV_END</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>If non-zero, then it specifies one or more flags that control the
parsing of arguments.  Different flags may be OR'ed together.
The flags currently defined are <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b>,
<b>TK_ARGV_NO_ABBREV</b>, <b>TK_ARGV_NO_LEFTOVERS</b>, and
<b>TK_ARGV_NO_DEFAULTS</b>.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tk_ParseArgv</fun> processes an array of command-line arguments according
to a table describing the kinds of arguments that are expected.
Each of the arguments in <i>argv</i> is processed in turn:  if it matches
one of the entries in <i>argTable</i>, the argument is processed
according to that entry and discarded.  The arguments that do not
match anything in <i>argTable</i> are copied down to the beginning
of <i>argv</i> (retaining their original order) and returned to
the caller.  At the end of the call
<fun>Tk_ParseArgv</fun> sets <i>*argcPtr</i> to hold the number of
arguments that are left in <i>argv</i>, and <i>argv[*argcPtr]</i>
will hold the value NULL.  Normally, <fun>Tk_ParseArgv</fun>
assumes that <i>argv[0]</i> is a command name, so it is treated like
an argument that doesn't match <i>argTable</i> and returned to the
caller;  however, if the <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b> bit is set in
<i>flags</i> then <i>argv[0]</i> will be processed just like the other
elements of <i>argv</i>.
</p>
<p><fun>Tk_ParseArgv</fun> normally returns the value <b>TCL_OK</b>.  If an error
occurs while parsing the arguments, then <b>TCL_ERROR</b> is returned and
<fun>Tk_ParseArgv</fun> will leave an error message in <i>interp-&gt;result</i>
in the standard Tcl fashion.  In
the event of an error return, <i>*argvPtr</i> will not have been
modified, but <i>argv</i> could have been partially modified.  The
possible causes of errors are explained below.
</p>
<p>The <i>argTable</i> array specifies the kinds of arguments that are
expected;  each of its entries has the following structure:
</p>
<syntax cat="type" name="Tk_ArgvInfo" scope="global">
typedef struct {
    char *<i>key</i>;
    int <i>type</i>;
    char *<i>src</i>;
    char *<i>dst</i>;
    char *<i>help</i>;
} Tk_ArgvInfo;
</syntax>
<p>The <i>key</i> field is a string such as ``-display'' or ``-bg''
that is compared with the values in <i>argv</i>.  <i>Type</i>
indicates how to process an argument that matches <i>key</i>
(more on this below).  <i>Src</i> and <i>dst</i> are additional
values used in processing the argument.  Their exact usage
depends on <i>type</i>, but typically <i>src</i> indicates
a value and <i>dst</i> indicates where to store the
value.  The <b>char *</b> declarations for <i>src</i> and <i>dst</i>
are placeholders:  the actual types may be different.  Lastly,
<i>help</i> is a string giving a brief description
of this option;  this string is printed when users ask for help
about command-line options.
</p>
<p>When processing an argument in <i>argv</i>, <fun>Tk_ParseArgv</fun>
compares the argument to each of the <i>key</i>'s in <i>argTable</i>.
<fun>Tk_ParseArgv</fun> selects the first specifier whose <i>key</i> matches
the argument exactly, if such a specifier exists.  Otherwise
<fun>Tk_ParseArgv</fun> selects a specifier for which the argument
is a unique abbreviation.  If the argument is a unique abbreviation
for more than one specifier, then an error is returned.  If there
is no matching entry in <i>argTable</i>, then the argument is
skipped and returned to the caller.
</p>
<p>Once a matching argument specifier is found, <fun>Tk_ParseArgv</fun>
processes the argument according to the <i>type</i> field of the
specifier.  The argument that matched <i>key</i> is called ``the matching
argument'' in the descriptions below.  As part of the processing,
<fun>Tk_ParseArgv</fun> may also use the next argument in <i>argv</i>
after the matching argument, which is called ``the following
argument''.  The legal values for <i>type</i>, and the processing
that they cause, are as follows:
</p>
<dl>
<dle>
<dt><b>TK_ARGV_END</b></dt>
<dd>Marks the end of the table.  The last entry in <i>argTable</i>
must have this type;  all of its other fields are ignored and it
will never match any arguments.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_CONSTANT</b></dt>
<dd><i>Src</i> is treated as an integer and <i>dst</i> is treated
as a pointer to an integer.  <i>Src</i> is stored at <i>*dst</i>.
The matching argument is discarded.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_INT</b></dt>
<dd>The following argument must contain an
integer string in the format accepted by <b>strtol</b> (e.g. ``0''
and ``0x'' prefixes may be used to specify octal or hexadecimal
numbers, respectively).  <i>Dst</i> is treated as a pointer to an
integer;  the following argument is converted to an integer value
and stored at <i>*dst</i>.  <i>Src</i> is ignored.  The matching
and following arguments are discarded from <i>argv</i>.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_FLOAT</b></dt>
<dd>The following argument must contain a floating-point number in
the format accepted by <b>strtol</b>.
<i>Dst</i> is treated as the address of a double-precision
floating point value;  the following argument is converted to a
double-precision value and stored at <i>*dst</i>.  The matching
and following arguments are discarded from <i>argv</i>.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_STRING</b></dt>
<dd>In this form, <i>dst</i> is treated as a pointer to a (char *);
<fun>Tk_ParseArgv</fun> stores at <i>*dst</i> a pointer to the following
argument, and discards the matching and following arguments from
<i>argv</i>.  <i>Src</i> is ignored.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_UID</b></dt>
<dd>This form is similar to <b>TK_ARGV_STRING</b>, except that the argument
is turned into a Tk_Uid by calling <fun>Tk_GetUid</fun>.
<i>Dst</i> is treated as a pointer to a
Tk_Uid; <fun>Tk_ParseArgv</fun> stores at <i>*dst</i> the Tk_Uid
corresponding to the following
argument, and discards the matching and following arguments from
<i>argv</i>.  <i>Src</i> is ignored.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_CONST_OPTION</b></dt>
<dd>This form causes a Tk option to be set (as if the <cmd>option</cmd>
command had been invoked).  The <i>src</i> field is treated as a
pointer to a string giving the value of an option, and <i>dst</i>
is treated as a pointer to the name of the option.  The matching
argument is discarded.  If <i>tkwin</i> is NULL, then argument
specifiers of this type are ignored (as if they did not exist).
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_OPTION_VALUE</b></dt>
<dd>This form is similar to <b>TK_ARGV_CONST_OPTION</b>, except that the
value of the option is taken from the following argument instead
of from <i>src</i>.  <i>Dst</i> is used as the name of the option.
<i>Src</i> is ignored.  The matching and following arguments
are discarded.  If <i>tkwin</i> is NULL, then argument
specifiers of this type are ignored (as if they did not exist).
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_OPTION_NAME_VALUE</b></dt>
<dd>In this case the following argument is taken as the name of a Tk
option and the argument after that is taken as the value for that
option.  Both <i>src</i> and <i>dst</i> are ignored.  All three
arguments are discarded from <i>argv</i>.  If <i>tkwin</i> is NULL,
then argument
specifiers of this type are ignored (as if they did not exist).
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_HELP</b></dt>
<dd>When this kind of option is encountered, <fun>Tk_ParseArgv</fun> uses the
<i>help</i> fields of <i>argTable</i> to format a message describing
all the valid arguments.  The message is placed in <i>interp-&gt;result</i>
and <fun>Tk_ParseArgv</fun> returns <b>TCL_ERROR</b>.  When this happens, the
caller normally prints the help message and aborts.  If the <i>key</i>
field of a <b>TK_ARGV_HELP</b> specifier is NULL, then the specifier will
never match any arguments;  in this case the specifier simply provides
extra documentation, which will be included when some other
<b>TK_ARGV_HELP</b> entry causes help information to be returned.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_REST</b></dt>
<dd>This option is used by programs or commands that allow the last
several of their options to be the name and/or options for some
other program.  If a <b>TK_ARGV_REST</b> argument is found, then
<fun>Tk_ParseArgv</fun> doesn't process any
of the remaining arguments;  it returns them all at
the beginning of <i>argv</i> (along with any other unprocessed arguments).
In addition, <fun>Tk_ParseArgv</fun> treats <i>dst</i> as the address of an
integer value, and stores at <i>*dst</i> the index of the first of the
<b>TK_ARGV_REST</b> options in the returned <i>argv</i>.  This allows the
program to distinguish the <b>TK_ARGV_REST</b> options from other
unprocessed options that preceded the <b>TK_ARGV_REST</b>.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_FUNC</b></dt>
<dd>For this kind of argument, <i>src</i> is treated as the address of
a procedure, which is invoked to process the following argument.
The procedure should have the following structure:
<example>
int
<i>func</i>(<i>dst</i>, <i>key</i>, <i>nextArg</i>)
    char *<i>dst</i>;
    char *<i>key</i>;
    char *<i>nextArg</i>;
{
}
</example><p>The <i>dst</i> and <i>key</i> parameters will contain the
corresponding fields from the <i>argTable</i> entry, and
<i>nextArg</i> will point to the following argument from <i>argv</i>
(or NULL if there aren't any more arguments left in <i>argv</i>).
If <i>func</i> uses <i>nextArg</i> (so that
<fun>Tk_ParseArgv</fun> should discard it), then it should return 1.  Otherwise it
should return 0 and <b>TkParseArgv</b> will process the following
argument in the normal fashion.  In either event the matching argument
is discarded.
</p></dd>
</dle>
<dle>
<dt><b>TK_ARGV_GENFUNC</b></dt>
<dd>This form provides a more general procedural escape.  It treats
<i>src</i> as the address of a procedure, and passes that procedure
all of the remaining arguments.  The procedure should have the following
form:
<example>
int
<i>genfunc</i>(dst, interp, key, argc, argv)
    char *<i>dst</i>;
    Tcl_Interp *<i>interp</i>;
    char *<i>key</i>;
    int <i>argc</i>;
    char **<i>argv</i>;
{
}
</example><p>The <i>dst</i> and <i>key</i> parameters will contain the
corresponding fields from the <i>argTable</i> entry.  <i>Interp</i>
will be the same as the <i>interp</i> argument to <b>Tcl_ParseArgv</b>.
<i>Argc</i> and <i>argv</i> refer to all of the options after the
matching one.  <i>Genfunc</i> should behave in a fashion similar
to <fun>Tk_ParseArgv</fun>:  parse as many of the remaining arguments as it can,
then return any that are left by compacting them to the beginning of
<i>argv</i> (starting at <i>argv</i>[0]).  <i>Genfunc</i>
should return a count of how many arguments are left in <i>argv</i>;
<fun>Tk_ParseArgv</fun> will process them.  If <i>genfunc</i> encounters
an error then it should leave an error message in <i>interp-&gt;result</i>,
in the usual Tcl fashion, and return -1;  when this happens
<fun>Tk_ParseArgv</fun> will abort its processing and return <b>TCL_ERROR</b>.
</p>
</dd>
</dle>
</dl>
</section>
<section>
<title>FLAGS</title>
<dl>
<dle>
<dt><b>TK_ARGV_DONT_SKIP_FIRST_ARG</b></dt>
<dd><fun>Tk_ParseArgv</fun> normally treats <i>argv[0]</i> as a program
or command name, and returns it to the caller just as if it
hadn't matched <i>argTable</i>.  If this flag is given, then
<i>argv[0]</i> is not given special treatment.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_NO_ABBREV</b></dt>
<dd>Normally, <fun>Tk_ParseArgv</fun> accepts unique abbreviations for
<i>key</i> values in <i>argTable</i>.  If this flag is given then
only exact matches will be acceptable.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_NO_LEFTOVERS</b></dt>
<dd>Normally, <fun>Tk_ParseArgv</fun> returns unrecognized arguments to the
caller.  If this bit is set in <i>flags</i> then <fun>Tk_ParseArgv</fun>
will return an error if it encounters any argument that doesn't
match <i>argTable</i>.  The only exception to this rule is <i>argv[0]</i>,
which will be returned to the caller with no errors as
long as <b>TK_ARGV_DONT_SKIP_FIRST_ARG</b> isn't specified.
</dd>
</dle>
<dle>
<dt><b>TK_ARGV_NO_DEFAULTS</b></dt>
<dd>Normally, <fun>Tk_ParseArgv</fun> searches an internal table of
standard argument specifiers in addition to <i>argTable</i>.  If
this bit is set in <i>flags</i>, then <fun>Tk_ParseArgv</fun> will
use only <i>argTable</i> and not its default table.

</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLE</title>
<p>Here is an example definition of an <i>argTable</i> and
some sample command lines that use the options.  Note the effect
on <i>argc</i> and <i>argv</i>;  arguments processed by <fun>Tk_ParseArgv</fun>
are eliminated from <i>argv</i>, and <i>argc</i>
is updated to reflect reduced number of arguments.
</p>
<example>
/*
 * Define and set default values for globals.
 */
int debugFlag = 0;
int numReps = 100;
char defaultFileName[] = "out";
char *fileName = defaultFileName;
Boolean exec = FALSE;

/*
 * Define option descriptions.
 */
Tk_ArgvInfo argTable[] = {
    {"-X", TK_ARGV_CONSTANT, (char *) 1, (char *) &amp;debugFlag,
        "Turn on debugging printfs"},
    {"-N", TK_ARGV_INT, (char *) NULL, (char *) &amp;numReps,
        "Number of repetitions"},
    {"-of", TK_ARGV_STRING, (char *) NULL, (char *) &amp;fileName,
        "Name of file for output"},
    {"x", TK_ARGV_REST, (char *) NULL, (char *) &amp;exec,
        "File to exec, followed by any arguments (must be last argument)."},
    {(char *) NULL, TK_ARGV_END, (char *) NULL, (char *) NULL,
        (char *) NULL}
};

main(argc, argv)
    int argc;
    char *argv[];
{
    ...

    if (Tk_ParseArgv(interp, tkwin, &amp;argc, argv, argTable, 0) != TCL_OK) {
        fprintf(stderr, "%s\n", interp-&gt;result);
        exit(1);
    }

    /*
     * Remainder of the program.
     */
}
</example>
<p>Note that default values can be assigned to variables named in
<i>argTable</i>:  the variables will only be overwritten if the
particular arguments are present in <i>argv</i>.
Here are some example command lines and their effects.
</p>
<example>
prog -N 200 infile        # just sets the numReps variable to 200
prog -of out200 infile    # sets fileName to reference "out200"
prog -XN 10 infile        # sets the debug flag, also sets numReps
</example>
<p>In all of the above examples, <i>argc</i> will be set by <fun>Tk_ParseArgv</fun> to 2,
<i>argv</i>[0] will be ``prog'', <i>argv</i>[1] will be ``infile'',
and <i>argv</i>[2] will be NULL.

</p>
</section>
<keywords>
<keyword>arguments</keyword>
<keyword>command line</keyword>
<keyword>options</keyword>
</keywords>
</manpage>
<manpage version="8.3" cat="fun" title="Tcl_ParseCommand" id="ParseCmd">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ParseCmd.3,v 1.11 2003/03/19 20:07:17 dgp Exp $
 -->
<?TROFF.TH title="Tcl_ParseCommand" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_ParseCommand</name>
<name>Tcl_ParseExpr</name>
<name>Tcl_ParseBraces</name>
<name>Tcl_ParseQuotedString</name>
<name>Tcl_ParseVarName</name>
<name>Tcl_ParseVar</name>
<name>Tcl_FreeParse</name>
<name>Tcl_EvalTokens</name>
<name>Tcl_EvalTokensStandard</name>
<desc>parse Tcl scripts and expressions</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_ParseCommand</fun>(<m>interp</m>, <m>string</m>, <m>numBytes</m>, <m>nested</m>, <m>parsePtr</m>)

int
<fun>Tcl_ParseExpr</fun>(<m>interp</m>, <m>string</m>, <m>numBytes</m>, <m>parsePtr</m>)

int
<fun>Tcl_ParseBraces</fun>(<m>interp</m>, <m>string</m>, <m>numBytes</m>, <m>parsePtr</m>, <m>append</m>, <m>termPtr</m>)

int
<fun>Tcl_ParseQuotedString</fun>(<m>interp</m>, <m>string</m>, <m>numBytes</m>, <m>parsePtr</m>, <m>append</m>, <m>termPtr</m>)

int
<fun>Tcl_ParseVarName</fun>(<m>interp</m>, <m>string</m>, <m>numBytes</m>, <m>parsePtr</m>, <m>append</m>)

CONST char *
<fun>Tcl_ParseVar</fun>(<m>interp</m>, <m>string</m>, <m>termPtr</m>)

<fun>Tcl_FreeParse</fun>(<m>usedParsePtr</m>)

Tcl_Obj *
<fun>Tcl_EvalTokens</fun>(<m>interp</m>, <m>tokenPtr</m>, <m>numTokens</m>)

int
<fun>Tcl_EvalTokensStandard</fun>(<m>interp</m>, <m>tokenPtr</m>, <m>numTokens</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>For procedures other than <fun>Tcl_FreeParse</fun>, <fun>Tcl_EvalTokens</fun>
and <fun>Tcl_EvalTokensStandard</fun>, used only for error reporting;
if NULL, then no error messages are left after errors.
For <fun>Tcl_EvalTokens</fun> and <fun>Tcl_EvalTokensStandard</fun>,
determines the context for evaluating the
script and also is used for error reporting; must not be NULL.
</desc>
</argdef>
<argdef>
<argtype>CONST char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Pointer to first character in string to parse.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numBytes</name>
<argmode>in</argmode>
<desc>Number of bytes in <i>string</i>, not including any terminating null
character.  If less than 0 then the script consists of all characters
in <i>string</i> up to the first null character.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>nested</name>
<argmode>in</argmode>
<desc>Non-zero means that the script is part of a command substitution so an
unquoted close bracket should be treated as a command terminator.  If zero,
close brackets have no special meaning. 
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>append</name>
<argmode>in</argmode>
<desc>Non-zero means that <i>*parsePtr</i> already contains valid tokens; the new
tokens should be appended to those already present.  Zero means that
<i>*parsePtr</i> is uninitialized; any information in it is ignored.
This argument is normally 0.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Parse</argtype>
<name name="parsePtr">*parsePtr</name>
<argmode>out</argmode>
<desc>Points to structure to fill in with information about the parsed
command, expression, variable name, etc.
Any previous information in this structure
is ignored, unless <i>append</i> is non-zero in a call to
<fun>Tcl_ParseBraces</fun>, <fun>Tcl_ParseQuotedString</fun>,
or <fun>Tcl_ParseVarName</fun>.
</desc>
</argdef>
<argdef>
<argtype>CONST char</argtype>
<name name="termPtr">**termPtr</name>
<argmode>out</argmode>
<desc>If not NULL, points to a location where
<fun>Tcl_ParseBraces</fun>, <fun>Tcl_ParseQuotedString</fun>, and
<fun>Tcl_ParseVar</fun> will store a pointer to the character
just after the terminating character (the close-brace, the last
character of the variable name, or the close-quote (respectively))
if the parse was successful.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Parse</argtype>
<name name="usedParsePtr">*usedParsePtr</name>
<argmode>in</argmode>
<desc>Points to structure that was filled in by a previous call to
<fun>Tcl_ParseCommand</fun>, <fun>Tcl_ParseExpr</fun>, <fun>Tcl_ParseVarName</fun>, etc.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures parse Tcl commands or portions of Tcl commands such as
expressions or references to variables.
Each procedure takes a pointer to a script (or portion thereof)
and fills in the structure pointed to by <i>parsePtr</i>
with a collection of tokens describing the information that was parsed.
The procedures normally return <b>TCL_OK</b>.
However, if an error occurs then they return <b>TCL_ERROR</b>,
leave an error message in <i>interp's</i> result
(if <i>interp</i> is not NULL),
and leave nothing in <i>parsePtr</i>.
</p>
<p><fun>Tcl_ParseCommand</fun> is a procedure that parses Tcl
scripts.  Given a pointer to a script, it
parses the first command from the script.  If the command was parsed
successfully, <fun>Tcl_ParseCommand</fun> returns <b>TCL_OK</b> and fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the command (see below for details).
If an error occurred in parsing the command then
<b>TCL_ERROR</b> is returned, an error message is left in <i>interp</i>'s
result, and no information is left at <i>*parsePtr</i>.
</p>
<p><fun>Tcl_ParseExpr</fun> parses Tcl expressions.
Given a pointer to a script containing an expression,
<fun>Tcl_ParseCommand</fun> parses the expression.
If the expression was parsed successfully,
<fun>Tcl_ParseExpr</fun> returns <b>TCL_OK</b> and fills in the
structure pointed to by <i>parsePtr</i> with information about the
structure of the expression (see below for details).
If an error occurred in parsing the command then
<b>TCL_ERROR</b> is returned, an error message is left in <i>interp</i>'s
result, and no information is left at <i>*parsePtr</i>.
</p>
<p><fun>Tcl_ParseBraces</fun> parses a string or command argument
enclosed in braces such as
<b>{hello}</b> or <b>{string \t with \t tabs}</b>
from the beginning of its argument <i>string</i>.
The first character of <i>string</i> must be <b>{</b>. 
If the braced string was parsed successfully,
<fun>Tcl_ParseBraces</fun> returns <b>TCL_OK</b>,
fills in the structure pointed to by <i>parsePtr</i>
with information about the structure of the string
(see below for details),
and stores a pointer to the character just after the terminating <b>}</b>
in the location given by <i>*termPtr</i>.
If an error occurs while parsing the string
then <b>TCL_ERROR</b> is returned,
an error message is left in <i>interp</i>'s result,
and no information is left at <i>*parsePtr</i> or <i>*termPtr</i>.
</p>
<p><fun>Tcl_ParseQuotedString</fun> parses a double-quoted string such as
<b>"sum is [expr $a+$b]"</b>
from the beginning of the argument <i>string</i>.
The first character of <i>string</i> must be <b>"</b>. 
If the double-quoted string was parsed successfully,
<fun>Tcl_ParseQuotedString</fun> returns <b>TCL_OK</b>,
fills in the structure pointed to by <i>parsePtr</i>
with information about the structure of the string
(see below for details),
and stores a pointer to the character just after the terminating <b>"</b>
in the location given by <i>*termPtr</i>.
If an error occurs while parsing the string
then <b>TCL_ERROR</b> is returned,
an error message is left in <i>interp</i>'s result,
and no information is left at <i>*parsePtr</i> or <i>*termPtr</i>.
</p>
<p><fun>Tcl_ParseVarName</fun> parses a Tcl variable reference such as
<b>$abc</b> or <b>$x([expr $index + 1])</b> from the beginning of its
<i>string</i> argument.
The first character of <i>string</i> must be <b>$</b>. 
If a variable name was parsed successfully, <fun>Tcl_ParseVarName</fun>
returns <b>TCL_OK</b> and fills in the structure pointed to by
<i>parsePtr</i> with information about the structure of the variable name
(see below for details).  If an error
occurs while parsing the command then <b>TCL_ERROR</b> is returned, an
error message is left in <i>interp</i>'s result (if <i>interp</i> isn't
NULL), and no information is left at <i>*parsePtr</i>.
</p>
<p><fun>Tcl_ParseVar</fun> parse a Tcl variable reference such as <b>$abc</b>
or <b>$x([expr $index + 1])</b> from the beginning of its <i>string</i>
argument.  The first character of <i>string</i> must be <b>$</b>.  If
the variable name is parsed successfully, <fun>Tcl_ParseVar</fun> returns a
pointer to the string value of the variable.  If an error occurs while
parsing, then NULL is returned and an error message is left in
<i>interp</i>'s result.
</p>
<p>The information left at <i>*parsePtr</i>
by <fun>Tcl_ParseCommand</fun>, <fun>Tcl_ParseExpr</fun>, <fun>Tcl_ParseBraces</fun>,
<fun>Tcl_ParseQuotedString</fun>, and <fun>Tcl_ParseVarName</fun>
may include dynamically allocated memory.
If these five parsing procedures return <b>TCL_OK</b>
then the caller must invoke <fun>Tcl_FreeParse</fun> to release
the storage at <i>*parsePtr</i>.
These procedures ignore any existing information in
<i>*parsePtr</i> (unless <i>append</i> is non-zero),
so if repeated calls are being made to any of them
then <fun>Tcl_FreeParse</fun> must be invoked once after each call.
</p>
<p><fun>Tcl_EvalTokensStandard</fun> evaluates a sequence of parse tokens from
a Tcl_Parse structure.  The tokens typically consist
of all the tokens in a word or all the tokens that make up the index for
a reference to an array variable.  <fun>Tcl_EvalTokensStandard</fun> performs the
substitutions requested by the tokens and concatenates the
resulting values. 
The return value from <fun>Tcl_EvalTokensStandard</fun> is a Tcl completion
code with one of the values <b>TCL_OK</b>, <b>TCL_ERROR</b>,
<b>TCL_RETURN</b>, <b>TCL_BREAK</b>, or <b>TCL_CONTINUE</b>, or possibly
some other integer value originating in an extension.
In addition, a result value or error message is left in <i>interp</i>'s
result; it can be retrieved using <fun>Tcl_GetObjResult</fun>.
</p>
<p><fun>Tcl_EvalTokens</fun> differs from <fun>Tcl_EvalTokensStandard</fun> only in
the return convention used: it returns the result in a new Tcl_Obj.
The reference count of the object returned as result has been
incremented, so the caller must
invoke <fun>Tcl_DecrRefCount</fun> when it is finished with the object.
If an error or other exception occurs while evaluating the tokens
(such as a reference to a non-existent variable) then the return value
is NULL and an error message is left in <i>interp</i>'s result. The use
of <fun>Tcl_EvalTokens</fun> is deprecated.

</p>
</section>
<section>
<title>TCL_PARSE STRUCTURE</title>
<p><fun>Tcl_ParseCommand</fun>, <fun>Tcl_ParseExpr</fun>, <fun>Tcl_ParseBraces</fun>,
<fun>Tcl_ParseQuotedString</fun>, and <fun>Tcl_ParseVarName</fun>
return parse information in two data structures, Tcl_Parse and Tcl_Token:
</p>
<syntax name="Tcl_Token" cat="type" scope="global">
typedef struct Tcl_Parse {
	CONST char *<i>commentStart</i>;
	int <i>commentSize</i>;
	CONST char *<i>commandStart</i>;
	int <i>commandSize</i>;
	int <i>numWords</i>;
	Tcl_Token *<i>tokenPtr</i>;
	int <i>numTokens</i>;
	...
} Tcl_Parse;

typedef struct Tcl_Token {
    int <i>type</i>;
    CONST char *<i>start</i>;
    int <i>size</i>;
    int <i>numComponents</i>;
} Tcl_Token;
</syntax>
<p>The first five fields of a Tcl_Parse structure
are filled in only by <fun>Tcl_ParseCommand</fun>.
These fields are not used by the other parsing procedures.
</p>
<p><fun>Tcl_ParseCommand</fun> fills in a Tcl_Parse structure
with information that describes one Tcl command and any comments that
precede the command.
If there are comments,
the <i>commentStart</i> field points to the <b>#</b> character that begins
the first comment and <i>commentSize</i> indicates the number of bytes
in all of the comments preceding the command, including the newline
character that terminates the last comment.
If the command is not preceded by any comments, <i>commentSize</i> is 0.
<fun>Tcl_ParseCommand</fun> also sets the <i>commandStart</i> field
to point to the first character of the first
word in the command (skipping any comments and leading space) and 
<i>commandSize</i> gives the total number of bytes in the command,
including the character pointed to by <i>commandStart</i> up to and
including the newline, close bracket, or semicolon character that
terminates the command.  The <i>numWords</i> field gives the
total number of words in the command.
</p>
<p>All parsing procedures set the remaining fields,
<i>tokenPtr</i> and <i>numTokens</i>.
The <i>tokenPtr</i> field points to the first in an array of Tcl_Token
structures that describe the components of the entity being parsed.
The <i>numTokens</i> field gives the total number of tokens
present in the array.
Each token contains four fields.
The <i>type</i> field selects one of several token types
that are described below.  The <i>start</i> field
points to the first character in the token and the <i>size</i> field
gives the total number of characters in the token.  Some token types,
such as <b>TCL_TOKEN_WORD</b> and <b>TCL_TOKEN_VARIABLE</b>, consist of
several component tokens, which immediately follow the parent token;
the <i>numComponents</i> field describes how many of these there are.
The <i>type</i> field has one of the following values:
</p>
<dl>
<dle>
<dt><b>TCL_TOKEN_WORD</b></dt>
<dd>This token ordinarily describes one word of a command
but it may also describe a quoted or braced string in an expression.
The token describes a component of the script that is
the result of concatenating together a sequence of subcomponents,
each described by a separate subtoken.
The token starts with the first non-blank
character of the component (which may be a double-quote or open brace)
and includes all characters in the component up to but not including the
space, semicolon, close bracket, close quote, or close brace that
terminates the component.  The <i>numComponents</i> field counts the total
number of sub-tokens that make up the word, including sub-tokens
of <b>TCL_TOKEN_VARIABLE</b> and <b>TCL_TOKEN_BS</b> tokens.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_SIMPLE_WORD</b></dt>
<dd>This token has the same meaning as <b>TCL_TOKEN_WORD</b>, except that
the word is guaranteed to consist of a single <b>TCL_TOKEN_TEXT</b>
sub-token.  The <i>numComponents</i> field is always 1.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_TEXT</b></dt>
<dd>The token describes a range of literal text that is part of a word.
The <i>numComponents</i> field is always 0.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_BS</b></dt>
<dd>The token describes a backslash sequence such as <b>\n</b> or <b>\0xa3</b>.
The <i>numComponents</i> field is always 0.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_COMMAND</b></dt>
<dd>The token describes a command whose result result must be substituted into
the word.  The token includes the square brackets that surround the
command.  The <i>numComponents</i> field is always 0 (the nested command
is not parsed; call <fun>Tcl_ParseCommand</fun> recursively if you want to
see its tokens).
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_VARIABLE</b></dt>
<dd>The token describes a variable substitution, including the
<b>$</b>, variable name, and array index (if there is one) up through the
close parenthesis that terminates the index.  This token is followed
by one or more additional tokens that describe the variable name and
array index.  If <i>numComponents</i>  is 1 then the variable is a
scalar and the next token is a <b>TCL_TOKEN_TEXT</b> token that gives the
variable name.  If <i>numComponents</i> is greater than 1 then the
variable is an array: the first sub-token is a <b>TCL_TOKEN_TEXT</b>
token giving the array name and the remaining sub-tokens are
<b>TCL_TOKEN_TEXT</b>, <b>TCL_TOKEN_BS</b>, <b>TCL_TOKEN_COMMAND</b>, and
<b>TCL_TOKEN_VARIABLE</b> tokens that must be concatenated to produce the
array index. The <i>numComponents</i> field includes nested sub-tokens
that are part of <b>TCL_TOKEN_VARIABLE</b> tokens in the array index.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_SUB_EXPR</b></dt>
<dd>The token describes one subexpression of an expression
(or an entire expression).
A subexpression may consist of a value
such as an integer literal, variable substitution,
or parenthesized subexpression;
it may also consist of an operator and its operands.
The token starts with the first non-blank character of the subexpression
up to but not including the space, brace, close-paren, or bracket
that terminates the subexpression.
This token is followed by one or more additional tokens
that describe the subexpression.
If the first sub-token after the <b>TCL_TOKEN_SUB_EXPR</b> token
is a <b>TCL_TOKEN_OPERATOR</b> token,
the subexpression consists of an operator and its token operands.
If the operator has no operands, the subexpression consists of
just the <b>TCL_TOKEN_OPERATOR</b> token.
Each operand is described by a <b>TCL_TOKEN_SUB_EXPR</b> token.
Otherwise, the subexpression is a value described by
one of the token types <b>TCL_TOKEN_WORD</b>, <b>TCL_TOKEN_TEXT</b>,
<b>TCL_TOKEN_BS</b>, <b>TCL_TOKEN_COMMAND</b>, 
<b>TCL_TOKEN_VARIABLE</b>, and <b>TCL_TOKEN_SUB_EXPR</b>.
The <i>numComponents</i> field
counts the total number of sub-tokens that make up the subexpression;
this includes the sub-tokens for any nested <b>TCL_TOKEN_SUB_EXPR</b> tokens.
</dd>
</dle>
<dle>
<dt><b>TCL_TOKEN_OPERATOR</b></dt>
<dd>The token describes one operator of an expression
such as <b>&amp;&amp;</b> or <b cat="mathfunc">hypot</b>.
An <b>TCL_TOKEN_OPERATOR</b> token is always preceded by a
<b>TCL_TOKEN_SUB_EXPR</b> token
that describes the operator and its operands;
the <b>TCL_TOKEN_SUB_EXPR</b> token's <i>numComponents</i> field
can be used to determine the number of operands.
A binary operator such as <b>*</b>
is followed by two <b>TCL_TOKEN_SUB_EXPR</b> tokens
that describe its operands.
A unary operator like <b>-</b>
is followed by a single <b>TCL_TOKEN_SUB_EXPR</b> token
for its operand.
If the operator is a math function such as <b cat="mathfunc">log10</b>,
the <b>TCL_TOKEN_OPERATOR</b> token will give its name and
the following <b>TCL_TOKEN_SUB_EXPR</b> tokens will describe
its operands;
if there are no operands (as with <b cat="mathfunc">rand</b>),
no <b>TCL_TOKEN_SUB_EXPR</b> tokens follow.
There is one trinary operator, <b>?</b>,
that appears in if-then-else subexpressions
such as <i>x</i><b>?</b><i>y</i><b>:</b><i>z</i>;
in this case, the <b>?</b> <b>TCL_TOKEN_OPERATOR</b> token
is followed by three <b>TCL_TOKEN_SUB_EXPR</b> tokens for the operands
<i>x</i>, <i>y</i>, and <i>z</i>.
The <i>numComponents</i> field for a <b>TCL_TOKEN_OPERATOR</b> token
is always 0.
</dd>
</dle>
</dl>
<p>After <fun>Tcl_ParseCommand</fun> returns, the first token pointed to by
the <i>tokenPtr</i> field of the
Tcl_Parse structure always has type <b>TCL_TOKEN_WORD</b> or
<b>TCL_TOKEN_SIMPLE_WORD</b>.  It is followed by the sub-tokens
that must be concatenated to produce the value of that word.
The next token is the <b>TCL_TOKEN_WORD</b> or <b>TCL_TOKEN_SIMPLE_WORD</b>
token for the second word, followed by sub-tokens for that
word, and so on until all <i>numWords</i> have been accounted
for.
</p>
<p>After <fun>Tcl_ParseExpr</fun> returns, the first token pointed to by
the <i>tokenPtr</i> field of the
Tcl_Parse structure always has type <b>TCL_TOKEN_SUB_EXPR</b>.
It is followed by the sub-tokens that must be evaluated
to produce the value of the expression.
Only the token information in the Tcl_Parse structure
is modified: the <i>commentStart</i>, <i>commentSize</i>,
<i>commandStart</i>, and <i>commandSize</i> fields are not modified
by <fun>Tcl_ParseExpr</fun>.
</p>
<p>After <fun>Tcl_ParseBraces</fun> returns,
the array of tokens pointed to by the <i>tokenPtr</i> field of the
Tcl_Parse structure will contain a single <b>TCL_TOKEN_TEXT</b> token
if the braced string does not contain any backslash-newlines.
If the string does contain backslash-newlines,
the array of tokens will contain one or more
<b>TCL_TOKEN_TEXT</b> or <b>TCL_TOKEN_BS</b> sub-tokens
that must be concatenated to produce the value of the string.
If the braced string was just <b>{}</b>
(that is, the string was empty),
the single <b>TCL_TOKEN_TEXT</b> token will have a <i>size</i> field
containing zero;
this ensures that at least one token appears
to describe the braced string.
Only the token information in the Tcl_Parse structure
is modified: the <i>commentStart</i>, <i>commentSize</i>,
<i>commandStart</i>, and <i>commandSize</i> fields are not modified
by <fun>Tcl_ParseBraces</fun>.
</p>
<p>After <fun>Tcl_ParseQuotedString</fun> returns,
the array of tokens pointed to by the <i>tokenPtr</i> field of the
Tcl_Parse structure depends on the contents of the quoted string.
It will consist of one or more <b>TCL_TOKEN_TEXT</b>, <b>TCL_TOKEN_BS</b>,
<b>TCL_TOKEN_COMMAND</b>, and <b>TCL_TOKEN_VARIABLE</b> sub-tokens.
The array always contains at least one token;
for example, if the argument <i>string</i> is empty,
the array returned consists of a single <b>TCL_TOKEN_TEXT</b> token
with a zero <i>size</i> field.
Only the token information in the Tcl_Parse structure
is modified: the <i>commentStart</i>, <i>commentSize</i>,
<i>commandStart</i>, and <i>commandSize</i> fields are not modified.
</p>
<p>After <fun>Tcl_ParseVarName</fun> returns, the first token pointed to by
the <i>tokenPtr</i> field of the
Tcl_Parse structure always has type <b>TCL_TOKEN_VARIABLE</b>.  It
is followed by the sub-tokens that make up the variable name as
described above.  The total length of the variable name is
contained in the <i>size</i> field of the first token.
As in <fun>Tcl_ParseExpr</fun>,
only the token information in the Tcl_Parse structure
is modified by <fun>Tcl_ParseVarName</fun>:
the <i>commentStart</i>, <i>commentSize</i>,
<i>commandStart</i>, and <i>commandSize</i> fields are not modified.
</p>
<p>All of the character pointers in the
Tcl_Parse and Tcl_Token structures refer
to characters in the <i>string</i> argument passed to
<fun>Tcl_ParseCommand</fun>, <fun>Tcl_ParseExpr</fun>, <fun>Tcl_ParseBraces</fun>,
<fun>Tcl_ParseQuotedString</fun>, and <fun>Tcl_ParseVarName</fun>.
</p>
<p>There are additional fields in the Tcl_Parse structure after the
<i>numTokens</i> field, but these are for the private use of
<fun>Tcl_ParseCommand</fun>, <fun>Tcl_ParseExpr</fun>, <fun>Tcl_ParseBraces</fun>,
<fun>Tcl_ParseQuotedString</fun>, and <fun>Tcl_ParseVarName</fun>; they should not be
referenced by code outside of these procedures.

</p>
</section>
<keywords>
<keyword>backslash substitution</keyword>
<keyword>braces</keyword>
<keyword>command</keyword>
<keyword>expression</keyword>
<keyword>parse</keyword>
<keyword>token</keyword>
<keyword>variable substitution</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="photo" version="4.0" title="photo">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Australian National University
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     Author: Paul Mackerras (paulus@cs.anu.edu.au),
    	    Department of Computer Science,
    	    Australian National University.
    
     RCS: @(#) $Id: photo.n,v 1.19 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="photo" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>photo</name>
<desc>Full-color images</desc>
</namesection>
<synopsis>
<syntax>
<b>image create photo</b> ?<m>name</m>? ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A photo is an image whose pixels can display any color or be
transparent.  A photo image is stored internally in full color (32
bits per pixel), and is displayed using dithering if necessary.  Image
data for a photo image can be obtained from a file or a string, or it
can be supplied from
C code through a procedural interface.  At present, only GIF and PPM/PGM
formats are supported, but an interface exists to allow additional
image file formats to be added easily.  A photo image is transparent
in regions where no image data has been supplied
or where it has been set transparent by the <b>transparency set</b>
subcommand.
</p>
</section>
<section>
<title>CREATING PHOTOS</title>
<p>Like all images, photos are created using the <b>image create</b>
command.
Photos support the following <i>options</i>:
</p>
<dl>
<dle>
<dt><b>-data</b> <m>string</m></dt>
<dd>Specifies the contents of the image as a string.  The string can
contain base64 encoded data or binary data.  The format of the
string must be one of those for which there is an image file format
handler that will accept string data.  If both the <b>-data</b>
and <b>-file</b> options are specified, the <b>-file</b> option takes
precedence.
</dd>
</dle>
<dle>
<dt><b>-format</b> <m>format-name</m></dt>
<dd>Specifies the name of the file format for the data specified with the
<b>-data</b> or <b>-file</b> option.
</dd>
</dle>
<dle>
<dt><b>-file</b> <m>name</m></dt>
<dd><i>name</i> gives the name of a file that is to be read to supply data
for the photo image.  The file format must be one of those for which
there is an image file format handler that can read data.
</dd>
</dle>
<dle>
<dt><b>-gamma</b> <m>value</m></dt>
<dd>Specifies that the colors allocated for displaying this image in a
window should be corrected for a non-linear display with the specified
gamma exponent value.  (The intensity produced by most
CRT displays is a power function of the input value, to a good
approximation; gamma is the exponent and is typically around 2).
The value specified must be greater than zero.  The default
value is one (no correction).  In general, values greater than one
will make the image lighter, and values less than one will make it
darker.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>number</m></dt>
<dd>Specifies the height of the image, in pixels.  This option is useful
primarily in situations where the user wishes to build up the contents
of the image piece by piece.  A value of zero (the default) allows the
image to expand or shrink vertically to fit the data stored in it.
</dd>
</dle>
<dle>
<dt><b>-palette</b> <m>palette-spec</m></dt>
<dd>Specifies the resolution of the color cube to be allocated for
displaying this image, and thus the number of colors used from the
colormaps of the windows where it is displayed.  The
<i>palette-spec</i> string may be either a single decimal number,
specifying the number of shades of gray to use, or three decimal
numbers separated by slashes (/), specifying the number of shades of
red, green and blue to use, respectively.  If the first form (a single
number) is used, the image will be displayed in monochrome (i.e.,
grayscale).
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>number</m></dt>
<dd>Specifies the width of the image, in pixels.    This option is useful
primarily in situations where the user wishes to build up the contents
of the image piece by piece.  A value of zero (the default) allows the
image to expand or shrink horizontally to fit the data stored in it.
</dd>
</dle>
</dl>
</section>
<section>
<title>IMAGE COMMAND</title>
<p>When a photo image is created, Tk also creates a new command
whose name is the same as the image.
This command may be used to invoke various operations
on the image.
It has the following general form:
</p>
<example>
<i>imageName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.
</p>
<p>Those options that write data to the image generally expand the size
of the image, if necessary, to accommodate the data written to the
image, unless the user has specified non-zero values for the
<b>-width</b> and/or <b>-height</b> configuration options, in which
case the width and/or height, respectively, of the image will not be
changed.
</p>
<p>The following commands are possible for photo images:
</p>
<dl>
<dle>
<dt><m>imageName</m> <b>blank</b></dt>
<dd>Blank the image; that is, set the entire image to have no data, so it
will be displayed as transparent, and the background of whatever
window it is displayed in will show through.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the
<b>image create photo</b> command.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options for the image.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>imageName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the
<b>image create photo</b> command.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>copy</b> <m>sourceImage</m> ?<m>option value(s) ...</m>?</dt>
<dd>Copies a region from the image called <i>sourceImage</i> (which must
be a photo image) to the image called <i>imageName</i>, possibly with
pixel zooming and/or subsampling.  If no options are specified, this
command copies the whole of <i>sourceImage</i> into <i>imageName</i>,
starting at coordinates (0,0) in <i>imageName</i>.  The following
options may be specified:
<dl>
<dle>
<dt><b>-from</b> <m>x1 y1 x2 y2</m></dt>
<dd>Specifies a rectangular sub-region of the source image to be copied.
(<i>x1,y1</i>) and (<i>x2,y2</i>) specify diagonally opposite corners of
the rectangle.  If <i>x2</i> and <i>y2</i> are not specified, the
default value is the bottom-right corner of the source image.  The
pixels copied will include the left and top edges of the specified
rectangle but not the bottom or right edges.  If the <b>-from</b>
option is not given, the default is the whole source image.
</dd>
</dle>
<dle>
<dt><b>-to</b> <m>x1 y1 x2 y2</m></dt>
<dd>Specifies a rectangular sub-region of the destination image to be
affected.  (<i>x1,y1</i>) and (<i>x2,y2</i>) specify diagonally opposite
corners of the rectangle.  If <i>x2</i> and <i>y2</i> are not specified,
the default value is (<i>x1,y1</i>) plus the size of the source
region (after subsampling and zooming, if specified).  If <i>x2</i> and
<i>y2</i> are specified, the source region will be replicated if
necessary to fill the destination region in a tiled fashion.
</dd>
</dle>
<dle>
<dt><b>-shrink</b></dt>
<dd>Specifies that the size of the destination image should be reduced, if
necessary, so that the region being copied into is at the bottom-right
corner of the image.  This option will not affect the width or height
of the image if the user has specified a non-zero value for the
<b>-width</b> or <b>-height</b> configuration option, respectively.
</dd>
</dle>
<dle>
<dt><b>-zoom</b> <m>x y</m></dt>
<dd>Specifies that the source region should be magnified by a factor of
<i>x</i> in the X direction and <i>y</i> in the Y direction.  If <i>y</i>
is not given, the default value is the same as <i>x</i>.  With this
option, each pixel in the source image will be expanded into a block
of <i>x</i> x <i>y</i> pixels in the destination image, all the same
color.  <i>x</i> and <i>y</i> must be greater than 0.
</dd>
</dle>
<dle>
<dt><b>-subsample</b> <m>x y</m></dt>
<dd>Specifies that the source image should be reduced in size by using
only every <i>x</i>th pixel in the X direction and <i>y</i>th pixel in
the Y direction.  Negative values will cause the image to be flipped
about the Y or X axes, respectively.  If <i>y</i> is not given, the
default value is the same as <i>x</i>.
</dd>
</dle>
<dle>
<dt><b>-compositingrule</b> <m>rule</m></dt>
<dd>Specifies how transparent pixels in the source image are combined with
the destination image.  When a compositing rule of <i>overlay</i> is
set, the old contents of the destination image are visible, as if the
source image were printed on a piece of transparent film and placed
over the top of the destination.  When a compositing rule of <i>set</i>
is set, the old contents of the destination image are discarded and
the source image is used as-is.  The default compositing rule is
<i>overlay</i>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>imageName</m> <b>data ?</b><m>option value(s) ...</m>?</dt>
<dd>Returns image data in the form of a string. The following options
may be specified:
<dl>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd>If the color is specified, the data will not contain any transparency
information. In all transparent pixels the color will be replaced by
the specified color.
</dd>
</dle>
<dle>
<dt><b>-format</b> <m>format-name</m></dt>
<dd>Specifies the name of the image file format handler to be used.
Specifically, this subcommand searches
for the first handler whose name matches an initial substring of
<i>format-name</i> and which has the capability to read this image data.
If this option is not given, this subcommand uses the first
handler that has the capability to read the image data.
</dd>
</dle>
<dle>
<dt><b>-from</b> <m>x1 y1 x2 y2</m></dt>
<dd>Specifies a rectangular region of <i>imageName</i> to be returned.
If only <i>x1</i> and <i>y1</i> are specified, the region
extends from <i>(x1,y1)</i> to the bottom-right corner of
<i>imageName</i>.  If all four coordinates are given, they specify
diagonally opposite corners of the rectangular region, including x1,y1
and excluding x2,y2.  The default, if this option is not given, is the
whole image.
</dd>
</dle>
<dle>
<dt><b>-grayscale</b></dt>
<dd>If this options is specified, the data will not contain color
information. All pixel data will be transformed into grayscale.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>imageName</m> <b>get</b> <m>x y</m></dt>
<dd>Returns the color of the pixel at coordinates (<i>x</i>,<i>y</i>) in the
image as a list of three integers between 0 and 255, representing the
red, green and blue components respectively.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>put</b> <m>data</m> ?<m>option value(s) ...</m>?</dt>
<dd>Sets pixels in  <i>imageName</i> to the data specified in <i>data</i>.
This command first searches the list of image file format handlers for
a handler that can interpret the data in <i>data</i>, and then reads
the image encoded within into <i>imageName</i> (the destination image).
If <i>data</i> does not match any known format, an attempt to interpret
it as a (top-to-bottom) list of scan-lines is made, with each
scan-line being a (left-to-right) list of pixel colors (see
<fun>Tk_GetColor</fun> for a description of valid colors.)  Every scan-line
must be of the same length.  Note that when <i>data</i> is a single
color name, you are instructing Tk to fill a rectangular region with
that color.  The following options may be specified:
<dl>
<dle>
<dt><b>-format</b> <m>format-name</m></dt>
<dd>Specifies the format of the image data in <i>data</i>.
Specifically, only image file format handlers whose names begin with
<i>format-name</i> will be used while searching for an image data
format handler to read the data.
</dd>
</dle>
<dle>
<dt><b>-to</b> <m>x1 y1</m> ?<m>x2 y2</m>?</dt>
<dd>Specifies the coordinates of the top-left corner (<i>x1</i>,<i>y1</i>)
of the region of <i>imageName</i> into which data from <i>filename</i>
are to be read.  The default is (0,0).  If <i>x2</i>,<i>y2</i> is given
and <i>data</i> is not large enough to cover the rectangle specified by
this option, the image data extracted will be tiled so it covers the
entire destination rectangle.  Note that if <i>data</i> specifies a
single color value, then a region extending to the bottom-right corner
represented by (<i>x2</i>,<i>y2</i>) will be filled with that color.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>imageName</m> <b>read</b> <m>filename</m> ?<m>option value(s) ...</m>?</dt>
<dd>Reads image data from the file named <i>filename</i> into the image.
This command first searches the list of
image file format handlers for a handler that can interpret the data
in <i>filename</i>, and then reads the image in <i>filename</i> into
<i>imageName</i> (the destination image).  The following options may be
specified:
<dl>
<dle>
<dt><b>-format</b> <m>format-name</m></dt>
<dd>Specifies the format of the image data in <i>filename</i>.
Specifically, only image file format handlers whose names begin with
<i>format-name</i> will be used while searching for an image data
format handler to read the data.
</dd>
</dle>
<dle>
<dt><b>-from</b> <m>x1 y1 x2 y2</m></dt>
<dd>Specifies a rectangular sub-region of the image file data to be copied
to the destination image.  If only <i>x1</i> and <i>y1</i> are
specified, the region extends from (<i>x1,y1</i>) to the bottom-right
corner of the image in the image file.  If all four coordinates are
specified, they specify diagonally opposite corners or the region.
The default, if this option is not specified, is the whole of the
image in the image file.
</dd>
</dle>
<dle>
<dt><b>-shrink</b></dt>
<dd>If this option, the size of <i>imageName</i> will be reduced, if
necessary, so that the region into which the image file data are read
is at the bottom-right corner of the <i>imageName</i>.  This option
will not affect the width or height of the image if the user has
specified a non-zero value for the <b>-width</b> or <b>-height</b>
configuration option, respectively.
</dd>
</dle>
<dle>
<dt><b>-to</b> <m>x y</m></dt>
<dd>Specifies the coordinates of the top-left corner of the region of
<i>imageName</i> into which data from <i>filename</i> are to be read.
The default is (0,0).
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>imageName</m> <b>redither</b></dt>
<dd>The dithering algorithm used in displaying photo images propagates
quantization errors from one pixel to its neighbors.
If the image data for <i>imageName</i> is supplied in pieces, the
dithered image may not be exactly correct.  Normally the difference is
not noticeable, but if it is a problem, this command can be used to
recalculate the dithered image in each window where the image is
displayed.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>transparency</b> <m>subcommand ?arg arg ...?</m></dt>
<dd>Allows examination and manipulation of the transparency information in
the photo image.  Several subcommands are available:
<dl>
<dle>
<dt><m>imageName</m> <b>transparency get</b> <m>x y</m></dt>
<dd>Returns a boolean indicating if the pixel at (<i>x</i>,<i>y</i>) is
transparent.
</dd>
</dle>
<dle>
<dt><m>imageName</m> <b>transparency set</b> <m>x y boolean</m></dt>
<dd>Makes the pixel at (<i>x</i>,<i>y</i>) transparent if <i>boolean</i> is
true, and makes that pixel opaque otherwise.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>imageName</m> <b>write</b> <m>filename</m> ?<m>option value(s) ...</m>?</dt>
<dd>Writes image data from <i>imageName</i> to a file named <i>filename</i>.
The following options may be specified:
<dl>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd>If the color is specified, the data will not contain any transparency
information. In all transparent pixels the color will be replaced by
the specified color.
</dd>
</dle>
<dle>
<dt><b>-format</b> <m>format-name</m></dt>
<dd>Specifies the name of the image file format handler to be used to
write the data to the file.  Specifically, this subcommand searches
for the first handler whose name matches an initial substring of
<i>format-name</i> and which has the capability to write an image
file.  If this option is not given, this subcommand uses the first
handler that has the capability to write an image file.
</dd>
</dle>
<dle>
<dt><b>-from</b> <m>x1 y1 x2 y2</m></dt>
<dd>Specifies a rectangular region of <i>imageName</i> to be written to the
image file.  If only <i>x1</i> and <i>y1</i> are specified, the region
extends from <i>(x1,y1)</i> to the bottom-right corner of
<i>imageName</i>.  If all four coordinates are given, they specify
diagonally opposite corners of the rectangular region.  The default,
if this option is not given, is the whole image.
</dd>
</dle>
<dle>
<dt><b>-grayscale</b></dt>
<dd>If this options is specified, the data will not contain color
information. All pixel data will be transformed into grayscale.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>IMAGE FORMATS</title>
<p>The photo image code is structured to allow handlers for additional
image file formats to be added easily.  The photo image code maintains
a list of these handlers.  Handlers are added to the list by
registering them with a call to <fun>Tk_CreatePhotoImageFormat</fun>.  The
standard Tk distribution comes with handlers for PPM/PGM and GIF formats,
which are automatically registered on initialization.
</p>
<p>When reading an image file or processing
string data specified with the <b>-data</b> configuration option, the
photo image code invokes each handler in turn until one is
found that claims to be able to read the data in the file or string.
Usually this will find the correct handler, but if it doesn't, the
user may give a format name with the <b>-format</b> option to specify
which handler to use.  In fact the photo image code will try those
handlers whose names begin with the string specified for the
<b>-format</b> option (the comparison is case-insensitive).  For
example, if the user specifies <b>-format gif</b>, then a handler
named GIF87 or GIF89 may be invoked, but a handler
named JPEG may not (assuming that such handlers had been
registered).
</p>
<p>When writing image data to a file, the processing of the
<b>-format</b> option is slightly different: the string value given
for the <b>-format</b> option must begin with the complete name of the
requested handler, and may contain additional information following
that, which the handler can use, for example, to specify which variant
to use of the formats supported by the handler.
Note that not all image handlers may support writing transparency data
to a file, even where the target image format does.
</p>
</section>
<section>
<title>COLOR ALLOCATION</title>
<p>When a photo image is displayed in a window, the photo image code
allocates colors to use to display the image and dithers the image, if
necessary, to display a reasonable approximation to the image using
the colors that are available.  The colors are allocated as a color
cube, that is, the number of colors allocated is the product of the
number of shades of red, green and blue.
</p>
<p>Normally, the number of
colors allocated is chosen based on the depth of the window.  For
example, in an 8-bit PseudoColor window, the photo image code will
attempt to allocate seven shades of red, seven shades of green and
four shades of blue, for a total of 198 colors.  In a 1-bit StaticGray
(monochrome) window, it will allocate two colors, black and white.  In
a 24-bit DirectColor or TrueColor window, it will allocate 256 shades
each of red, green and blue.  Fortunately, because of the way that
pixel values can be combined in DirectColor and TrueColor windows,
this only requires 256 colors to be allocated.  If not all of the
colors can be allocated, the photo image code reduces the number of
shades of each primary color and tries again.
</p>
<p>The user can exercise some control over the number of colors that a
photo image uses with the <b>-palette</b> configuration option.  If
this option is used, it specifies the maximum number of shades of
each primary color to try to allocate.  It can also be used to force
the image to be displayed in shades of gray, even on a color display,
by giving a single number rather than three numbers separated by
slashes.
</p>
</section>
<section>
<title>CREDITS</title>
<p>The photo image type was designed and implemented by Paul Mackerras,
based on his earlier photo widget and some suggestions from
John Ousterhout.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Load an image from a file and tile it to the size of a window, which
is useful for producing a tiled background:
</p>
<example>
# These lines should be called once
<b>image create photo</b> untiled -file "theFile.ppm"
<b>image create photo</b> tiled

# These lines should be called whenever .someWidget changes
# size; a &lt;Configure&gt; binding is useful here
set width  [winfo width .someWidget]
set height [winfo height .someWidget]
tiled <b>copy</b> untiled -to 0 0 $width $height -shrink
</example>


</section>
<seealso>
<ref>image(n)</ref>
</seealso>
<section>
<title>SEE ALSO</title>
<p>image(n), bitmap(n)

</p>
</section>
<keywords>
<keyword>photo</keyword>
<keyword>image</keyword>
<keyword>color</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="pid" title="pid" version="7.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: pid.n,v 1.6 2004/10/27 14:24:37 dkf Exp $
 -->
<?TROFF.TH title="pid" section="n" date="7.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>pid</name>
<desc>Retrieve process identifiers</desc>
</namesection>
<synopsis>
<syntax>
<cmd>pid</cmd> ?<m>fileId</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>If the <i>fileId</i> argument is given then it should normally
refer to a process pipeline created with the <b cat="AMBIGUOUS ambiguous cmd">open</b> command.
In this case the <cmd>pid</cmd> command will return a list whose elements
are the process identifiers of all the processes in the pipeline,
in order.
The list will be empty if <i>fileId</i> refers to an open file
that isn't a process pipeline.
If no <i>fileId</i> argument is given then <cmd>pid</cmd> returns the process
identifier of the current process.
All process identifiers are returned as decimal strings.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Print process information about the processes in a pipeline using the
SysV <b>ps</b> program before reading the output of that pipeline:
</p>
<example>
set pipeline [open "| zcat somefile.gz | grep foobar | sort -u"]
# Print process information
exec ps -fp [<cmd>pid</cmd> $pipeline] &gt;@stdout
# Print a separator and then the output of the pipeline
puts [string repeat - 70]
puts [read $pipeline]
close $pipeline
</example>


</section>
<seealso>
<ref>exec(n)</ref>
<ref>open(n)</ref>
</seealso>
<keywords>
<keyword>file</keyword>
<keyword>pipeline</keyword>
<keyword>process identifier</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="pkgMkIndex" version="8.3" title="pkg_mkIndex">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: pkgMkIndex.n,v 1.18 2006/11/15 09:23:02 dkf Exp $
 -->
<?TROFF.TH title="pkg_mkIndex" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>pkg_mkIndex</name>
<desc>Build an index for automatic loading of packages</desc>
</namesection>
<synopsis>
<syntax>
<b>pkg_mkIndex ?</b><m>-direct</m>?  ?<m>-lazy</m>?  ?<m>-load pkgPat</m>? ?<m>-verbose</m>? <m>dir</m> ?<m>pattern pattern ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>Pkg_mkIndex</b> is a utility procedure that is part of the standard
Tcl library.
It is used to create index files that allow packages to be loaded
automatically when <b>package require</b> commands are executed.
To use <cmd>pkg_mkIndex</cmd>, follow these steps:
</p>
<ol>
<li>Create the package(s).
Each package may consist of one or more Tcl script files or binary files.
Binary files must be suitable for loading with the <b cat="AMBIGUOUS ambiguous cmd">load</b> command
with a single argument;  for example, if the file is <b>test.so</b> it must
be possible to load this file with the command <b>load test.so</b>.
Each script file must contain a <b>package provide</b> command to declare
the package and version number, and each binary file must contain
a call to <fun>Tcl_PkgProvide</fun>.
</li>
<li>Create the index by invoking <cmd>pkg_mkIndex</cmd>.
The <i>dir</i> argument gives the name of a directory and each
<i>pattern</i> argument is a <cmd>glob</cmd>-style pattern that selects
script or binary files in <i>dir</i>.
The default pattern is <b>*.tcl</b> and <b>*.[info sharedlibextension]</b>.
<p><b>Pkg_mkIndex</b> will create a file <b>pkgIndex.tcl</b> in <i>dir</i>
with package information about all the files given by the <i>pattern</i>
arguments.
It does this by loading each file into a slave
interpreter and seeing what packages
and new commands appear (this is why it is essential to have
<b>package provide</b> commands or <fun>Tcl_PkgProvide</fun> calls
in the files, as described above).
If you have a package split among scripts and binary files, 
or if you have dependencies among files,
you may have to use the <b>-load</b> option
or adjust the order in which <cmd>pkg_mkIndex</cmd> processes
the files.  See <ref refid="complex-cases">COMPLEX CASES</ref> below.

</p></li>
<li>Install the package as a subdirectory of one of the directories given by
the <b cat="variable">tcl_pkgPath</b> variable.  If <b>$tcl_pkgPath</b> contains more
than one directory, machine-dependent packages (e.g., those that
contain binary shared libraries) should normally be installed
under the first directory and machine-independent packages (e.g.,
those that contain only Tcl scripts) should be installed under the
second directory.
The subdirectory should include
the package's script and/or binary files as well as the <b>pkgIndex.tcl</b>
file.  As long as the package is installed as a subdirectory of a
directory in <b>$tcl_pkgPath</b> it will automatically be found during
<b>package require</b> commands.
<p>If you install the package anywhere else, then you must ensure that
the directory containing the package is in the <b>auto_path</b> global variable
or an immediate subdirectory of one of the directories in <b>auto_path</b>.
<b>Auto_path</b> contains a list of directories that are searched
by both the auto-loader and the package loader; by default it
includes <b>$tcl_pkgPath</b>.
The package loader also checks all of the subdirectories of the
directories in <b>auto_path</b>.
You can add a directory to <b>auto_path</b> explicitly in your
application, or you can add the directory to your <b>TCLLIBPATH</b>
environment variable:  if this environment variable is present,
Tcl initializes <b>auto_path</b> from it during application startup.
</p></li>
<li>Once the above steps have been taken, all you need to do to use a
package is to invoke <b>package require</b>.
For example, if versions 2.1, 2.3, and 3.1 of package <b>Test</b>
have been indexed by <cmd>pkg_mkIndex</cmd>, the command
<b>package require Test</b> will make version 3.1 available
and the command <b>package require -exact Test 2.1</b> will
make version 2.1 available.
There may be many versions of a package in the various index files
in <b>auto_path</b>, but only one will actually be loaded in a given
interpreter, based on the first call to <b>package require</b>.
Different versions of a package may be loaded in different
interpreters.

</li>
</ol>
</section>
<section>
<title>OPTIONS</title>
<p>The optional switches are:
</p>
<dl>
<dle>
<dt><b>-direct</b></dt>
<dd>The generated index will implement direct loading of the package
upon <b>package require</b>.  This is the default.
</dd>
</dle>
<dle>
<dt><b>-lazy</b></dt>
<dd>The generated index will manage to delay loading the package until the
use of one of the commands provided by the package, instead of loading
it immediately upon <b>package require</b>.  This is not compatible with
the use of <i>auto_reset</i>, and therefore its use is discouraged.
</dd>
</dle>
<dle>
<dt><b>-load</b> <m>pkgPat</m></dt>
<dd>The index process will pre-load any packages that exist in the
current interpreter and match <i>pkgPat</i> into the slave interpreter used to
generate the index.  The pattern match uses string match rules, but without
making case distinctions.
See <ref refid="complex-cases">COMPLEX CASES</ref> below.
</dd>
</dle>
<dle>
<dt><b>-verbose</b></dt>
<dd>Generate output during the indexing process.  Output is via
the <cmd>tclLog</cmd> procedure, which by default prints to stderr.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>End of the flags, in case <i>dir</i> begins with a dash.

</dd>
</dle>
</dl>
</section>
<section>
<title>PACKAGES AND THE AUTO-LOADER</title>
<p>The package management facilities overlap somewhat with the auto-loader,
in that both arrange for files to be loaded on-demand.
However, package management is a higher-level mechanism that uses
the auto-loader for the last step in the loading process.
It is generally better to index a package with <cmd>pkg_mkIndex</cmd>
rather than <cmd>auto_mkindex</cmd> because the package mechanism provides
version control:  several versions of a package can be made available
in the index files, with different applications using different
versions based on <b>package require</b> commands.
In contrast, <cmd>auto_mkindex</cmd> does not understand versions so
it can only handle a single version of each package. 
It is probably not a good idea to index a given package with both
<cmd>pkg_mkIndex</cmd> and <cmd>auto_mkindex</cmd>.
If you use <cmd>pkg_mkIndex</cmd> to index a package, its commands cannot
be invoked until <b>package require</b> has been used to select a
version;  in contrast, packages indexed with <cmd>auto_mkindex</cmd>
can be used immediately since there is no version control.

</p>
</section>
<section>
<title>HOW IT WORKS</title>
<p><b>Pkg_mkIndex</b> depends on the <b>package unknown</b> command,
the <b>package ifneeded</b> command, and the auto-loader.
The first time a <b>package require</b> command is invoked,
the <b>package unknown</b> script is invoked.
This is set by Tcl initialization to a script that
evaluates all of the <b>pkgIndex.tcl</b> files in the
<b>auto_path</b>.
The <b>pkgIndex.tcl</b> files contain <b>package ifneeded</b>
commands for each version of each available package;  these commands
invoke <b>package provide</b> commands to announce the
availability of the package, and they setup auto-loader
information to load the files of the package.
If the <i>-lazy</i> flag was provided when the <b>pkgIndex.tcl</b>
was generated,
a given file of a given version of a given package isn't
actually loaded until the first time one of its commands
is invoked.
Thus, after invoking <b>package require</b> you may
not see the package's commands in the interpreter, but you will be able
to invoke the commands and they will be auto-loaded.

</p>
</section>
<section>
<title>DIRECT LOADING</title>
<p>Some packages, for instance packages which use namespaces and export
commands or those which require special initialization, might select
that their package files be loaded immediately upon <b>package require</b>
instead of delaying the actual loading to the first use of one of the
package's command. This is the default mode when generating the package
index.  It can be overridden by specifying the <i>-lazy</i> argument.

</p>
</section>
<section id="complex-cases">
<title>COMPLEX CASES</title>
<p>Most complex cases of dependencies among scripts
and binary files, and packages being split among scripts and
binary files are handled OK.  However, you may have to adjust
the order in which files are processed by <cmd>pkg_mkIndex</cmd>.
These issues are described in detail below.
</p>
<p>If each script or file contains one package, and packages
are only contained in one file, then things are easy.
You simply specify all files to be indexed in any order
with some glob patterns.
</p>
<p>In general, it is OK for scripts to have dependencies on other
packages.
If scripts contain <b>package require</b> commands, these are
stubbed out in the interpreter used to process the scripts,
so these do not cause problems.
If scripts call into other packages in global code,
these calls are handled by a stub <b cat="AMBIGUOUS ambiguous cmd">unknown</b> command.
However, if scripts make variable references to other package's
variables in global code, these will cause errors.  That is
also bad coding style.
</p>
<p>If binary files have dependencies on other packages, things
can become tricky because it is not possible to stub out
C-level APIs such as <fun>Tcl_PkgRequire</fun> API
when loading a binary file.
For example, suppose the BLT package requires Tk, and expresses
this with a call to <fun>Tcl_PkgRequire</fun> in its <b>Blt_Init</b> routine.
To support this, you must run <cmd>pkg_mkIndex</cmd> in an interpreter that
has Tk loaded.  You can achieve this with the
<b>-load</b> <i>pkgPat</i> option.  If you specify this option,
<cmd>pkg_mkIndex</cmd> will load any packages listed by
<b>info loaded</b> and that match <i>pkgPat</i>
into the interpreter used to process files.
In most cases this will satisfy the <fun>Tcl_PkgRequire</fun> calls
made by binary files.
</p>
<p>If you are indexing two binary files and one depends on the other,
you should specify the one that has dependencies last.
This way the one without dependencies will get loaded and indexed,
and then the package it provides
will be available when the second file is processed.
You may also need to load the first package into the
temporary interpreter used to create the index by using
the <b>-load</b> flag;
it won't hurt to specify package patterns that are not yet loaded.
</p>
<p>If you have a package that is split across scripts and a binary file,
then you should avoid the <b>-load</b> flag. The problem is that
if you load a package before computing the index it masks any
other files that provide part of the same package.
If you must use <b>-load</b>,
then you must specify the scripts first; otherwise the package loaded from
the binary file may mask the package defined by the scripts.

</p>
</section>
<seealso>
<ref>package(n)</ref>
</seealso>
<keywords>
<keyword>auto-load</keyword>
<keyword>index</keyword>
<keyword>package</keyword>
<keyword>version</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="PkgRequire" version="7.5" title="Tcl_PkgRequire">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: PkgRequire.3,v 1.11 2006/10/18 18:46:59 dgp Exp $
 -->
<?TROFF.TH title="Tcl_PkgRequire" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_PkgRequire</name>
<name>Tcl_PkgRequireEx</name>
<name>Tcl_PkgRequireProc</name>
<name>Tcl_PkgPresent</name>
<name>Tcl_PkgPresentEx</name>
<name>Tcl_PkgProvide</name>
<name>Tcl_PkgProvideEx</name>
<desc>package version control</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

const char *
<fun>Tcl_PkgRequire</fun>(<m>interp</m>, <m>name</m>, <m>version</m>, <m>exact</m>)

const char *
<fun>Tcl_PkgRequireEx</fun>(<m>interp</m>, <m>name</m>, <m>version</m>, <m>exact</m>, <m>clientDataPtr</m>)

int
<b>Tcl_PkgRequireProc</b>(<m>interp</m>, <m>name</m>, <m>objc</m>, <m>objv</m>, <m>clientDataPtr</m>)

const char *
<fun>Tcl_PkgPresent</fun>(<m>interp</m>, <m>name</m>, <m>version</m>, <m>exact</m>)

const char *
<fun>Tcl_PkgPresentEx</fun>(<m>interp</m>, <m>name</m>, <m>version</m>, <m>exact</m>, <m>clientDataPtr</m>)

int
<fun>Tcl_PkgProvide</fun>(<m>interp</m>, <m>name</m>, <m>version</m>)

int
<fun>Tcl_PkgProvideEx</fun>(<m>interp</m>, <m>name</m>, <m>version</m>, <m>clientData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter where package is needed or available.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name of package.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="version">*version</name>
<argmode>in</argmode>
<desc>A version string consisting of one or more decimal numbers
separated by dots.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>exact</name>
<argmode>in</argmode>
<desc>Non-zero means that only the particular version specified by
<i>version</i> is acceptable.
Zero means that newer versions than <i>version</i> are also
acceptable as long as they have the same major version number
as <i>version</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary value to be associated with the package.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="clientDataPtr">*clientDataPtr</name>
<argmode>out</argmode>
<desc>Pointer to place to store the value associated with the matching
package. It is only changed if the pointer is not NULL and the
function completed successfully.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>Number of requirements.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj*</argtype>
<name name="objv">objv[]</name>
<argmode>in</argmode>
<desc>Array of requirements.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures provide C-level interfaces to Tcl's package and
version management facilities.
</p>
<p><fun>Tcl_PkgRequire</fun> is equivalent to the <b>package require</b>
command, <fun>Tcl_PkgPresent</fun> is equivalent to the <b>package present</b>
command, and <fun>Tcl_PkgProvide</fun> is equivalent to the
<b>package provide</b> command.
</p>
<p>See the documentation for the Tcl commands for details on what these
procedures do.
</p>
<p>If <fun>Tcl_PkgPresent</fun> or <fun>Tcl_PkgRequire</fun> complete successfully
they return a pointer to the version string for the version of the package
that is provided in the interpreter (which may be different than 
<i>version</i>); if an error occurs they return NULL and leave an error 
message in the interpreter's result.
</p>
<p><fun>Tcl_PkgProvide</fun> returns <b>TCL_OK</b> if it completes successfully;
if an error occurs it returns <b>TCL_ERROR</b> and leaves an error message
in the interpreter's result.
</p>
<p><fun>Tcl_PkgProvideEx</fun>, <fun>Tcl_PkgPresentEx</fun> and <fun>Tcl_PkgRequireEx</fun>
allow the setting and retrieving of the client data associated with
the package. In all other respects they are equivalent to the matching
functions.
</p>
<p><b>Tcl_PkgRequireProc</b> is the form of <b>package require</b> handling
multiple requirements. The other forms are present for backward
compatibility and translate their invokations to this form.

</p>
</section>
<keywords>
<keyword>package</keyword>
<keyword>present</keyword>
<keyword>provide</keyword>
<keyword>require</keyword>
<keyword>version</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="place" title="place">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: place.n,v 1.7 2004/08/20 10:56:36 dkf Exp $
 -->
<?TROFF.TH title="place" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>place</name>
<desc>Geometry manager for fixed or rubber-sheet placement</desc>
</namesection>
<synopsis>
<syntax>
<cmd>place</cmd> <m>option arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The placer is a geometry manager for Tk.
It provides simple fixed placement of windows, where you specify
the exact size and location of one window, called the <i>slave</i>,
within another window, called the <i>master</i>.
The placer also provides rubber-sheet placement, where you specify the
size and location of the slave in terms of the dimensions of
the master, so that the slave changes size and location
in response to changes in the size of the master.
Lastly, the placer allows you to mix these styles of placement so
that, for example, the slave has a fixed width and height but is
centered inside the master.
</p>
<commandlist>
<commanddef>
<command><b>place</b> <m>window option value</m> ?<m>option value ...</m>?</command>
<desc>Arrange for the placer to manage the geometry of a slave whose
pathName is <i>window</i>.  The remaining arguments consist of one or
more <i>option-value</i> pairs that specify the way in which
<i>window</i>'s geometry is managed.  <i>Option</i> may have any of the
values accepted by the <b>place configure</b> command.
</desc>
</commanddef>
<commanddef>
<command><b>place configure</b> <m>window</m> ?<m>option</m>? ?<m>value option value ...</m>?</command>
<desc>Query or modify the geometry options of the slave given by
<i>window</i>.  If no <i>option</i> is specified, this command returns a
list describing the available options (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s); in this case
the command returns an empty string.

The following <i>option-value</i> pairs are supported:
<dl>
<dle>
<dt><b>-anchor</b> <m>where</m></dt>
<dd><i>Where</i> specifies which point of <i>window</i> is to be positioned
at the (x,y) location selected by the <b>-x</b>, <b>-y</b>,
<b>-relx</b>, and <b>-rely</b> options.
The anchor point is in terms of the outer area of <i>window</i>
including its border, if any.
Thus if <i>where</i> is <b>se</b> then the lower-right corner of
<i>window</i>'s border will appear at the given (x,y) location
in the master.
The anchor position defaults to <b>nw</b>.
</dd>
</dle>
<dle>
<dt><b>-bordermode</b> <m>mode</m></dt>
<dd><i>Mode</i> determines the degree to which borders within the
master are used in determining the placement of the slave.
The default and most common value is <b>inside</b>.
In this case the placer considers the area of the master to
be the innermost area of the master, inside any border:
an option of <b>-x 0</b> corresponds to an x-coordinate just
inside the border and an option of <b>-relwidth 1.0</b>
means <i>window</i> will fill the area inside the master's
border.

If <i>mode</i> is <b>outside</b> then the placer considers
the area of the master to include its border;
this mode is typically used when placing <i>window</i>
outside its master, as with the options <b>-x 0 -y 0 -anchor ne</b>.
Lastly, <i>mode</i> may be specified as <b>ignore</b>, in which
case borders are ignored:  the area of the master is considered
to be its official X area, which includes any internal border but
no external border.  A bordermode of <b>ignore</b> is probably
not very useful.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>size</m></dt>
<dd><i>Size</i> specifies the height for <i>window</i> in screen units
(i.e. any of the forms accepted by <fun>Tk_GetPixels</fun>).
The height will be the outer dimension of <i>window</i> including its
border, if any.
If <i>size</i> is an empty string, or if no <b>-height</b> or
<b>-relheight</b> option is specified, then the height requested
internally by the window will be used.
</dd>
</dle>
<dle>
<dt><b>-in</b> <m>master</m></dt>
<dd><i>Master</i> specifies the path name of the window relative
to which <i>window</i> is to be placed.
<i>Master</i> must either be <i>window</i>'s parent or a descendant
of <i>window</i>'s parent.
In addition, <i>master</i> and <i>window</i> must both be descendants
of the same top-level window.
These restrictions are necessary to guarantee
that <i>window</i> is visible whenever <i>master</i> is visible.
If this option isn't specified then the master defaults to
<i>window</i>'s parent.
</dd>
</dle>
<dle>
<dt><b>-relheight</b> <m>size</m></dt>
<dd><i>Size</i> specifies the height for <i>window</i>.
In this case the height is specified as a floating-point number
relative to the height of the master: 0.5 means <i>window</i> will
be half as high as the master, 1.0 means <i>window</i> will have
the same height as the master, and so on.
If both <b>-height</b> and <b>-relheight</b> are specified for a slave,
their values are summed.  For example, <b>-relheight 1.0 -height -2</b>
makes the slave 2 pixels shorter than the master.
</dd>
</dle>
<dle>
<dt><b>-relwidth</b> <m>size</m></dt>
<dd><i>Size</i> specifies the width for <i>window</i>.
In this case the width is specified as a floating-point number
relative to the width of the master: 0.5 means <i>window</i> will
be half as wide as the master, 1.0 means <i>window</i> will have
the same width as the master, and so on.
If both <b>-width</b> and <b>-relwidth</b> are specified for a slave,
their values are summed.  For example, <b>-relwidth 1.0 -width 5</b>
makes the slave 5 pixels wider than the master.
</dd>
</dle>
<dle>
<dt><b>-relx</b> <m>location</m></dt>
<dd><i>Location</i> specifies the x-coordinate within the master window
of the anchor point for <i>window</i>.
In this case the location is specified in a relative fashion
as a floating-point number:  0.0 corresponds to the left edge
of the master and 1.0 corresponds to the right edge of the master.
<i>Location</i> need not be in the range 0.0-1.0.
If both <b>-x</b> and <b>-relx</b> are specified for a slave
then their values are summed.  For example, <b>-relx 0.5 -x -2</b>
positions the left edge of the slave 2 pixels to the left of the
center of its master.
</dd>
</dle>
<dle>
<dt><b>-rely</b> <m>location</m></dt>
<dd><i>Location</i> specifies the y-coordinate within the master window
of the anchor point for <i>window</i>.
In this case the value is specified in a relative fashion
as a floating-point number:  0.0 corresponds to the top edge
of the master and 1.0 corresponds to the bottom edge of the master.
<i>Location</i> need not be in the range 0.0-1.0.
If both <b>-y</b> and <b>-rely</b> are specified for a slave
then their values are summed.  For example, <b>-rely 0.5 -x 3</b>
positions the top edge of the slave 3 pixels below the
center of its master.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>size</m></dt>
<dd><i>Size</i> specifies the width for <i>window</i> in screen units
(i.e. any of the forms accepted by <fun>Tk_GetPixels</fun>).
The width will be the outer width of <i>window</i> including its
border, if any.
If <i>size</i> is an empty string, or if no <b>-width</b>
or <b>-relwidth</b> option is specified, then the width requested
internally by the window will be used.
</dd>
</dle>
<dle>
<dt><b>-x</b> <m>location</m></dt>
<dd><i>Location</i> specifies the x-coordinate within the master window
of the anchor point for <i>window</i>.
The location is specified in screen units (i.e. any of the forms
accepted by <fun>Tk_GetPixels</fun>) and need not lie within the bounds
of the master window.
</dd>
</dle>
<dle>
<dt><b>-y</b> <m>location</m></dt>
<dd><i>Location</i> specifies the y-coordinate within the master window
of the anchor point for <i>window</i>.
The location is specified in screen units (i.e. any of the forms
accepted by <fun>Tk_GetPixels</fun>) and need not lie within the bounds
of the master window.
</dd>
</dle>
</dl><p>If the same value is specified separately with
two different options, such as <b>-x</b> and <b>-relx</b>, then
the most recent option is used and the older one is ignored.
</p></desc>
</commanddef>
<commanddef>
<command><b>place forget</b> <m>window</m></command>
<desc>Causes the placer to stop managing the geometry of <i>window</i>.  As a
side effect of this command <i>window</i> will be unmapped so that it
doesn't appear on the screen.  If <i>window</i> isn't currently managed
by the placer then the command has no effect.  This command returns an
empty string.
</desc>
</commanddef>
<commanddef>
<command><b>place info</b> <m>window</m></command>
<desc>Returns a list giving the current configuration of <i>window</i>.
The list consists of <i>option-value</i> pairs in exactly the
same form as might be specified to the <b>place configure</b>
command.
</desc>
</commanddef>
<commanddef>
<command><b>place slaves</b> <m>window</m></command>
<desc>Returns a list of all the slave windows for which <i>window</i> is the master.
If there are no slaves for <i>window</i> then an empty string is returned.
</desc>
</commanddef>
</commandlist>
<p>If the configuration of a window has been retrieved with
<b>place info</b>, that configuration can be restored later by
first using <b>place forget</b> to erase any existing information
for the window and then invoking <b>place configure</b> with
the saved information.
</p>
</section>
<section>
<title>FINE POINTS</title>
<p>It is not necessary for the master window to be the parent
of the slave window.
This feature is useful in at least two situations.
First, for complex window layouts it means you can create a
hierarchy of subwindows whose only purpose
is to assist in the layout of the parent.
The ``real children'' of the parent (i.e. the windows that
are significant for the application's user interface) can be
children of the parent yet be placed inside the windows
of the geometry-management hierarchy.
This means that the path names of the ``real children''
don't reflect the geometry-management hierarchy and users
can specify options for the real children
without being aware of the structure of the geometry-management
hierarchy.
</p>
<p>A second reason for having a master different than the slave's
parent is to tie two siblings together.
For example, the placer can be used to force a window always to
be positioned centered just below one of its
siblings by specifying the configuration
</p>
<example>
<b>-in</b> <i>sibling</i> <b>-relx 0.5 -rely 1.0 -anchor n -bordermode outside</b>
</example>
<p>Whenever the sibling is repositioned in the future, the slave
will be repositioned as well.
</p>
<p>Unlike many other geometry managers (such as the packer)
the placer does not make any attempt to manipulate the geometry of
the master windows or the parents of slave windows (i.e. it doesn't
set their requested sizes).
To control the sizes of these windows, make them windows like
frames and canvases that provide configuration options for this purpose.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Make the label occupy the middle bit of the toplevel, no matter how it
is resized:
</p>
<example>
label .l -text "In the\nMiddle!" -bg black -fg white
<cmd>place</cmd> .l -relwidth .3 -relx .35 -relheight .3 -rely .35
</example>


</section>
<seealso>
<ref>grid(n)</ref>
<ref>pack(n)</ref>
</seealso>
<keywords>
<keyword>geometry manager</keyword>
<keyword>height</keyword>
<keyword>location</keyword>
<keyword>master</keyword>
<keyword>place</keyword>
<keyword>rubber sheet</keyword>
<keyword>slave</keyword>
<keyword>width</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="platform" version="1.0.2" title="platform">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2006 ActiveState Software
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: platform.n,v 1.1 2006/12/05 18:46:59 andreas_kupries Exp $
 -->
<?TROFF.TH title="platform" section="n" date="1.0.2" source="platform" manual="Tcl Bundled Packages" ?>
<namesection>
<name>platform</name>
<desc>System identification support code and utilities</desc>
</namesection>
<synopsis>
<syntax>
<b>package require platform ?1.0.2?</b>

<b>platform::generic</b>
<b>platform::identify</b>
<b>platform::patterns</b> <m>identifier</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>platform</b> package provides several utility commands useful
for the identification of the architecture of a machine running Tcl.
</p>
<p>Whilst Tcl provides the <b cat="variable">tcl_platform</b> array for identifying the
current architecture (in particular, the platform and machine
elements) this is not always sufficient. This is because (on Unix
machines) <b cat="variable">tcl_platform</b> reflects the values returned by the
<b>uname</b> command and these aren't standardized across platforms and
architectures. In addition, on at least one platform (AIX) the
<b>tcl_platform(machine)</b> contains the CPU serial number.
</p>
<p>Consequently, individual applications need to manipulate the values in
<b cat="variable">tcl_platform</b> (along with the output of system specific
utilities) - which is both inconvenient for developers, and introduces
the potential for inconsistencies in identifying architectures and in
naming conventions.
</p>
<p>The <b>platform</b> package prevents such fragmentation - i.e., it
establishes a standard naming convention for architectures running Tcl
and makes it more convenient for developers to identify the current
architecture a Tcl program is running on.
</p>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><b>platform::identify</b></dt>
<dd>This command returns an identifier describing the platform the Tcl
core is running on. The returned identifier has the general format
<i>OS</i>-<i>CPU</i>. The <i>OS</i> part of the identifier may contain
details like kernel version, libc version, etc., and this information
may contain dashes as well.  The <i>CPU</i> part will not contain
dashes, making the preceding dash the last dash in the result.
</dd>
</dle>
<dle>
<dt><b>platform::generic</b></dt>
<dd>This command returns a simplified identifier describing the platform
the Tcl core is running on. In contrast to <b>platform::identify</b> it
leaves out details like kernel version, libc version, etc. The
returned identifier has the general format <i>OS</i>-<i>CPU</i>.
</dd>
</dle>
<dle>
<dt><b>platform::patterns</b> 	<m>identifier</m></dt>
<dd>This command takes an identifier as returned by
<b>platform::identify</b> and returns a list of identifiers describing
compatible architectures.
</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>operating system</keyword>
<keyword>cpu architecture</keyword>
<keyword>platform</keyword>
<keyword>architecture</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="platform_shell" version="1.0.2" title="platform::shell">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2006 ActiveState Software
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: platform_shell.n,v 1.3 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="platform::shell" section="n" date="1.0.2" source="platform::shell" manual="Tcl Bundled Packages" ?>
<namesection>
<name>platform::shell</name>
<desc>System identification support code and utilities</desc>
</namesection>
<synopsis>
<syntax>
<b>package require platform::shell ?1.0.1?</b>

<b>platform::shell::generic</b> <m>shell</m>
<b>platform::shell::identify</b> <m>shell</m>
<b>platform::shell::platform</b> <m>shell</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>platform::shell</b> package provides several utility commands useful
for the identification of the architecture of a specific Tcl shell.
</p>
<p>This package allows the identification of the architecture of a
specific Tcl shell different from the shell running the package. The
only requirement is that the other shell (identified by its path), is
actually executable on the current machine.
</p>
<p>While for most platform this means that the architecture of the
interrogated shell is identical to the architecture of the running
shell this is not generally true. A counter example are all platforms
which have 32 and 64 bit variants and where a 64bit system is able to
run 32bit code. For these running and interrogated shell may have
different 32/64 bit settings and thus different identifiers.
</p>
<p>For applications like a code repository it is important to identify
the architecture of the shell which will actually run the installed
packages, versus the architecture of the shell running the repository
software.
</p>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><b>platform::shell::identify</b> <m>shell</m></dt>
<dd>This command does the same identification as <b>platform::identify</b>,
for the specified Tcl shell, in contrast to the running shell.
</dd>
</dle>
<dle>
<dt><b>platform::shell::generic</b> <m>shell</m></dt>
<dd>This command does the same identification as <b>platform::generic</b>,
for the specified Tcl shell, in contrast to the running shell.
</dd>
</dle>
<dle>
<dt><b>platform::shell::platform</b> <m>shell</m></dt>
<dd>This command returns the contents of <b>tcl_platform(platform)</b> for
the specified Tcl shell.
</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>operating system</keyword>
<keyword>cpu architecture</keyword>
<keyword>platform</keyword>
<keyword>architecture</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="popup" title="tk_popup" version="4.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: popup.n,v 1.4 2004/06/21 20:59:29 dkf Exp $
 -->
<?TROFF.TH title="tk_popup" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk_popup</name>
<desc>Post a popup menu</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk_popup</cmd> <m>menu x y</m> ?<m>entry</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This procedure posts a menu at a given position on the screen and
configures Tk so that the menu and its cascaded children can be
traversed with the mouse or the keyboard.
<i>Menu</i> is the name of a menu widget and <i>x</i> and <i>y</i>
are the root coordinates at which to display the menu.
If <i>entry</i> is omitted or an empty string, the
menu's upper left corner is positioned at the given point.
Otherwise <i>entry</i> gives the index of an entry in <i>menu</i> and
the menu will be positioned so that the entry is positioned over
the given point.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>How to attach a simple popup menu to a widget.
</p>
<example>
# Create a menu
set m [menu .popupMenu]
$m add command -label "Example 1" -command bell
$m add command -label "Example 2" -command bell

# Create something to attach it to
pack [label .l -text "Click me!"]

# Arrange for the menu to pop up when the label is clicked
bind .l &lt;1&gt; {<cmd>tk_popup</cmd> .popupMenu %X %Y}
</example>


</section>
<seealso>
<ref>bind(n)</ref>
<ref>menu(n)</ref>
<ref>tk_optionMenu(n)</ref>
</seealso>
<keywords>
<keyword>menu</keyword>
<keyword>popup</keyword>
</keywords>
</manpage>
<manpage version="7.5" cat="fun" title="Tcl_Preserve" id="Preserve">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Preserve.3,v 1.4 2002/02/26 02:22:20 hobbs Exp $
 -->
<?TROFF.TH title="Tcl_Preserve" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Preserve</name>
<name>Tcl_Release</name>
<name>Tcl_EventuallyFree</name>
<desc>avoid freeing storage while it's being used</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_Preserve</fun>(<m>clientData</m>)

<fun>Tcl_Release</fun>(<m>clientData</m>)

<fun>Tcl_EventuallyFree</fun>(<m>clientData</m>, <m>freeProc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Token describing structure to be freed or reallocated.  Usually a pointer
to memory for structure.
</desc>
</argdef>
<argdef>
<argtype>Tcl_FreeProc</argtype>
<name name="freeProc">*freeProc</name>
<argmode>in</argmode>
<desc>Procedure to invoke to free <i>clientData</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These three procedures help implement a simple reference count mechanism
for managing storage.  They are designed to solve a problem
having to do with widget deletion, but are also useful in many other
situations.  When a widget is deleted, its
widget record (the structure holding information specific to the
widget) must be returned to the storage allocator.
However, it's possible that the widget record is in active use
by one of the procedures on the stack at the time of the deletion.
This can happen, for example, if the command associated with a button
widget causes the button to be destroyed:  an X event causes an
event-handling C procedure in the button to be invoked, which in
turn causes the button's associated Tcl command to be executed,
which in turn causes the button to be deleted, which in turn causes
the button's widget record to be de-allocated.
Unfortunately, when the Tcl command returns, the button's
event-handling procedure will need to reference the
button's widget record.
Because of this, the widget record must not be freed as part of the
deletion, but must be retained until the event-handling procedure has
finished with it.
In other situations where the widget is deleted, it may be possible
to free the widget record immediately.
</p>
<p><fun>Tcl_Preserve</fun> and <fun>Tcl_Release</fun>
implement short-term reference counts for their <i>clientData</i>
argument.
The <i>clientData</i> argument identifies an object and usually
consists of the address of a structure.
The reference counts guarantee that an object will not be freed
until each call to <fun>Tcl_Preserve</fun> for the object has been
matched by calls to <fun>Tcl_Release</fun>.
There may be any number of unmatched <fun>Tcl_Preserve</fun> calls
in effect at once.
</p>
<p><fun>Tcl_EventuallyFree</fun> is invoked to free up its <i>clientData</i>
argument.
It checks to see if there are unmatched <fun>Tcl_Preserve</fun> calls
for the object.
If not, then <fun>Tcl_EventuallyFree</fun> calls <i>freeProc</i> immediately.
Otherwise <fun>Tcl_EventuallyFree</fun> records the fact that <i>clientData</i>
needs eventually to be freed.
When all calls to <fun>Tcl_Preserve</fun> have been matched with
calls to <fun>Tcl_Release</fun> then <i>freeProc</i> will be called by
<fun>Tcl_Release</fun> to do the cleanup.
</p>
<p>All the work of freeing the object is carried out by <i>freeProc</i>.
<i>FreeProc</i> must have arguments and result that match the
type <type>Tcl_FreeProc</type>:
</p>
<syntax name="Tcl_FreeProc" cat="type" scope="global">
typedef void Tcl_FreeProc(char *<i>blockPtr</i>);
</syntax>
<p>The <i>blockPtr</i> argument to <i>freeProc</i> will be the
same as the <i>clientData</i> argument to <fun>Tcl_EventuallyFree</fun>.
The type of <i>blockPtr</i> (<b>char *</b>) is different than the type of the
<i>clientData</i> argument to <fun>Tcl_EventuallyFree</fun> for historical
reasons, but the value is the same.
</p>
<p>When the <i>clientData</i> argument to <fun>Tcl_EventuallyFree</fun>
refers to storage allocated and returned by a prior call to
<fun>Tcl_Alloc</fun>, <fun>ckalloc</fun>, or another function of the Tcl library,
then the <i>freeProc</i> argument should be given the special value of
<b>TCL_DYNAMIC</b>.
</p>
<p>This mechanism can be used to solve the problem described above
by placing <fun>Tcl_Preserve</fun> and <fun>Tcl_Release</fun> calls around
actions that may cause undesired storage re-allocation.  The
mechanism is intended only for short-term use (i.e. while procedures
are pending on the stack);  it will not work efficiently as a
mechanism for long-term reference counts.
The implementation does not depend in any way on the internal
structure of the objects being freed;  it keeps the reference
counts in a separate structure.

</p>
</section>
<seealso>
<ref>Tcl_Interp</ref>
<ref>Tcl_Alloc</ref>
</seealso>
<keywords>
<keyword>free</keyword>
<keyword>reference count</keyword>
<keyword>storage</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="PrintDbl" version="8.0" title="Tcl_PrintDouble">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: PrintDbl.3,v 1.7 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_PrintDouble" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_PrintDouble</name>
<desc>Convert floating value to string</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_PrintDouble</fun>(<m>interp</m>, <m>value</m>, <m>dst</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Before Tcl 8.0, the <b cat="variable">tcl_precision</b> variable in this interpreter
controlled the conversion.  As of Tcl 8.0, this argument is ignored and
the conversion is controlled by the <b cat="variable">tcl_precision</b> variable
that is now shared by all interpreters.
</desc>
</argdef>
<argdef>
<argtype>double</argtype>
<name>value</name>
<argmode>in</argmode>
<desc>Floating-point value to be converted.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="dst">*dst</name>
<argmode>out</argmode>
<desc>Where to store the string representing <i>value</i>.  Must have at
least <b>TCL_DOUBLE_SPACE</b> characters of storage.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_PrintDouble</fun> generates a string that represents the value
of <i>value</i> and stores it in memory at the location given by
<i>dst</i>.  It uses <b>%g</b> format to generate the string, with one
special twist: the string is guaranteed to contain either
a ``.'' or an ``e'' so that it doesn't look like an integer.  Where
<b>%g</b> would generate an integer with no decimal point, <fun>Tcl_PrintDouble</fun>
adds ``.0''.
</p>
<?NEW 8.5?>
<p>If the <b cat="variable">tcl_precision</b> value is non-zero, the result will have
precisely that many digits of significance.  If the value is zero
(the default), the result will have the fewest digits needed to
represent the number in such a way that <fun>Tcl_NewDoubleObj</fun>
will generate the same number when presented with the given string.
IEEE semantics of rounding to even apply to the conversion.
<?ENDNEW CONFUSED 8.5?>
</p>
</section>
<keywords>
<keyword>conversion</keyword>
<keyword>double-precision</keyword>
<keyword>floating-point</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="proc" title="proc">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: proc.n,v 1.5 2004/10/27 14:24:37 dkf Exp $
 -->
<?TROFF.TH title="proc" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>proc</name>
<desc>Create a Tcl procedure</desc>
</namesection>
<synopsis>
<syntax>
<cmd>proc</cmd> <m>name args body</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>proc</cmd> command creates a new Tcl procedure named
<i>name</i>, replacing
any existing command or procedure there may have been by that name.
Whenever the new command is invoked, the contents of <i>body</i> will
be executed by the Tcl interpreter.
Normally, <i>name</i> is unqualified
(does not include the names of any containing namespaces),
and the new procedure is created in the current namespace.
If <i>name</i> includes any namespace qualifiers,
the procedure is created in the specified namespace.
<i>Args</i> specifies the formal arguments to the
procedure.  It consists of a list, possibly empty, each of whose
elements specifies
one argument.  Each argument specifier is also a list with either
one or two fields.  If there is only a single field in the specifier
then it is the name of the argument; if there are two fields, then
the first is the argument name and the second is its default value.
</p>
<p>When <i>name</i> is invoked a local variable
will be created for each of the formal arguments to the procedure; its
value will be the value of corresponding argument in the invoking command
or the argument's default value.
Arguments with default values need not be
specified in a procedure invocation.  However, there must be enough
actual arguments for all the
formal arguments that don't have defaults, and there must not be any extra
actual arguments.  There is one special case to permit procedures with
variable numbers of arguments.  If the last formal argument has the name
<b>args</b>, then a call to the procedure may contain more actual arguments
than the procedure has formals.  In this case, all of the actual arguments
starting at the one that would be assigned to <b>args</b> are combined into
a list (as if the <b cat="AMBIGUOUS ambiguous cmd">list</b> command had been used); this combined value
is assigned to the local variable <b>args</b>.
</p>
<p>When <i>body</i> is being executed, variable names normally refer to
local variables, which are created automatically when referenced and
deleted when the procedure returns.  One local variable is automatically
created for each of the procedure's arguments.
Global variables can only be accessed by invoking
the <b cat="AMBIGUOUS ambiguous cmd">global</b> command or the <cmd>upvar</cmd> command.
Namespace variables can only be accessed by invoking
the <b cat="AMBIGUOUS ambiguous cmd">variable</b> command or the <cmd>upvar</cmd> command.
</p>
<p>The <cmd>proc</cmd> command returns an empty string.  When a procedure is
invoked, the procedure's return value is the value specified in a
<cmd>return</cmd> command.  If the procedure doesn't execute an explicit
<cmd>return</cmd>, then its return value is the value of the last command
executed in the procedure's body.
If an error occurs while executing the procedure
body, then the procedure-as-a-whole will return that same error.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>This is a procedure that accepts arbitrarily many arguments and prints
them out, one by one.
</p>
<example>
<cmd>proc</cmd> printArguments args {
   foreach arg $args {
      puts $arg
   }
}
</example>
<p>This procedure is a bit like the <cmd>incr</cmd> command, except it
multiplies the contents of the named variable by the value, which
defaults to <b>2</b>:
</p>
<example>
<cmd>proc</cmd> mult {varName {multiplier 2}} {
   upvar 1 $varName var
   set var [expr {$var * $multiplier}]
}
</example>


</section>
<seealso>
<ref>info(n)</ref>
<ref>unknown(n)</ref>
</seealso>
<keywords>
<keyword>argument</keyword>
<keyword>procedure</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="puts" version="7.5" title="puts">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: puts.n,v 1.10 2005/05/10 18:34:02 kennykb Exp $
 -->
<?TROFF.TH title="puts" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>puts</name>
<desc>Write to a channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>puts</cmd> ?<b>-nonewline</b>? ?<m>channelId</m>? <m>string</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Writes the characters given by <i>string</i> to the channel given
by <i>channelId</i>.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdout</b> or <b>stderr</b>), the return
value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or the result
of a channel creation command provided by a Tcl extension. The channel
must have been opened for output.
</p>
<p>If no <i>channelId</i> is specified then it defaults to
<b>stdout</b>. <b>Puts</b> normally outputs a newline character after
<i>string</i>, but this feature may be suppressed by specifying the
<b>-nonewline</b> switch.
</p>
<p>Newline characters in the output are translated by <cmd>puts</cmd> to
platform-specific end-of-line sequences according to the current
value of the <b>-translation</b> option for the channel (for example,
on PCs newlines are normally replaced with carriage-return-linefeed
sequences.
See the <cmd>fconfigure</cmd> manual entry for a discussion on ways in
which <cmd>fconfigure</cmd> will alter output.
</p>
<p>Tcl buffers output internally, so characters written with <cmd>puts</cmd>
may not appear immediately on the output file or device;  Tcl will
normally delay output until the buffer is full or the channel is
closed.
You can force output to appear immediately with the <b cat="AMBIGUOUS ambiguous cmd">flush</b>
command.
</p>
<p>When the output buffer fills up, the <cmd>puts</cmd> command will normally
block until all the buffered data has been accepted for output by the
operating system.
If <i>channelId</i> is in nonblocking mode then the <cmd>puts</cmd> command
will not block even if the operating system cannot accept the data.
Instead, Tcl continues to buffer the data and writes it in the
background as fast as the underlying file or device can accept it.
The application must use the Tcl event loop for nonblocking output
to work;  otherwise Tcl never finds out that the file or device is
ready for more output data.
It is possible for an arbitrarily large amount of data to be
buffered for a channel in nonblocking mode, which could consume a
large amount of memory.
To avoid wasting memory, nonblocking I/O should normally
be used in an event-driven fashion with the <cmd>fileevent</cmd> command
(don't invoke <cmd>puts</cmd> unless you have recently been notified
via a file event that the channel is ready for more output data).
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Write a short message to the console (or wherever <b>stdout</b> is
directed):
</p>
<example>
<cmd>puts</cmd> "Hello, World!"
</example>
<p>Print a message in several parts:
</p>
<example>
<cmd>puts</cmd> -nonewline "Hello, "
<cmd>puts</cmd> "World!"
</example>
<p>Print a message to the standard error channel:
</p>
<example>
<cmd>puts</cmd> stderr "Hello, World!"
</example>
<p>Append a log message to a file:
</p>
<example>
set chan [open my.log a]
set timestamp [clock format [clock seconds]]
<cmd>puts</cmd> $chan "$timestamp - Hello, World!"
close $chan
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>fileevent(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>channel</keyword>
<keyword>newline</keyword>
<keyword>output</keyword>
<keyword>write</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="pwd" title="pwd">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: pwd.n,v 1.7 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="pwd" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>pwd</name>
<desc>Return the absolute path of the current working directory</desc>
</namesection>
<synopsis>
<syntax>
<cmd>pwd</cmd>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns the absolute path name of the current working directory.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Sometimes it is useful to change to a known directory when running
some external command using <cmd>exec</cmd>, but it is important to keep
the application usually running in the directory that it was started
in (unless the user specifies otherwise) since that minimizes user
confusion. The way to do this is to save the current directory while
the external command is being run:
</p>
<example>
set tarFile [file normalize somefile.tar]
set savedDir [<cmd>pwd</cmd>]
cd /tmp
exec tar -xf $tarFile
cd $savedDir
</example>
</section>
<seealso>
<ref>file(n)</ref>
<ref>cd(n)</ref>
<ref>glob(n)</ref>
<ref>filename(n)</ref>
</seealso>
<keywords>
<keyword>working directory</keyword>
</keywords>
</manpage>
<manpage version="7.5" cat="fun" title="Tk_QueueWindowEvent" id="QWinEvent">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: QWinEvent.3,v 1.3 2002/06/15 00:21:42 hobbs Exp $
 -->
<?TROFF.TH title="Tk_QueueWindowEvent" section="3" date="7.5" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CollapseMotionEvents</name>
<name>Tk_QueueWindowEvent</name>
<desc>Add a window event to the Tcl event queue</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_CollapseMotionEvents</fun>(<m>display</m>, <m>collapse</m>)

<fun>Tk_QueueWindowEvent</fun>(<m>eventPtr</m>, <m>position</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display for which to control motion event collapsing.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>collapse</name>
<argmode>in</argmode>
<desc>Indicates whether motion events should be collapsed or not.
</desc>
</argdef>
<argdef>
<argtype>XEvent</argtype>
<name name="eventPtr">*eventPtr</name>
<argmode>in</argmode>
<desc>An event to add to the event queue.
</desc>
</argdef>
<argdef>
<argtype>Tcl_QueuePosition</argtype>
<name>position</name>
<argmode>in</argmode>
<desc>Where to add the new event in the queue:  <b>TCL_QUEUE_TAIL</b>,
<b>TCL_QUEUE_HEAD</b>, or <b>TCL_QUEUE_MARK</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_QueueWindowEvent</fun> places a window event on Tcl's internal event
queue for eventual servicing.  It creates a Tcl_Event structure, copies the
event into that structure, and calls <fun>Tcl_QueueEvent</fun> to add the event
to the queue.  When the event is eventually removed from the queue it is
processed just like all window events.
</p>
<p>When multiple motion events are received for the same window in rapid
succession, they are collapsed by default.  This behavior can be controlled
with <fun>Tk_CollapseMotionEvents</fun>.  <fun>Tk_CollapseMotionEvents</fun> always
returns the previous value for collapse behavior on the <i>display</i>.
</p>
<p>The <i>position</i> argument to <fun>Tk_QueueWindowEvent</fun> has
the same significance as for <fun>Tcl_QueueEvent</fun>;  see the
documentation for <fun>Tcl_QueueEvent</fun> for details.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>clock</keyword>
<keyword>handler</keyword>
<keyword>modal timeout</keyword>
<keyword>events</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="radiobutton" version="4.4" title="radiobutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: radiobutton.n,v 1.11 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="radiobutton" section="n" date="4.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>radiobutton</name>
<desc>Create and manipulate radiobutton widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">radiobutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-activeforeground</li>
<li>-anchor</li>
<li>-background</li>
<li>-bitmap</li>
<li>-borderwidth</li>
<li>-compound</li>
<li>-cursor</li>
<li>-disabledforeground</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-image</li>
<li>-justify</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-wraplength</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies a Tcl command to associate with the button.  This command
is typically invoked when mouse button 1 is released over the button
window.  The button's global variable (<b>-variable</b> option) will
be updated before the command is invoked.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies a desired height for the button.
If an image or bitmap is being displayed in the button then the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in lines of text.
If this option isn't specified, the button's desired height is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
<optiondef>
<name>-indicatoron</name>
<dbname>indicatorOn</dbname>
<dbclass>IndicatorOn</dbclass>
<desc>Specifies whether or not the indicator should be drawn.  Must be a
proper boolean value.  If false, the <b>relief</b> option is
ignored and the widget's relief is always sunken if the widget is
selected and raised otherwise.
</desc>
</optiondef>
<optiondef>
<name>-selectcolor</name>
<dbname>selectColor</dbname>
<dbclass>Background</dbclass>
<desc>Specifies a background color to use when the button is selected.
If <b>indicatorOn</b> is true then the color applies to the indicator.
Under Windows, this color is used as the background for the indicator
regardless of the select state.
If <b>indicatorOn</b> is false, this color is used as the background
for the entire widget, in place of <b>background</b> or <b>activeBackground</b>,
whenever the widget is selected.
If specified as an empty string then no special color is used for
displaying when the widget is selected.
</desc>
</optiondef>
<optiondef>
<name>-offrelief</name>
<dbname>offRelief</dbname>
<dbclass>OffRelief</dbclass>
<desc>Specifies the relief for the checkbutton when the indicator is not drawn and
the checkbutton is off.  The default value is "raised".  By setting this option
to "flat" and setting -indicatoron to false and -overrelief to raised,
the effect is achieved 
of having a flat button that raises on mouse-over and which is
depressed when activated.  This is the behavior typically exhibited by
the Align-Left, Align-Right, and Center radiobuttons on the toolbar of a 
word-processor, for example.
</desc>
</optiondef>
<optiondef>
<name>-overrelief</name>
<dbname>overRelief</dbname>
<dbclass>OverRelief</dbclass>
<desc>Specifies an alternative relief for the radiobutton, to be used when the
mouse cursor is over the widget.  This option can be used to make
toolbar buttons, by configuring <b>-relief flat -overrelief
raised</b>.  If the value of this option is the empty string, then no
alternative relief is used when the mouse cursor is over the radiobutton.
The empty string is the default value.
</desc>
</optiondef>
<optiondef>
<name>-selectimage</name>
<dbname>selectImage</dbname>
<dbclass>SelectImage</dbclass>
<desc>Specifies an image to display (in place of the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option)
when the radiobutton is selected.
This option is ignored unless the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option has been
specified.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the radiobutton:  <b>normal</b>, <b>active</b>,
or <b>disabled</b>.  In normal state the radiobutton is displayed using the
<b>foreground</b> and <b>background</b> options.  The active state is
typically used when the pointer is over the radiobutton.  In active state
the radiobutton is displayed using the <b>activeForeground</b> and
<b>activeBackground</b> options.  Disabled state means that the radiobutton
should be insensitive:  the default bindings will refuse to activate
the widget and will ignore mouse button presses.
In this state the <b>disabledForeground</b> and
<b>background</b> options determine how the radiobutton is displayed.
</desc>
</optiondef>
<optiondef>
<name>-tristateimage</name>
<dbname>tristateImage</dbname>
<dbclass>TristateImage</dbclass>
<desc><new version="8.5">Specifies an image to display (in place of the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option)
when the radiobutton is selected.
This option is ignored unless the <b cat="AMBIGUOUS canvasitemtype cmd">image</b> option has been
specified.
</new></desc>
</optiondef>
<optiondef>
<name>-tristatevalue</name>
<dbname>tristateValue</dbname>
<dbclass>Value</dbclass>
<desc><new version="8.5">Specifies the value that causes the radiobutton to display the multi-value 
selection, also known as the tri-state mode.  Defaults to ``""''
</new></desc>
</optiondef>
<optiondef>
<name>-value</name>
<dbname>value</dbname>
<dbclass>Value</dbclass>
<desc>Specifies value to store in the button's associated variable whenever
this button is selected.
</desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies name of global variable to set whenever this button is
selected.  Changes in this variable also cause the button to select
or deselect itself.
Defaults to the value <b>selectedButton</b>.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies a desired width for the button.
If an image or bitmap is being displayed in the button, the value is in
screen units (i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>);
for text it is in characters.
If this option isn't specified, the button's desired width is computed
from the size of the image or bitmap or text being displayed in it.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">radiobutton</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a radiobutton widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the radiobutton such as its colors, font,
text, and initial relief.  The <b cat="AMBIGUOUS widget cmd">radiobutton</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A radiobutton is a widget that displays a textual string, bitmap or image
and a diamond or circle called an <i>indicator</i>.
If text is displayed, it must all be in a single font, but it
can occupy multiple lines on the screen (if it contains newlines
or if wrapping occurs because of the <b>wrapLength</b> option) and
one of the characters may optionally be underlined using the
<b>underline</b> option.  A radiobutton has
all of the behavior of a simple button: it can display itself in either
of three different ways, according to the <b>state</b> option;
it can be made to appear
raised, sunken, or flat; it can be made to flash; and it invokes
a Tcl command whenever mouse button 1 is clicked over the
check button.
</p>
<p>In addition, radiobuttons can be <i>selected</i>.
If a radiobutton is selected, the indicator is normally
drawn with a selected appearance, and
a Tcl variable associated with the radiobutton is set to a particular
value (normally 1).
Under Unix, the indicator is drawn with a sunken relief and a special
color.  Under Windows, the indicator is drawn with a round mark inside.
If the radiobutton is not selected, then the indicator is drawn with a
deselected appearance, and the associated variable is
set to a different value (typically 0).
The indicator is drawn without a round mark inside.
Typically, several radiobuttons share a single variable and the
value of the variable indicates which radiobutton is to be selected.
When a radiobutton is selected it sets the value of the variable to
indicate that fact;  each radiobutton also monitors the value of
the variable and automatically selects and deselects itself when the
variable's value changes.
<new version="8.5">If the variable's value matches the <b>tristateValue</b>, then the radiobutton is 
drawn using the tri-state mode.  This mode is used to indicate mixed or 
multiple values.  (This is used when the radiobutton represents the state 
of multiple items.)
</new>By default the variable <b>selectedButton</b>
is used;  its contents give the name of the button that is
selected, or the empty string if no button associated with that
variable is selected.
The name of the variable for a radiobutton,
plus the variable to be stored into it, may be modified with options
on the command line or in the option database.
Configuration options may also be used to modify the way the
indicator is displayed (or whether it is displayed at all).
By default a radiobutton is configured to select itself on button clicks.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">radiobutton</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for radiobutton widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">radiobutton</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">radiobutton</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>deselect</b></dt>
<dd>Deselects the radiobutton and sets the associated variable to an
empty string.
If this radiobutton was not currently selected, the command has
no effect.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>flash</b></dt>
<dd>Flashes the radiobutton.  This is accomplished by redisplaying the radiobutton
several times, alternating between active and normal colors.  At
the end of the flash the radiobutton is left in the same normal/active
state as when the command was invoked.
This command is ignored if the radiobutton's state is <b>disabled</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>invoke</b></dt>
<dd>Does just what would have happened if the user invoked the radiobutton
with the mouse: selects the button and invokes
its associated Tcl command, if there is one.
The return value is the return value from the Tcl command, or an
empty string if there is no command associated with the radiobutton.
This command is ignored if the radiobutton's state is <b>disabled</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>select</b></dt>
<dd>Selects the radiobutton and sets the associated variable to the
value corresponding to this widget.
</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>Tk automatically creates class bindings for radiobuttons that give them
the following default behavior:
</p>
<ol>
<li>On Unix systems, a radiobutton activates whenever the mouse passes
over it and deactivates whenever the mouse leaves the radiobutton.  On
Mac and Windows systems, when mouse button 1 is pressed over a
radiobutton, the button activates whenever the mouse pointer is inside
the button, and deactivates whenever the mouse pointer leaves the
button.
</li>
<li>When mouse button 1 is pressed over a radiobutton it is invoked (it
becomes selected and the command associated with the button is
invoked, if there is one).
</li>
<li>When a radiobutton has the input focus, the space key causes the radiobutton
to be invoked.
</li>
</ol>
<p>If the radiobutton's state is <b>disabled</b> then none of the above
actions occur:  the radiobutton is completely non-responsive.
</p>
<p>The behavior of radiobuttons can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<seealso>
<ref>checkbutton(n)</ref>
<ref>labelframe(n)</ref>
<ref>listbox(n)</ref>
<ref>options(n)</ref>
<ref>scale(n)</ref>
<ref>ttk_radiobutton(n)</ref>
</seealso>
<keywords>
<keyword>radiobutton</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="raise" title="raise" version="3.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: raise.n,v 1.3 2004/06/18 21:58:37 dkf Exp $
 -->
<?TROFF.TH title="raise" section="n" date="3.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>raise</name>
<desc>Change a window's position in the stacking order</desc>
</namesection>
<synopsis>
<syntax>
<cmd>raise</cmd> <m>window</m> ?<m>aboveThis</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>If the <i>aboveThis</i> argument is omitted then the command raises
<i>window</i> so that it is above all of its siblings in the stacking
order (it will not be obscured by any siblings and will obscure
any siblings that overlap it).
If <i>aboveThis</i> is specified then it must be the path name of
a window that is either a sibling of <i>window</i> or the descendant
of a sibling of <i>window</i>.
In this case the <cmd>raise</cmd> command will insert
<i>window</i> into the stacking order just above <i>aboveThis</i>
(or the ancestor of <i>aboveThis</i> that is a sibling of <i>window</i>);
this could end up either raising or lowering <i>window</i>.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Make a button appear to be in a sibling frame that was created after
it. This is is often necessary when building GUIs in the style where
you create your activity widgets first before laying them out on the
display:
</p>
<example>
button .b -text "Hi there!"
pack [frame .f -background blue]
pack [label .f.l1 -text "This is above"]
pack .b -in .f
pack [label .f.l2 -text "This is below"]
<cmd>raise</cmd> .b
</example>


</section>
<seealso>
<ref>lower(n)</ref>
</seealso>
<keywords>
<keyword>obscure</keyword>
<keyword>raise</keyword>
<keyword>stacking order</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="read" version="8.1" title="read">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: read.n,v 1.11 2005/05/10 18:34:02 kennykb Exp $
 -->
<?TROFF.TH title="read" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>read</name>
<desc>Read from a channel</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">read</b> ?<b>-nonewline</b>? <m>channelId</m>

<b cat="AMBIGUOUS ambiguous cmd">read</b> <m>channelId numChars</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>In the first form, the <b cat="AMBIGUOUS ambiguous cmd">read</b> command reads all of the data from
<i>channelId</i> up to the end of the file.  If the <b>-nonewline</b>
switch is specified then the last character of the file is discarded
if it is a newline.  In the second form, the extra argument specifies
how many characters to read.  Exactly that many characters will be
read and returned, unless there are fewer than <i>numChars</i> left in
the file; in this case all the remaining characters are returned.  If
the channel is configured to use a multi-byte encoding, then the
number of characters read may not be the same as the number of bytes
read.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as the
Tcl standard input channel (<b>stdin</b>), the return value from an
invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or the result of a channel
creation command provided by a Tcl extension. The channel must have
been opened for input.
</p>
<p>If <i>channelId</i> is in nonblocking mode, the command may not read as
many characters as requested: once all available input has been read,
the command will return the data that is available rather than
blocking for more input.  If the channel is configured to use a
multi-byte encoding, then there may actually be some bytes remaining
in the internal buffers that do not form a complete character.  These
bytes will not be returned until a complete character is available or
end-of-file is reached.  The <b>-nonewline</b> switch is ignored if
the command returns before reaching the end of the file.
</p>
<p><b>Read</b> translates end-of-line sequences in the input into
newline characters according to the <b>-translation</b> option
for the channel.
See the <cmd>fconfigure</cmd> manual entry for a discussion on ways in
which <cmd>fconfigure</cmd> will alter input.

</p>
</section>
<section>
<title>USE WITH SERIAL PORTS</title>


<p>For most applications a channel connected to a serial port should be
configured to be nonblocking: <cmd>fconfigure</cmd> <i>channelId</i> <b>-blocking</b>
<i>0</i>.  Then <b cat="AMBIGUOUS ambiguous cmd">read</b> behaves much like described above.  Care
must be taken when using <b cat="AMBIGUOUS ambiguous cmd">read</b> on blocking serial ports:
</p>
<commandlist>
<commanddef>
<command><b>read</b> <m>channelId numChars</m> </command>
<desc>In this form <b cat="AMBIGUOUS ambiguous cmd">read</b> blocks until <i>numChars</i> have been received
from the serial port.
</desc>
</commanddef>
<commanddef>
<command><b>read</b> <m>channelId</m> </command>
<desc>In this form <b cat="AMBIGUOUS ambiguous cmd">read</b> blocks until the reception of the end-of-file
character, see <b>fconfigure -eofchar</b>. If there no end-of-file
character has been configured for the channel, then <b cat="AMBIGUOUS ambiguous cmd">read</b> will
block forever.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLE</title>
<p>This example code reads a file all at once, and splits it into a list,
with each line in the file corresponding to an element in the list:
</p>
<example>
set fl [open /proc/meminfo]
set data [<b cat="AMBIGUOUS ambiguous cmd">read</b> $fl]
close $fl
set lines [split $data \n]
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>eof(n)</ref>
<ref>fblocked(n)</ref>
<ref>fconfigure(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>blocking</keyword>
<keyword>channel</keyword>
<keyword>end of line</keyword>
<keyword>end of file</keyword>
<keyword>nonblocking</keyword>
<keyword>read</keyword>
<keyword>translation</keyword>
<keyword>encoding</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="RecEvalObj" title="Tcl_RecordAndEvalObj" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: RecEvalObj.3,v 1.5 2004/09/18 17:01:06 dkf Exp $
 -->
<?TROFF.TH title="Tcl_RecordAndEvalObj" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_RecordAndEvalObj</name>
<desc>save command on history list before evaluating</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_RecordAndEvalObj</fun>(<m>interp</m>, <m>cmdPtr</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter in which to evaluate command.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="cmdPtr">*cmdPtr</name>
<argmode>in</argmode>
<desc>Points to a Tcl object containing a command (or sequence of commands)
to execute.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>An OR'ed combination of flag bits.  <b>TCL_NO_EVAL</b> means record the
command but don't evaluate it.  <b>TCL_EVAL_GLOBAL</b> means evaluate
the command at global level instead of the current stack level.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_RecordAndEvalObj</fun> is invoked to record a command as an event
on the history list and then execute it using <fun>Tcl_EvalObjEx</fun>
(or <fun>Tcl_GlobalEvalObj</fun> if the <b>TCL_EVAL_GLOBAL</b> bit is set
in <i>flags</i>).
It returns a completion code such as <b>TCL_OK</b> just like <fun>Tcl_EvalObjEx</fun>,
as well as a result object containing additional information
(a result value or error message)
that can be retrieved using <fun>Tcl_GetObjResult</fun>.
If you don't want the command recorded on the history list then
you should invoke <fun>Tcl_EvalObjEx</fun> instead of <fun>Tcl_RecordAndEvalObj</fun>.
Normally <fun>Tcl_RecordAndEvalObj</fun> is only called with top-level
commands typed by the user, since the purpose of history is to
allow the user to re-issue recently invoked commands.
If the <i>flags</i> argument contains the <b>TCL_NO_EVAL</b> bit then
the command is recorded without being evaluated.

</p>
</section>
<seealso>
<ref>Tcl_EvalObjEx</ref>
<ref>Tcl_GetObjResult</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>event</keyword>
<keyword>execute</keyword>
<keyword>history</keyword>
<keyword>interpreter</keyword>
<keyword>object</keyword>
<keyword>record</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="RecordEval" title="Tcl_RecordAndEval" version="7.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: RecordEval.3,v 1.7 2004/10/07 15:15:47 dkf Exp $
 -->
<?TROFF.TH title="Tcl_RecordAndEval" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_RecordAndEval</name>
<desc>save command on history list before evaluating</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_RecordAndEval</fun>(<m>interp</m>, <m>cmd</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter in which to evaluate command.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="cmd">*cmd</name>
<argmode>in</argmode>
<desc>Command (or sequence of commands) to execute.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>An OR'ed combination of flag bits.  <b>TCL_NO_EVAL</b> means record the
command but don't evaluate it.  <b>TCL_EVAL_GLOBAL</b> means evaluate
the command at global level instead of the current stack level.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_RecordAndEval</fun> is invoked to record a command as an event
on the history list and then execute it using <fun>Tcl_Eval</fun>
(or <fun>Tcl_GlobalEval</fun> if the <b>TCL_EVAL_GLOBAL</b> bit is set in <i>flags</i>).
It returns a completion code such as <b>TCL_OK</b> just like <fun>Tcl_Eval</fun>
and it leaves information in the interpreter's result.
If you don't want the command recorded on the history list then
you should invoke <fun>Tcl_Eval</fun> instead of <fun>Tcl_RecordAndEval</fun>.
Normally <fun>Tcl_RecordAndEval</fun> is only called with top-level
commands typed by the user, since the purpose of history is to
allow the user to re-issue recently-invoked commands.
If the <i>flags</i> argument contains the <b>TCL_NO_EVAL</b> bit then
the command is recorded without being evaluated.
</p>
<p>Note that <fun>Tcl_RecordAndEval</fun> has been largely replaced by the
object-based procedure <fun>Tcl_RecordAndEvalObj</fun>.
That object-based procedure records and optionally executes
a command held in a Tcl object instead of a string.

</p>
</section>
<seealso>
<ref>Tcl_RecordAndEvalObj</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>event</keyword>
<keyword>execute</keyword>
<keyword>history</keyword>
<keyword>interpreter</keyword>
<keyword>record</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="refchan" version="8.5" title="reflectedchan">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 2006 Andreas Kupries
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: refchan.n,v 1.5 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="reflectedchan" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>reflectedchan</name>
<desc>Command handler API of reflected channels, version 1</desc>
</namesection>
<synopsis>
<syntax>
<b>cmdPrefix</b> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The Tcl-level handler for a reflected channel has to be a command with
subcommands (termed an <i>ensemble</i>, as it is a command such as that
created by <b>namespace ensemble create</b>, though the implementation
of handlers for reflected channel <i>is not</i> tied to <b>namespace
ensemble</b>s in any way). Note that <i>cmdPrefix</i> is whatever was
specified in the call to <b>chan create</b>, and may consist of
multiple arguments; this will be expanded to multiple words in place
of the prefix.
</p>
<p>Of all the possible subcommands, the handler <i>must</i> support
<b>initialize</b>, <b>finalize</b>, and <b>watch</b>. Support for the
other subcommands is optional.
</p>
<subsection>
<title>MANDATORY SUBCOMMANDS</title>
<dl>
<dle>
<dt><m>cmdPrefix</m> <b>initialize</b> <m>channelId mode</m></dt>
<dd>An invocation of this subcommand will be the first call the
<i>cmdPrefix</i> will receive for the specified new <i>channelId</i>. It
is the responsibility of this subcommand to set up any internal data
structures required to keep track of the channel and its state.
<p>The return value of the method has to be a list containing the names
of all subcommands supported by the <i>cmdPrefix</i>. This also tells
the Tcl core which version of the API for reflected channels is used by
this command handler.
</p><p>Any error thrown by the method will abort the creation of the channel
and no channel will be created. The thrown error will appear as error
thrown by <b>chan create</b>. Any exception other than an <b cat="AMBIGUOUS ambiguous cmd">error</b>
(e.g. <cmd>break</cmd>, etc.) is treated as (and converted to) an error.
</p><p><b>Note:</b> If the creation of the channel was aborted due to failures
here, then the <b>finalize</b> subcommand will not be called.
</p><p>The <i>mode</i> argument tells the handler whether the channel was
opened for reading, writing, or both. It is a list containing any of
the strings "<b cat="AMBIGUOUS ambiguous cmd">read</b>" or "<b>write</b>". The list will always
contain at least one element.
</p><p>The subcommand must throw an error if the chosen mode is not
supported by the <i>cmdPrefix</i>.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>finalize</b> <m>channelId</m></dt>
<dd>An invocation of this subcommand will be the last call the
<i>cmdPrefix</i> will receive for the specified <i>channelId</i>. It will
be generated just before the destruction of the data structures of the
channel held by the Tcl core. The command handler <i>must not</i>
access the <i>channelId</i> anymore in no way. Upon this subcommand being
called, any internal resources allocated to this channel must be
cleaned up.
<p>The return value of this subcommand is ignored.
</p><p>If the subcommand throws an error the command which caused its
invocation (usually <cmd>close</cmd>) will appear to have thrown this
error. Any exception beyond <i>error</i> (e.g. <i>break</i>, etc.) is
treated as (and converted to) an error.
</p><p>This subcommand is not invoked if the creation of the channel was
aborted during <b>initialize</b> (See above).
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>watch</b> <m>channelId eventspec</m></dt>
<dd>This subcommand notifies the <i>cmdPrefix</i> that the specified
<i>channelId</i> is interested in the events listed in the
<i>eventspec</i>. This argument is a list containing any of "<b cat="AMBIGUOUS ambiguous cmd">read</b>"
and "<b>write</b>". The list may be empty, which signals that the
channel does not wish to be notified of any events. In that situation,
the handler should disable event generation completely.
<p><b>Warning:</b> Any return value of the subcommand is ignored. This
includes all errors thrown by the subcommand, break, continue, and
custom return codes.
</p><p>This subcommand interacts with <b>chan postevent</b>. Trying to post an
event which was not listed in the last call to <b>watch</b> will cause
<b>chan postevent</b> to throw an error.
</p></dd>
</dle>
</dl>
</subsection>
<subsection>
<title>OPTIONAL SUBCOMMANDS</title>
<dl>
<dle>
<dt><m>cmdPrefix</m> <b>read</b> <m>channelId count</m></dt>
<dd>This <i>optional</i> subcommand is called when the user requests data from the
channel <i>channelId</i>. <i>count</i> specifies how many <b>bytes</b> have been
requested. If the subcommand is not supported then it is not possible to read
from the channel handled by the command.
<p>The return value of this subcommand is taken as the requested data
<i>bytes</i>. If the returned data contains more bytes than requested,
an error will be signaled and later thrown by the command which
performed the read (usually <cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">read</b>). However,
returning fewer bytes than requested is acceptable.
</p><p>If the subcommand throws an error, the command which caused its
invocation (usually <cmd>gets</cmd>, or <b cat="AMBIGUOUS ambiguous cmd">read</b>) will appear to have
thrown this error. Any exception beyond <i>error</i>, (e.g.
<i>break</i>, etc.) is treated as and converted to an error.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>write</b> <m>channelId data</m></dt>
<dd>This <i>optional</i> subcommand is called when the user writes data to
the channel <i>channelId</i>. The <i>data</i> argument contains <i>bytes</i>, not
characters. Any type of transformation (EOL, encoding) configured for
the channel has already been applied at this point. If this subcommand
is not supported then it is not possible to write to the channel
handled by the command.
<p>The return value of the subcommand is taken as the number of bytes
written by the channel. Anything non-numeric will cause an error to be
signaled and later thrown by the command which performed the write. A
negative value implies that the write failed. Returning a value
greater than the number of bytes given to the handler, or zero, is
forbidden and will cause the Tcl core to throw an error.
</p><p>If the subcommand throws an error the command which caused its
invocation (usually <cmd>puts</cmd>) will appear to have thrown this error.
Any exception beyond <i>error</i> (e.g. <i>break</i>, etc.) is treated
as and converted to an error.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>seek</b> <m>channelId offset base</m></dt>
<dd>This <i>optional</i> subcommand is responsible for the handling of
<cmd>seek</cmd> and <cmd>tell</cmd> requests on the channel <i>channelId</i>. If it is not
supported then seeking will not be possible for the channel.
<p>The <i>base</i> argument is one of
</p><dl>
<dle>
<dt><b>start</b></dt>
<dd>Seeking is relative to the beginning of the channel.
</dd>
</dle>
<dle>
<dt><b>current</b></dt>
<dd>Seeking is relative to the current seek position.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Seeking is relative to the end of the channel.
</dd>
</dle>
</dl><p>The <i>base</i> argument of the builtin <b>chan seek</b> command takes
the same names.
</p><p>The <i>offset</i> is an integer number specifying the amount of
<b>bytes</b> to seek forward or backward. A positive number should seek
forward, and a negative number should seek backward.
</p><p>A channel may provide only limited seeking. For example sockets can
seek forward, but not backward.
</p><p>The return value of the subcommand is taken as the (new) location of
the channel, counted from the start. This has to be an integer number
greater than or equal to zero.
</p><p>If the subcommand throws an error the command which caused its
invocation (usually <cmd>seek</cmd>, or <cmd>tell</cmd>) will appear to have
thrown this error. Any exception beyond <i>error</i> (e.g. <i>break</i>,
etc.) is treated as and converted to an error.
</p><p>The offset/base combination of 0/"<b>current</b>" signals a <cmd>tell</cmd>
request, i.e. seek nothing relative to the current location, making
the new location identical to the current one, which is then returned.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>configure</b> <m>channelId option value</m></dt>
<dd>This <i>optional</i> subcommand is for setting the type-specific options of
channel <i>channelId</i>. The <i>option</i> argument indicates the option to be
written, and the <i>value</i> argument indicates the value to set the option to.
<p>This subcommand will never try to update more than one option at a
time; that is behavior implemented in the Tcl channel core.
</p><p>The return value of the subcommand is ignored.
</p><p>If the subcommand throws an error the command which performed the
(re)configuration or query (usually <cmd>fconfigure</cmd> or <b>chan
configure</b>) will appear to have thrown this error. Any exception
beyond <i>error</i> (e.g. <i>break</i>, etc.) is treated as and
converted to an error.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>cget</b> <m>channelId option</m></dt>
<dd>This <i>optional</i> subcommand is used when reading a single type-specific
option of channel <i>channelId</i>. If this subcommand is supported then the
subcommand <b>cgetall</b> must be supported as well.
<p>The subcommand should return the value of the specified <i>option</i>.
</p><p>If the subcommand throws an error, the command which performed the
(re)configuration or query (usually <cmd>fconfigure</cmd>) will appear to
have thrown this error. Any exception beyond <i>error</i> (e.g.
<i>break</i>, etc.) is treated as and converted to an error.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>cgetall</b> <m>channelId</m></dt>
<dd>This <i>optional</i> subcommand is used for reading all type-specific options
of channel <i>channelId</i>. If this subcommand is supported then the
subcommand <b>cget</b> has to be supported as well.
<p>The subcommand should return a list of all options and their values.
This list must have an even number of elements.
</p><p>If the subcommand throws an error the command which performed the
(re)configuration or query (usually <cmd>fconfigure</cmd>) will appear to
have thrown this error. Any exception beyond <i>error</i> (e.g.
<i>break</i>, etc.) is treated as and converted to an error.
</p></dd>
</dle>
<dle>
<dt><m>cmdPrefix</m> <b>blocking</b> <m>channelId mode</m></dt>
<dd>This <i>optional</i> subcommand handles changes to the blocking mode of the
channel <i>channelId</i>. The <i>mode</i> is a boolean flag. A true value means
that the channel has to be set to blocking, and a false value means that the
channel should be non-blocking.
<p>The return value of the subcommand is ignored.
</p><p>If the subcommand throws an error the command which caused its
invocation (usually <cmd>fconfigure</cmd>) will appear to have thrown this
error. Any exception beyond <i>error</i> (e.g. <i>break</i>, etc.) is
treated as and converted to an error.
</p></dd>
</dle>
</dl>
</subsection>
</section>
<section>
<title>NOTES</title>
<p>Some of the functions supported in channels defined in Tcl's C
interface are not available to channels reflected to the Tcl level.
</p>
<p>The function <type>Tcl_DriverGetHandleProc</type> is not supported; i.e.
reflected channels do not have OS specific handles.
</p>
<p>The function <type>Tcl_DriverHandlerProc</type> is not supported. This driver
function is relevant only for stacked channels, i.e. transformations.
Reflected channels are always base channels, not transformations.
</p>
<p>The function <type>Tcl_DriverFlushProc</type> is not supported. This is
because the current generic I/O layer of Tcl does not use this
function anywhere at all. Therefore support at the Tcl level makes no
sense either. This may be altered in the future (through extending the
API defined here and changing its version number) should the function
be used at some time in the future.
</p>
</section>
<seealso>
<ref>chan(n)</ref>
</seealso>
<keywords>
<keyword>channel</keyword>
<keyword>reflection</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="RegConfig" title="Tcl_RegisterConfig" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2002 Andreas Kupries <andreas_kupries@users.sourceforge.net>
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: RegConfig.3,v 1.6 2004/10/07 15:15:47 dkf Exp $
 -->
<?TROFF.TH title="Tcl_RegisterConfig" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_RegisterConfig</name>
<desc>procedures to register embedded configuration information</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_RegisterConfig</fun>(<m>interp</m>, <m>pkgName</m>, <m>configuration</m>, <m>valEncoding</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Refers to the interpreter the embedded configuration information is
registered for. Must not be NULL.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pkgName">*pkgName</name>
<argmode>in</argmode>
<desc>Contains the name of the package registering the embedded
configuration as ASCII string. This means that this information is in
UTF-8 too. Must not be NULL.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Config</argtype>
<name name="configuration">*configuration</name>
<argmode>in</argmode>
<desc>Refers to an array of Tcl_Config entries containing the information
embedded in the binary library. Must not be NULL. The end of the array
is signaled by either a key identical to NULL, or a key referring to
the empty string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="valEncoding">*valEncoding</name>
<argmode>in</argmode>
<desc>Contains the name of the encoding used to store the configuration
values as ASCII string. This means that this information is in UTF-8
too. Must not be NULL.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The function described here has its base in TIP 59 and provides
extensions with support for the embedding of configuration
information into their binary library and the generation of a
Tcl-level interface for querying this information.
</p>
<p>To embed configuration information into their binary library an
extension has to define a non-volatile array of Tcl_Config entries in
one if its source files and then call <fun>Tcl_RegisterConfig</fun> to
register that information.
</p>
<p><fun>Tcl_RegisterConfig</fun> takes four arguments; first, a reference to
the interpreter we are registering the information with, second, the
name of the package registering its configuration information, third,
a pointer to an array of structures, and fourth a string declaring the
encoding used by the configuration values.
</p>
<p>The string <i>valEncoding</i> contains the name of an encoding known to
Tcl.  All these names are use only characters in the ASCII subset of
UTF-8 and are thus implicitly in the UTF-8 encoding. It is expected
that keys are legible English text and therefore using the ASCII
subset of UTF-8. In other words, they are expected to be in UTF-8
too. The values associated with the keys can be any string
however. For these the contents of <i>valEncoding</i> define which
encoding was used to represent the characters of the strings.
</p>
<p>Each element of the <i>configuration</i> array refers to two strings
containing the key and the value associated with that key. The end of
the array is signaled by either an empty key or a key identical to
NULL. The function makes <b>no</b> copy of the <i>configuration</i>
array. This means that the caller has to make sure that the memory
holding this array is never released. This is the meaning behind the
word <b>non-volatile</b> used earlier. The easiest way to accomplish
this is to define a global static array of Tcl_Config entries. See the
file "generic/tclPkgConfig.c" in the sources of the Tcl core for an
example.
</p>
<p>When called <fun>Tcl_RegisterConfig</fun> will
</p>
<dl>
<dle>
<dt>(1)</dt>
<dd>create a namespace having the provided <i>pkgName</i>, if not yet
existing.
</dd>
</dle>
<dle>
<dt>(2)</dt>
<dd>create the command <b>pkgconfig</b> in that namespace and link it to
the provided information so that the keys from _configuration_ and
their associated values can be retrieved through calls to
<b>pkgconfig</b>.
</dd>
</dle>
</dl>
<p>The command <b>pkgconfig</b> will provide two subcommands, <b cat="AMBIGUOUS ambiguous cmd">list</b>
and <b>get</b>:
</p>
<dl>
<dle>
<dt>::<m>pkgName</m>::<b>pkgconfig</b> list</dt>
<dd>Returns a list containing the names of all defined keys.
</dd>
</dle>
<dle>
<dt>::<m>pkgName</m>::<b>pkgconfig</b> get <m>key</m></dt>
<dd>Returns the configuration value associated with the specified
<i>key</i>.
</dd>
</dle>
</dl>


</section>
<section>
<title>TCL_CONFIG</title>


<p>The <b>Tcl_Config</b> structure contains the following fields:
</p>
<syntax cat="type" name="Tcl_Config" scope="global">
typedef struct Tcl_Config {
        const char* key;
        const char* value;
} Tcl_Config;
</syntax>




</section>
<keywords>
<keyword>embedding</keyword>
<keyword>configuration</keyword>
<keyword>bianry library</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="regexp" version="8.3" title="regexp">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: regexp.n,v 1.19 2005/05/10 18:34:02 kennykb Exp $
 -->
<?TROFF.TH title="regexp" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>regexp</name>
<desc>Match a regular expression against a string</desc>
</namesection>
<synopsis>
<syntax>
<cmd>regexp</cmd> ?<m>switches</m>? <m>exp string</m> ?<m>matchVar</m>? ?<m>subMatchVar subMatchVar ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Determines whether the regular expression <i>exp</i> matches part or
all of <i>string</i> and returns 1 if it does, 0 if it doesn't, unless
<b>-inline</b> is specified (see below).
(Regular expression matching is described in the <b>re_syntax</b>
reference page.)
</p>
<p>If additional arguments are specified after <i>string</i> then they
are treated as the names of variables in which to return
information about which part(s) of <i>string</i> matched <i>exp</i>.
<i>MatchVar</i> will be set to the range of <i>string</i> that
matched all of <i>exp</i>.  The first <i>subMatchVar</i> will contain
the characters in <i>string</i> that matched the leftmost parenthesized
subexpression within <i>exp</i>, the next <i>subMatchVar</i> will
contain the characters that matched the next parenthesized
subexpression to the right in <i>exp</i>, and so on.
</p>
<p>If the initial arguments to <cmd>regexp</cmd> start with <b>-</b> then
they are treated as switches.  The following switches are
currently supported:
</p>
<dl>
<dle>
<dt><b>-about</b></dt>
<dd>Instead of attempting to match the regular expression, returns a list
containing information about the regular expression.  The first
element of the list is a subexpression count.  The second element is a
list of property names that describe various attributes of the regular
expression. This switch is primarily intended for debugging purposes.
</dd>
</dle>
<dle>
<dt><b>-expanded</b></dt>
<dd>Enables use of the expanded regular expression syntax where
whitespace and comments are ignored.  This is the same as specifying
the <b>(?x)</b> embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-indices</b></dt>
<dd>Changes what is stored in the <i>subMatchVar</i>s. 
Instead of storing the matching characters from <i>string</i>,
each variable
will contain a list of two decimal strings giving the indices
in <i>string</i> of the first and last characters in the matching
range of characters.
</dd>
</dle>
<dle>
<dt><b>-line</b></dt>
<dd>Enables newline-sensitive matching.  By default, newline is a
completely ordinary character with no special meaning.  With this
flag, `[^' bracket expressions and `.' never match newline, `^'
matches an empty string after any newline in addition to its normal
function, and `$' matches an empty string before any newline in
addition to its normal function.  This flag is equivalent to
specifying both <b>-linestop</b> and <b>-lineanchor</b>, or the
<b>(?n)</b> embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-linestop</b></dt>
<dd>Changes the behavior of `[^' bracket expressions and `.' so that they
stop at newlines.  This is the same as specifying the <b>(?p)</b>
embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-lineanchor</b></dt>
<dd>Changes the behavior of `^' and `$' (the ``anchors'') so they match the
beginning and end of a line respectively.  This is the same as
specifying the <b>(?w)</b> embedded option (see the <b>re_syntax</b>
manual page).
</dd>
</dle>
<dle>
<dt><b>-nocase</b></dt>
<dd>Causes upper-case characters in <i>string</i> to be treated as
lower case during the matching process.
</dd>
</dle>
<dle>
<dt><b>-all</b></dt>
<dd>Causes the regular expression to be matched as many times as possible
in the string, returning the total number of matches found.  If this
is specified with match variables, they will contain information for
the last match only.
</dd>
</dle>
<dle>
<dt><b>-inline</b></dt>
<dd>Causes the command to return, as a list, the data that would otherwise
be placed in match variables.  When using <b>-inline</b>,
match variables may not be specified.  If used with <b>-all</b>, the
list will be concatenated at each iteration, such that a flat list is
always returned.  For each match iteration, the command will append the
overall match data, plus one element for each subexpression in the
regular expression.  Examples are:
<example>
    regexp -inline -- {\w(\w)} " inlined "
 =&gt; {in n}
    regexp -all -inline -- {\w(\w)} " inlined "
 =&gt; {in n li i ne e}
</example></dd>
</dle>
<dle>
<dt><b>-start</b> <m>index</m></dt>
<dd>Specifies a character index offset into the string to start
matching the regular expression at.  
<new version="8.5">The <i>index</i> value is interpreted in the same manner
as the <i>index</i> argument to <b>string index</b>.
</new>When using this switch, `^'
will not match the beginning of the line, and \A will still
match the start of the string at <i>index</i>.  If <b>-indices</b>
is specified, the indices will be indexed starting from the
absolute beginning of the input string.
<i>index</i> will be constrained to the bounds of the input string.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of switches.  The argument following this one will
be treated as <i>exp</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>If there are more <i>subMatchVar</i>'s than parenthesized
subexpressions within <i>exp</i>, or if a particular subexpression
in <i>exp</i> doesn't match the string (e.g. because it was in a
portion of the expression that wasn't matched), then the corresponding
<i>subMatchVar</i> will be set to ``<b>-1 -1</b>'' if <b>-indices</b>
has been specified or to an empty string otherwise.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Find the first occurrence of a word starting with <b>foo</b> in a
string that is not actually an instance of <b>foobar</b>, and get the
letters following it up to the end of the word into a variable:
</p>
<example>
<cmd>regexp</cmd> {\&lt;foo(?!bar\&gt;)(\w*)} $string -&gt; restOfWord
</example>
<p>Note that the whole matched substring has been placed in the variable
<b>-&gt;</b> which is a name chosen to look nice given that we are not
actually interested in its contents.
</p>
<p>Find the index of the word <b>badger</b> (in any case) within a string
and store that in the variable <b>location</b>:
</p>
<example>
<cmd>regexp</cmd> -indices {(?i)\&lt;badger\&gt;} $string location
</example>
<p>Count the number of octal digits in a string:
</p>
<example>
<cmd>regexp</cmd> -all {[0-7]} $string
</example>
<p>List all words (consisting of all sequences of non-whitespace
characters) in a string:
</p>
<example>
<cmd>regexp</cmd> -all -inline {\S+} $string
</example>


</section>
<seealso>
<ref>re_syntax(n)</ref>
<ref>regsub(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>match</keyword>
<keyword>regular expression</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="package" id="registry" version="1.1" title="registry">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
     Copyright (c) 2002 ActiveState Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: registry.n,v 1.14 2005/05/10 18:34:03 kennykb Exp $
 -->
<?TROFF.TH title="registry" section="n" date="1.1" source="registry" manual="Tcl Bundled Packages" ?>
<namesection>
<name>registry</name>
<desc>Manipulate the Windows registry</desc>
</namesection>
<synopsis>
<syntax>

<b>package require registry 1.1</b>

<b>registry</b> <m>option</m> <m>keyName</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <b>registry</b> package provides a general set of operations for
manipulating the Windows registry.  The package implements the
<b>registry</b> Tcl command.  This command is only supported on the
Windows platform.  Warning: this command should be used with caution
as a corrupted registry can leave your system in an unusable state.
</p>
<p><i>KeyName</i> is the name of a registry key.  Registry keys must be
one of the following forms:
</p>
<dl>
<dle>
<dt/>
<dd><b>\\</b><i>hostname</i><b>\</b><i>rootname</i><b>\</b><i>keypath</i>
</dd>
</dle>
<dle>
<dt/>
<dd><i>rootname</i><b>\</b><i>keypath</i>
</dd>
</dle>
<dle>
<dt/>
<dd><i>rootname</i>
</dd>
</dle>
</dl>
<p><i>Hostname</i> specifies the name of any valid Windows
host that exports its registry.  The <i>rootname</i> component must be
one of <b>HKEY_LOCAL_MACHINE</b>, <b>HKEY_USERS</b>,
<b>HKEY_CLASSES_ROOT</b>, <b>HKEY_CURRENT_USER</b>,
<b>HKEY_CURRENT_CONFIG</b>, <b>HKEY_PERFORMANCE_DATA</b>, or
<b>HKEY_DYN_DATA</b>.  The <i>keypath</i> can be one or more
registry key names separated by backslash (<b>\</b>) characters.
</p>
<p><i>Option</i> indicates what to do with the registry key name.  Any
unique abbreviation for <i>option</i> is acceptable.  The valid options
are:
</p>
<dl>
<dle>
<dt><b>registry broadcast</b> <m>keyName</m> ?<m>-timeout milliseconds</m>?</dt>
<dd>Sends a broadcast message to the system and running programs to notify them
of certain updates.  This is necessary to propagate changes to key registry
keys like Environment.  The timeout specifies the amount of time, in
milliseconds, to wait for applications to respond to the broadcast message.
It defaults to 3000.  The following example demonstrates how to add a path
to the global Environment and notify applications of the change without
requiring a logoff/logon step (assumes admin privileges):
<example>
set regPath {HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Environment}
set curPath [registry get $regPath "Path"]
registry set $regPath "Path" "$curPath;$addPath"
registry broadcast "Environment"
</example></dd>
</dle>
<dle>
<dt><b>registry delete</b> <m>keyName</m> ?<m>valueName</m>?</dt>
<dd>If the optional <i>valueName</i> argument is present, the specified
value under <i>keyName</i> will be deleted from the registry.  If the
optional <i>valueName</i> is omitted, the specified key and any subkeys
or values beneath it in the registry hierarchy will be deleted.  If
the key could not be deleted then an error is generated.  If the key
did not exist, the command has no effect.
</dd>
</dle>
<dle>
<dt><b>registry get</b> <m>keyName valueName</m></dt>
<dd>Returns the data associated with the value <i>valueName</i> under the key
<i>keyName</i>.  If either the key or the value does not exist, then an
error is generated.  For more details on the format of the returned
data, see <ref refid="supported-types">SUPPORTED TYPES</ref>, below.
</dd>
</dle>
<dle>
<dt><b>registry keys</b> <m>keyName</m> ?<m>pattern</m>?</dt>
<dd>If <i>pattern</i> isn't specified, returns a list of names of all the
subkeys of <i>keyName</i>.  If <i>pattern</i> is specified, only those
names matching <i>pattern</i> are returned.  Matching is determined
using the same rules as for <b cat="AMBIGUOUS ambiguous cmd">string</b> <b>match</b>.  If the
specified <i>keyName</i> does not exist, then an error is generated.
</dd>
</dle>
<dle>
<dt><b>registry set</b> <m>keyName</m> ?<m>valueName data</m> ?<m>type</m>??</dt>
<dd>If <i>valueName</i> isn't specified, creates the key <i>keyName</i> if
it doesn't already exist.  If <i>valueName</i> is specified, creates
the key <i>keyName</i> and value <i>valueName</i> if necessary.  The
contents of <i>valueName</i> are set to <i>data</i> with the type
indicated by <i>type</i>.  If <i>type</i> isn't specified, the type
<b>sz</b> is assumed.  For more details on the data and type arguments,
see <ref refid="supported-types">SUPPORTED TYPES</ref> below.
</dd>
</dle>
<dle>
<dt><b>registry type</b> <m>keyName valueName</m></dt>
<dd>Returns the type of the value <i>valueName</i> in the key
<i>keyName</i>.  For more information on the possible types, see
SUPPORTED TYPES, below.
</dd>
</dle>
<dle>
<dt><b>registry values</b> <m>keyName</m> ?<m>pattern</m>?</dt>
<dd>If <i>pattern</i> isn't specified, returns a list of names of all the
values of <i>keyName</i>.  If <i>pattern</i> is specified, only those
names matching <i>pattern</i> are returned.  Matching is determined
using the same rules as for <b cat="AMBIGUOUS ambiguous cmd">string</b> <b>match</b>.

</dd>
</dle>
</dl>
</section>
<section id="supported-types">
<title>SUPPORTED TYPES</title>
<p>Each value under a key in the registry contains some data of a
particular type in a type-specific representation.  The <b>registry</b>
command converts between this internal representation and one that can
be manipulated by Tcl scripts.  In most cases, the data is simply
returned as a Tcl string.  The type indicates the intended use for the
data, but does not actually change the representation.  For some
types, the <b>registry</b> command returns the data in a different form to
make it easier to manipulate.  The following types are recognized by the
registry command:
</p>
<dl>
<dle>
<dt><b>binary</b></dt>
<dd>The registry value contains arbitrary binary data.  The data is represented
exactly in Tcl, including any embedded nulls.
</dd>
</dle>
<dle>
<dt><b>none</b></dt>
<dd>The registry value contains arbitrary binary data with no defined
type.  The data is represented exactly in Tcl, including any embedded
nulls.
</dd>
</dle>
<dle>
<dt><b>sz</b></dt>
<dd>The registry value contains a null-terminated string.  The data is 
represented in Tcl as a string.
</dd>
</dle>
<dle>
<dt><b>expand_sz</b></dt>
<dd>The registry value contains a null-terminated string that contains
unexpanded references to environment variables in the normal Windows
style (for example, "%PATH%").  The data is represented in Tcl as a
string.
</dd>
</dle>
<dle>
<dt><b>dword</b></dt>
<dd>The registry value contains a little-endian 32-bit number.  The data is
represented in Tcl as a decimal string.
</dd>
</dle>
<dle>
<dt><b>dword_big_endian</b></dt>
<dd>The registry value contains a big-endian 32-bit number.  The data is
represented in Tcl as a decimal string.
</dd>
</dle>
<dle>
<dt><b>link</b></dt>
<dd>The registry value contains a symbolic link.  The data is represented
exactly in Tcl, including any embedded nulls.
</dd>
</dle>
<dle>
<dt><b>multi_sz</b></dt>
<dd>The registry value contains an array of null-terminated strings.  The
data is represented in Tcl as a list of strings.
</dd>
</dle>
<dle>
<dt><b>resource_list</b></dt>
<dd>The registry value contains a device-driver resource list.  The data
is represented exactly in Tcl, including any embedded nulls.
</dd>
</dle>
</dl>
<p>In addition to the symbolically named types listed above, unknown
types are identified using a 32-bit integer that corresponds to the
type code returned by the system interfaces.  In this case, the data
is represented exactly in Tcl, including any embedded nulls.
</p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<p>The registry command is only available on Windows.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Print out how double-clicking on a Tcl script file will invoke a Tcl
interpreter:
</p>
<example>
package require registry
set ext .tcl

# Read the type name
set type [<b>registry get</b> HKEY_CLASSES_ROOT\\$ext {}]
# Work out where to look for the command
set path HKEY_CLASSES_ROOT\\$type\\Shell\\Open\\command
# Read the command!
set command [<b>registry get</b> $path {}]

puts "$ext opens with $command"
</example>


</section>
<keywords>
<keyword>registry</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="regsub" version="8.3" title="regsub">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: regsub.n,v 1.17 2007/03/19 11:50:50 dkf Exp $
 -->
<?TROFF.TH title="regsub" section="n" date="8.3" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>regsub</name>
<desc>Perform substitutions based on regular expression pattern matching</desc>
</namesection>
<synopsis>
<syntax>
<cmd>regsub</cmd> ?<m>switches</m>? <m>exp string subSpec</m> ?<m>varName</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command matches the regular expression <i>exp</i> against
<i>string</i>,
and either copies <i>string</i> to the variable whose name is
given by <i>varName</i> or returns <i>string</i> if <i>varName</i> is not
present.
(Regular expression matching is described in the <b>re_syntax</b>
reference page.)
If there is a match, then while copying <i>string</i> to <i>varName</i>
(or to the result of this command if <i>varName</i> is not present)
the portion of <i>string</i> that
matched <i>exp</i> is replaced with <i>subSpec</i>.
If <i>subSpec</i> contains a ``&amp;'' or ``\0'', then it is replaced
in the substitution with the portion of <i>string</i> that
matched <i>exp</i>.
If <i>subSpec</i> contains a ``\<i>n</i>'', where <i>n</i> is a digit
between 1 and 9, then it is replaced in the substitution with
the portion of <i>string</i> that matched the <i>n</i>-th
parenthesized subexpression of <i>exp</i>.
Additional backslashes may be used in <i>subSpec</i> to prevent special
interpretation of ``&amp;'' or ``\0'' or ``\<i>n</i>'' or
backslash.
The use of backslashes in <i>subSpec</i> tends to interact badly
with the Tcl parser's use of backslashes, so it's generally
safest to enclose <i>subSpec</i> in braces if it includes
backslashes.
</p>
<p>If the initial arguments to <cmd>regsub</cmd> start with <b>-</b> then
they are treated as switches.  The following switches are
currently supported:
</p>
<dl>
<dle>
<dt><b>-all</b></dt>
<dd>All ranges in <i>string</i> that match <i>exp</i> are found and
substitution is performed for each of these ranges.
Without this switch only the first
matching range is found and substituted.
If <b>-all</b> is specified, then ``&amp;'' and ``\<i>n</i>''
sequences are handled for each substitution using the information
from the corresponding match.
</dd>
</dle>
<dle>
<dt><b>-expanded</b></dt>
<dd>Enables use of the expanded regular expression syntax where
whitespace and comments are ignored.  This is the same as specifying
the <b>(?x)</b> embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-line</b></dt>
<dd>Enables newline-sensitive matching.  By default, newline is a
completely ordinary character with no special meaning.  With this
flag, `[^' bracket expressions and `.' never match newline, `^'
matches an empty string after any newline in addition to its normal
function, and `$' matches an empty string before any newline in
addition to its normal function.  This flag is equivalent to
specifying both <b>-linestop</b> and <b>-lineanchor</b>, or the
<b>(?n)</b> embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-linestop</b></dt>
<dd>Changes the behavior of `[^' bracket expressions and `.' so that they
stop at newlines.  This is the same as specifying the <b>(?p)</b>
embedded option (see the <b>re_syntax</b> manual page).
</dd>
</dle>
<dle>
<dt><b>-lineanchor</b></dt>
<dd>Changes the behavior of `^' and `$' (the ``anchors'') so they match the
beginning and end of a line respectively.  This is the same as
specifying the <b>(?w)</b> embedded option (see the <b>re_syntax</b>
manual page).
</dd>
</dle>
<dle>
<dt><b>-nocase</b></dt>
<dd>Upper-case characters in <i>string</i> will be converted to lower-case
before matching against <i>exp</i>;  however, substitutions specified
by <i>subSpec</i> use the original unconverted form of <i>string</i>.
</dd>
</dle>
<dle>
<dt><b>-start</b> <m>index</m></dt>
<dd>Specifies a character index offset into the string to start
matching the regular expression at.  
<new version="8.5">The <i>index</i> value is interpreted in the same manner
as the <i>index</i> argument to <b>string index</b>.
</new>When using this switch, `^'
will not match the beginning of the line, and \A will still
match the start of the string at <i>index</i>.
<i>index</i> will be constrained to the bounds of the input string.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of switches.  The argument following this one will
be treated as <i>exp</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>If <i>varName</i> is supplied, the command returns a count of the
number of matching ranges that were found and replaced, otherwise the
string after replacement is returned.
See the manual entry for <cmd>regexp</cmd> for details on the interpretation
of regular expressions.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Replace (in the string in variable <i>string</i>) every instance of
<b>foo</b> which is a word by itself with <b>bar</b>:
</p>
<example>
<cmd>regsub</cmd> -all {\&lt;foo\&gt;} $string bar string
</example>
<p>Insert double-quotes around the first instance of the word
<b>interesting</b>, however it is capitalized.
</p>
<example>
<cmd>regsub</cmd> -nocase {\&lt;interesting\&gt;} $string {"&amp;"} string
</example>
<p>Convert all non-ASCII and Tcl-significant characters into \u escape
sequences by using <cmd>regsub</cmd> and <cmd>subst</cmd> in combination:
</p>
<example>
# This RE is just a character class for everything "bad"
set RE {[][{};#\\\$\s\u0100-\uffff]}

# We will substitute with a fragment of Tcl script in brackets
set substitution {[format \\\\u%04x [scan "\\&amp;" %c]]}

# Now we apply the substitution to get a subst-string that
# will perform the computational parts of the conversion.
set quoted [subst [<cmd>regsub</cmd> -all $RE $string $substitution]]
</example>


</section>
<seealso>
<ref>regexp(n)</ref>
<ref>re_syntax(n)</ref>
<ref>subst(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>match</keyword>
<keyword>pattern</keyword>
<keyword>regular expression</keyword>
<keyword>substitute</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="rename" title="rename">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: rename.n,v 1.5 2004/10/27 14:24:37 dkf Exp $
 -->
<?TROFF.TH title="rename" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>rename</name>
<desc>Rename or delete a command</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">rename</b> <m>oldName newName</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Rename the command that used to be called <i>oldName</i> so that it
is now called <i>newName</i>.
If <i>newName</i> is an empty string then <i>oldName</i> is deleted.
<i>oldName</i> and <i>newName</i> may include namespace qualifiers
(names of containing namespaces).
If a command is renamed into a different namespace,
future invocations of it will execute in the new namespace.
The <b cat="AMBIGUOUS ambiguous cmd">rename</b> command returns an empty string as result.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>The <b cat="AMBIGUOUS ambiguous cmd">rename</b> command can be used to wrap the standard Tcl commands
with your own monitoring machinery.  For example, you might wish to
count how often the <b cat="AMBIGUOUS ambiguous cmd">source</b> command is called:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">rename</b> ::source ::theRealSource
set sourceCount 0
proc ::source args {
    global sourceCount
    puts "called source for the [incr sourceCount]'th time"
    uplevel 1 ::theRealSource $args
}
</example>


</section>
<seealso>
<ref>namespace(n)</ref>
<ref>proc(n)</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>delete</keyword>
<keyword>namespace</keyword>
<keyword>rename</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_RestackWindow" id="Restack">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Restack.3,v 1.2 1998/09/14 18:22:53 stanton Exp $
 -->
<?TROFF.TH title="Tk_RestackWindow" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_RestackWindow</name>
<desc>Change a window's position in the stacking order</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_RestackWindow</fun>(<m>tkwin</m>, <m>aboveBelow</m>, <m>other</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window to restack.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>aboveBelow</name>
<argmode>in</argmode>
<desc>Indicates new position of <i>tkwin</i> relative to <i>other</i>;
must be <b>Above</b> or <b>Below</b>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>other</name>
<argmode>in</argmode>
<desc><i>Tkwin</i> will be repositioned just above or below this window.
Must be a sibling of <i>tkwin</i> or a descendant of a sibling.
If NULL then <i>tkwin</i> is restacked above or below all siblings.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_RestackWindow</fun> changes the stacking order of <i>window</i> relative
to its siblings.
If <i>other</i> is specified as NULL then <i>window</i> is repositioned
at the top or bottom of its stacking order, depending on whether
<i>aboveBelow</i> is <b>Above</b> or <b>Below</b>.
If <i>other</i> has a non-NULL value then <i>window</i> is repositioned
just above or below <i>other</i>.
</p>
<p>The <i>aboveBelow</i> argument must have one of the symbolic values
<b>Above</b> or <b>Below</b>.
Both of these values are defined by the include file &lt;X11/Xlib.h&gt;.

</p>
</section>
<keywords>
<keyword>above</keyword>
<keyword>below</keyword>
<keyword>obscure</keyword>
<keyword>stacking order</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="RestrictEv" title="Tk_RestrictEvents">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: RestrictEv.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_RestrictEvents" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_RestrictEvents</name>
<desc>filter and selectively delay X events</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_RestrictProc *
<fun>Tk_RestrictEvents</fun>(<m>proc</m>, <m>clientData</m>, <m>prevClientDataPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_RestrictProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Predicate procedure to call to filter incoming X events.
NULL means do not restrict events at all.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary argument to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name name="prevClientDataPtr">*prevClientDataPtr</name>
<argmode>out</argmode>
<desc>Pointer to place to save argument to previous restrict procedure.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure is useful in certain situations where applications
are only prepared to receive certain X events.  After
<fun>Tk_RestrictEvents</fun> is called, <b>Tk_DoOneEvent</b> (and
hence <fun>Tk_MainLoop</fun>) will filter X input events through
<i>proc</i>.  <i>Proc</i> indicates whether a
given event is to be processed immediately, deferred until some
later time (e.g. when the event restriction is lifted), or discarded.
<i>Proc</i>
is a procedure with arguments and result that match
the type <type>Tk_RestrictProc</type>:
</p>
<syntax cat="type" name="Tk_RestrictProc" scope="global">
typedef Tk_RestrictAction Tk_RestrictProc(
    ClientData <i>clientData</i>,
    XEvent *<i>eventPtr</i>);
</syntax>
<p>The <i>clientData</i> argument is a copy of the <i>clientData</i> passed
to <fun>Tk_RestrictEvents</fun>; it may be used to provide <i>proc</i> with
information it needs to filter events.  The <i>eventPtr</i> points to
an event under consideration.  <i>Proc</i> returns a restrict action
(enumerated type <b>Tk_RestrictAction</b>) that indicates what
<b>Tk_DoOneEvent</b> should do with the event.  If the return value is
<b>TK_PROCESS_EVENT</b>, then the event will be handled immediately.
If the return value is <b>TK_DEFER_EVENT</b>, then the event will be
left on the event queue for later processing.  If the return value is
<b>TK_DISCARD_EVENT</b>, then the event will be removed from the event
queue and discarded without being processed.
</p>
<p><fun>Tk_RestrictEvents</fun> uses its return value and <i>prevClientDataPtr</i>
to return information about the current event restriction procedure
(a NULL return value means there are currently no restrictions).
These values may be used to restore the previous restriction state
when there is no longer any need for the current restriction.
</p>
<p>There are very few places where <fun>Tk_RestrictEvents</fun> is needed.
In most cases, the best way to restrict events is by changing the
bindings with the <cmd>bind</cmd> Tcl command or by calling
<fun>Tk_CreateEventHandler</fun> and <fun>Tk_DeleteEventHandler</fun> from C.
The main place where <fun>Tk_RestrictEvents</fun> must be used is when
performing synchronous actions (for example, if you need to wait
for a particular event to occur on a particular window but you don't
want to invoke any handlers for any other events).  The ``obvious''
solution in these situations is to call <b>XNextEvent</b> or
<b>XWindowEvent</b>, but these procedures cannot be used because
Tk keeps its own event queue that is separate from the X event
queue.  Instead, call <fun>Tk_RestrictEvents</fun> to set up a filter,
then call <b>Tk_DoOneEvent</b> to retrieve the desired event(s).
</p>
</section>
<keywords>
<keyword>delay</keyword>
<keyword>event</keyword>
<keyword>filter</keyword>
<keyword>restriction</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="return" title="return" version="8.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Contributions from Don Porter, NIST, 2003.  (not subject to US copyright)
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: return.n,v 1.12 2004/11/20 00:17:32 dgp Exp $
 -->
<?TROFF.TH title="return" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>return</name>
<desc>Return from a procedure, or set return code of a script</desc>
</namesection>
<synopsis>
<syntax>
<cmd>return</cmd> ?<m>result</m>?

<cmd>return</cmd> ?<b>-code</b> <m>code</m>? ?<m>result</m>?

<cmd>return</cmd> ?<m>option value</m> ...? ?<m>result</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>In its simplest usage, the <cmd>return</cmd> command is used without options
in the body of a procedure to immediately return control to the caller
of the procedure.  If a <i>result</i> argument is provided, its value
becomes the result of the procedure passed back to the caller.  
If <i>result</i> is not specified then an empty string will be returned
to the caller as the result of the procedure.
</p>
<p>The <cmd>return</cmd> command serves a similar function within script
files that are evaluated by the <b cat="AMBIGUOUS ambiguous cmd">source</b> command.  When <b cat="AMBIGUOUS ambiguous cmd">source</b>
evaluates the contents of a file as a script, an invocation of
the <cmd>return</cmd> command will cause script evaluation
to immediately cease, and the value <i>result</i> (or an empty string)
will be returned as the result of the <b cat="AMBIGUOUS ambiguous cmd">source</b> command.
</p>
</section>
<section>
<title>EXCEPTIONAL RETURN CODES</title>
<p>In addition to the result of a procedure, the return
code of a procedure may also be set by <cmd>return</cmd>
through use of the <b>-code</b> option.
In the usual case where the <b>-code</b> option isn't
specified the procedure will return normally.
However, the <b>-code</b> option may be used to generate an
exceptional return from the procedure.
<i>Code</i> may have any of the following values:
</p>
<dl>
<dle>
<dt><b>ok (or 0)</b></dt>
<dd>Normal return:  same as if the option is omitted.  The return code
of the procedure is 0 (<b>TCL_OK</b>).
</dd>
</dle>
<dle>
<dt><b>error (1)</b></dt>
<dd>Error return: the return code of the procedure is 1 (<b>TCL_ERROR</b>).
The procedure command behaves in its calling context as if it
were the command <b cat="AMBIGUOUS ambiguous cmd">error</b> <i>result</i>.  See below for additional
options.
</dd>
</dle>
<dle>
<dt><b>return (2)</b></dt>
<dd>The return code of the procedure is 2 (<b>TCL_RETURN</b>).  The
procedure command behaves in its calling context as if it
were the command <cmd>return</cmd> (with no arguments).
</dd>
</dle>
<dle>
<dt><b>break (3)</b></dt>
<dd>The return code of the procedure is 3 (<b>TCL_BREAK</b>).  The
procedure command behaves in its calling context as if it
were the command <cmd>break</cmd>.
</dd>
</dle>
<dle>
<dt><b>continue (4)</b></dt>
<dd>The return code of the procedure is 4 (<b>TCL_CONTINUE</b>).  The
procedure command behaves in its calling context as if it
were the command <cmd>continue</cmd>.
</dd>
</dle>
<dle>
<dt><m>value</m></dt>
<dd><i>Value</i> must be an integer;  it will be returned as the
return code for the current procedure.
</dd>
</dle>
</dl>
<p>When a procedure wants to signal that it has received invalid
arguments from its caller, it may use <b>return -code error</b>
with <i>result</i> set to a suitable error message.  Otherwise
usage of the <b>return -code</b> option is mostly limited to
procedures that implement a new control structure.
</p>
<p>The <b>return -code</b> command acts similarly within script
files that are evaluated by the <b cat="AMBIGUOUS ambiguous cmd">source</b> command.  During the
evaluation of the contents of a file as a script by <b cat="AMBIGUOUS ambiguous cmd">source</b>,
an invocation of the <b>return -code</b> <i>code</i> command will cause
the return code of <b cat="AMBIGUOUS ambiguous cmd">source</b> to be <i>code</i>.
</p>
</section>
<section>
<title>RETURN OPTIONS</title>
<p><new version="8.5">In addition to a result and a return code, evaluation of a command
in Tcl also produces a dictionary of return options.  In general
usage, all <i>option value</i> pairs given as arguments to <cmd>return</cmd>
become entries in the return options dictionary, and any values at all
are acceptable except as noted below.  The <cmd>catch</cmd> command may be
used to capture all of this information -- the return code, the result,
and the return options dictionary -- that arise from evaluation of a script.
</new></p>
<p>As documented above, the <b>-code</b> entry in the return options dictionary
receives special treatment by Tcl.  There are other return options also
recognized and treated specially by Tcl.  They are:
</p>
<dl>
<dle>
<dt><b>-errorcode</b> <m>list</m></dt>
<dd>The <b>-errorcode</b> option receives special treatment only when the value
of the <b>-code</b> option is <b>TCL_ERROR</b>.  Then the <i>list</i> value
is meant to be additional information about the error,
presented as a Tcl list for further processing by programs.
If no <b>-errorcode</b> option is provided to <cmd>return</cmd> when
the <b>-code error</b> option is provided, Tcl will set the value
of the <b>-errorcode</b> entry in the return options dictionary 
to the default value of <b>NONE</b>.  The <b>-errorcode</b> return
option will also be stored in the global variable <b cat="variable">errorCode</b>.
</dd>
</dle>
<dle>
<dt><b>-errorinfo</b> <m>info</m></dt>
<dd>The <b>-errorinfo</b> option receives special treatment only when the value
of the <b>-code</b> option is <b>TCL_ERROR</b>.  Then <i>info</i> is the initial
stack trace, meant to provide to a human reader additional information
about the context in which the error occurred.  The stack trace will
also be stored in the global variable <b cat="variable">errorInfo</b>.  
If no <b>-errorinfo</b> option is provided to <cmd>return</cmd> when
the <b>-code error</b> option is provided, Tcl will provide its own
initial stack trace value in the entry for <b>-errorinfo</b>.  Tcl's
initial stack trace will include only the call to the procedure, and
stack unwinding will append information about higher stack levels, but
there will be no information about the context of the error within
the procedure.  Typically the <i>info</i> value is supplied from
the value of <b>-errorinfo</b> in a return options dictionary captured
by the <cmd>catch</cmd> command (or from the copy of that information
stored in the global variable <b cat="variable">errorInfo</b>).
</dd>
</dle>
<dle>
<dt><b>-level</b> <m>level</m></dt>
<dd><new version="8.5">The <b>-level</b> and <b>-code</b> options work together to set the return
code to be returned by one of the commands currently being evaluated.
The <i>level</i> value must be a non-negative integer representing a number
of levels on the call stack.  It defines the number of levels up the stack
at which the return code of a command currently being evaluated should
be <i>code</i>.  If no <b>-level</b> option is provided, the default value
of <i>level</i> is 1, so that <cmd>return</cmd> sets the return code that the
current procedure returns to its caller, 1 level up the call stack.  The
mechanism by which these options work is described in more detail below.
</new></dd>
</dle>
<dle>
<dt><b>-options</b> <m>options</m></dt>
<dd><new version="8.5">The value <i>options</i> must be a valid dictionary.  The entries of that
dictionary are treated as additional <i>option value</i> pairs for the
<cmd>return</cmd> command.
</new></dd>
</dle>
</dl>
</section>
<section>
<title>RETURN CODE HANDLING MECHANISMS</title>
<p>Return codes are used in Tcl to control program flow.  A Tcl script
is a sequence of Tcl commands.  So long as each command evaluation
returns a return code of <b>TCL_OK</b>, evaluation will continue to the next
command in the script.  Any exceptional return code (non-<b>TCL_OK</b>)
returned by a command evaluation causes the flow on to the next
command to be interrupted.  Script evaluation ceases, and the
exceptional return code from the command becomes the return code
of the full script evaluation.  This is the mechanism by which
errors during script evaluation cause an interruption and unwinding
of the call stack.  It is also the mechanism by which commands
like <cmd>break</cmd>, <cmd>continue</cmd>, and <cmd>return</cmd> cause script
evaluation to terminate without evaluating all commands in sequence.
</p>
<p>Some of Tcl's built-in commands evaluate scripts as part of their
functioning.  These commands can make use of exceptional return
codes to enable special features.  For example, the built-in
Tcl commands that provide loops -- such as <cmd>while</cmd>, <cmd>for</cmd>,
and <cmd>foreach</cmd> -- evaluate a script that is the body of the
loop.  If evaluation of the loop body returns the return code
of <b>TCL_BREAK</b> or <b>TCL_CONTINUE</b>, the loop command can react in such
a way as to give the <cmd>break</cmd> and <cmd>continue</cmd> commands
their documented interpretation in loops.
</p>
<p><?NEW 8.5?>Procedure invocation also involves evaluation of a script, the body
of the procedure.  Procedure invocation provides special treatment
when evaluation of the procedure body returns the return code 
<b>TCL_RETURN</b>.  In that circumstance, the <b>-level</b> entry in the
return options dictionary is decremented.  If after decrementing,
the value of the <b>-level</b> entry is 0, then the value of
the <b>-code</b> entry becomes the return code of the procedure.
If after decrementing, the value of the <b>-level</b> entry is
greater than zero, then the return code of the procedure is
<b>TCL_RETURN</b>.  If the procedure invocation occurred during the
evaluation of the body of another procedure, the process will
repeat itself up the call stack, decrementing the value of the
<b>-level</b> entry at each level, so that the <i>code</i> will
be the return code of the current command <i>level</i> levels
up the call stack.  The <b cat="AMBIGUOUS ambiguous cmd">source</b> command performs the
same handling of the <b>TCL_RETURN</b> return code, which explains
the similarity of <cmd>return</cmd> invocation during a <b cat="AMBIGUOUS ambiguous cmd">source</b>
to <cmd>return</cmd> invocation within a procedure.
</p>
<p>The return code of the <cmd>return</cmd> command itself triggers this
special handling by procedure invocation.  If <cmd>return</cmd>
is provided the option <b>-level 0</b>, then the return code
of the <cmd>return</cmd> command itself will be the value <i>code</i>
of the <b>-code</b> option (or <b>TCL_OK</b> by default).  Any other value
for the <b>-level</b> option (including the default value of 1)
will cause the return code of the <cmd>return</cmd> command itself
to be <b>TCL_RETURN</b>, triggering a return from the enclosing procedure.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<section>
<title>EXAMPLES</title>
<p>First, a simple example of using <cmd>return</cmd> to return from a
procedure, interrupting the procedure body.
</p>
<example>
proc printOneLine {} {
   puts "line 1"    ;# This line will be printed.
   <cmd>return</cmd>		
   puts "line 2"    ;# This line will not be printed.
}
</example>
<p>Next, an example of using <cmd>return</cmd> to set the value
returned by the procedure.
</p>
<example>
proc returnX {} {<cmd>return</cmd> X}
puts [returnX]    ;# prints "X"
</example>
<p>Next, a more complete example, using <b>return -code error</b>
to report invalid arguments.
</p>
<example>
proc factorial {n} {
   if {![string is integer $n] || ($n &lt; 0)} {
      <cmd>return</cmd> -code error \
            "expected non-negative integer,\
             but got \"$n\""
   }
   if {$n &lt; 2} {
      <cmd>return</cmd> 1
   }
   set m [expr {$n - 1}]
   set code [catch {factorial $m} factor]
   if {$code != 0} {
      <cmd>return</cmd> -code $code $factor
   }
   set product [expr {$n * $factor}]
   if {$product &lt; 0} {
      <cmd>return</cmd> -code error \
            "overflow computing factorial of $n"
   }
   <cmd>return</cmd> $product
}
</example>
<p>Next, a procedure replacement for <cmd>break</cmd>.
</p>
<example>
proc myBreak {} {
   <cmd>return</cmd> -code break
}
</example>
<p><?NEW 8.5?>With the <b>-level 0</b> option, <cmd>return</cmd> itself can serve
as a replacement for <cmd>break</cmd>.
</p>
<example>
interp alias {} Break {} <cmd>return</cmd> -level 0 -code break
</example>
<p>An example of using <cmd>catch</cmd> and <b>return -options</b> to
re-raise a caught error:
</p>
<example>
proc doSomething {} {
   set resource [allocate]
   catch {
      # Long script of operations
      # that might raise an error
   } result options
   deallocate $resource
   <cmd>return</cmd> -options $options $result
}
</example>
<p>Finally an example of advanced use of the <cmd>return</cmd> options
to create a procedure replacement for <cmd>return</cmd> itself:
</p>
<example>
proc myReturn {args} {
   set result ""
   if {[llength $args] % 2} {
      set result [lindex $args end]
      set args [lrange $args 0 end-1]
   }
   set options [dict merge {-level 1} $args]
   dict incr options -level
   <cmd>return</cmd> -options $options $result
}
</example>
<?ENDNEW CONFUSED 8.5?>


</section>
<seealso>
<ref>break(n)</ref>
<ref>catch(n)</ref>
<ref>continue(n)</ref>
<ref>dict(n)</ref>
<ref>error(n)</ref>
<ref>proc(n)</ref>
<ref>source(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>break</keyword>
<keyword>catch</keyword>
<keyword>continue</keyword>
<keyword>error</keyword>
<keyword>procedure</keyword>
<keyword>return</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="re_syntax" version="8.1" title="re_syntax">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998 Sun Microsystems, Inc.
     Copyright (c) 1999 Scriptics Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: re_syntax.n,v 1.10 2007/02/13 14:48:55 dkf Exp $
 -->
<?TROFF.TH title="re_syntax" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>re_syntax</name>
<desc>Syntax of Tcl regular expressions</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>A <i>regular expression</i> describes strings of characters.
It's a pattern that matches certain strings and doesn't match others.
</p>
</section>
<section>
<title>DIFFERENT FLAVORS OF REs</title>
<p>Regular expressions (``RE''s), as defined by POSIX, come in two
flavors: <i>extended</i> REs (``EREs'') and <i>basic</i> REs (``BREs'').
EREs are roughly those of the traditional <i>egrep</i>, while BREs are
roughly those of the traditional <i>ed</i>.  This implementation adds
a third flavor, <i>advanced</i> REs (``AREs''), basically EREs with
some significant extensions.
</p>
<p>This manual page primarily describes AREs.  BREs mostly exist for
backward compatibility in some old programs; they will be discussed at
the end.  POSIX EREs are almost an exact subset of AREs.  Features of
AREs that are not present in EREs will be indicated.
</p>
</section>
<section>
<title>REGULAR EXPRESSION SYNTAX</title>
<p>Tcl regular expressions are implemented using the package written by
Henry Spencer, based on the 1003.2 spec and some (not quite all) of
the Perl5 extensions (thanks, Henry!).  Much of the description of
regular expressions below is copied verbatim from his manual entry.
</p>
<p>An ARE is one or more <i>branches</i>,
separated by `<b>|</b>',
matching anything that matches any of the branches.
</p>
<p>A branch is zero or more <i>constraints</i> or <i>quantified atoms</i>,
concatenated.
It matches a match for the first, followed by a match for the second, etc;
an empty branch matches the empty string.
</p>
<p>A quantified atom is an <i>atom</i> possibly followed
by a single <i>quantifier</i>.
Without a quantifier, it matches a single match for the atom.
The quantifiers,
and what a so-quantified atom matches, are:
</p>
<dl>
<dle>
<dt><b>*</b></dt>
<dd>a sequence of 0 or more matches of the atom
</dd>
</dle>
<dle>
<dt><b>+</b></dt>
<dd>a sequence of 1 or more matches of the atom
</dd>
</dle>
<dle>
<dt><b>?</b></dt>
<dd>a sequence of 0 or 1 matches of the atom
</dd>
</dle>
<dle>
<dt><b>{</b><m>m</m><b>}</b></dt>
<dd>a sequence of exactly <i>m</i> matches of the atom
</dd>
</dle>
<dle>
<dt><b>{</b><m>m</m><b>,}</b></dt>
<dd>a sequence of <i>m</i> or more matches of the atom
</dd>
</dle>
<dle>
<dt><b>{</b><m>m</m><b>,</b><m>n</m><b>}</b></dt>
<dd>a sequence of <i>m</i> through <i>n</i> (inclusive) matches of the atom;
<i>m</i> may not exceed <i>n</i>
</dd>
</dle>
<dle>
<dt><b>*?  +?  ??  {</b><m>m</m><b>}?  {</b><m>m</m><b>,}?  {</b><m>m</m><b>,</b><m>n</m><b>}?</b></dt>
<dd><i>non-greedy</i> quantifiers,
which match the same possibilities,
but prefer the smallest number rather than the largest number
of matches (see <ref refid="matching">MATCHING</ref>)
</dd>
</dle>
</dl>
<p>The forms using <b>{</b> and <b>}</b> are known as <i>bound</i>s.  The
numbers <i>m</i> and <i>n</i> are unsigned decimal integers with
permissible values from 0 to 255 inclusive.
</p>
<p>An atom is one of:
</p>
<dl>
<dle>
<dt><b>(</b><m>re</m><b>)</b></dt>
<dd>matches a match for <i>re</i> (<i>re</i> is any regular expression) with
the match noted for possible reporting
</dd>
</dle>
<dle>
<dt><b>(?:</b><m>re</m><b>)</b></dt>
<dd>as previous, but does no reporting (a ``non-capturing'' set of
parentheses)
</dd>
</dle>
<dle>
<dt><b>()</b></dt>
<dd>matches an empty string, noted for possible reporting
</dd>
</dle>
<dle>
<dt><b>(?:)</b></dt>
<dd>matches an empty string, without reporting
</dd>
</dle>
<dle>
<dt><b>[</b><m>chars</m><b>]</b></dt>
<dd>a <i>bracket expression</i>, matching any one of the <i>chars</i> (see
<ref refid="bracket-expressions">BRACKET EXPRESSIONS</ref> for more detail)
</dd>
</dle>
<dle>
<dt><b>.</b></dt>
<dd>matches any single character
</dd>
</dle>
<dle>
<dt><b>\</b><m>k</m></dt>
<dd>matches the non-alphanumeric character <i>k</i>
taken as an ordinary character, e.g. <b>\\</b> matches a backslash
character
</dd>
</dle>
<dle>
<dt><b>\</b><m>c</m></dt>
<dd>where <i>c</i> is alphanumeric (possibly followed by other characters),
an <i>escape</i> (AREs only), see <ref refid="escapes">ESCAPES</ref> below
</dd>
</dle>
<dle>
<dt><b>{</b></dt>
<dd>when followed by a character other than a digit, matches the
left-brace character `<b>{</b>'; when followed by a digit, it is the
beginning of a <i>bound</i> (see above)
</dd>
</dle>
<dle>
<dt><m>x</m></dt>
<dd>where <i>x</i> is a single character with no other significance,
matches that character.
</dd>
</dle>
</dl>
<p>A <i>constraint</i> matches an empty string when specific conditions
are met.  A constraint may not be followed by a quantifier.  The
simple constraints are as follows; some more constraints are described
later, under <ref refid="escapes">ESCAPES</ref>.
</p>
<dl>
<dle>
<dt><b>^</b></dt>
<dd>matches at the beginning of a line
</dd>
</dle>
<dle>
<dt><b>$</b></dt>
<dd>matches at the end of a line
</dd>
</dle>
<dle>
<dt><b>(?=</b><m>re</m><b>)</b></dt>
<dd><i>positive lookahead</i> (AREs only), matches at any point where a
substring matching <i>re</i> begins
</dd>
</dle>
<dle>
<dt><b>(?!</b><m>re</m><b>)</b></dt>
<dd><i>negative lookahead</i> (AREs only), matches at any point where no
substring matching <i>re</i> begins
</dd>
</dle>
</dl>
<p>The lookahead constraints may not contain back references (see later),
and all parentheses within them are considered non-capturing.
</p>
<p>An RE may not end with `<b>\</b>'.
</p>
</section>
<section id="bracket-expressions">
<title>BRACKET EXPRESSIONS</title>
<p>A <i>bracket expression</i> is a list of characters enclosed in
`<b>[]</b>'.  It normally matches any single character from the list
(but see below).  If the list begins with `<b>^</b>', it matches any
single character (but see below) <i>not</i> from the rest of the list.
</p>
<p>If two characters in the list are separated by `<b>-</b>', this is
shorthand for the full <i>range</i> of characters between those two
(inclusive) in the collating sequence, e.g. <b>[0-9]</b> in Unicode
matches any conventional decimal digit.  Two ranges may not share an
endpoint, so e.g. <b>a-c-e</b> is illegal.  Ranges are very
collating-sequence-dependent, and portable programs should avoid
relying on them.
</p>
<p>To include a literal <b>]</b> or <b>-</b> in the list, the simplest
method is to enclose it in <b>[.</b> and <b>.]</b> to make it a
collating element (see below).  Alternatively, make it the first
character (following a possible `<b>^</b>'), or (AREs only) precede it
with `<b>\</b>'.  Alternatively, for `<b>-</b>', make it the last
character, or the second endpoint of a range.  To use a literal
<b>-</b> as the first endpoint of a range, make it a collating element
or (AREs only) precede it with `<b>\</b>'.  With the exception of
these, some combinations using <b>[</b> (see next paragraphs), and
escapes, all other special characters lose their special significance
within a bracket expression.
</p>
<p>Within a bracket expression, a collating element (a character, a
multi-character sequence that collates as if it were a single
character, or a collating-sequence name for either) enclosed in
<b>[.</b> and <b>.]</b> stands for the sequence of characters of that
collating element.  The sequence is a single element of the bracket
expression's list.  A bracket expression in a locale that has
multi-character collating elements can thus match more than one
character.  So (insidiously), a bracket expression that starts with
<b>^</b> can match multi-character collating elements even if none of
them appear in the bracket expression!  (<i>Note:</i> Tcl currently has
no multi-character collating elements.  This information is only for
illustration.)
</p>
<p>For example, assume the collating sequence includes a <b>ch</b>
multi-character collating element.  Then the RE <b>[[.ch.]]*c</b> (zero
or more <b>ch</b>'s followed by <b>c</b>) matches the first five
characters of `<b>chchcc</b>'.  Also, the RE <b>[^c]b</b> matches all of
`<b>chb</b>' (because <b>[^c]</b> matches the multi-character <b>ch</b>).
</p>
<p>Within a bracket expression, a collating element enclosed in <b>[=</b>
and <b>=]</b> is an equivalence class, standing for the sequences of
characters of all collating elements equivalent to that one, including
itself.  (If there are no other equivalent collating elements, the
treatment is as if the enclosing delimiters were `<b>[.</b>' and
`<b>.]</b>'.)  For example, if <b>o</b> and <b>&#244;</b> are the members
of an equivalence class, then `<b>[[=o=]]</b>', `<b>[[=&#244;=]]</b>',
and `<b>[o&#244;]</b>' are all synonymous.  An equivalence class may
not be an endpoint of a range.  (<i>Note:</i> Tcl currently implements
only the Unicode locale.  It doesn't define any equivalence classes.
The examples above are just illustrations.)
</p>
<p>Within a bracket expression, the name of a <i>character class</i>
enclosed in <b>[:</b> and <b>:]</b> stands for the list of all
characters (not all collating elements!)  belonging to that class.
Standard character classes are:
</p>
<dl>
<dle>
<dt><b>alpha</b></dt>
<dd>A letter.
</dd>
</dle>
<dle>
<dt><b>upper</b></dt>
<dd>An upper-case letter.
</dd>
</dle>
<dle>
<dt><b>lower</b></dt>
<dd>A lower-case letter.
</dd>
</dle>
<dle>
<dt><b>digit</b></dt>
<dd>A decimal digit.
</dd>
</dle>
<dle>
<dt><b>xdigit</b></dt>
<dd>A hexadecimal digit.
</dd>
</dle>
<dle>
<dt><b>alnum</b></dt>
<dd>An alphanumeric (letter or digit).
</dd>
</dle>
<dle>
<dt><b>print</b></dt>
<dd>A "printable" (same as graph, except also including space).
</dd>
</dle>
<dle>
<dt><b>blank</b></dt>
<dd>A space or tab character.
</dd>
</dle>
<dle>
<dt><b>space</b></dt>
<dd>A character producing white space in displayed text.
</dd>
</dle>
<dle>
<dt><b>punct</b></dt>
<dd>A punctuation character.
</dd>
</dle>
<dle>
<dt><b>graph</b></dt>
<dd>A character with a visible representation (includes both alnum and punct).
</dd>
</dle>
<dle>
<dt><b>cntrl</b></dt>
<dd>A control character.
</dd>
</dle>
</dl>
<p>A locale may provide others.  (Note that the current Tcl
implementation has only one locale: the Unicode locale.)  A character
class may not be used as an endpoint of a range.
</p>
<p>There are two special cases of bracket expressions: the bracket
expressions <b>[[:&lt;:]]</b> and <b>[[:&gt;:]]</b> are constraints, matching
empty strings at the beginning and end of a word respectively.
A word is defined as a sequence of word characters that is neither
preceded nor followed by word characters.  A word character is an
<i>alnum</i> character or an underscore (<b>_</b>).  These special
bracket expressions are deprecated; users of AREs should use
constraint escapes instead (see below).
</p>
</section>
<section id="escapes">
<title>ESCAPES</title>
<p>Escapes (AREs only), which begin with a <b>\</b> followed by an
alphanumeric character, come in several varieties: character entry,
class shorthands, constraint escapes, and back references.  A <b>\</b>
followed by an alphanumeric character but not constituting a valid
escape is illegal in AREs.  In EREs, there are no escapes: outside a
bracket expression, a <b>\</b> followed by an alphanumeric character
merely stands for that character as an ordinary character, and inside
a bracket expression, <b>\</b> is an ordinary character.  (The latter
is the one actual incompatibility between EREs and AREs.)
</p>
<p>Character-entry escapes (AREs only) exist to make it easier to specify
non-printing and otherwise inconvenient characters in REs:
</p>
<dl>
<dle>
<dt><b>\a</b></dt>
<dd>alert (bell) character, as in C
</dd>
</dle>
<dle>
<dt><b>\b</b></dt>
<dd>backspace, as in C
</dd>
</dle>
<dle>
<dt><b>\B</b></dt>
<dd>synonym for <b>\</b> to help reduce backslash doubling in some
applications where there are multiple levels of backslash processing
</dd>
</dle>
<dle>
<dt><b>\c</b><m>X</m></dt>
<dd>(where <i>X</i> is any character) the character whose low-order 5 bits
are the same as those of <i>X</i>, and whose other bits are all zero
</dd>
</dle>
<dle>
<dt><b>\e</b></dt>
<dd>the character whose collating-sequence name is `<b>ESC</b>', or failing
that, the character with octal value 033
</dd>
</dle>
<dle>
<dt><b>\f</b></dt>
<dd>formfeed, as in C
</dd>
</dle>
<dle>
<dt><b>\n</b></dt>
<dd>newline, as in C
</dd>
</dle>
<dle>
<dt><b>\r</b></dt>
<dd>carriage return, as in C
</dd>
</dle>
<dle>
<dt><b>\t</b></dt>
<dd>horizontal tab, as in C
</dd>
</dle>
<dle>
<dt><b>\u</b><m>wxyz</m></dt>
<dd>(where <i>wxyz</i> is exactly four hexadecimal digits) the Unicode
character <b>U+</b><i>wxyz</i> in the local byte ordering
</dd>
</dle>
<dle>
<dt><b>\U</b><m>stuvwxyz</m></dt>
<dd>(where <i>stuvwxyz</i> is exactly eight hexadecimal digits) reserved
for a somewhat-hypothetical Unicode extension to 32 bits
</dd>
</dle>
<dle>
<dt><b>\v</b></dt>
<dd>vertical tab, as in C are all available.
</dd>
</dle>
<dle>
<dt><b>\x</b><m>hhh</m></dt>
<dd>(where <i>hhh</i> is any sequence of hexadecimal digits) the character
whose hexadecimal value is <b>0x</b><i>hhh</i> (a single character no
matter how many hexadecimal digits are used).
</dd>
</dle>
<dle>
<dt><b>\0</b></dt>
<dd>the character whose value is <b>0</b>
</dd>
</dle>
<dle>
<dt><b>\</b><m>xy</m></dt>
<dd>(where <i>xy</i> is exactly two octal digits, and is not a <i>back
reference</i> (see below)) the character whose octal value is
<b>0</b><i>xy</i>
</dd>
</dle>
<dle>
<dt><b>\</b><m>xyz</m></dt>
<dd>(where <i>xyz</i> is exactly three octal digits, and is not a back
reference (see below)) the character whose octal value is
<b>0</b><i>xyz</i>
</dd>
</dle>
</dl>
<p>Hexadecimal digits are `<b>0</b>'-`<b>9</b>', `<b>a</b>'-`<b>f</b>', and
`<b>A</b>'-`<b>F</b>'.  Octal digits are `<b>0</b>'-`<b>7</b>'.
</p>
<p>The character-entry escapes are always taken as ordinary characters.
For example, <b>\135</b> is <b>]</b> in Unicode, but <b>\135</b> does
not terminate a bracket expression.  Beware, however, that some
applications (e.g., C compilers and the Tcl interpreter if the regular
expression is not quoted with braces) interpret such sequences
themselves before the regular-expression package gets to see them,
which may require doubling (quadrupling, etc.) the `<b>\</b>'.
</p>
<p>Class-shorthand escapes (AREs only) provide shorthands for certain
commonly-used character classes:
</p>
<dl>
<dle>
<dt><b>\d</b></dt>
<dd><b>[[:digit:]]</b>
</dd>
</dle>
<dle>
<dt><b>\s</b></dt>
<dd><b>[[:space:]]</b>
</dd>
</dle>
<dle>
<dt><b>\w</b></dt>
<dd><b>[[:alnum:]_]</b> (note underscore)
</dd>
</dle>
<dle>
<dt><b>\D</b></dt>
<dd><b>[^[:digit:]]</b>
</dd>
</dle>
<dle>
<dt><b>\S</b></dt>
<dd><b>[^[:space:]]</b>
</dd>
</dle>
<dle>
<dt><b>\W</b></dt>
<dd><b>[^[:alnum:]_]</b> (note underscore)
</dd>
</dle>
</dl>
<p>Within bracket expressions, `<b>\d</b>', `<b>\s</b>', and
`<b>\w</b>' lose their outer brackets, and `<b>\D</b>', `<b>\S</b>',
and `<b>\W</b>' are illegal.  (So, for example, <b>[a-c\d]</b> is
equivalent to <b>[a-c[:digit:]]</b>.  Also, <b>[a-c\D]</b>, which is
equivalent to <b>[a-c^[:digit:]]</b>, is illegal.)
</p>
<p>A constraint escape (AREs only) is a constraint, matching the empty
string if specific conditions are met, written as an escape:
</p>
<dl>
<dle>
<dt><b>\A</b></dt>
<dd>matches only at the beginning of the string (see <ref refid="matching">MATCHING</ref>,
below, for how this differs from `<b>^</b>')
</dd>
</dle>
<dle>
<dt><b>\m</b></dt>
<dd>matches only at the beginning of a word
</dd>
</dle>
<dle>
<dt><b>\M</b></dt>
<dd>matches only at the end of a word
</dd>
</dle>
<dle>
<dt><b>\y</b></dt>
<dd>matches only at the beginning or end of a word
</dd>
</dle>
<dle>
<dt><b>\Y</b></dt>
<dd>matches only at a point that is not the beginning or end of a word
</dd>
</dle>
<dle>
<dt><b>\Z</b></dt>
<dd>matches only at the end of the string (see <ref refid="matching">MATCHING</ref>, below, for
how this differs from `<b>$</b>')
</dd>
</dle>
<dle>
<dt><b>\</b><m>m</m></dt>
<dd>(where <i>m</i> is a nonzero digit) a <i>back reference</i>, see below
</dd>
</dle>
<dle>
<dt><b>\</b><m>mnn</m></dt>
<dd>(where <i>m</i> is a nonzero digit, and <i>nn</i> is some more digits,
and the decimal value <i>mnn</i> is not greater than the number of
closing capturing parentheses seen so far) a <i>back reference</i>, see
below
</dd>
</dle>
</dl>
<p>A word is defined as in the specification of <b>[[:&lt;:]]</b> and
<b>[[:&gt;:]]</b> above.  Constraint escapes are illegal within bracket
expressions.
</p>
<p>A back reference (AREs only) matches the same string matched by the
parenthesized subexpression specified by the number, so that (e.g.)
<b>([bc])\1</b> matches <b>bb</b> or <b>cc</b> but not `<b>bc</b>'.  The
subexpression must entirely precede the back reference in the RE.
Subexpressions are numbered in the order of their leading parentheses.
Non-capturing parentheses do not define subexpressions.
</p>
<p>There is an inherent historical ambiguity between octal
character-entry escapes and back references, which is resolved by
heuristics, as hinted at above.  A leading zero always indicates an
octal escape.  A single non-zero digit, not followed by another digit,
is always taken as a back reference.  A multi-digit sequence not
starting with a zero is taken as a back reference if it comes after a
suitable subexpression (i.e. the number is in the legal range for a
back reference), and otherwise is taken as octal.
</p>
</section>
<section>
<title>METASYNTAX</title>
<p>In addition to the main syntax described above, there are some special
forms and miscellaneous syntactic facilities available.
</p>
<p>Normally the flavor of RE being used is specified by
application-dependent means.  However, this can be overridden by a
<i>director</i>.  If an RE of any flavor begins with `<b>***:</b>', the
rest of the RE is an ARE.  If an RE of any flavor begins with
`<b>***=</b>', the rest of the RE is taken to be a literal string, with
all characters considered ordinary characters.
</p>
<p>An ARE may begin with <i>embedded options</i>: a sequence
<b>(?</b><i>xyz</i><b>)</b> (where <i>xyz</i> is one or more alphabetic
characters) specifies options affecting the rest of the RE.  These
supplement, and can override, any options specified by the
application.  The available option letters are:
</p>
<dl>
<dle>
<dt><b>b</b></dt>
<dd>rest of RE is a BRE
</dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>case-sensitive matching (usual default)
</dd>
</dle>
<dle>
<dt><b>e</b></dt>
<dd>rest of RE is an ERE
</dd>
</dle>
<dle>
<dt><b>i</b></dt>
<dd>case-insensitive matching (see <ref refid="matching">MATCHING</ref>, below)
</dd>
</dle>
<dle>
<dt><b>m</b></dt>
<dd>historical synonym for <b>n</b>
</dd>
</dle>
<dle>
<dt><b>n</b></dt>
<dd>newline-sensitive matching (see <ref refid="matching">MATCHING</ref>, below)
</dd>
</dle>
<dle>
<dt><b>p</b></dt>
<dd>partial newline-sensitive matching (see <ref refid="matching">MATCHING</ref>, below)
</dd>
</dle>
<dle>
<dt><b>q</b></dt>
<dd>rest of RE is a literal (``quoted'') string, all ordinary characters
</dd>
</dle>
<dle>
<dt><b>s</b></dt>
<dd>non-newline-sensitive matching (usual default)
</dd>
</dle>
<dle>
<dt><b>t</b></dt>
<dd>tight syntax (usual default; see below)
</dd>
</dle>
<dle>
<dt><b>w</b></dt>
<dd>inverse partial newline-sensitive (``weird'') matching (see
<ref refid="matching">MATCHING</ref>, below)
</dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>expanded syntax (see below)
</dd>
</dle>
</dl>
<p>Embedded options take effect at the <b>)</b> terminating the sequence.
They are available only at the start of an ARE, and may not be used
later within it.
</p>
<p>In addition to the usual (<i>tight</i>) RE syntax, in which all
characters are significant, there is an <i>expanded</i> syntax,
available in all flavors of RE with the <b>-expanded</b> switch, or in
AREs with the embedded x option.  In the expanded syntax, white-space
characters are ignored and all characters between a <b>#</b> and the
following newline (or the end of the RE) are ignored, permitting
paragraphing and commenting a complex RE.  There are three exceptions
to that basic rule:
</p>
<ul>
<li>a white-space character or `<b>#</b>' preceded by `<b>\</b>' is
retained
</li>
<li>white space or `<b>#</b>' within a bracket expression is retained
</li>
<li>white space and comments are illegal within multi-character symbols
like the ARE `<b>(?:</b>' or the BRE `<b>\(</b>'
</li>
</ul>
<p>Expanded-syntax white-space characters are blank, tab, newline, and
any character that belongs to the <i>space</i> character class.
</p>
<p>Finally, in an ARE, outside bracket expressions, the sequence
`<b>(?#</b><i>ttt</i><b>)</b>' (where <i>ttt</i> is any text not containing a
`<b>)</b>') is a comment, completely ignored.  Again, this is not
allowed between the characters of multi-character symbols like
`<b>(?:</b>'.  Such comments are more a historical artifact than a
useful facility, and their use is deprecated; use the expanded syntax
instead.
</p>
<p><i>None</i> of these metasyntax extensions is available if the
application (or an initial <b>***=</b> director) has specified that the
user's input be treated as a literal string rather than as an RE.
</p>
</section>
<section id="matching">
<title>MATCHING</title>
<p>In the event that an RE could match more than one substring of a given
string, the RE matches the one starting earliest in the string.  If
the RE could match more than one substring starting at that point, its
choice is determined by its <i>preference</i>: either the longest
substring, or the shortest.
</p>
<p>Most atoms, and all constraints, have no preference.  A parenthesized
RE has the same preference (possibly none) as the RE.  A quantified
atom with quantifier <b>{</b><i>m</i><b>}</b> or <b>{</b><i>m</i><b>}?</b> has the same
preference (possibly none) as the atom itself.  A quantified atom with
other normal quantifiers (including <b>{</b><i>m</i><b>,</b><i>n</i><b>}</b> with
<i>m</i> equal to <i>n</i>) prefers longest match.  A quantified atom
with other non-greedy quantifiers (including <b>{</b><i>m</i><b>,</b><i>n</i><b>}?</b>
with <i>m</i> equal to <i>n</i>) prefers shortest match.  A branch has
the same preference as the first quantified atom in it which has a
preference.  An RE consisting of two or more branches connected by the
<b>|</b> operator prefers longest match.
</p>
<p>Subject to the constraints imposed by the rules for matching the whole
RE, subexpressions also match the longest or shortest possible
substrings, based on their preferences, with subexpressions starting
earlier in the RE taking priority over ones starting later.  Note that
outer subexpressions thus take priority over their component
subexpressions.
</p>
<p>Note that the quantifiers <b>{1,1}</b> and <b>{1,1}?</b> can be used to
force longest and shortest preference, respectively, on a
subexpression or a whole RE.
</p>
<p>Match lengths are measured in characters, not collating elements.  An
empty string is considered longer than no match at all.  For example,
<b>bb*</b> matches the three middle characters of `<b>abbbc</b>',
<b>(week|wee)(night|knights)</b> matches all ten characters of
`<b>weeknights</b>', when <b>(.*).*</b> is matched against <b>abc</b> the
parenthesized subexpression matches all three characters, and when
<b>(a*)*</b> is matched against <b>bc</b> both the whole RE and the
parenthesized subexpression match an empty string.
</p>
<p>If case-independent matching is specified, the effect is much as if
all case distinctions had vanished from the alphabet.  When an
alphabetic that exists in multiple cases appears as an ordinary
character outside a bracket expression, it is effectively transformed
into a bracket expression containing both cases, so that <b>x</b>
becomes `<b>[xX]</b>'.  When it appears inside a bracket expression,
all case counterparts of it are added to the bracket expression, so
that <b>[x]</b> becomes <b>[xX]</b> and <b>[^x]</b> becomes
`<b>[^xX]</b>'.
</p>
<p>If newline-sensitive matching is specified, <b>.</b> and bracket
expressions using <b>^</b> will never match the newline character (so
that matches will never cross newlines unless the RE explicitly
arranges it) and <b>^</b> and <b>$</b> will match the empty string after
and before a newline respectively, in addition to matching at
beginning and end of string respectively.  ARE <b>\A</b> and <b>\Z</b>
continue to match beginning or end of string <i>only</i>.
</p>
<p>If partial newline-sensitive matching is specified, this affects
<b>.</b> and bracket expressions as with newline-sensitive matching,
but not <b>^</b> and `<b>$</b>'.
</p>
<p>If inverse partial newline-sensitive matching is specified, this
affects <b>^</b> and <b>$</b> as with newline-sensitive matching, but
not <b>.</b> and bracket expressions.  This isn't very useful but is
provided for symmetry.
</p>
</section>
<section>
<title>LIMITS AND COMPATIBILITY</title>
<p>No particular limit is imposed on the length of REs.  Programs
intended to be highly portable should not employ REs longer than 256
bytes, as a POSIX-compliant implementation can refuse to accept such
REs.
</p>
<p>The only feature of AREs that is actually incompatible with POSIX EREs
is that <b>\</b> does not lose its special significance inside bracket
expressions.  All other ARE features use syntax which is illegal or
has undefined or unspecified effects in POSIX EREs; the <b>***</b>
syntax of directors likewise is outside the POSIX syntax for both BREs
and EREs.
</p>
<p>Many of the ARE extensions are borrowed from Perl, but some have been
changed to clean them up, and a few Perl extensions are not present.
Incompatibilities of note include `<b>\b</b>', `<b>\B</b>', the lack
of special treatment for a trailing newline, the addition of
complemented bracket expressions to the things affected by
newline-sensitive matching, the restrictions on parentheses and back
references in lookahead constraints, and the longest/shortest-match
(rather than first-match) matching semantics.
</p>
<p>The matching rules for REs containing both normal and non-greedy
quantifiers have changed since early beta-test versions of this
package.  (The new rules are much simpler and cleaner, but don't work
as hard at guessing the user's real intentions.)
</p>
<p>Henry Spencer's original 1986 <i>regexp</i> package, still in
widespread use (e.g., in pre-8.1 releases of Tcl), implemented an
early version of today's EREs.  There are four incompatibilities
between <i>regexp</i>'s near-EREs (`RREs' for short) and AREs.  In
roughly increasing order of significance:
</p>
<ul>
<li>In AREs, <b>\</b> followed by an alphanumeric character is either an
escape or an error, while in RREs, it was just another way of writing
the alphanumeric.  This should not be a problem because there was no
reason to write such a sequence in RREs.
</li>
<li><b>{</b> followed by a digit in an ARE is the beginning of a bound,
while in RREs, <b>{</b> was always an ordinary character.  Such
sequences should be rare, and will often result in an error because
following characters will not look like a valid bound.
</li>
<li>In AREs, <b>\</b> remains a special character within `<b>[]</b>', so
a literal <b>\</b> within <b>[]</b> must be written `<b>\\</b>'.
<b>\\</b> also gives a literal <b>\</b> within <b>[]</b> in RREs,
but only truly paranoid programmers routinely doubled the backslash.
</li>
<li>AREs report the longest/shortest match for the RE, rather than the
first found in a specified search order.  This may affect some RREs
which were written in the expectation that the first match would be
reported.  (The careful crafting of RREs to optimize the search order
for fast matching is obsolete (AREs examine all possible matches in
parallel, and their performance is largely insensitive to their
complexity) but cases where the search order was exploited to
deliberately find a match which was <i>not</i> the longest/shortest
will need rewriting.)
</li>
</ul>
</section>
<section>
<title>BASIC REGULAR EXPRESSIONS</title>
<p>BREs differ from EREs in several respects.  `<b>|</b>', `<b>+</b>', and
<b>?</b> are ordinary characters and there is no equivalent for their
functionality.  The delimiters for bounds are <b>\{</b> and
`<b>\}</b>', with <b>{</b> and <b>}</b> by themselves ordinary
characters.  The parentheses for nested subexpressions are <b>\(</b>
and `<b>\)</b>', with <b>(</b> and <b>)</b> by themselves ordinary
characters.  <b>^</b> is an ordinary character except at the beginning
of the RE or the beginning of a parenthesized subexpression, <b>$</b>
is an ordinary character except at the end of the RE or the end of a
parenthesized subexpression, and <b>*</b> is an ordinary character if
it appears at the beginning of the RE or the beginning of a
parenthesized subexpression (after a possible leading `<b>^</b>').
Finally, single-digit back references are available, and <b>\&lt;</b> and
<b>\&gt;</b> are synonyms for <b>[[:&lt;:]]</b> and <b>[[:&gt;:]]</b>
respectively; no other escapes are available.

</p>
</section>
<seealso>
<ref>RegExp(3)</ref>
<ref>regexp(n)</ref>
<ref>regsub(n)</ref>
<ref>lsearch(n)</ref>
<ref>switch(n)</ref>
<ref>text(n)</ref>
</seealso>
<keywords>
<keyword>match</keyword>
<keyword>regular expression</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="safe" title="Safe Tcl" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: safe.n,v 1.7 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="Safe Tcl" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>Safe Base</name>
<desc>A mechanism for creating and manipulating safe interpreters</desc>
</namesection>
<synopsis>
<syntax>
<cmd>::safe::interpCreate</cmd> ?<m>slave</m>? ?<m>options...</m>?

<cmd>::safe::interpInit</cmd> <m>slave</m> ?<m>options...</m>?

<cmd>::safe::interpConfigure</cmd> <m>slave</m> ?<m>options...</m>?

<cmd>::safe::interpDelete</cmd> <m>slave</m>

<cmd>::safe::interpAddToAccessPath</cmd> <m>slave</m> <m>directory</m>

<cmd>::safe::interpFindInAccessPath</cmd> <m>slave</m> <m>directory</m>

<cmd>::safe::setLogCmd</cmd> ?<m>cmd arg...</m>?
</syntax>
</synopsis>
<section id="options">
<title>OPTIONS</title>
<p>?<b>-accessPath</b> <i>pathList</i>?
?<b>-statics</b> <i>boolean</i>? ?<b>-noStatics</b>?
?<b>-nested</b> <i>boolean</i>? ?<b>-nestedLoadOk</b>?
?<b>-deleteHook</b> <i>script</i>?
</p>
</section>


<section>
<title>DESCRIPTION</title>
<p>Safe Tcl is a mechanism for executing untrusted Tcl scripts
safely and for providing mediated access by such scripts to
potentially dangerous functionality.
</p>
<p>The Safe Base ensures that untrusted Tcl scripts cannot harm the
hosting application.
The Safe Base prevents integrity and privacy attacks. Untrusted Tcl
scripts are prevented from corrupting the state of the hosting
application or computer. Untrusted scripts are also prevented from
disclosing information stored on the hosting computer or in the
hosting application to any party.
</p>
<p>The Safe Base allows a master interpreter to create safe, restricted
interpreters that contain a set of predefined aliases for the <b cat="AMBIGUOUS ambiguous cmd">source</b>,
<b cat="AMBIGUOUS ambiguous cmd">load</b>, <cmd>file</cmd>, <b cat="AMBIGUOUS ambiguous cmd">encoding</b>, and <cmd>exit</cmd> commands and
are able to use the auto-loading and package mechanisms.
</p>
<p>No knowledge of the file system structure is leaked to the
safe interpreter, because it has access only to a virtualized path
containing tokens. When the safe interpreter requests to source a file, it
uses the token in the virtual path as part of the file name to source; the
master interpreter transparently 
translates the token into a real directory name and executes the 
requested operation (see the section <ref refid="security">SECURITY</ref> below for details).
Different levels of security can be selected by using the optional flags
of the commands described below.
</p>
<p>All commands provided in the master interpreter by the Safe Base reside in
the <b>safe</b> namespace:

</p>
</section>
<section>
<title>COMMANDS</title>
<p>The following commands are provided in the master interpreter:
</p>
<dl>
<dle>
<dt><b>::safe::interpCreate</b> ?<m>slave</m>? ?<m>options...</m>?</dt>
<dd>Creates a safe interpreter, installs the aliases described in the section
<ref refid="aliases">ALIASES</ref> and initializes the auto-loading and package mechanism as
specified by the supplied <b>options</b>.
See the <ref refid="options">OPTIONS</ref> section below for a description of the
optional arguments.
If the <i>slave</i> argument is omitted, a name will be generated.
<cmd>::safe::interpCreate</cmd> always returns the interpreter name.
</dd>
</dle>
<dle>
<dt><b>::safe::interpInit</b> <m>slave</m> ?<m>options...</m>?</dt>
<dd>This command is similar to <b>interpCreate</b> except it that does not
create the safe interpreter. <i>slave</i> must have been created by some
other means, like <b>interp create -safe</b>.
</dd>
</dle>
<dle>
<dt><b>::safe::interpConfigure</b> <m>slave</m> ?<m>options...</m>?</dt>
<dd>If no <i>options</i> are given, returns the settings for all options for the
named safe interpreter as a list of options and their current values
for that <i>slave</i>. 
If a single additional argument is provided,
it will return a list of 2 elements <i>name</i> and <i>value</i> where
<i>name</i> is the full name of that option and <i>value</i> the current value
for that option and the <i>slave</i>.
If more than two additional arguments are provided, it will reconfigure the
safe interpreter and change each and only the provided options.
See the section on <ref refid="options">OPTIONS</ref> below for options description.
Example of use:
<example>
# Create a new interp with the same configuration as "$i0" :
set i1 [eval safe::interpCreate [safe::interpConfigure $i0]]
# Get the current deleteHook
set dh [safe::interpConfigure $i0  -del]
# Change (only) the statics loading ok attribute of an interp
# and its deleteHook (leaving the rest unchanged) :
safe::interpConfigure $i0  -delete {foo bar} -statics 0 ;
</example></dd>
</dle>
<dle>
<dt><b>::safe::interpDelete</b> <m>slave</m></dt>
<dd>Deletes the safe interpreter and cleans up the corresponding  
master interpreter data structures.
If a <i>deleteHook</i> script was specified for this interpreter it is
evaluated before the interpreter is deleted, with the name of the
interpreter as an additional argument.
</dd>
</dle>
<dle>
<dt><b>::safe::interpFindInAccessPath</b> <m>slave</m> <m>directory</m></dt>
<dd>This command finds and returns the token for the real directory
<i>directory</i> in the safe interpreter's current virtual access path.
It generates an error if the directory is not found.
Example of use:
<example>
$slave eval [list set tk_library [::safe::interpFindInAccessPath $name $tk_library]]
</example></dd>
</dle>
<dle>
<dt><b>::safe::interpAddToAccessPath</b> <m>slave</m> <m>directory</m></dt>
<dd>This command adds <i>directory</i> to the virtual path maintained for the
safe interpreter in the master, and returns the token that can be used in
the safe interpreter to obtain access to files in that directory.
If the directory is already in the virtual path, it only returns the token
without adding the directory to the virtual path again.
Example of use:
<example>
$slave eval [list set tk_library [::safe::interpAddToAccessPath $name $tk_library]]
</example></dd>
</dle>
<dle>
<dt><b>::safe::setLogCmd</b> ?<m>cmd arg...</m>?</dt>
<dd>This command installs a script that will be called when interesting
life cycle events occur for a safe interpreter.
When called with no arguments, it returns the currently installed script.
When called with one argument, an empty string, the currently installed
script is removed and logging is turned off.
The script will be invoked with one additional argument, a string
describing the event of interest.
The main purpose is to help in debugging safe interpreters.
Using this facility you can get complete error messages while the safe
interpreter gets only generic error messages.
This prevents a safe interpreter from seeing messages about failures
and other events that might contain sensitive information such as real
directory names.
<p>Example of use:
</p><example>
::safe::setLogCmd puts stderr
</example><p>Below is the output of a sample session in which a safe interpreter
attempted to source a file not found in its virtual access path.
Note that the safe interpreter only received an error message saying that
the file was not found:
</p><example>
NOTICE for slave interp10 : Created
NOTICE for slave interp10 : Setting accessPath=(/foo/bar) staticsok=1 nestedok=0 deletehook=()
NOTICE for slave interp10 : auto_path in interp10 has been set to {$p(:0:)}
ERROR for slave interp10 : /foo/bar/init.tcl: no such file or directory
</example>
</dd>
</dle>
</dl>
</section>
<section>
<title>OPTIONS</title>
<p>The following options are common to 
<cmd>::safe::interpCreate</cmd>, <cmd>::safe::interpInit</cmd>, 
and <cmd>::safe::interpConfigure</cmd>.
Any option name can be abbreviated to its minimal 
non-ambiguous name.
Option names are not case sensitive.
</p>
<dl>
<dle>
<dt><b>-accessPath</b> <m>directoryList</m></dt>
<dd>This option sets the list of directories from which the safe interpreter
can <b cat="AMBIGUOUS ambiguous cmd">source</b> and <b cat="AMBIGUOUS ambiguous cmd">load</b> files.
If this option is not specified, or if it is given as the
empty list, the safe interpreter will use the same directories as its
master for auto-loading.
See the section <ref refid="security">SECURITY</ref> below for more detail about virtual paths, 
tokens and access control.
</dd>
</dle>
<dle>
<dt><b>-statics</b> <m>boolean</m></dt>
<dd>This option specifies if the safe interpreter will be allowed
to load statically linked packages (like <b>load {} Tk</b>).
The default value is <b>true</b> : 
safe interpreters are allowed to load statically linked packages.
</dd>
</dle>
<dle>
<dt><b>-noStatics</b></dt>
<dd>This option is a convenience shortcut for <b>-statics false</b> and
thus specifies that the safe interpreter will not be allowed
to load statically linked packages.
</dd>
</dle>
<dle>
<dt><b>-nested</b> <m>boolean</m></dt>
<dd>This option specifies if the safe interpreter will be allowed
to load packages into its own sub-interpreters.
The default value is <b>false</b> : 
safe interpreters are not allowed to load packages into
their own sub-interpreters.
</dd>
</dle>
<dle>
<dt><b>-nestedLoadOk</b></dt>
<dd>This option is a convenience shortcut for <b>-nested true</b> and
thus specifies the safe interpreter will be allowed
to load packages into its own sub-interpreters.
</dd>
</dle>
<dle>
<dt><b>-deleteHook</b> <m>script</m></dt>
<dd>When this option is given a non-empty <i>script</i>, it will be
evaluated in the master with the name of
the safe interpreter as an additional argument
just before actually deleting the safe interpreter.
Giving an empty value removes any currently installed deletion hook
script for that safe interpreter.
The default value (<b>{}</b>) is not to have any deletion call back.
</dd>
</dle>
</dl>
</section>
<section id="aliases">
<title>ALIASES</title>
<p>The following aliases are provided in a safe interpreter:
</p>
<dl>
<dle>
<dt><b>source</b> <m>fileName</m></dt>
<dd>The requested file, a Tcl source file, is sourced into the safe interpreter
if it is found.
The <b cat="AMBIGUOUS ambiguous cmd">source</b> alias can only source files from directories in
the virtual path for the safe interpreter. The <b cat="AMBIGUOUS ambiguous cmd">source</b> alias requires
the safe interpreter to
use one of the token names in its virtual path to denote the directory in
which the file to be sourced can be found.
See the section on <ref refid="security">SECURITY</ref> for more discussion of restrictions on
valid filenames.
</dd>
</dle>
<dle>
<dt><b>load</b> <m>fileName</m></dt>
<dd>The requested file, a shared object file, is dynamically loaded into the
safe interpreter if it is found.
The filename must contain a token name mentioned in the virtual path for
the safe interpreter for it to be found successfully.
Additionally, the shared object file must contain a safe entry point; see
the manual page for the <b cat="AMBIGUOUS ambiguous cmd">load</b> command for more details.
</dd>
</dle>
<dle>
<dt><b>file</b> ?<m>subCmd args...</m>?</dt>
<dd>The <cmd>file</cmd> alias provides access to a safe subset of the subcommands of
the <cmd>file</cmd> command; it allows only <b>dirname</b>, <b cat="AMBIGUOUS ambiguous cmd">join</b>,
<b>extension</b>, <b>root</b>, <b>tail</b>, <b>pathname</b> and <b cat="AMBIGUOUS ambiguous cmd">split</b>
subcommands. For more details on what these subcommands do see the manual
page for the <cmd>file</cmd> command.
</dd>
</dle>
<dle>
<dt><b>encoding</b> ?<m>subCmd args...</m>?</dt>
<dd>The <b cat="AMBIGUOUS ambiguous cmd">encoding</b> alias provides access to a safe subset of the
subcommands of the <b cat="AMBIGUOUS ambiguous cmd">encoding</b> command;  it disallows setting of
the system encoding, but allows all other subcommands including
<b>system</b> to check the current encoding.
</dd>
</dle>
<dle>
<dt><b>exit</b></dt>
<dd>The calling interpreter is deleted and its computation is stopped, but the
Tcl process in which this interpreter exists is not terminated.

</dd>
</dle>
</dl>
</section>
<section id="security">
<title>SECURITY</title>
<p>The Safe Base does not attempt to completely prevent annoyance and
denial of service attacks. These forms of attack prevent the
application or user from temporarily using the computer to perform
useful work, for example by consuming all available CPU time or
all available screen real estate.
These attacks, while aggravating, are deemed to be of lesser importance
in general than integrity and privacy attacks that the Safe Base
is to prevent.
</p>
<p>The commands available in a safe interpreter, in addition to
the safe set as defined in <cmd>interp</cmd> manual page, are mediated aliases
for <b cat="AMBIGUOUS ambiguous cmd">source</b>, <b cat="AMBIGUOUS ambiguous cmd">load</b>, <cmd>exit</cmd>, and safe subsets of
<cmd>file</cmd> and <b cat="AMBIGUOUS ambiguous cmd">encoding</b>. The safe interpreter can also auto-load
code and it can request that packages be loaded.
</p>
<p>Because some of these commands access the local file system, there is a
potential for information leakage about its directory structure.
To prevent this, commands that take file names as arguments in a safe
interpreter use tokens instead of the real directory names.
These tokens are translated to the real directory name while a request to,
e.g., source a file is mediated by the master interpreter.
This virtual path system is maintained in the master interpreter for each safe
interpreter created by <cmd>::safe::interpCreate</cmd> or initialized by
<cmd>::safe::interpInit</cmd> and
the path maps tokens accessible in the safe interpreter into real path
names on the local file system thus preventing safe interpreters 
from gaining knowledge about the
structure of the file system of the host on which the interpreter is
executing.
The only valid file names arguments
for the <b cat="AMBIGUOUS ambiguous cmd">source</b> and <b cat="AMBIGUOUS ambiguous cmd">load</b> aliases provided to the slave
are path in the form of 
<b>[file join</b> <i>token filename</i><b>]</b> (i.e. when using the
native file path formats: <i>token</i><b>/</b><i>filename</i>
on Unix and <i>token</i><b>\</b><i>filename</i> on Windows),
where <i>token</i> is representing one of the directories 
of the <i>accessPath</i> list and <i>filename</i> is
one file in that directory (no sub directories access are allowed).
</p>
<p>When a token is used in a safe interpreter in a request to source or
load a file, the token is checked and
translated to a real path name and the file to be
sourced or loaded is located on the file system.
The safe interpreter never gains knowledge of the actual path name under
which the file is stored on the file system.
</p>
<p>To further prevent potential information leakage from sensitive files that
are accidentally included in the set of files that can be sourced by a safe
interpreter, the <b cat="AMBIGUOUS ambiguous cmd">source</b> alias restricts access to files
meeting the following constraints: the file name must
fourteen characters or shorter, must not contain more than one dot ("<b>.</b>"),
must end up with the extension <b>.tcl</b> or be called <b>tclIndex</b>.
</p>
<p>Each element of the initial access path
list will be assigned a token that will be set in
the slave <b>auto_path</b> and the first element of that list will be set as
the <b cat="variable">tcl_library</b> for that slave.
</p>
<p>If the access path argument is not given or is the empty list, 
the default behavior is to let the slave access the same packages
as the master has access to (Or to be more precise: 
only packages written in Tcl (which by definition can't be dangerous
as they run in the slave interpreter) and C extensions that
provides a Safe_Init entry point). For that purpose, the master's 
<b>auto_path</b> will be used to construct the slave access path. 
In order that the slave successfully loads the Tcl library files
(which includes the auto-loading mechanism itself) the <b cat="variable">tcl_library</b> will be
added or moved to the first position if necessary, in the 
slave access path, so the slave
<b cat="variable">tcl_library</b> will be the same as the master's (its real
path will still be invisible to the slave though). 
In order that auto-loading works the same for the slave and
the master in this by default case, the first-level
sub directories of each directory in the master <b>auto_path</b> will
also be added (if not already included) to the slave access path.
You can always specify a more
restrictive path for which sub directories will never be searched by 
explicitly specifying your directory list with the <b>-accessPath</b> flag
instead of relying on this default mechanism.
</p>
<p>When the <i>accessPath</i> is changed after the first creation or
initialization (i.e. through <b>interpConfigure -accessPath</b> <i>list</i>),
an <cmd>auto_reset</cmd> is automatically evaluated in the safe interpreter
to synchronize its <b>auto_index</b> with the new token list.

</p>
</section>
<seealso>
<ref>interp(n)</ref>
<ref>library(n)</ref>
<ref>load(n)</ref>
<ref>package(n)</ref>
<ref>source(n)</ref>
<ref>unknown(n)</ref>
</seealso>
<keywords>
<keyword>alias</keyword>
<keyword>auto-loading</keyword>
<keyword>auto_mkindex</keyword>
<keyword>load</keyword>
<keyword>master interpreter</keyword>
<keyword>safe interpreter</keyword>
<keyword>slave interpreter</keyword>
<keyword>source</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SaveResult" version="8.1" title="Tcl_SaveResult">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 by Sun Microsystems, Inc.
     Contributions from Don Porter, NIST, 2004. (not subject to US copyright)
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SaveResult.3,v 1.7 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_SaveResult" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SaveInterpState</name>
<name>Tcl_RestoreInterpState</name>
<name>Tcl_DiscardInterpState</name>
<name>Tcl_SaveResult</name>
<name>Tcl_RestoreResult</name>
<name>Tcl_DiscardResult</name>
<desc>save and restore an interpreter's state</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_InterpState
<b>Tcl_SaveInterpState</b>(<m>interp</m>, <m>status</m>)

int
<b>Tcl_RestoreInterpState</b>(<m>interp</m>, <m>state</m>)

<b>Tcl_DiscardInterpState</b>(<m>state</m>)

<fun>Tcl_SaveResult</fun>(<m>interp</m>, <m>savedPtr</m>)

<fun>Tcl_RestoreResult</fun>(<m>interp</m>, <m>savedPtr</m>)

<fun>Tcl_DiscardResult</fun>(<m>savedPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter for which state should be saved.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>status</name>
<argmode>in</argmode>
<desc>Return code value to save as part of interpreter state.
</desc>
</argdef>
<argdef>
<argtype>Tcl_InterpState</argtype>
<name>state</name>
<argmode>in</argmode>
<desc>Saved state token to be restored or discarded.
</desc>
</argdef>
<argdef>
<argtype>Tcl_SavedResult</argtype>
<name name="savedPtr">*savedPtr</name>
<argmode>in</argmode>
<desc>Pointer to location where interpreter result should be saved or restored.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><?NEW 8.5?>These routines allows a C procedure to take a snapshot of the current
state of an interpreter so that it can be restored after a call
to <fun>Tcl_Eval</fun> or some other routine that modifies the interpreter
state.  There are two triplets of routines meant to work together.
</p>
<p>The first triplet stores the snapshot of interpreter state in
an opaque token returned by <b>Tcl_SaveInterpState</b>.  That token
value may then be passed back to one of <b>Tcl_RestoreInterpState</b>
or <b>Tcl_DiscardInterpState</b>, depending on whether the interp
state is to be restored.  So long as one of the latter two routines
is called, Tcl will take care of memory management.
</p>
<p>The second triplet stores the snapshot of only the interpreter
result (not its complete state) in memory allocated by the caller.
These routines are passed a pointer to a <b>Tcl_SavedResult</b> structure
that is used to store enough information to restore the interpreter result.
This structure can be allocated on the stack of the calling
procedure.  These routines do not save the state of any error
information in the interpreter (e.g. the <b>-errorcode</b> or
<b>-errorinfo</b> return options, when an error is in progress).
</p>
<p>Because the routines <b>Tcl_SaveInterpState</b>,
<b>Tcl_RestoreInterpState</b>, and <b>Tcl_DiscardInterpState</b> perform
a superset of the functions provided by the other routines,
any new code should only make use of the more powerful routines.
The older, weaker routines <fun>Tcl_SaveResult</fun>, <fun>Tcl_RestoreResult</fun>,
and <fun>Tcl_DiscardResult</fun> continue to exist only for the sake
of existing programs that may already be using them.  
</p>
<p><b>Tcl_SaveInterpState</b> takes a snapshot of those portions of
interpreter state that make up the full result of script evaluation.
This include the interpreter result, the return code (passed in
as the <i>status</i> argument, and any return options, including
<b>-errorinfo</b> and <b>-errorcode</b> when an error is in progress.
This snapshot is returned as an opaque token of type <b>Tcl_InterpState</b>.
The call to <b>Tcl_SaveInterpState</b> does not itself change the
state of the interpreter.  Unlike <fun>Tcl_SaveResult</fun>, it does
not reset the interpreter.
</p>
<p><b>Tcl_RestoreInterpState</b> accepts a <b>Tcl_InterpState</b> token
previously returned by <b>Tcl_SaveInterpState</b> and restores the
state of the interp to the state held in that snapshot.  The return
value of <b>Tcl_RestoreInterpState</b> is the status value originally
passed to <b>Tcl_SaveInterpState</b> when the snapshot token was
created.
</p>
<p><b>Tcl_DiscardInterpState</b> is called to release a <b>Tcl_InterpState</b>
token previously returned by <b>Tcl_SaveInterpState</b> when that
snapshot is not to be restored to an interp.
</p>
<p>The <b>Tcl_InterpState</b> token returned by <b>Tcl_SaveInterpState</b>
must eventually be passed to either <b>Tcl_RestoreInterpState</b>
or <b>Tcl_DiscardInterpState</b> to avoid a memory leak.  Once
the <b>Tcl_InterpState</b> token is passed to one of them, the
token is no longer valid and should not be used anymore.
</p>
<?ENDNEW CONFUSED 8.5?>
<p><fun>Tcl_SaveResult</fun> moves the string and object results
of <i>interp</i> into the location specified by <i>statePtr</i>.
<fun>Tcl_SaveResult</fun> clears the result for <i>interp</i> and
leaves the result in its normal empty initialized state.
</p>
<p><fun>Tcl_RestoreResult</fun> moves the string and object results from
<i>statePtr</i> back into <i>interp</i>.  Any result or error that was
already in the interpreter will be cleared.  The <i>statePtr</i> is left
in an uninitialized state and cannot be used until another call to
<fun>Tcl_SaveResult</fun>.
</p>
<p><fun>Tcl_DiscardResult</fun> releases the saved interpreter state
stored at <b>statePtr</b>.  The state structure is left in an
uninitialized state and cannot be used until another call to
<fun>Tcl_SaveResult</fun>.
</p>
<p>Once <fun>Tcl_SaveResult</fun> is called to save the interpreter
result, either <fun>Tcl_RestoreResult</fun> or
<fun>Tcl_DiscardResult</fun> must be called to properly clean up the
memory associated with the saved state.  

</p>
</section>
<keywords>
<keyword>result</keyword>
<keyword>state</keyword>
<keyword>interp</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="scale" title="scale" version="4.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: scale.n,v 1.6 2004/10/28 12:25:53 dkf Exp $
 -->
<?TROFF.TH title="scale" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>scale</name>
<desc>Create and manipulate scale widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">scale</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-orient</li>
<li>-relief</li>
<li>-repeatdelay</li>
<li>-repeatinterval</li>
<li>-takefocus</li>
<li>-troughcolor</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-bigincrement</name>
<dbname>bigIncrement</dbname>
<dbclass>BigIncrement</dbclass>
<desc>Some interactions with the scale cause its value to change by
``large'' increments;  this option specifies the size of the
large increments.  If specified as 0, the large increments default
to 1/10 the range of the scale.
</desc>
</optiondef>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies the prefix of a Tcl command to invoke whenever the scale's
value is changed via a widget command.
The actual command consists
of this option followed by a space and a real number indicating the
new value of the scale.
</desc>
</optiondef>
<optiondef>
<name>-digits</name>
<dbname>digits</dbname>
<dbclass>Digits</dbclass>
<desc>An integer specifying how many significant digits should be retained
when converting the value of the scale to a string.
If the number is less than or equal to zero, then the scale picks
the smallest value that guarantees that every possible slider
position prints as a different string.
</desc>
</optiondef>
<optiondef>
<name>-from</name>
<dbname>from</dbname>
<dbclass>From</dbclass>
<desc>A real value corresponding to the left or top end of the scale.
</desc>
</optiondef>
<optiondef>
<name>-label</name>
<dbname>label</dbname>
<dbclass>Label</dbclass>
<desc>A string to display as a label for the scale.  For
vertical scales the label is displayed just to the right of the
top end of the scale.  For horizontal scales the label is displayed
just above the left end of the scale.  If the option is specified
as an empty string, no label is displayed.
</desc>
</optiondef>
<optiondef>
<name>-length</name>
<dbname>length</dbname>
<dbclass>Length</dbclass>
<desc>Specifies the desired long dimension of the scale in screen units
(i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>).
For vertical scales this is the scale's height;  for horizontal scales
it is the scale's width.
</desc>
</optiondef>
<optiondef>
<name>-resolution</name>
<dbname>resolution</dbname>
<dbclass>Resolution</dbclass>
<desc>A real value specifying the resolution for the scale.
If this value is greater than zero then the scale's value will always be
rounded to an even multiple of this value, as will tick marks and
the endpoints of the scale.  If the value is less than zero then no
rounding occurs.  Defaults to 1 (i.e., the value will be integral).
</desc>
</optiondef>
<optiondef>
<name>-showvalue</name>
<dbname>showValue</dbname>
<dbclass>ShowValue</dbclass>
<desc>Specifies a boolean value indicating whether or not the current
value of the scale is to be displayed.
</desc>
</optiondef>
<optiondef>
<name>-sliderlength</name>
<dbname>sliderLength</dbname>
<dbclass>SliderLength</dbclass>
<desc>Specifies the size of the slider, measured in screen units along the slider's
long dimension.  The value may be specified in any of the forms acceptable
to <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
<optiondef>
<name>-sliderrelief</name>
<dbname>sliderRelief</dbname>
<dbclass>SliderRelief</dbclass>
<desc>Specifies the relief to use when drawing the slider, such as <b>raised</b>
or <b>sunken</b>.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the scale:  <b>normal</b>,
<b>active</b>, or <b>disabled</b>.
If the scale is disabled then the value may not be changed and the scale
won't activate.
If the scale is active, the slider is displayed using the color
specified by the <b>activeBackground</b> option.
</desc>
</optiondef>
<optiondef>
<name>-tickinterval</name>
<dbname>tickInterval</dbname>
<dbclass>TickInterval</dbclass>
<desc>Must be a real value.
Determines the spacing between numerical
tick marks displayed below or to the left of the slider.
If 0, no tick marks will be displayed.
</desc>
</optiondef>
<optiondef>
<name>-to</name>
<dbname>to</dbname>
<dbclass>To</dbclass>
<desc>Specifies a real value corresponding
to the right or bottom end of the scale.
This value may be either less than or greater than the <b>from</b> option.
</desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies the name of a global variable to link to the scale.  Whenever the
value of the variable changes, the scale will update to reflect this
value.
Whenever the scale is manipulated interactively, the variable
will be modified to reflect the scale's new value.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired narrow dimension of the trough in screen units
(i.e. any of the forms acceptable to <fun>Tk_GetPixels</fun>).
For vertical scales this is the trough's width;  for horizontal scales
this is the trough's height.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">scale</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a scale widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the scale such as its colors, orientation,
and relief.  The <b cat="AMBIGUOUS widget cmd">scale</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A scale is a widget that displays a rectangular <i>trough</i> and a
small <i>slider</i>.  The trough corresponds to a range
of real values (determined by the <b>from</b>, <b>to</b>, and
<b>resolution</b> options),
and the position of the slider selects a particular real value.
The slider's position (and hence the scale's value) may be adjusted
with the mouse or keyboard as described in the <ref refid="bindings">BINDINGS</ref>
section below.  Whenever the scale's value is changed, a Tcl
command is invoked (using the <b>command</b> option) to notify
other interested widgets of the change.
In addition, the value
of the scale can be linked to a Tcl variable (using the <b cat="AMBIGUOUS ambiguous cmd">variable</b>
option), so that changes in either are reflected in the other.
</p>
<p>Three annotations may be displayed in a scale widget:  a label
appearing at the top right of the widget (top left for horizontal
scales), a number displayed just to the left of the slider
(just above the slider for horizontal scales), and a collection
of numerical tick marks just to the left of the current value
(just below the trough for horizontal scales).  Each of these three
annotations may be enabled or disabled using the
configuration options.
</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">scale</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for scale widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">scale</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">scale</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>coords</b> ?<m>value</m>?</dt>
<dd>Returns a list whose elements are the x and y coordinates of
the point along the centerline of the trough that corresponds
to <i>value</i>.
If <i>value</i> is omitted then the scale's current value is used.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b> ?<m>x y</m>?</dt>
<dd>If <i>x</i> and <i>y</i> are omitted, returns the current value
of the scale.  If <i>x</i> and <i>y</i> are specified, they give
pixel coordinates within the widget;  the command returns
the scale value corresponding to the given pixel.
Only one of <i>x</i> or <i>y</i> is used:  for horizontal scales
<i>y</i> is ignored, and for vertical scales <i>x</i> is ignored.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns a string indicating what part of the scale lies under
the coordinates given by <i>x</i> and <i>y</i>.
A return value of <b>slider</b> means that the point is over
the slider;  <b>trough1</b> means that the point is over the
portion of the slider above  or to the left of the slider;
and <b>trough2</b> means that the point is over the portion
of the slider below or to the right of the slider.
If the point isn't over one of these elements, an empty string
is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>set</b> <m>value</m></dt>
<dd>This command is invoked to change the current value of the scale,
and hence the position at which the slider is displayed.  <i>Value</i>
gives the new value for the scale.
The command has no effect if the scale is disabled.
</dd>
</dle>
</dl>
</section>
<section id="bindings">
<title>BINDINGS</title>
<p>Tk automatically creates class bindings for scales that give them
the following default behavior.
Where the behavior is different for vertical and horizontal scales,
the horizontal behavior is described in parentheses.
</p>
<ol>
<li>If button 1 is pressed in the trough, the scale's value will
be incremented or decremented by the value of the <b>resolution</b>
option so that the slider moves in the direction of the cursor. 
If the button is held down, the action auto-repeats.
</li>
<li>If button 1 is pressed over the slider, the slider can be dragged
with the mouse.
</li>
<li>If button 1 is pressed in the trough with the Control key down,
the slider moves all the way to the end of its range, in the
direction towards the mouse cursor.
</li>
<li>If button 2 is pressed, the scale's value is set to the mouse
position.  If the mouse is dragged with button 2 down, the scale's
value changes with the drag.
</li>
<li>The Up and Left keys move the slider up (left) by the value
of the <b>resolution</b> option.
</li>
<li>The Down and Right keys move the slider down (right) by the value
of the <b>resolution</b> option.
</li>
<li>Control-Up and Control-Left move the slider up (left) by the
value of the <b>bigIncrement</b> option.
</li>
<li>Control-Down and Control-Right move the slider down (right) by the
value of the <b>bigIncrement</b> option.
</li>
<li>Home moves the slider to the top (left) end of its range.
</li>
<li>End moves the slider to the bottom (right) end of its range.
</li>
</ol>
<p>If the scale is disabled using the <b>state</b> option then
none of the above bindings have any effect.
</p>
<p>The behavior of scales can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<keywords>
<keyword>scale</keyword>
<keyword>slider</keyword>
<keyword>trough</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="scan" version="8.4" title="scan">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: scan.n,v 1.19 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="scan" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>scan</name>
<desc>Parse string using conversion specifiers in the style of sscanf</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">scan</b> <m>string format</m> ?<m>varName varName ...</m>?
</syntax>
</synopsis>


<section>
<title>INTRODUCTION</title>
<p>This command parses substrings from an input string in a fashion similar
to the ANSI C <b>sscanf</b> procedure and returns a count of the number of
conversions performed, or -1 if the end of the input string is reached
before any conversions have been performed.  <i>String</i> gives the input
to be parsed and <i>format</i> indicates how to parse it, using <b>%</b>
conversion specifiers as in <b>sscanf</b>.  Each <i>varName</i> gives the
name of a variable; when a substring is scanned from <i>string</i> that
matches a conversion specifier, the substring is assigned to the
corresponding variable.
If no <i>varName</i> variables are specified, then <b cat="AMBIGUOUS ambiguous cmd">scan</b> works in an
inline manner, returning the data that would otherwise be stored in the
variables as a list.  In the inline case, an empty string is returned when
the end of the input string is reached before any conversions have been
performed.
</p>
</section>
<section>
<title>DETAILS ON SCANNING</title>
<p><b>Scan</b> operates by scanning <i>string</i> and <i>format</i> together.
If the next character in <i>format</i> is a blank or tab then it
matches any number of white space characters in <i>string</i> (including
zero).
Otherwise, if it isn't a <b>%</b> character then it 
must match the next character of <i>string</i>.
When a <b>%</b> is encountered in <i>format</i>, it indicates
the start of a conversion specifier.
A conversion specifier contains up to four fields after the <b>%</b>:
a XPG3 position specifier (or a <b>*</b> to indicate the converted
value is to be discarded instead of assigned to any variable); a number
indicating a maximum substring width; a size modifier; and a
conversion character.
All of these fields are optional except for the conversion character.
The fields that are present must appear in the order given above.
</p>
<p>When <b cat="AMBIGUOUS ambiguous cmd">scan</b> finds a conversion specifier in <i>format</i>, it
first skips any white-space characters in <i>string</i> (unless the
conversion character is <b>[</b> or <b>c</b>).
Then it converts the next input characters according to the 
conversion specifier and stores the result in the variable given
by the next argument to <b cat="AMBIGUOUS ambiguous cmd">scan</b>.
</p>
<p>If the <b>%</b> is followed by a decimal number and a <b>$</b>, as in
``<b>%2$d</b>'', then the variable to use is not taken from the next
sequential argument.  Instead, it is taken from the argument indicated
by the number, where 1 corresponds to the first <i>varName</i>.  If
there are any positional specifiers in <i>format</i> then all of the
specifiers must be positional.  Every <i>varName</i> on the argument
list must correspond to exactly one conversion specifier or an error
is generated, or in the inline case, any position can be specified
at most once and the empty positions will be filled in with empty strings.
</p>
<p><new version="8.5">The size modifier field is used only when scanning a substring into
one of Tcl's integer values.  The size modifier field dictates the
integer range acceptable to be stored in a variable, or, for the inline
case, in a position in the result list.
The syntactically valid values for the size modifier are <b>h</b>, <b>L</b>,
<b>l</b>, and <b>ll</b>.  The <b>h</b> size modifier value is equivalent
to the absence of a size modifier in the the conversion specifier.
Either one indicates the integer range to be stored is limited to
the same range produced by the <b>int()</b> function of the <cmd>expr</cmd>
command.  The <b>L</b> size modifier is equivalent to the <b>l</b> size
modifier. Either one indicates the integer range to be stored is
limited to the same range produced by the <b>wide()</b> function of
the <cmd>expr</cmd> command.  The <b>ll</b> size modifier indicates that
the integer range to be stored is unlimited.
</new></p>
<p>The following conversion characters are supported:
</p>
<dl>
<dle>
<dt><b>d</b></dt>
<dd>The input substring must be a decimal integer.
It is read in and the integer value is stored in the variable,
truncated as required by the size modifier value.
</dd>
</dle>
<dle>
<dt><b>o</b></dt>
<dd>The input substring must be an octal integer. It is read in and the 
integer value is stored in the variable,
truncated as required by the size modifier value.
</dd>
</dle>
<dle>
<dt><b>x</b></dt>
<dd>The input substring must be a hexadecimal integer.
It is read in and the integer value is stored in the variable,
truncated as required by the size modifier value.
</dd>
</dle>
<dle>
<dt><b>u</b></dt>
<dd>The input substring must be a decimal integer.
The integer value is truncated as required by the size modifier
value, and the corresponding unsigned value for that truncated
range is computed and stored in the variable as a decimal string.
The conversion makes no sense without reference to a truncation range,
so the size modifier <b>ll</b> is not permitted in combination
with conversion character <b>u</b>.
</dd>
</dle>
<dle>
<dt><b>i</b> </dt>
<dd>The input substring must be an integer.  The base (i.e. decimal, binary,
octal, or hexadecimal) is determined in the same fashion as described in
<cmd>expr</cmd>.  The integer value is stored in the variable,
truncated as required by the size modifier value.
</dd>
</dle>
<dle>
<dt><b>c</b></dt>
<dd>A single character is read in and its Unicode value is stored in 
the variable as an integer value.
Initial white space is not skipped in this case, so the input
substring may be a white-space character.
</dd>
</dle>
<dle>
<dt><b>s</b></dt>
<dd>The input substring consists of all the characters up to the next 
white-space character; the characters are copied to the variable.
</dd>
</dle>
<dle>
<dt><b>e</b> or <b>f</b> or <b>g</b></dt>
<dd>The input substring must be a floating-point number consisting 
of an optional sign, a string of decimal digits possibly
containing a decimal point, and an optional exponent consisting 
of an <b>e</b> or <b>E</b> followed by an optional sign and a string of 
decimal digits.
It is read in and stored in the variable as a floating-point value.
</dd>
</dle>
<dle>
<dt><b>[</b><m>chars</m><b>]</b></dt>
<dd>The input substring consists of one or more characters in <i>chars</i>.
The matching string is stored in the variable.
If the first character between the brackets is a <b>]</b> then
it is treated as part of <i>chars</i> rather than the closing
bracket for the set.
If <i>chars</i>
contains a sequence of the form <i>a</i><b>-</b><i>b</i> then any
character between <i>a</i> and <i>b</i> (inclusive) will match.
If the first or last character between the brackets is a <b>-</b>, then
it is treated as part of <i>chars</i> rather than indicating a range.
</dd>
</dle>
<dle>
<dt><b>[^</b><m>chars</m><b>]</b></dt>
<dd>The input substring consists of one or more characters not in <i>chars</i>.
The matching string is stored in the variable.
If the character immediately following the <b>^</b> is a <b>]</b> then it is 
treated as part of the set rather than the closing bracket for 
the set.
If <i>chars</i>
contains a sequence of the form <i>a</i><b>-</b><i>b</i> then any
character between <i>a</i> and <i>b</i> (inclusive) will be excluded
from the set.
If the first or last character between the brackets is a <b>-</b>, then
it is treated as part of <i>chars</i> rather than indicating a range value.
</dd>
</dle>
<dle>
<dt><b>n</b></dt>
<dd>No input is consumed from the input string.  Instead, the total number
of characters scanned from the input string so far is stored in the variable.
</dd>
</dle>
</dl>
<p>The number of characters read from the input for a conversion is the
largest number that makes sense for that particular conversion (e.g.
as many decimal digits as possible for <b>%d</b>, as 
many octal digits as possible for <b>%o</b>, and so on).
The input substring for a given conversion terminates either when a
white-space character is encountered or when the maximum substring 
width has been reached, whichever comes first.
If a <b>*</b> is present in the conversion specifier 
then no variable is assigned and the next scan argument is not consumed.
</p>
</section>
<section>
<title>DIFFERENCES FROM ANSI SSCANF</title>
<p>The behavior of the <b cat="AMBIGUOUS ambiguous cmd">scan</b> command is the same as the behavior of
the ANSI C <b>sscanf</b> procedure except for the following differences:
</p>
<ol>
<li><b>%p</b> conversion specifier is not supported.
</li>
<li>For <b>%c</b> conversions a single character value is
converted to a decimal string, which is then assigned to the
corresponding <i>varName</i>;
no substring width may be specified for this conversion.
</li>
<li>The <b>h</b> modifier is always ignored and the <b>l</b> and <b>L</b>
modifiers are ignored when converting real values (i.e. type
<b cat="mathfunc">double</b> is used for the internal representation).  The <b>ll</b>
modifier has no <b>sscanf</b> counterpart.
</li>
<li>If the end of the input string is reached before any conversions have been
performed and no variables are given, an empty string is returned.
</li>
</ol>
</section>
<section>
<title>EXAMPLES</title>
<p>Convert a UNICODE character to its numeric value:
</p>
<example>
set char "x"
set value [<b cat="AMBIGUOUS ambiguous cmd">scan</b> $char %c]
</example>
<p>Parse a simple color specification of the form <i>#RRGGBB</i> using
hexadecimal conversions with substring sizes:
</p>
<example>
set string "#08D03F"
<b cat="AMBIGUOUS ambiguous cmd">scan</b> $string "#%2x%2x%2x" r g b
</example>
<p>Parse a <i>HH:MM</i> time string, noting that this avoids problems with
octal numbers by forcing interpretation as decimals (if we did not
care, we would use the <b>%i</b> conversion instead):
</p>
<example>
set string "08:08"   ;# *Not* octal!
if {[<b cat="AMBIGUOUS ambiguous cmd">scan</b> $string "%d:%d" hours minutes] != 2} {
   error "not a valid time string"
}
# We have to understand numeric ranges ourselves...
if {$minutes &lt; 0 || $minutes &gt; 59} {
   error "invalid number of minutes"
}
</example>
<p>Break a string up into sequences of non-whitespace characters (note
the use of the <b>%n</b> conversion so that we get skipping over
leading whitespace correct):
</p>
<example>
set string " a string {with braced words} + leading space "
set words {}
while {[<b cat="AMBIGUOUS ambiguous cmd">scan</b> $string %s%n word length] == 2} {
   lappend words $word
   set string [string range $string $length end]
}
</example>
<p>Parse a simple coordinate string, checking that it is complete by
looking for the terminating character explicitly:
</p>
<example>
set string "(5.2,-4e-2)"
# Note that the spaces before the literal parts of
# the scan pattern are significant, and that ")" is
# the Unicode character \u0029
if {
   [<b cat="AMBIGUOUS ambiguous cmd">scan</b> $string " (%f ,%f %c" x y last] != 3
   || $last != 0x0029
} then {
   error "invalid coordinate string"
}
puts "X=$x, Y=$y"
</example>
<p><?NEW 8.5?>An interactive session demonstrating the truncation of integer
values determined by size modifiers:
</p>
<example>
% set tcl_platform(wordSize)
4
% scan 20000000000000000000 %d
2147483647
% scan 20000000000000000000 %ld
9223372036854775807
% scan 20000000000000000000 %lld
20000000000000000000
</example>
<?ENDNEW CONFUSED 8.5?>


</section>
<seealso>
<ref>format(n)</ref>
<ref>sscanf(3)</ref>
</seealso>
<keywords>
<keyword>conversion specifier</keyword>
<keyword>parse</keyword>
<keyword>scan</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="scrollbar" version="4.1" title="scrollbar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: scrollbar.n,v 1.7 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="scrollbar" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>scrollbar</name>
<desc>Create and manipulate scrollbar widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">scrollbar</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-jump</li>
<li>-orient</li>
<li>-relief</li>
<li>-repeatdelay</li>
<li>-repeatinterval</li>
<li>-takefocus</li>
<li>-troughcolor</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-activerelief</name>
<dbname>activeRelief</dbname>
<dbclass>ActiveRelief</dbclass>
<desc>Specifies the relief to use when displaying the element that is
active, if any.
Elements other than the active element are always displayed with
a raised relief.
</desc>
</optiondef>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies the prefix of a Tcl command to invoke to change the view
in the widget associated with the scrollbar.  When a user requests
a view change by manipulating the scrollbar, a Tcl command is
invoked.  The actual command consists of this option followed by
additional information as described later.  This option almost always has
a value such as <b>.t xview</b> or <b>.t yview</b>, consisting of the
name of a widget and either <b>xview</b> (if the scrollbar is for
horizontal scrolling) or <b>yview</b> (for vertical scrolling).
All scrollable widgets have <b>xview</b> and <b>yview</b> commands
that take exactly the additional arguments appended by the scrollbar
as described in SCROLLING COMMANDS below.
</desc>
</optiondef>
<optiondef>
<name>-elementborderwidth</name>
<dbname>elementBorderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>Specifies the width of borders drawn around the internal elements
of the scrollbar (the two arrows and the slider).  The value may
have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
If this value is less than zero, the value of the <b>borderWidth</b>
option is used in its place.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired narrow dimension of the scrollbar window,
not including 3-D border, if any.  For vertical
scrollbars this will be the width and for horizontal scrollbars
this will be the height.
The value may have any of the forms acceptable to <fun>Tk_GetPixels</fun>.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">scrollbar</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a scrollbar widget.
Additional options, described above, may be specified on the command
line or in the option database to configure aspects of the scrollbar
such as its colors, orientation, and relief.
The <b cat="AMBIGUOUS widget cmd">scrollbar</b> command returns its <i>pathName</i> argument.
At the time this command is invoked, there must not exist a window
named <i>pathName</i>, but <i>pathName</i>'s parent must exist.
</p>
<p>A scrollbar is a widget that displays two arrows, one at each end of
the scrollbar, and a <i>slider</i> in the middle portion of the
scrollbar.
It provides information about what is visible in an <i>associated window</i>
that displays a document of some sort (such as a file being edited or
a drawing).
The position and size of the slider indicate which portion of the
document is visible in the associated window.  For example, if the
slider in a vertical scrollbar covers the top third of the area
between the two arrows, it means that the associated window displays
the top third of its document.
</p>
<p>Scrollbars can be used to adjust the view in the associated window
by clicking or dragging with the mouse.  See the <ref refid="bindings">BINDINGS</ref> section
below for details.
</p>
</section>
<section>
<title>ELEMENTS</title>
<p>A scrollbar displays five elements, which are referred to in the
widget commands for the scrollbar:
</p>
<dl>
<dle>
<dt><b>arrow1</b></dt>
<dd>The top or left arrow in the scrollbar.
</dd>
</dle>
<dle>
<dt><b>trough1</b></dt>
<dd>The region between the slider and <b>arrow1</b>.
</dd>
</dle>
<dle>
<dt><b>slider</b></dt>
<dd>The rectangle that indicates what is visible in the associated widget.
</dd>
</dle>
<dle>
<dt><b>trough2</b></dt>
<dd>The region between the slider and <b>arrow2</b>.
</dd>
</dle>
<dle>
<dt><b>arrow2</b></dt>
<dd>The bottom or right arrow in the scrollbar.
</dd>
</dle>
</dl>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">scrollbar</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for scrollbar widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>activate</b> ?<m>element</m>?</dt>
<dd>Marks the element indicated by <i>element</i> as active, which
causes it to be displayed as specified by the <b>activeBackground</b>
and <b>activeRelief</b> options.
The only element values understood by this command are <b>arrow1</b>,
<b>slider</b>, or <b>arrow2</b>.
If any other value is specified then no element of the scrollbar
will be active.
If <i>element</i> is not specified, the command returns
the name of the element that is currently active, or an empty string
if no element is active.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">scrollbar</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">scrollbar</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delta</b> <m>deltaX deltaY</m></dt>
<dd>Returns a real number indicating the fractional change in
the scrollbar setting that corresponds to a given change
in slider position.  For example, if the scrollbar is horizontal,
the result indicates how much the scrollbar setting must change
to move the slider <i>deltaX</i> pixels to the right (<i>deltaY</i> is
ignored in this case).
If the scrollbar is vertical, the result indicates how much the
scrollbar setting must change to move the slider <i>deltaY</i> pixels
down.  The arguments and the result may be zero or negative.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>fraction</b> <m>x y</m></dt>
<dd>Returns a real number between 0 and 1 indicating where the point
given by <i>x</i> and <i>y</i> lies in the trough area of the scrollbar.
The value 0 corresponds to the top or left of the trough, the
value 1 corresponds to the bottom or right, 0.5 corresponds to
the middle, and so on.
<i>X</i> and <i>y</i> must be pixel coordinates relative to the scrollbar
widget.
If <i>x</i> and <i>y</i> refer to a point outside the trough, the closest
point in the trough is used.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the scrollbar settings in the form of a list whose
elements are the arguments to the most recent <b cat="AMBIGUOUS ambiguous cmd">set</b> widget command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns the name of the element under the point given by <i>x</i> and
<i>y</i> (such as <b>arrow1</b>), or an empty string if the point does
not lie in any element of the scrollbar.
<i>X</i> and <i>y</i> must be pixel coordinates relative to the scrollbar
widget.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>set</b> <m>first last</m></dt>
<dd>This command is invoked by the scrollbar's associated widget to
tell the scrollbar about the current view in the widget.
The command takes two arguments, each of which is a real fraction
between 0 and 1.
The fractions describe the range of the document that is visible in
the associated widget.
For example, if <i>first</i> is 0.2 and <i>last</i> is 0.4, it means
that the first part of the document visible in the window is 20%
of the way through the document, and the last visible part is 40%
of the way through.
</dd>
</dle>
</dl>
</section>
<section>
<title>SCROLLING COMMANDS</title>
<p>When the user interacts with the scrollbar, for example by dragging
the slider, the scrollbar notifies the associated widget that it
must change its view.
The scrollbar makes the notification by evaluating a Tcl command
generated from the scrollbar's <b>-command</b> option.
The command may take any of the following forms.
In each case, <i>prefix</i> is the contents of the
<b>-command</b> option, which usually has a form like <b>.t yview</b>
</p>
<dl>
<dle>
<dt><m>prefix</m> <b>moveto</b> <m>fraction</m></dt>
<dd><i>Fraction</i> is a real number between 0 and 1.
The widget should adjust its view so that the point given
by <i>fraction</i> appears at the beginning of the widget.
If <i>fraction</i> is 0 it refers to the beginning of the
document.  1.0 refers to the end of the document, 0.333
refers to a point one-third of the way through the document,
and so on.
</dd>
</dle>
<dle>
<dt><m>prefix</m> <b>scroll</b> <m>number</m> <b>units</b></dt>
<dd>The widget should adjust its view by <i>number</i> units.
The units are defined in whatever way makes sense for the widget,
such as characters or lines in a text widget.
<i>Number</i> is either 1, which means one unit should scroll off
the top or left of the window, or -1, which means that one unit
should scroll off the bottom or right of the window.
</dd>
</dle>
<dle>
<dt><m>prefix</m> <b>scroll</b> <m>number</m> <b>pages</b></dt>
<dd>The widget should adjust its view by <i>number</i> pages.
It is up to the widget to define the meaning of a page;  typically
it is slightly less than what fits in the window, so that there
is a slight overlap between the old and new views.
<i>Number</i> is either 1, which means the next page should
become visible, or -1, which means that the previous page should
become visible.
</dd>
</dle>
</dl>
</section>
<section>
<title>OLD COMMAND SYNTAX</title>
<p>In versions of Tk before 4.0, the <b cat="AMBIGUOUS ambiguous cmd">set</b> and <b>get</b> widget
commands used a different form.
This form is still supported for backward compatibility, but it
is deprecated.
In the old command syntax, the <b cat="AMBIGUOUS ambiguous cmd">set</b> widget command has the
following form:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>set</b> <m>totalUnits windowUnits firstUnit lastUnit</m></dt>
<dd>In this form the arguments are all integers.
<i>TotalUnits</i> gives the total size of the object being displayed in the
associated widget.  The meaning of one unit depends on the associated
widget;  for example, in a text editor widget units might
correspond to lines of
text.  <i>WindowUnits</i> indicates the total number of units that
can fit in the associated window at one time.  <i>FirstUnit</i>
and <i>lastUnit</i> give the indices of the first and last units
currently visible in the associated window (zero corresponds to the
first unit of the object).
</dd>
</dle>
</dl>
<p>Under the old syntax the <b>get</b> widget command returns a list
of four integers, consisting of the <i>totalUnits</i>, <i>windowUnits</i>,
<i>firstUnit</i>, and <i>lastUnit</i> values from the last <b cat="AMBIGUOUS ambiguous cmd">set</b>
widget command.
</p>
<p>The commands generated by scrollbars also have a different form
when the old syntax is being used:
</p>
<dl>
<dle>
<dt><m>prefix</m> <m>unit</m></dt>
<dd><i>Unit</i> is an integer that indicates what should appear at
the top or left of the associated widget's window.
It has the same meaning as the <i>firstUnit</i> and <i>lastUnit</i>
arguments to the <b cat="AMBIGUOUS ambiguous cmd">set</b> widget command.
</dd>
</dle>
</dl>
<p>The most recent <b cat="AMBIGUOUS ambiguous cmd">set</b> widget command determines whether or not
to use the old syntax.
If it is given two real arguments then the new syntax will be
used in the future, and if it is given four integer arguments then
the old syntax will be used.
</p>
</section>
<section id="bindings">
<title>BINDINGS</title>
<p>Tk automatically creates class bindings for scrollbars that give them
the following default behavior.
If the behavior is different for vertical and horizontal scrollbars,
the horizontal behavior is described in parentheses.
</p>
<ol>
<li>Pressing button 1 over <b>arrow1</b> causes the view in the
associated widget to shift up (left) by one unit so that the
document appears to move down (right) one unit.
If the button is held down, the action auto-repeats.
</li>
<li>Pressing button 1 over <b>trough1</b> causes the view in the
associated widget to shift up (left) by one screenful so that the
document appears to move down (right) one screenful.
If the button is held down, the action auto-repeats.
</li>
<li>Pressing button 1 over the slider and dragging causes the view
to drag with the slider.
If the <b>jump</b> option is true, then the view doesn't drag along
with the slider;  it changes only when the mouse button is released.
</li>
<li>Pressing button 1 over <b>trough2</b> causes the view in the
associated widget to shift down (right) by one screenful so that the
document appears to move up (left) one screenful.
If the button is held down, the action auto-repeats.
</li>
<li>Pressing button 1 over <b>arrow2</b> causes the view in the
associated widget to shift down (right) by one unit so that the
document appears to move up (left) one unit.
If the button is held down, the action auto-repeats.
</li>
<li>If button 2 is pressed over the trough or the slider, it sets
the view to correspond to the mouse position;  dragging the
mouse with button 2 down causes the view to drag with the mouse.
If button 2 is pressed over one of the arrows, it causes the
same behavior as pressing button 1.
</li>
<li>If button 1 is pressed with the Control key down, then if the
mouse is over <b>arrow1</b> or <b>trough1</b> the view changes
to the very top (left) of the document;  if the mouse is over
<b>arrow2</b> or <b>trough2</b> the view changes
to the very bottom (right) of the document;  if the mouse is
anywhere else then the button press has no effect.
</li>
<li>In vertical scrollbars the Up and Down keys have the same behavior
as mouse clicks over <b>arrow1</b> and <b>arrow2</b>, respectively.
In horizontal scrollbars these keys have no effect.
</li>
<li>In vertical scrollbars Control-Up and Control-Down have the same
behavior as mouse clicks over <b>trough1</b> and <b>trough2</b>, respectively.
In horizontal scrollbars these keys have no effect.
</li>
<li>In horizontal scrollbars the Up and Down keys have the same behavior
as mouse clicks over <b>arrow1</b> and <b>arrow2</b>, respectively.
In vertical scrollbars these keys have no effect.
</li>
<li>In horizontal scrollbars Control-Up and Control-Down have the same
behavior as mouse clicks over <b>trough1</b> and <b>trough2</b>, respectively.
In vertical scrollbars these keys have no effect.
</li>
<li>The Prior and Next keys have the same behavior
as mouse clicks over <b>trough1</b> and <b>trough2</b>, respectively.
</li>
<li>The Home key adjusts the view to the top (left edge) of the document.
</li>
<li>The End key adjusts the view to the bottom (right edge) of the document.
</li>
</ol>
</section>
<section>
<title>EXAMPLE</title>
<p>Create a window with a scrollable <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> widget:
</p>
<example>
toplevel .tl
text .tl.t -yscrollcommand {.tl.s set}
<b cat="AMBIGUOUS widget cmd">scrollbar</b> .tl.s -command {.tl.t yview}
grid .tl.t .tl.s -sticky nsew
grid columnconfigure .tl 0 -weight 1
grid rowconfigure .tl 0 -weight 1
</example>


</section>
<seealso>
<ref>ttk_scrollbar(n)</ref>
</seealso>
<keywords>
<keyword>scrollbar</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="seek" version="8.1" title="seek">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: seek.n,v 1.9 2005/05/10 18:34:03 kennykb Exp $
 -->
<?TROFF.TH title="seek" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>seek</name>
<desc>Change the access position for an open channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>seek</cmd> <m>channelId offset</m> ?<m>origin</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Changes the current access position for <i>channelId</i>.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>),
the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or
the result of a channel creation command provided by a Tcl extension.
</p>
<p>The <i>offset</i> and <i>origin</i>
arguments specify the position at which the next read or write will occur
for <i>channelId</i>. <i>Offset</i> must be an integer (which may be
negative) and <i>origin</i> must be one of the following:
</p>
<dl>
<dle>
<dt><b>start</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the start
of the underlying file or device.
</dd>
</dle>
<dle>
<dt><b>current</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the current
access position; a negative <i>offset</i> moves the access position
backwards in the underlying file or device.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>The new access position will be <i>offset</i> bytes from the end of
the file or device.  A negative <i>offset</i> places the access position
before the end of file, and a positive <i>offset</i> places the access
position after the end of file.
</dd>
</dle>
</dl>
<p>The <i>origin</i> argument defaults to <b>start</b>.
</p>
<p>The command flushes all buffered output for the channel before the command
returns, even if the channel is in nonblocking mode.
It also discards any buffered and unread input.
This command returns an empty string.
An error occurs if this command is applied to channels whose underlying
file or device does not support seeking.
</p>
<p>Note that <i>offset</i> values are byte offsets, not character
offsets.  Both <cmd>seek</cmd> and <cmd>tell</cmd> operate in terms of bytes,
not characters, unlike <b cat="AMBIGUOUS ambiguous cmd">read</b>.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Read a file twice:
</p>
<example>
set f [open file.txt]
set data1 [read $f]
<cmd>seek</cmd> $f 0
set data2 [read $f]
close $f
# $data1 == $data2 if the file wasn't updated
</example>
<p>Read the last 10 bytes from a file:
</p>
<example>
set f [open file.data]
# This is guaranteed to work with binary data but
# may fail with other encodings...
fconfigure $f -translation binary
<cmd>seek</cmd> $f -10 end
set data [read $f 10]
close $f
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>open(n)</ref>
<ref>close(n)</ref>
<ref>gets(n)</ref>
<ref>tell(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>access position</keyword>
<keyword>file</keyword>
<keyword>channel</keyword>
<keyword>seek</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="selection" version="8.1" title="selection">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: selection.n,v 1.7 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="selection" section="n" date="8.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>selection</name>
<desc>Manipulate the X selection</desc>
</namesection>
<synopsis>
<syntax>
<cmd>selection</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command provides a Tcl interface to the X selection mechanism and
implements the full selection functionality described in the
X Inter-Client Communication Conventions Manual (ICCCM).
</p>
<p>Note that for management of the CLIPBOARD selection (see below), the
<cmd>clipboard</cmd> command may also be used.
</p>
<p>The first argument to <cmd>selection</cmd> determines the format of the
rest of the arguments and the behavior of the command.  The following
forms are currently supported:
</p>
<commandlist>
<commanddef>
<command><b>selection clear</b> ?<b>-displayof</b> <m>window</m>? ?<b>-selection</b> <m>selection</m>?</command>
<desc>If <i>selection</i> exists anywhere on <i>window</i>'s display, clear it
so that no window owns the selection anymore.  <i>Selection</i>
specifies the X selection that should be cleared, and should be an
atom name such as PRIMARY or CLIPBOARD; see the Inter-Client
Communication Conventions Manual for complete details.
<i>Selection</i> defaults to PRIMARY and <i>window</i> defaults to ``.''.
Returns an empty string. 
</desc>
</commanddef>
<commanddef>
<command><b>selection get</b> ?<b>-displayof</b> <m>window</m>? ?<b>-selection</b> <m>selection</m>? ?<b>-type</b> <m>type</m>?</command>
<desc>Retrieves the value of <i>selection</i> from <i>window</i>'s display and
returns it as a result.  <i>Selection</i> defaults to PRIMARY and
<i>window</i> defaults to ``.''. 
<i>Type</i> specifies the form in which the selection is to be returned
(the desired ``target'' for conversion, in ICCCM terminology), and
should be an atom name such as STRING or FILE_NAME; see the
Inter-Client Communication Conventions Manual for complete details.
<i>Type</i> defaults to STRING.  The selection owner may choose to
return the selection in any of several different representation
formats, such as STRING, ATOM, INTEGER, etc. (this format is different
than the selection type; see the ICCCM for all the confusing details).
If the selection is returned in a non-string format, such as INTEGER
or ATOM, the <cmd>selection</cmd> command converts it to string format as a
collection of fields separated by spaces: atoms are converted to their
textual names, and anything else is converted to hexadecimal integers.
</desc>
</commanddef>
<commanddef>
<command><b>selection handle</b> ?<b>-selection</b> <m>selection</m>? ?<b>-type</b> <m>type</m>? ?<b>-format</b> <m>format</m>? <m>window command</m></command>
<desc>Creates a handler for selection requests, such that <i>command</i> will
be executed whenever <i>selection</i> is owned by <i>window</i> and
someone attempts to retrieve it in the form given by <i>type</i>
(e.g. <i>type</i> is specified in the <b>selection get</b> command).
<i>Selection</i> defaults to PRIMARY, <i>type</i> defaults to STRING, and
<i>format</i> defaults to STRING.  If <i>command</i> is an empty string
then any existing handler for <i>window</i>, <i>type</i>, and
<i>selection</i> is removed.
<p>When <i>selection</i> is requested, <i>window</i> is the selection owner,
and <i>type</i> is the requested type, <i>command</i> will be executed
as a Tcl command with two additional numbers appended to it
(with space separators).  
The two additional numbers
are <i>offset</i> and <i>maxChars</i>:  <i>offset</i> specifies a starting
character position in the selection and <i>maxChars</i> gives the maximum
number of characters to retrieve.  The command should return a value consisting
of at most <i>maxChars</i> of the selection, starting at position
<i>offset</i>.  For very large selections (larger than <i>maxChars</i>)
the selection will be retrieved using several invocations of <i>command</i>
with increasing <i>offset</i> values.  If <i>command</i> returns a string
whose length is less than <i>maxChars</i>, the return value is assumed to
include all of the remainder of the selection;  if the length of
<i>command</i>'s result is equal to <i>maxChars</i> then
<i>command</i> will be invoked again, until it eventually
returns a result shorter than <i>maxChars</i>.  The value of <i>maxChars</i>
will always be relatively large (thousands of characters).
</p><p>If <i>command</i> returns an error then the selection retrieval is rejected
just as if the selection didn't exist at all.
</p><p>The <i>format</i> argument specifies the representation that should be
used to transmit the selection to the requester (the second column of
Table 2 of the ICCCM), and defaults to STRING.  If <i>format</i> is
STRING, the selection is transmitted as 8-bit ASCII characters (i.e.
just in the form returned by <i>command</i>).  If <i>format</i> is
ATOM, then the return value from <i>command</i> is divided into fields
separated by white space;  each field is converted to its atom value,
and the 32-bit atom value is transmitted instead of the atom name.
For any other <i>format</i>, the return value from <i>command</i> is
divided into fields separated by white space and each field is
converted to a 32-bit integer;  an array of integers is transmitted
to the selection requester.
</p><p>The <i>format</i> argument is needed only for compatibility with
selection requesters that don't use Tk.  If Tk is being
used to retrieve the selection then the value is converted back to
a string at the requesting end, so <i>format</i> is
irrelevant.
</p></desc>
</commanddef>
<commanddef>
<command><b>selection own</b> ?<b>-displayof</b> <m>window</m>? ?<b>-selection</b> <m>selection</m>?</command>
<desc/>
</commanddef>
<commanddef>
<command><b>selection own</b> ?<b>-command</b> <m>command</m>? ?<b>-selection</b> <m>selection</m>? <m>window</m></command>
<desc>The first form of <b>selection own</b> returns the path name of the
window in this application that owns <i>selection</i> on the display
containing <i>window</i>, or an empty string if no window in this
application owns the selection.  <i>Selection</i> defaults to PRIMARY and
<i>window</i> defaults to ``.''.
</desc>
</commanddef>
</commandlist>
<p>The second form of <b>selection own</b> causes <i>window</i> to become
the new owner of <i>selection</i> on <i>window</i>'s display, returning
an empty string as result. The existing owner, if any, is notified
that it has lost the selection.
If <i>command</i> is specified, it is a Tcl script to execute when
some other window claims ownership of the selection away from
<i>window</i>.  <i>Selection</i> defaults to PRIMARY.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>On X11 platforms, one of the standard selections available is the
SECONDARY selection. Hardly anything uses it, but here is how to read
it using Tk:
</p>
<example>
set selContents [<b>selection get</b> -selection SECONDARY]
</example>
<p>Many different types of data may be available for a selection; the
special type TARGETS allows you to get a list of available types:
</p>
<example>
foreach type [<b>selection get</b> -type TARGETS] {
   puts "Selection PRIMARY supports type $type"
}
</example>
<p>To claim the selection, you must first set up a handler to supply the
data for the selection.  Then you have to claim the selection...
</p>
<example>
# Set up the data handler ready for incoming requests
set foo "This is a string with some data in it... blah blah"
<b>selection handle</b> -selection SECONDARY . getData
proc getData {offset maxChars} {
   puts "Retrieving selection starting at $offset"
   return [string range $::foo $offset [expr {$offset+$maxChars}]]
}

# Now we grab the selection itself
puts "Claiming selection"
<b>selection own</b> -command lost -selection SECONDARY .
proc lost {} {
   puts "Lost selection"
}
</example>


</section>
<seealso>
<ref>clipboard(n)</ref>
</seealso>
<keywords>
<keyword>clear</keyword>
<keyword>format</keyword>
<keyword>handler</keyword>
<keyword>ICCCM</keyword>
<keyword>own</keyword>
<keyword>selection</keyword>
<keyword>target</keyword>
<keyword>type</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="send" version="4.0" title="send">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: send.n,v 1.5 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="send" section="n" date="4.0" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>send</name>
<desc>Execute a command in a different application</desc>
</namesection>
<synopsis>
<syntax>
<b>send ?</b><m>options</m>? <m>app cmd</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command arranges for <i>cmd</i> (and <i>arg</i>s) to be executed in the
application named by <i>app</i>.  It returns the result or
error from that command execution.
<i>App</i> may be the name of any application whose main window is
on the display containing the sender's main window;  it need not
be within the same process.
If no <i>arg</i> arguments are present, then the command to be executed is
contained entirely within the <i>cmd</i> argument.  If one or
more <i>arg</i>s are present, they are concatenated to form the
command to be executed, just as for the <b cat="AMBIGUOUS ambiguous cmd">eval</b> command.
</p>
<p>If the initial arguments of the command begin with ``-''
they are treated as options.  The following options are
currently defined:
</p>
<dl>
<dle>
<dt><b>-async</b></dt>
<dd>Requests asynchronous invocation.  In this case the <cmd>send</cmd>
command will complete immediately without waiting for <i>cmd</i>
to complete in the target application;  no result will be available
and errors in the sent command will be ignored.
If the target application is in the same process as the sending
application then the <b>-async</b> option is ignored.
</dd>
</dle>
<dle>
<dt><b>-displayof</b> <m>pathName</m></dt>
<dd>Specifies that the target application's main window is on the display
of the window given by <i>pathName</i>, instead of the display containing
the application's main window.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Serves no purpose except to terminate the list of options.  This
option is needed only if <i>app</i> could contain a leading ``-''
character.

</dd>
</dle>
</dl>
</section>
<section>
<title>APPLICATION NAMES</title>
<p>The name of an application is set initially from the name of the
program or script that created the application.
You can query and change the name of an application with the
<b>tk appname</b> command.

</p>
</section>
<section>
<title>DISABLING SENDS</title>
<p>If the <cmd>send</cmd> command is removed from an application (e.g.
with the command <b>rename send {}</b>) then the application
will not respond to incoming send requests anymore,  nor will it
be able to issue outgoing requests.
Communication can be reenabled by invoking the <b>tk appname</b>
command.

</p>
</section>
<section>
<title>SECURITY</title>
<p>The <cmd>send</cmd> command is potentially a serious security loophole. On Unix,
any application that can connect to your X server can send
scripts to your applications.
These incoming scripts can use Tcl to read and
write your files and invoke subprocesses under your name.
Host-based access control such as that provided by <b>xhost</b>
is particularly insecure, since it allows anyone with an account
on particular hosts to connect to your server, and if disabled it
allows anyone anywhere to connect to your server.
In order to provide at least a small amount of
security, Tk checks the access control being used by the server
and rejects incoming sends unless (a) <b>xhost</b>-style access control
is enabled (i.e. only certain hosts can establish connections) and (b) the
list of enabled hosts is empty.
This means that applications cannot connect to your server unless
they use some other form of authorization
such as that provide by <b>xauth</b>.
Under Windows, <cmd>send</cmd> is currently disabled.  Most of the
functionality is provided by the <b>dde</b> command instead.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>This script fragment can be used to make an application that only runs
once on a particular display.
</p>
<example>
if {[tk appname FoobarApp] ne "FoobarApp"} {
    <cmd>send</cmd> -async FoobarApp RemoteStart $argv
    exit
}
# The command that will be called remotely, which raises
# the application main window and opens the requested files
proc RemoteStart args {
    raise .
    foreach filename $args {
        OpenFile $filename
    }
}
</example>
</section>
<seealso>
<ref>winfo(n)</ref>
</seealso>
<keywords>
<keyword>application name</keyword>
<keyword>application</keyword>
<keyword>dde</keyword>
<keyword>name</keyword>
<keyword>remote execution</keyword>
<keyword>security</keyword>
<keyword>send</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="set" title="set">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: set.n,v 1.7 2006/08/09 10:06:28 dkf Exp $
 -->
<?TROFF.TH title="set" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>set</name>
<desc>Read and write variables</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">set</b> <m>varName</m> ?<m>value</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns the value of variable <i>varName</i>.
If <i>value</i> is specified, then set
the value of <i>varName</i> to <i>value</i>, creating a new variable
if one doesn't already exist, and return its value.
If <i>varName</i> contains an open parenthesis and ends with a
close parenthesis, then it refers to an array element:  the characters
before the first open parenthesis are the name of the array,
and the characters between the parentheses are the index within the array.
Otherwise <i>varName</i> refers to a scalar variable.
</p>
<p>If <i>varName</i> includes namespace qualifiers
(in the array name if it refers to an array element), or if <i>varName</i>
is unqualified (does not include the names of any containing namespaces)
but no procedure is active, 
<i>varName</i> refers to a namespace variable
resolved according to the rules described under <b>NAME RESOLUTION</b> in
the <cmd>namespace</cmd> manual page.
</p>
<p>If a procedure is active and <i>varName</i> is unqualified, then
<i>varName</i> refers to a parameter or local variable of the procedure,
unless <i>varName</i> was declared to resolve differently through one of the 
<b cat="AMBIGUOUS ambiguous cmd">global</b>, <b cat="AMBIGUOUS ambiguous cmd">variable</b> or <cmd>upvar</cmd> commands.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Store a random number in the variable <i>r</i>:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">set</b> r [expr {rand()}]
</example>
<p>Store a short message in an array element:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">set</b> anAry(msg) "Hello, World!"
</example>
<p>Store a short message in an array element specified by a variable:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">set</b> elemName "msg"
<b cat="AMBIGUOUS ambiguous cmd">set</b> anAry($elemName) "Hello, World!"
</example>
<p>Copy a value into the variable <i>out</i> from a variable whose name is
stored in the <i>vbl</i> (note that it is often easier to use arrays in
practice instead of doing double-dereferencing):
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">set</b> in0 "small random"
<b cat="AMBIGUOUS ambiguous cmd">set</b> in1 "large random"
<b cat="AMBIGUOUS ambiguous cmd">set</b> vbl in[expr {rand() &gt;= 0.5}]
<b cat="AMBIGUOUS ambiguous cmd">set</b> out [<b cat="AMBIGUOUS ambiguous cmd">set</b> $vbl]
</example>


</section>
<seealso>
<ref>expr(n)</ref>
<ref>global(n)</ref>
<ref>namespace(n)</ref>
<ref>proc(n)</ref>
<ref>trace(n)</ref>
<ref>unset(n)</ref>
<ref>upvar(n)</ref>
<ref>variable(n)</ref>
</seealso>
<keywords>
<keyword>read</keyword>
<keyword>write</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetAppName" version="4.0" title="Tk_SetAppName">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetAppName.3,v 1.4 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_SetAppName" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetAppName</name>
<desc>Set the name of an application for ``send'' commands</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

const char *
<fun>Tk_SetAppName</fun>(<m>tkwin</m>, <m>name</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window in application.  Used only to select a particular
application.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>Name under which to register the application.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_SetAppName</fun> associates a name with a given application and
records that association on the display containing with the application's
main window.
After this procedure has been invoked, other applications on the
display will be able to use the <cmd>send</cmd> command to invoke operations
in the application.
If <i>name</i> is already in use by some other application on the
display, then a new name will be generated by appending
`` <b>#2</b>'' to <i>name</i>;  if this name is also in use,
the number will be incremented until an unused name is found.
The return value from the procedure is a pointer to the name actually
used.
</p>
<p>If the application already has a name when <fun>Tk_SetAppName</fun> is
called, then the new name replaces the old name.
</p>
<p><fun>Tk_SetAppName</fun> also adds a <cmd>send</cmd> command to the application's
interpreter, which can be used to send commands from this application
to others on any of the displays where the application has windows.
</p>
<p>The application's name registration persists until the interpreter is
deleted or the <cmd>send</cmd> command is deleted from <i>interp</i>, at which
point the name is automatically unregistered and the application
becomes inaccessible via <cmd>send</cmd>.
The application can be made accessible again by calling <fun>Tk_SetAppName</fun>.
</p>
<p><fun>Tk_SetAppName</fun> is called automatically by <fun>Tk_Init</fun>,
so applications don't normally need to call it explicitly.
</p>
<p>The command <b>tk appname</b> provides Tcl-level access to the
functionality of <fun>Tk_SetAppName</fun>.

</p>
</section>
<keywords>
<keyword>application</keyword>
<keyword>name</keyword>
<keyword>register</keyword>
<keyword>send command</keyword>
</keywords>
</manpage>
<manpage version="8.4" cat="fun" title="Tk_SetCaretPos" id="SetCaret">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2002 ActiveState Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetCaret.3,v 1.1 2002/06/17 20:09:01 hobbs Exp $
 -->
<?TROFF.TH title="Tk_SetCaretPos" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetCaretPos</name>
<desc>set the display caret location</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_SetCaretPos</fun>(<m>tkwin</m>, <m>x</m>, <m>y</m>, <m>height</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>Window-relative x coordinate.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Window-relative y coordinate.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>h</name>
<argmode>in</argmode>
<desc>Height of the caret in the window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_SetCaretPos</fun> sets the caret location for the display of the
specified Tk_Window <i>tkwin</i>.  The caret is the per-display cursor
location used for indicating global focus (e.g. to comply with Microsoft
Accessibility guidelines), as well as for location of the over-the-spot XIM
(X Input Methods) or Windows IME windows.

</p>
</section>
<keywords>
<keyword>caret</keyword>
<keyword>cursor</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetChanErr" version="8.5" title="Tcl_SetChannelError">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Andreas Kupries <andreas_kupries@users.sourceforge.net>
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: SetChanErr.3,v 1.2 2006/04/12 02:35:06 das Exp $
 -->
<?TROFF.TH title="Tcl_SetChannelError" section="3" date="8.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SetChannelError</name>
<name>Tcl_SetChannelErrorInterp</name>
<name>Tcl_GetChannelError</name>
<name>Tcl_GetChannelErrorInterp</name>
<desc>functions to create/intercept Tcl errors by channel drivers.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_SetChannelError</fun>(<m>chan</m>, <m>msg</m>)

void
<fun>Tcl_SetChannelErrorInterp</fun>(<m>interp</m>, <m>msg</m>)

void
<fun>Tcl_GetChannelError</fun>(<m>chan</m>, <m>msgPtr</m>)

void
<fun>Tcl_GetChannelErrorInterp</fun>(<m>interp</m>, <m>msgPtr</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Channel</argtype>
<name>chan</name>
<argmode>in</argmode>
<desc>Refers to the Tcl channel whose bypass area is accessed.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp*</argtype>
<name>interp</name>
<argmode>in</argmode>
<desc>Refers to the Tcl interpreter whose bypass area is accessed.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj*</argtype>
<name>msg</name>
<argmode>in</argmode>
<desc>Error message put into a bypass area.  A list of return options and
values, followed by a string message.  Both message and the
option/value information are optional.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj**</argtype>
<name>msgPtr</name>
<argmode>out</argmode>
<desc>Reference to a place where the message stored in the accessed bypass
area can be stored in.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p>The current definition of a Tcl channel driver does not permit the
direct return of arbitrary error messages, except for the setting and
retrieval of channel options. All other functions are restricted to
POSIX error codes.
</p>
<p>The functions described here overcome this limitation. Channel drivers
are allowed to use <fun>Tcl_SetChannelError</fun> and
<fun>Tcl_SetChannelErrorInterp</fun> to place arbitrary error messages in
<b>bypass areas</b> <i>defined for channels and interpreters. And the
generic I/O layer uses</i> <fun>Tcl_GetChannelError</fun> and
<fun>Tcl_GetChannelErrorInterp</fun> to look for messages in the bypass
areas and arrange for their return as errors. The posix error codes
set by a driver are used now if and only if no messages are present.
</p>
<p><fun>Tcl_SetChannelError</fun> stores error information in the bypass area
of the specified channel. The number of references to the <b>msg</b>
object goes up by one. Previously stored information will be
discarded, by releasing the reference held by the channel. The channel
reference must not be NULL.
</p>
<p><fun>Tcl_SetChannelErrorInterp</fun> stores error information in the bypass
area of the specified interpreter. The number of references to the
<b>msg</b> object goes up by one. Previously stored information will be
discarded, by releasing the reference held by the interpreter. The
interpreter reference must not be NULL.
</p>
<p><fun>Tcl_GetChannelError</fun> places either the error message held in the
bypass area of the specified channel into <i>msgPtr</i>, or NULL; and
resets the bypass. I.e. after an invokation all following invokations
will return NULL, until an intervening invokation of
<fun>Tcl_SetChannelError</fun> with a non-NULL message. The <i>msgPtr</i>
must not be NULL. The reference count of the message is not touched.
The reference previously held by the channel is now held by the caller
of the function and it is its responsibility to release that reference
when it is done with the object.
</p>
<p><fun>Tcl_GetChannelErrorInterp</fun> places either the error message held
in the bypass area of the specified interpreter into <i>msgPtr</i>, or
NULL; and resets the bypass. I.e. after an invokation all following
invokations will return NULL, until an intervening invokation of
<fun>Tcl_SetChannelErrorInterp</fun> with a non-NULL message. The
<i>msgPtr</i> must not be NULL. The reference count of the message is
not touched.  The reference previously held by the interpreter is now
held by the caller of the function and it is its responsibility to
release that reference when it is done with the object.
</p>
<p>Which functions of a channel driver are allowed to use which bypass
function is listed below, as is which functions of the public channel
API may leave a messages in the bypass areas.
</p>
<dl cat="type" scope="global">
<dle>
<dt><b>Tcl_DriverCloseProc</b></dt>
<dd>May use <fun>Tcl_SetChannelErrorInterp</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverInputProc</b></dt>
<dd>May use <fun>Tcl_SetChannelError</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverOutputProc</b></dt>
<dd>May use <fun>Tcl_SetChannelError</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverSeekProc</b></dt>
<dd>May use <fun>Tcl_SetChannelError</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverWideSeekProc</b></dt>
<dd>May use <fun>Tcl_SetChannelError</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverSetOptionProc</b></dt>
<dd>Has already the ability to pass arbitrary error messages. Must
<b>not</b> use any of the new functions.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverGetOptionProc</b></dt>
<dd>Has already the ability to pass arbitrary error messages. Must
<b>not</b> use any of the new functions.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverWatchProc</b></dt>
<dd>Must <b>not</b> use any of the new functions. Is internally called and
has no ability to return any type of error whatsoever.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverBlockModeProc</b></dt>
<dd>May use <fun>Tcl_SetChannelError</fun>, and only this function.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverGetHandleProc</b></dt>
<dd>Must <b>not</b> use any of the new functions. It is only a low-level
function, and not used by Tcl commands.
</dd>
</dle>
<dle>
<dt><b>Tcl_DriverHandlerProc</b></dt>
<dd>Must <b>not</b> use any of the new functions. Is internally called and
has no ability to return any type of error whatsoever.
</dd>
</dle>
</dl>
<p>Given the information above the following public functions of the Tcl
C API are affected by these changes. I.e. when these functions are
called the channel may now contain a stored arbitrary error message
requiring processing by the caller.
</p>
<dl cat="fun" scope="global">
<dle>
<dt><b>Tcl_StackChannel</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Seek</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Tell</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_ReadRaw</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Read</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_ReadChars</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Gets</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_GetsObj</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Flush</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_WriteRaw</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_WriteObj</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_Write</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_WriteChars</b></dt>
<dd/>
</dle>
</dl>
<p>All other API functions are unchanged. Especially the functions below
leave all their error information in the interpreter result.
</p>
<dl cat="fun" scope="global">
<dle>
<dt><b>Tcl_Close</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_UnregisterChannel</b></dt>
<dd/>
</dle>
<dle>
<dt><b>Tcl_UnstackChannel</b></dt>
<dd/>
</dle>
</dl>
</section>
<seealso>
<ref>Tcl_Close(3)</ref>
<ref>Tcl_OpenFileChannel(3)</ref>
<ref>Tcl_SetErrno(3)</ref>
</seealso>
<keywords>
<keyword>channel driver</keyword>
<keyword>error messages</keyword>
<keyword>channel type</keyword>
</keywords>
</manpage>
<manpage cat="fun" title="Tk_SetClass" id="SetClass">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetClass.3,v 1.2 1998/09/14 18:22:53 stanton Exp $
 -->
<?TROFF.TH title="Tk_SetClass" section="3" date="" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetClass</name>
<name>Tk_Class</name>
<desc>set or retrieve a window's class</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_SetClass</fun>(<m>tkwin</m>, <m>class</m>)

Tk_Uid
<fun>Tk_Class</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="class">*class</name>
<argmode>in</argmode>
<desc>New class name for window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_SetClass</fun> is called to associate a class with a particular
window.  The <i>class</i> string identifies the type of the
window;  all windows with the same general class of behavior
(button, menu, etc.) should have the same class.  By
convention all class names start with a capital letter, and
there exists a Tcl command with the same name as
each class (except all in lower-case) which can be used to
create and manipulate windows of that class.
A window's class string is initialized to NULL
when the window is created.
</p>
<p>For main windows, Tk automatically propagates the name and class
to the WM_CLASS property used by window managers.  This happens
either when a main window is actually created (e.g. in
<fun>Tk_MakeWindowExist</fun>), or when <fun>Tk_SetClass</fun>
is called, whichever occurs later.  If a main window has not been
assigned a class then Tk will not set the WM_CLASS property for
the window.
</p>
<p><fun>Tk_Class</fun> is a macro that returns the
current value of <i>tkwin</i>'s class.  The value is returned
as a Tk_Uid, which may be used just like a string pointer but also has
the properties of a unique identifier (see the manual entry for
<fun>Tk_GetUid</fun> for details).
If <i>tkwin</i> has not yet been given a class, then
<fun>Tk_Class</fun> will return NULL.

</p>
</section>
<keywords>
<keyword>class</keyword>
<keyword>unique identifier</keyword>
<keyword>window</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetClassProcs" title="Tk_SetClassProcs" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetClassProcs.3,v 1.3 2004/09/19 16:05:36 dkf Exp $
 -->
<?TROFF.TH title="Tk_SetClassProcs" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetClassProcs</name>
<desc>register widget specific procedures</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_SetClassProcs</fun>(<m>tkwin</m>, <m>procs</m>, <m>instanceData</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window to modify.
</desc>
</argdef>
<argdef>
<argtype>Tk_ClassProcs</argtype>
<name name="procs">*procs</name>
<argmode>in</argmode>
<desc>Pointer to data structure containing widget specific procedures.
The data structure pointed to by <i>procs</i> must be static:
Tk keeps a reference to it as long as the window exists.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>instanceData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to widget callbacks.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_SetClassProcs</fun> is called to register a set of procedures that
are used as callbacks in different places.
</p>
<p>The structure pointed to by <i>procs</i> contains the following:
</p>
<syntax cat="type" name="Tk_ClassProcs" scope="global">
typedef struct Tk_ClassProcs {
    unsigned int <i>size</i>;
    Tk_ClassWorldChangedProc *<i>worldChangedProc</i>;
    Tk_ClassCreateProc *<i>createProc</i>;
    Tk_ClassModalProc *<i>modalProc</i>;
} Tk_ClassProcs;
</syntax>
<p>The <i>size</i> field is used to simplify future expansion of the
structure. It should always be set to (literally) <b>sizeof(Tk_ClassProcs)</b>.
</p>
<p><i>worldChangedProc</i> is invoked when the system has altered
in some way that requires some reaction from the widget.  For example,
when a font alias (see the <cmd>font</cmd> manual entry) is reconfigured,
widgets configured to use that font alias must update their display
accordingly.  <i>worldChangedProc</i> should have arguments and results
that match the type <type>Tk_ClassWorldChangedProc</type>:
</p>
<syntax cat="type" name="Tk_ClassWorldChangedProc" scope="global">
typedef void Tk_ClassWorldChangedProc(
    ClientData <i>instanceData</i>);
</syntax>
<p>The <i>instanceData</i> parameter passed to the <i>worldChangedProc</i>
will be identical to the <i>instanceData</i> parameter passed to
<fun>Tk_SetClassProcs</fun>.
</p>
<p><i>createProc</i> is used to create platform-dependant windows.  It is
invoked by <fun>Tk_MakeWindowExist</fun>.  <i>createProc</i> should have
arguments and results that match the type <type>Tk_ClassCreateProc</type>:
</p>
<syntax cat="type" name="Tk_ClassCreateProc" scope="global">
typedef Window Tk_ClassCreateProc(
    Tk_Window <i>tkwin</i>,
    Window <i>parent</i>,
    ClientData <i>instanceData</i>);
</syntax>
<p>The <i>tkwin</i> and <i>instanceData</i> parameters will be identical to
the <i>tkwin</i> and <i>instanceData</i> parameters passed to
<fun>Tk_SetClassProcs</fun>.  The <i>parent</i> parameter will be the parent
of the window to be created.  The <i>createProc</i> should return the
created window.
</p>
<p><i>modalProc</i> is invoked after all bindings on a widget have been
triggered in order to handle a modal loop.  <i>modalProc</i> should
have arguments and results that match the type <type>Tk_ClassModalProc</type>:
</p>
<syntax cat="type" name="Tk_ClassModalProc" scope="global">
typedef void Tk_ClassModalProc(
    Tk_Window <i>tkwin</i>,
    XEvent *<i>eventPtr</i>);
</syntax>
<p>The <i>tkwin</i> parameter to <i>modalProc</i> will be identical to the
<i>tkwin</i> parameter passed to <fun>Tk_SetClassProcs</fun>.  The
<i>eventPtr</i> parameter will be a pointer to an XEvent structure
describing the event being processed.

</p>
</section>
<keywords>
<keyword>callback</keyword>
<keyword>class</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetErrno" title="Tcl_SetErrno" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetErrno.3,v 1.7 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SetErrno" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SetErrno</name>
<name>Tcl_GetErrno</name>
<name>Tcl_ErrnoId</name>
<name>Tcl_ErrnoMsg</name>
<desc>manipulate errno to store and retrieve error codes</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_SetErrno</fun>(<m>errorCode</m>)

int
<fun>Tcl_GetErrno</fun>()

const char *
<fun>Tcl_ErrnoId</fun>()

const char *
<fun>Tcl_ErrnoMsg</fun>(<m>errorCode</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>errorCode</name>
<argmode>in</argmode>
<desc>A POSIX error code such as <b>ENOENT</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_SetErrno</fun> and <fun>Tcl_GetErrno</fun> provide portable access
to the <b>errno</b> variable, which is used to record a POSIX error
code after system calls and other operations such as <fun>Tcl_Gets</fun>.
These procedures are necessary because global variable accesses cannot
be made across module boundaries on some platforms.
</p>
<p><fun>Tcl_SetErrno</fun> sets the <b>errno</b> variable to the value of the
<i>errorCode</i> argument
C procedures that wish to return error information to their callers
via <b>errno</b> should call <fun>Tcl_SetErrno</fun> rather than setting
<b>errno</b> directly.
</p>
<p><fun>Tcl_GetErrno</fun> returns the current value of <b>errno</b>.
Procedures wishing to access <b>errno</b> should call this procedure
instead of accessing <b>errno</b> directly.
</p>
<p><fun>Tcl_ErrnoId</fun> and <fun>Tcl_ErrnoMsg</fun> return string
representations of <b>errno</b> values.  <fun>Tcl_ErrnoId</fun>
returns a machine-readable textual identifier such as
"EACCES" that corresponds to the current value of <b>errno</b>.
<fun>Tcl_ErrnoMsg</fun> returns a human-readable string such as
"permission denied" that corresponds to the value of its
<i>errorCode</i> argument.  The <i>errorCode</i> argument is
typically the value returned by <fun>Tcl_GetErrno</fun>.
The strings returned by these functions are
statically allocated and the caller must not free or modify them.

</p>
</section>
<keywords>
<keyword>errno</keyword>
<keyword>error code</keyword>
<keyword>global variables</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_SetGrid" id="SetGrid">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetGrid.3,v 1.2 1998/09/14 18:22:53 stanton Exp $
 -->
<?TROFF.TH title="Tk_SetGrid" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetGrid</name>
<name>Tk_UnsetGrid</name>
<desc>control the grid for interactive resizing</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_SetGrid</fun>(<m>tkwin</m>, <m>reqWidth</m>, <m>reqHeight</m>, <m>widthInc</m>, <m>heightInc</m>)

<fun>Tk_UnsetGrid</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>reqWidth</name>
<argmode>in</argmode>
<desc>Width in grid units that corresponds to the pixel dimension <i>tkwin</i>
has requested via <fun>Tk_GeometryRequest</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>reqHeight</name>
<argmode>in</argmode>
<desc>Height in grid units that corresponds to the pixel dimension <i>tkwin</i>
has requested via <fun>Tk_GeometryRequest</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>widthInc</name>
<argmode>in</argmode>
<desc>Width of one grid unit, in pixels.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>heightInc</name>
<argmode>in</argmode>
<desc>Height of one grid unit, in pixels.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_SetGrid</fun> turns on gridded geometry management for <i>tkwin</i>'s
toplevel window and specifies the geometry of the grid.
<fun>Tk_SetGrid</fun> is typically invoked by a widget when its <b>setGrid</b>
option is true.
It restricts interactive resizing of <i>tkwin</i>'s toplevel window so
that the space allocated to the toplevel is equal to its requested
size plus or minus even multiples of <i>widthInc</i> and <i>heightInc</i>.
Furthermore, the <i>reqWidth</i> and <i>reqHeight</i> values are
passed to the window manager so that it can report the window's
size in grid units during interactive resizes.
If <i>tkwin</i>'s configuration changes (e.g., the size of a grid unit
changes) then the widget should invoke <fun>Tk_SetGrid</fun> again with the new
information.
</p>
<p><fun>Tk_UnsetGrid</fun> cancels gridded geometry management for
<i>tkwin</i>'s toplevel window.
</p>
<p>For each toplevel window there can be at most one internal window
with gridding enabled.
If <fun>Tk_SetGrid</fun> or <fun>Tk_UnsetGrid</fun> is invoked when some
other window is already controlling gridding for <i>tkwin</i>'s
toplevel, the calls for the new window have no effect.
</p>
<p>See the <cmd>wm</cmd> manual entry for additional information on gridded geometry
management.

</p>
</section>
<keywords>
<keyword>grid</keyword>
<keyword>window</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetOptions" version="8.1" title="Tk_SetOptions">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetOptions.3,v 1.13 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_SetOptions" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_CreateOptionTable</name>
<name>Tk_DeleteOptionTable</name>
<name>Tk_InitOptions</name>
<name>Tk_SetOptions</name>
<name>Tk_FreeSavedOptions</name>
<name>Tk_RestoreSavedOptions</name>
<name>Tk_GetOptionValue</name>
<name>Tk_GetOptionInfo</name>
<name>Tk_FreeConfigOptions</name>
<name>Tk_Offset</name>
<desc>process configuration options</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_OptionTable
<b>Tk_CreateOptionTable(</b><m>interp</m>, <m>templatePtr</m><b>)</b>

<b>Tk_DeleteOptionTable(</b><m>optionTable</m><b>)</b>

int
<b>Tk_InitOptions(</b><m>interp</m>, <m>recordPtr</m>, <m>optionTable</m>, <m>tkwin</m><b>)</b>

int
<b>Tk_SetOptions(</b><m>interp</m>, <m>recordPtr</m>, <m>optionTable</m>, <m>objc</m>, <m>objv</m>, <m>tkwin</m>, <m>savePtr</m>, <m>maskPtr</m><b>)</b>

<b>Tk_FreeSavedOptions(</b><m>savedPtr</m><b>)</b>

<b>Tk_RestoreSavedOptions(</b><m>savedPtr</m><b>)</b>

Tcl_Obj *
<b>Tk_GetOptionValue(</b><m>interp</m>, <m>recordPtr</m>, <m>optionTable</m>, <m>namePtr</m>, <m>tkwin</m><b>)</b>

Tcl_Obj *
<b>Tk_GetOptionInfo(</b><m>interp</m>, <m>recordPtr</m>, <m>optionTable</m>, <m>namePtr</m>, <m>tkwin</m><b>)</b>

<b>Tk_FreeConfigOptions(</b><m>recordPtr</m>, <m>optionTable</m>, <m>tkwin</m><b>)</b>

int
<b>Tk_Offset(</b><m>type</m>, <m>field</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>A Tcl interpreter.  Most procedures use this only for returning error
messages; if it is NULL then no error messages are returned.  For
<fun>Tk_CreateOptionTable</fun> the value cannot be NULL; it gives the
interpreter in which the option table will be used.
</desc>
</argdef>
<argdef>
<argtype>const Tk_OptionSpec</argtype>
<name name="templatePtr">*templatePtr</name>
<argmode>in</argmode>
<desc>Points to an array of static information that describes the configuration
options that are supported.  Used to build a Tk_OptionTable.  The information
pointed to by this argument must exist for the lifetime of the Tk_OptionTable.
</desc>
</argdef>
<argdef>
<argtype>Tk_OptionTable</argtype>
<name>optionTable</name>
<argmode>in</argmode>
<desc>Token for an option table.  Must have been returned by a previous call
to <fun>Tk_CreateOptionTable</fun>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="recordPtr">*recordPtr</name>
<argmode>in/out</argmode>
<desc>Points to structure in which values of configuration options are stored;
fields of this record are modified by procedures such as <fun>Tk_SetOptions</fun>
and read by procedures such as <fun>Tk_GetOptionValue</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>For options such as <b>TK_OPTION_COLOR</b>, this argument indicates
the window in which the option will be used.  If <i>optionTable</i> uses
no window-dependent options, then a NULL value may be supplied for
this argument.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>Number of values in <i>objv</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="const objv">*const objv[]</name>
<argmode>in</argmode>
<desc>Command-line arguments for setting configuring options.
</desc>
</argdef>
<argdef>
<argtype>Tk_SavedOptions</argtype>
<name name="savePtr">*savePtr</name>
<argmode>out</argmode>
<desc>If not NULL, the structure pointed to by this argument is filled
in with the old values of any options that were modified and old
values are restored automatically if an error occurs in <fun>Tk_SetOptions</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="maskPtr">*maskPtr</name>
<argmode>out</argmode>
<desc>If not NULL, the word pointed to by <i>maskPtr</i> is filled in with the
bit-wise OR of the <i>typeMask</i> fields for the options that
were modified.
</desc>
</argdef>
<argdef>
<argtype>Tk_SavedOptions</argtype>
<name name="savedPtr">*savedPtr</name>
<argmode>in/out</argmode>
<desc>Points to a structure previously filled in by <fun>Tk_SetOptions</fun> with
old values of modified options.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="namePtr">*namePtr</name>
<argmode>in</argmode>
<desc>The value of this object is the name of a particular option.  If NULL
is passed to <fun>Tk_GetOptionInfo</fun> then information is returned for
all options.  Must not be NULL when <fun>Tk_GetOptionValue</fun> is called.
</desc>
</argdef>
<argdef>
<argtype>type name</argtype>
<name>type</name>
<argmode>in</argmode>
<desc>The name of the type of a record.
</desc>
</argdef>
<argdef>
<argtype>field name</argtype>
<name>field</name>
<argmode>in</argmode>
<desc>The name of a field in records of type <i>type</i>.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>
<p>These procedures handle most of the details of parsing configuration
options such as those for Tk widgets.  Given a description of what
options are supported, these procedures handle all the details of
parsing options and storing their values into a C structure associated
with the widget or object. The procedures were designed primarily for
widgets in Tk, but they can also be used for other kinds of objects that
have configuration options.  In the rest of this manual page ``widget'' will
be used to refer to the object whose options are being managed; in
practice the object may not actually be a widget.  The term ``widget
record'' is used to refer to the C-level structure in
which information about a particular widget or object is stored.
</p>
<p>Note: the easiest way to learn how to use these procedures is to
look at a working example.  In Tk, the simplest example is the code
that implements the button family of widgets, which is in <b>tkButton.c</b>.
Other examples are in <b>tkSquare.c</b> and <b>tkMenu.c</b>.
</p>
<p>In order to use these procedures, the code that implements the widget
must contain a static array of Tk_OptionSpec structures. This is a
template that describes the various options supported by that class of
widget; there is a separate template for each kind of widget.  The
template contains information such as the name of each option, its type,
its default value, and where the value of the option is stored in the
widget record.  See <ref refid="templates">TEMPLATES</ref> below for more detail.
</p>
<p>In order to process configuration options efficiently, the static
template must be augmented with additional information that is available
only at runtime.  The procedure <fun>Tk_CreateOptionTable</fun> creates this
dynamic information from the template and returns a Tk_OptionTable token
that describes both the static and dynamic information.  All of the
other procedures, such as <fun>Tk_SetOptions</fun>, take a Tk_OptionTable
token as argument.  Typically, <fun>Tk_CreateOptionTable</fun> is called the
first time that a widget of a particular class is created and the
resulting Tk_OptionTable is used in the future for all widgets of that
class.  A Tk_OptionTable may be used only in a single interpreter, given
by the <i>interp</i> argument to <fun>Tk_CreateOptionTable</fun>.  When an
option table is no longer needed <fun>Tk_DeleteOptionTable</fun> should be
called to free all of its resources.  All of the option tables
for a Tcl interpreter are freed automatically if the interpreter is deleted.
</p>
<p><fun>Tk_InitOptions</fun> is invoked when a new widget is created to set
the default values for all of the widget's configuration options.
<fun>Tk_InitOptions</fun> is passed a token for an option table (<i>optionTable</i>)
and a pointer to a widget record (<i>recordPtr</i>), which is the C
structure that holds information about this widget. <fun>Tk_InitOptions</fun>
uses the information in the option table to
choose an appropriate default for each option, then it stores the default
value directly into the widget record, overwriting any information that
was already present in the widget record.  <fun>Tk_InitOptions</fun> normally
returns <b>TCL_OK</b>.  If an error occurred while setting the default values
(e.g., because a default value was erroneous) then <b>TCL_ERROR</b> is returned
and an error message is left in <i>interp</i>'s result if <i>interp</i>
isn't NULL.
</p>
<p><fun>Tk_SetOptions</fun> is invoked to modify configuration options based
on information specified in a Tcl command.  The command might be one that
creates a new widget, or a command that modifies options on an existing
widget.  The <i>objc</i> and <i>objv</i> arguments describe the
values of the arguments from the Tcl command.  <i>Objv</i> must contain
an even number of objects: the first object of each pair gives the name of
an option and the second object gives the new value for that option.
<fun>Tk_SetOptions</fun> looks up each name in <i>optionTable</i>, checks that
the new value of the option conforms to the type in <i>optionTable</i>,
and stores the value of the option into the widget record given by
<i>recordPtr</i>.  <fun>Tk_SetOptions</fun> normally returns <b>TCL_OK</b>.  If
an error occurred (such as an unknown option name or an illegal option
value) then <b>TCL_ERROR</b> is returned and an error message is left in
<i>interp</i>'s result if <i>interp</i> isn't NULL.
</p>
<p><fun>Tk_SetOptions</fun> has two additional features.  First, if the
<i>maskPtr</i> argument isn't NULL then it points to an integer
value that is filled in with information about the options that were
modified.  For each option in the template passed to
<fun>Tk_CreateOptionTable</fun> there is a <i>typeMask</i> field.  The
bits of this field are defined by the code that implements the widget;
for example, each bit might correspond to a particular configuration option.
Alternatively, bits might be used functionally.  For example, one bit might
be used for redisplay: all options that affect the widget's display, such
that changing the option requires the widget to be redisplayed, might have
that bit set.  Another bit might indicate that the geometry of the widget
must be recomputed, and so on.  <fun>Tk_SetOptions</fun> OR's together the
<i>typeMask</i> fields from all the options that were modified and returns
this value at *<i>maskPtr</i>; the caller can then use this information
to optimize itself so that, for example, it doesn't redisplay the widget
if the modified options don't affect the widget's appearance.
</p>
<p>The second additional feature of <fun>Tk_SetOptions</fun> has to do with error
recovery.  If an error occurs while processing configuration options, this
feature makes it possible to restore all the configuration options to their
previous values.  Errors can occur either while processing options in
<fun>Tk_SetOptions</fun> or later in the caller.  In many cases the caller does
additional processing after <fun>Tk_SetOptions</fun> returns; for example, it
might use an option value to set a trace on a variable and may detect
an error if the variable is an array instead of a scalar.  Error recovery
is enabled by passing in a non-NULL value for the <i>savePtr</i> argument
to <fun>Tk_SetOptions</fun>; this should be a pointer to an uninitialized
Tk_SavedOptions structure on the caller's stack.  <fun>Tk_SetOptions</fun>
overwrites the structure pointed to by <i>savePtr</i> with information
about the old values of any options modified by the procedure.
If <fun>Tk_SetOptions</fun> returns successfully, the
caller uses the structure in one of two ways.  If the caller completes
its processing of the new options without any errors, then it must pass
the structure to <fun>Tk_FreeSavedOptions</fun> so that the old values can be
freed.  If the caller detects an error in its processing of the new
options, then it should pass the structure to <fun>Tk_RestoreSavedOptions</fun>,
which will copy the old values back into the widget record and free
the new values.
If <fun>Tk_SetOptions</fun> detects an error then it automatically restores
any options that had already been modified and leaves *<i>savePtr</i> in
an empty state: the caller need not call either <fun>Tk_FreeSavedOptions</fun> or
<fun>Tk_RestoreSavedOptions</fun>.
If the <i>savePtr</i> argument to <fun>Tk_SetOptions</fun> is NULL then
<fun>Tk_SetOptions</fun> frees each old option value immediately when it sets a new
value for the option.  In this case, if an error occurs in the third
option, the old values for the first two options cannot be restored.
</p>
<p><fun>Tk_GetOptionValue</fun> returns the current value of a configuration option
for a particular widget.  The <i>namePtr</i> argument contains the name of
an option; <fun>Tk_GetOptionValue</fun> uses <i>optionTable</i>
to lookup the option and extract its value from the widget record
pointed to by <i>recordPtr</i>, then it returns an object containing
that value.  If an error occurs (e.g., because <i>namePtr</i> contains an
unknown option name) then NULL is returned and an error message is left
in <i>interp</i>'s result unless <i>interp</i> is NULL.
</p>
<p><fun>Tk_GetOptionInfo</fun> returns information about configuration options in
a form suitable for <b>configure</b> widget commands.  If the <i>namePtr</i>
argument is not NULL, it points to an object that gives the name of a
configuration option; <fun>Tk_GetOptionInfo</fun> returns an object containing
a list with five elements, which are the name of the option, the name and
class used for the option in the option database, the default value for
the option, and the current value for the option.  If the <i>namePtr</i>
argument is NULL, then <fun>Tk_GetOptionInfo</fun> returns information about
all options in the form of a list of lists; each sublist describes one
option.  Synonym options are handled differently depending on whether
<i>namePtr</i> is NULL: if <i>namePtr</i> is NULL then the sublist for
each synonym option has only two elements, which are the name of the
option and the name of the other option that it refers to; if <i>namePtr</i>
is non-NULL and names a synonym option then the object returned
is the five-element list
for the other option that the synonym refers to.  If an error occurs
(e.g., because <i>namePtr</i> contains an unknown option name) then NULL
is returned and an error message is left in <i>interp</i>'s result unless
<i>interp</i> is NULL.
</p>
<p><fun>Tk_FreeConfigOptions</fun> must be invoked when a widget is deleted.
It frees all of the resources associated with any of the configuration
options defined in <i>recordPtr</i> by <i>optionTable</i>.
</p>
<p>The <fun>Tk_Offset</fun> macro is provided as a safe way of generating the
<i>objOffset</i> and <i>internalOffset</i> values for entries in
Tk_OptionSpec structures.  It takes two arguments: the name of a type
of record, and the name of a field in that record. It returns the byte
offset of the named field in records of the given type.

</p>
</section>
<section id="templates">
<title>TEMPLATES</title>
<p>The array of Tk_OptionSpec structures passed to <fun>Tk_CreateOptionTable</fun>
via its <i>templatePtr</i> argument describes the configuration options
supported by a particular class of widgets.  Each structure specifies
one configuration option and has the following fields:
</p>
<syntax cat="type" name="Tk_OptionSpec" scope="global">
typedef struct {
    Tk_OptionType <i>type</i>;
    const char *<i>optionName</i>;
    const char *<i>dbName</i>;
    const char *<i>dbClass</i>;
    const char *<i>defValue</i>;
    int <i>objOffset</i>;
    int <i>internalOffset</i>;
    int <i>flags</i>;
    ClientData <i>clientData</i>;
    int <i>typeMask</i>;
} Tk_OptionSpec;
</syntax>
<p>The <i>type</i> field indicates what kind of configuration option this is
(e.g. <b>TK_OPTION_COLOR</b> for a color value, or <b>TK_OPTION_INT</b> for
an integer value).  <i>Type</i> determines how the
value of the option is parsed (more on this below).
The <i>optionName</i> field is a string such as <b>-font</b> or <b>-bg</b>;
it is the name used for the option in Tcl commands and passed to
procedures via the <i>objc</i> or <i>namePtr</i> arguments.
The <i>dbName</i> and <i>dbClass</i> fields are used by <fun>Tk_InitOptions</fun>
to look up a default value for this option in the option database; if
<i>dbName</i> is NULL then the option database is not used by
<fun>Tk_InitOptions</fun> for this option.  The <i>defValue</i> field
specifies a default value for this configuration option if no
value is specified in the option database.  The <i>objOffset</i> and
<i>internalOffset</i> fields indicate where to store the value of this
option in widget records (more on this below); values for the <i>objOffset</i>
and <i>internalOffset</i> fields should always be generated with the
<fun>Tk_Offset</fun> macro.
The <i>flags</i> field contains additional information
to control the processing of this configuration option (see below
for details).
<i>ClientData</i> provides additional type-specific data needed
by certain types.  For instance, for <b>TK_OPTION_COLOR</b> types,
<i>clientData</i> is a string giving the default value to use on
monochrome displays.  See the descriptions of the different types
below for details.
The last field, <i>typeMask</i>, is used by <fun>Tk_SetOptions</fun> to
return information about which options were modified; see the description
of <fun>Tk_SetOptions</fun> above for details.
</p>
<p>When <fun>Tk_InitOptions</fun> and <fun>Tk_SetOptions</fun> store the value of an
option into the widget record, they can do it in either of two ways.
If the <i>objOffset</i> field of the Tk_OptionSpec is greater than
or equal to zero, then the value of the option is stored as a
(Tcl_Obj *) at the location in the widget record given by <i>objOffset</i>.
If the <i>internalOffset</i> field of the Tk_OptionSpec is
greater than or equal to zero, then the value of the option is stored
in a type-specific internal form at the location in the widget record
given by <i>internalOffset</i>.  For example, if the option's type is
<b>TK_OPTION_INT</b> then the internal form is an integer.  If the
<i>objOffset</i> or <i>internalOffset</i> field is negative then the
value is not stored in that form.  At least one of the offsets must be
greater than or equal to zero.
</p>
<p>The <i>flags</i> field consists of one or more bits ORed together.  At
present only a single flag is supported: <b>TK_OPTION_NULL_OK</b>.  If
this bit is set for an option then an empty string will be accepted as
the value for the option and the resulting internal form will be a
NULL pointer, a zero value, or <b>None</b>, depending on the type of
the option.  If the flag is not set then empty strings will result
in errors.
<b>TK_OPTION_NULL_OK</b> is typically used to allow a
feature to be turned off entirely, e.g. set a cursor value to
<b>None</b> so that a window simply inherits its parent's cursor.
Not all option types support the <b>TK_OPTION_NULL_OK</b>
flag; for those that do, there is an explicit indication of that fact
in the descriptions below.
</p>
<p>The <i>type</i> field of each Tk_OptionSpec structure determines
how to parse the value of that configuration option. The
legal value for <i>type</i>, and the corresponding actions, are
described below.  If the type requires a <i>tkwin</i> value to be
passed into procedures like <fun>Tk_SetOptions</fun>, or if it uses
the <i>clientData</i> field of the Tk_OptionSpec, then it is indicated
explicitly; if not mentioned, the type requires neither <i>tkwin</i>
nor <i>clientData</i>.
</p>
<dl>
<dle>
<dt><b>TK_OPTION_ANCHOR</b></dt>
<dd>The value must be a standard anchor position such as <b>ne</b> or
<b>center</b>.  The internal form is a Tk_Anchor value like the ones
returned by <fun>Tk_GetAnchorFromObj</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_BITMAP</b></dt>
<dd>The value must be a standard Tk bitmap name. The internal form is a
Pixmap token like the ones returned by <fun>Tk_AllocBitmapFromObj</fun>.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun>, and it supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_BOOLEAN</b></dt>
<dd>The value must be a standard boolean value such as <b>true</b> or
<b>no</b>.  The internal form is an integer with value 0 or 1.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_BORDER</b></dt>
<dd>The value must be a standard color name such as <b>red</b> or <b>#ff8080</b>.
The internal form is a Tk_3DBorder token like the ones returned
by <fun>Tk_Alloc3DBorderFromObj</fun>.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun>, and it supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_COLOR</b></dt>
<dd>The value must be a standard color name such as <b>red</b> or <b>#ff8080</b>.
The internal form is an (XColor *) token like the ones returned by
<fun>Tk_AllocColorFromObj</fun>.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun>, and it supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_CURSOR</b></dt>
<dd>The value must be a standard cursor name such as <b>cross</b> or <b>@foo</b>.
The internal form is a Tk_Cursor token like the ones returned by
<fun>Tk_AllocCursorFromObj</fun>.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun>, and when the option is set the cursor
for the window is changed by calling <b>XDefineCursor</b>.  This
option type also supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_CUSTOM</b></dt>
<dd>This option allows applications to define new option types.  The
clientData field of the entry points to a structure defining the new
option type.  See the section <ref refid="custom-option-types">CUSTOM OPTION TYPES</ref> below for details.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_DOUBLE</b></dt>
<dd>The string value must be a floating-point number in
the format accepted by <b>strtol</b>.  The internal form is a C
<b cat="mathfunc">double</b> value.  This option type supports the <b>TK_OPTION_NULL_OK</b>
flag; if a NULL value is set, the internal representation is set to zero.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_END</b></dt>
<dd>Marks the end of the template.  There must be a Tk_OptionSpec structure
with <i>type</i> <b>TK_OPTION_END</b> at the end of each template.  If the
<i>clientData</i> field of this structure isn't NULL, then it points to
an additional array of Tk_OptionSpec's, which is itself terminated by
another <b>TK_OPTION_END</b> entry.  Templates may be chained arbitrarily
deeply.  This feature allows common options to be shared by several
widget classes.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_FONT</b></dt>
<dd>The value must be a standard font name such as <b>Times 16</b>.
The internal form is a Tk_Font handle like the ones returned by
<fun>Tk_AllocFontFromObj</fun>.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun>, and it supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_INT</b></dt>
<dd>The string value must be an integer in the format accepted by
<b>strtol</b> (e.g. <b>0</b> and <b>0x</b> prefixes may be used to
specify octal or hexadecimal numbers, respectively).  The internal
form is a C <b cat="mathfunc">int</b> value.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_JUSTIFY</b></dt>
<dd>The value must be a standard justification value such as <b>left</b>.
The internal form is a Tk_Justify like the values returned by
<fun>Tk_GetJustifyFromObj</fun>.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_PIXELS</b></dt>
<dd>The value must specify a screen distance such as <b>2i</b> or <b>6.4</b>.
The internal form is an integer value giving a
distance in pixels, like the values returned by
<fun>Tk_GetPixelsFromObj</fun>.  Note: if the <i>objOffset</i> field isn't
used then information about the original value of this option will be lost.
See <ref refid="objoffset-vs.-internaloffset">OBJOFFSET VS. INTERNALOFFSET</ref> below for details.  This option
type supports the <b>TK_OPTION_NULL_OK</b> flag; if a NULL value is set, the
internal representation is set to zero.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_RELIEF</b></dt>
<dd>The value must be standard relief such as <b>raised</b>.
The internal form is an integer relief value such as
<b>TK_RELIEF_RAISED</b>.  This option type supports the <b>TK_OPTION_NULL_OK</b>
flag; if the empty string is specified as the value for the option,
the integer relief value is set to <b>TK_RELIEF_NULL</b>.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_STRING</b></dt>
<dd>The value may be any string.  The internal form is a (char *) pointer
that points to a dynamically allocated copy of the value.
This option type supports the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_STRING_TABLE</b></dt>
<dd>For this type, <i>clientData</i> is a pointer to an array of strings
suitable for passing to <fun>Tcl_GetIndexFromObj</fun>.  The value must
be one of the strings in the table, or a unique abbreviation of
one of the strings.  The internal form is an integer giving the index
into the table of the matching string, like the return value
from <fun>Tcl_GetStringFromObj</fun>. 
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_SYNONYM</b></dt>
<dd>This type is used to provide alternative names for an option (for
example, <b>-bg</b> is often used as a synonym for <b>-background</b>).
The <b>clientData</b> field is a (char *) pointer that gives
the name of another option in the same table.  Whenever the
synonym option is used, the information from the other option
will be used instead.
</dd>
</dle>
<dle>
<dt><b>TK_OPTION_WINDOW</b></dt>
<dd>The value must be a window path name.  The internal form is a
<type>Tk_Window</type> token for the window.
This option type requires <i>tkwin</i> to be supplied to procedures
such as <fun>Tk_SetOptions</fun> (in order to identify the application),
and it supports the <b>TK_OPTION_NULL_OK</b> flag.

</dd>
</dle>
</dl>
</section>
<section>
<title>STORAGE MANAGEMENT ISSUES</title>
<p>If a field of a widget record has its offset stored in the <i>objOffset</i>
or <i>internalOffset</i> field of a Tk_OptionSpec structure then the
procedures described here will handle all of the storage allocation and
resource management issues associated with the field.  When the value
of an option is changed, <fun>Tk_SetOptions</fun> (or <fun>Tk_FreeSavedOptions</fun>)
will automatically free any resources associated with the old value, such as
Tk_Fonts for <b>TK_OPTION_FONT</b> options or dynamically allocated memory for
<b>TK_OPTION_STRING</b> options.  For an option stored as an object using the
<i>objOffset</i> field of a Tk_OptionSpec, the widget record shares the
object pointed to by the <i>objv</i> value from the call to
<fun>Tk_SetOptions</fun>.  The reference count for this object is incremented
when a pointer to it is stored in the widget record and decremented when
the option is modified.  When the widget is deleted
<fun>Tk_FreeConfigOptions</fun> should be invoked; it will free the resources
associated with all options and decrement reference counts for any
objects.
</p>
<p>However, the widget code is responsible for storing NULL or <b>None</b> in
all pointer and token fields before invoking <fun>Tk_InitOptions</fun>.
This is needed to allow proper cleanup in the rare case where
an error occurs in <fun>Tk_InitOptions</fun>.

</p>
</section>
<section id="objoffset-vs.-internaloffset">
<title>OBJOFFSET VS. INTERNALOFFSET</title>
<p>In most cases it is simplest to use the <i>internalOffset</i> field of
a Tk_OptionSpec structure and not the <i>objOffset</i> field.  This
makes the internal form of the value immediately available to the
widget code so the value doesn't have to be extracted from an object
each time it is used.  However, there are two cases where the
<i>objOffset</i> field is useful.  The first case is for
<b>TK_OPTION_PIXELS</b> options.  In this case, the internal form is
an integer pixel value that is valid only for a particular screen.
If the value of the option is retrieved, it will be returned as a simple
number.  For example, after the command <b>.b configure -borderwidth 2m</b>,
the command <b>.b configure -borderwidth</b> might return 7, which is the
integer pixel value corresponding to <b>2m</b>.  Unfortunately, this loses
the original screen-independent value. Thus for <b>TK_OPTION_PIXELS</b> options
it is better to use the <i>objOffset</i> field.  In this case the original
value of the option is retained in the object and can be returned when
the option is retrieved.  In most cases it is convenient to use the
<i>internalOffset</i> field as well, so that the integer value is
immediately available for use in the widget code (alternatively,
<fun>Tk_GetPixelsFromObj</fun> can be used to extract the integer value from
the object whenever it is needed).  Note: the problem of losing information
on retrievals exists only for <b>TK_OPTION_PIXELS</b> options.
</p>
<p>The second reason to use the <i>objOffset</i> field is in order to
implement new types of options not supported by these procedures.
To implement a new type of option, you can use <b>TK_OPTION_STRING</b> as
the type in the Tk_OptionSpec structure and set the <i>objOffset</i> field
but not the <i>internalOffset</i> field.  Then, after calling
<fun>Tk_SetOptions</fun>, convert the object to internal form yourself.

</p>
</section>
<section id="custom-option-types">
<title>CUSTOM OPTION TYPES</title>
<p>Applications can extend the built-in configuration types with
additional configuration types by writing procedures to parse, print,
free, and restore saved copies of the type and creating a structure
pointing to those procedures:
</p>
<syntax cat="type" name="Tk_CustomOptionFreeProc" scope="global">
typedef struct Tk_ObjCustomOption {
    char *name;
    Tk_CustomOptionSetProc *<i>setProc</i>;
    Tk_CustomOptionGetProc *<i>getProc</i>;
    Tk_CustomOptionRestoreProc *<i>restoreProc</i>;
    Tk_CustomOptionFreeProc *<i>freeProc</i>;
    ClientData <i>clientData</i>;
} Tk_ObjCustomOption;

typedef int Tk_CustomOptionSetProc(
    ClientData <i>clientData</i>,
    Tcl_Interp *<i>interp</i>, 
    Tk_Window <i>tkwin</i>, 
    Tcl_Obj **<i>valuePtr</i>,
    char *<i>recordPtr</i>,
    int <i>internalOffset</i>,
    char *<i>saveInternalPtr</i>, 
    int <i>flags</i>);

typedef Tcl_Obj *Tk_CustomOptionGetProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>, 
    char *<i>recordPtr</i>,
    int <i>internalOffset</i>);

typedef void Tk_CustomOptionRestoreProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>, 
    char *<i>internalPtr</i>, 
    char *<i>saveInternalPtr</i>);

typedef void Tk_CustomOptionFreeProc(
    ClientData <i>clientData</i>,
    Tk_Window <i>tkwin</i>, 
    char *<i>internalPtr</i>);
</syntax>
<p>The Tk_ObjCustomOption structure contains six fields: a name
for the custom option type; pointers to the four procedures; and a
<i>clientData</i> value to be passed to those procedures when they are
invoked.  The <i>clientData</i> value typically points to a structure
containing information that is needed by the procedures when they are
parsing and printing options.  <i>RestoreProc</i> and <i>freeProc</i>
may be NULL, indicating that no function should be called for those
operations.
</p>
<p>The <i>setProc</i> procedure is invoked by <fun>Tk_SetOptions</fun> to
convert a Tcl_Obj into an internal representation and store the
resulting value in the widget record.  The arguments are:
</p>
<dl>
<dle>
<dt><m>clientData</m></dt>
<dd>A copy of the <i>clientData</i> field in the Tk_ObjCustomOption
structure.
</dd>
</dle>
<dle>
<dt><m>interp</m></dt>
<dd>A pointer to a Tcl interpreter, used for error reporting.
</dd>
</dle>
<dle>
<dt><m>Tkwin</m></dt>
<dd>A copy of the <i>tkwin</i> argument to <fun>Tk_SetOptions</fun>
</dd>
</dle>
<dle>
<dt><m>valuePtr</m></dt>
<dd>A pointer to a reference to a Tcl_Obj describing the new value for the
option; it could have been specified explicitly in the call to
<fun>Tk_SetOptions</fun> or it could come from the option database or a
default.  If the objOffset for the option is non-negative (the option
value is stored as a (Tcl_Obj *) in the widget record), the Tcl_Obj
pointer referenced by <i>valuePtr</i> is the pointer that will be
stored at the objOffset for the option.  <i>SetProc</i> may modify the
value if necessary; for example, <i>setProc</i> may change the value to
NULL to support the <b>TK_OPTION_NULL_OK</b> flag.
</dd>
</dle>
<dle>
<dt><m>recordPtr</m></dt>
<dd>A pointer to the start of the widget record to modify.
</dd>
</dle>
<dle>
<dt><m>internalOffset</m></dt>
<dd>Offset in bytes from the start of the widget record to the location
where the internal representation of the option value is to be placed.
</dd>
</dle>
<dle>
<dt><m>saveInternalPtr</m></dt>
<dd>A pointer to storage allocated in a Tk_SavedOptions structure for the
internal representation of the original option value.  Before setting
the option to its new value, <i>setProc</i> should set the value
referenced by <i>saveInternalPtr</i> to the original value of the
option in order to support <fun>Tk_RestoreSavedOptions</fun>.
</dd>
</dle>
<dle>
<dt><m>flags</m></dt>
<dd>A copy of the <i>flags</i> field in the Tk_OptionSpec structure for the
option
</dd>
</dle>
</dl>
<p><i>SetProc</i> returns a standard Tcl result: <b>TCL_OK</b> to indicate successful
processing, or <b>TCL_ERROR</b> to indicate a failure of any kind.  An error
message may be left in the Tcl interpreter given by <i>interp</i> in
the case of an error.
</p>
<p>The <i>getProc</i> procedure is invoked by <fun>Tk_GetOptionValue</fun> and
<fun>Tk_GetOptionInfo</fun> to retrieve a Tcl_Obj representation of the
internal representation of an option.  The <i>clientData</i> argument
is a copy of the <i>clientData</i> field in the Tk_ObjCustomOption
structure.  <i>Tkwin</i> is a copy of the <i>tkwin</i> argument to
<fun>Tk_GetOptionValue</fun> or <fun>Tk_GetOptionInfo</fun>.  <i>RecordPtr</i>
is a pointer to the beginning of the widget record to query.
<i>InternalOffset</i> is the offset in bytes from the beginning of the
widget record to the location where the internal representation of the
option value is stored.  <i>GetProc</i> must return a pointer to a
Tcl_Obj representing the value of the option.
</p>
<p>The <i>restoreProc</i> procedure is invoked by
<fun>Tk_RestoreSavedOptions</fun> to restore a previously saved internal
representation of a custom option value.  The <i>clientData</i> argument
is a copy of the <i>clientData</i> field in the Tk_ObjCustomOption
structure.  <i>Tkwin</i> is a copy of the <i>tkwin</i> argument to
<fun>Tk_GetOptionValue</fun> or <fun>Tk_GetOptionInfo</fun>.  <i>InternalPtr</i>
is a pointer to the location where internal representation of the
option value is stored.
<i>SaveInternalPtr</i> is a pointer to the saved value.
<i>RestoreProc</i> must copy the value from <i>saveInternalPtr</i> to
<i>internalPtr</i> to restore the value.  <i>RestoreProc</i> need not
free any memory associated with either <i>internalPtr</i> or
<i>saveInternalPtr</i>; <i>freeProc</i> will be invoked to free that
memory if necessary.  <i>RestoreProc</i> has no return value.
</p>
<p>The <i>freeProc</i> procedure is invoked by <fun>Tk_SetOptions</fun> and
<fun>Tk_FreeSavedOptions</fun> to free any storage allocated for the
internal representation of a custom option.  The <i>clientData</i> argument
is a copy of the <i>clientData</i> field in the Tk_ObjCustomOption
structure.  <i>Tkwin</i> is a copy of the <i>tkwin</i> argument to
<fun>Tk_GetOptionValue</fun> or <fun>Tk_GetOptionInfo</fun>.  <i>InternalPtr</i>
is a pointer to the location where the internal representation of the
option value is stored.  The <i>freeProc</i> must free any storage
associated with the option.  <i>FreeProc</i> has no return value.


</p>
</section>
<keywords>
<keyword>anchor</keyword>
<keyword>bitmap</keyword>
<keyword>boolean</keyword>
<keyword>border</keyword>
<keyword>color</keyword>
<keyword>configuration option</keyword>
<keyword>cursor</keyword>
<keyword>double</keyword>
<keyword>font</keyword>
<keyword>integer</keyword>
<keyword>justify</keyword>
<keyword>pixels</keyword>
<keyword>relief</keyword>
<keyword>screen distance</keyword>
<keyword>synonym</keyword>
</keywords>
</manpage>
<manpage version="7.0" cat="fun" title="Tcl_SetRecursionLimit" id="SetRecLmt">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetRecLmt.3,v 1.3 1999/04/16 00:46:33 stanton Exp $
 -->
<?TROFF.TH title="Tcl_SetRecursionLimit" section="3" date="7.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SetRecursionLimit</name>
<desc>set maximum allowable nesting depth in interpreter</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_SetRecursionLimit</fun>(<m>interp</m>, <m>depth</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter whose recursion limit is to be set.
Must be greater than zero.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>depth</name>
<argmode>in</argmode>
<desc>New limit for nested calls to <fun>Tcl_Eval</fun> for <i>interp</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>At any given time Tcl enforces a limit on the number of recursive
calls that may be active for <fun>Tcl_Eval</fun> and related procedures
such as <fun>Tcl_GlobalEval</fun>.
Any call to <fun>Tcl_Eval</fun> that exceeds this depth is aborted with
an error.
By default the recursion limit is 1000.
</p>
<p><fun>Tcl_SetRecursionLimit</fun> may be used to change the maximum
allowable nesting depth for an interpreter.
The <i>depth</i> argument specifies a new limit for <i>interp</i>,
and <fun>Tcl_SetRecursionLimit</fun> returns the old limit.
To read out the old limit without modifying it, invoke
<fun>Tcl_SetRecursionLimit</fun> with <i>depth</i> equal to 0.
</p>
<p>The <fun>Tcl_SetRecursionLimit</fun> only sets the size of the Tcl
call stack:  it cannot by itself prevent stack overflows on the
C stack being used by the application.  If your machine has a
limit on the size of the C stack, you may get stack overflows
before reaching the limit set by <fun>Tcl_SetRecursionLimit</fun>.
If this happens, see if there is a mechanism in your system for
increasing the maximum size of the C stack.

</p>
</section>
<keywords>
<keyword>nesting depth</keyword>
<keyword>recursion</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetResult" version="8.0" title="Tcl_SetResult">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetResult.3,v 1.14 2005/09/13 21:23:51 dgp Exp $
 -->
<?TROFF.TH title="Tcl_SetResult" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SetObjResult</name>
<name>Tcl_GetObjResult</name>
<name>Tcl_SetResult</name>
<name>Tcl_GetStringResult</name>
<name>Tcl_AppendResult</name>
<name>Tcl_AppendResultVA</name>
<name>Tcl_AppendElement</name>
<name>Tcl_ResetResult</name>
<name>Tcl_FreeResult</name>
<desc>manipulate Tcl result</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_SetObjResult</fun>(<m>interp</m>, <m>objPtr</m>)

Tcl_Obj *
<fun>Tcl_GetObjResult</fun>(<m>interp</m>)

<fun>Tcl_SetResult</fun>(<m>interp</m>, <m>result</m>, <m>freeProc</m>)

const char *
<fun>Tcl_GetStringResult</fun>(<m>interp</m>)

<fun>Tcl_AppendResult</fun>(<m>interp</m>, <m>result</m>, <m>result</m>, <m>...</m>, <m></m><b>(char *) NULL</b>)

<fun>Tcl_AppendResultVA</fun>(<m>interp</m>, <m>argList</m>)

<fun>Tcl_AppendElement</fun>(<m>interp</m>, <m>element</m>)

<fun>Tcl_ResetResult</fun>(<m>interp</m>)

<fun>Tcl_FreeResult</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>Interpreter whose result is to be modified or read.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>Object value to become result for <i>interp</i>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="result">*result</name>
<argmode>in</argmode>
<desc>String value to become result for <i>interp</i> or to be
appended to the existing result.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="element">*element</name>
<argmode>in</argmode>
<desc>String value to append as a list element
to the existing result of <i>interp</i>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_FreeProc</argtype>
<name name="freeProc">*freeProc</name>
<argmode>in</argmode>
<desc>Address of procedure to call to release storage at
<i>result</i>, or <b>TCL_STATIC</b>, <b>TCL_DYNAMIC</b>, or
<b>TCL_VOLATILE</b>.
</desc>
</argdef>
<argdef>
<argtype>va_list</argtype>
<name>argList</name>
<argmode>in</argmode>
<desc>An argument list which must have been initialized using
<b>va_start</b>, and cleared using <b>va_end</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures described here are utilities for manipulating the
result value in a Tcl interpreter.
The interpreter result may be either a Tcl object or a string.
For example, <fun>Tcl_SetObjResult</fun> and <fun>Tcl_SetResult</fun>
set the interpreter result to, respectively, an object and a string.
Similarly, <fun>Tcl_GetObjResult</fun> and <fun>Tcl_GetStringResult</fun>
return the interpreter result as an object and as a string.
The procedures always keep the string and object forms
of the interpreter result consistent.
For example, if <fun>Tcl_SetObjResult</fun> is called to set
the result to an object,
then <fun>Tcl_GetStringResult</fun> is called,
it will return the object's string value.
</p>
<p><fun>Tcl_SetObjResult</fun>
arranges for <i>objPtr</i> to be the result for <i>interp</i>,
replacing any existing result.
The result is left pointing to the object
referenced by <i>objPtr</i>.
<i>objPtr</i>'s reference count is incremented
since there is now a new reference to it from <i>interp</i>.
The reference count for any old result object
is decremented and the old result object is freed if no
references to it remain.
</p>
<p><fun>Tcl_GetObjResult</fun> returns the result for <i>interp</i> as an object.
The object's reference count is not incremented;
if the caller needs to retain a long-term pointer to the object
they should use <fun>Tcl_IncrRefCount</fun> to increment its reference count
in order to keep it from being freed too early or accidentally changed.
</p>
<p><fun>Tcl_SetResult</fun>
arranges for <i>result</i> to be the result for the current Tcl
command in <i>interp</i>, replacing any existing result.
The <i>freeProc</i> argument specifies how to manage the storage
for the <i>result</i> argument;
it is discussed in the section
<ref refid="the-tcl_freeproc-argument-to-tcl_setresult">THE TCL_FREEPROC ARGUMENT TO TCL_SETRESULT</ref> below.
If <i>result</i> is <b>NULL</b>, then <i>freeProc</i> is ignored
and <fun>Tcl_SetResult</fun>
re-initializes <i>interp</i>'s result to point to an empty string.
</p>
<p><fun>Tcl_GetStringResult</fun> returns the result for <i>interp</i> as a string.
If the result was set to an object by a <fun>Tcl_SetObjResult</fun> call,
the object form will be converted to a string and returned.
If the object's string representation contains null bytes,
this conversion will lose information.
For this reason, programmers are encouraged to
write their code to use the new object API procedures
and to call <fun>Tcl_GetObjResult</fun> instead.
</p>
<p><fun>Tcl_ResetResult</fun> clears the result for <i>interp</i>
and leaves the result in its normal empty initialized state.
If the result is an object,
its reference count is decremented and the result is left
pointing to an unshared object representing an empty string.
If the result is a dynamically allocated string, its memory is free*d
and the result is left as a empty string.
<fun>Tcl_ResetResult</fun> also clears the error state managed by
<fun>Tcl_AddErrorInfo</fun>, <fun>Tcl_AddObjErrorInfo</fun>,
and <fun>Tcl_SetErrorCode</fun>.
</p>
<p><fun>Tcl_AppendResult</fun> makes it easy to build up Tcl results in pieces.
It takes each of its <i>result</i> arguments and appends them in order
to the current result associated with <i>interp</i>.
If the result is in its initialized empty state (e.g. a command procedure
was just invoked or <fun>Tcl_ResetResult</fun> was just called),
then <fun>Tcl_AppendResult</fun> sets the result to the concatenation of
its <i>result</i> arguments.
<fun>Tcl_AppendResult</fun> may be called repeatedly as additional pieces
of the result are produced.
<fun>Tcl_AppendResult</fun> takes care of all the
storage management issues associated with managing <i>interp</i>'s
result, such as allocating a larger result area if necessary.
It also manages conversion to and from the <i>result</i> field of the
<i>interp</i> so as to handle backward-compatability with old-style
extensions.
Any number of <i>result</i> arguments may be passed in a single
call; the last argument in the list must be a NULL pointer.
</p>
<p><fun>Tcl_AppendResultVA</fun> is the same as <fun>Tcl_AppendResult</fun> except that
instead of taking a variable number of arguments it takes an argument list.

</p>
</section>
<section>
<title>OLD STRING PROCEDURES</title>
<p>Use of the following procedures (is deprecated
since they manipulate the Tcl result as a string.
Procedures such as <fun>Tcl_SetObjResult</fun>
that manipulate the result as an object
can be significantly more efficient.
</p>
<p><fun>Tcl_AppendElement</fun> is similar to <fun>Tcl_AppendResult</fun> in
that it allows results to be built up in pieces.
However, <fun>Tcl_AppendElement</fun> takes only a single <i>element</i>
argument and it appends that argument to the current result
as a proper Tcl list element.
<fun>Tcl_AppendElement</fun> adds backslashes or braces if necessary
to ensure that <i>interp</i>'s result can be parsed as a list and that
<i>element</i> will be extracted as a single element.
Under normal conditions, <fun>Tcl_AppendElement</fun> will add a space
character to <i>interp</i>'s result just before adding the new
list element, so that the list elements in the result are properly
separated.
However if the new list element is the first in a list or sub-list
(i.e. <i>interp</i>'s current result is empty, or consists of the
single character ``{'', or ends in the characters `` {'') then no
space is added.
</p>
<p><fun>Tcl_FreeResult</fun> performs part of the work
of <fun>Tcl_ResetResult</fun>.
It frees up the memory associated with <i>interp</i>'s result.
It also sets <i>interp-&gt;freeProc</i> to zero, but doesn't
change <i>interp-&gt;result</i> or clear error state.
<fun>Tcl_FreeResult</fun> is most commonly used when a procedure
is about to replace one result value with another.

</p>
</section>
<section>
<title>DIRECT ACCESS TO INTERP-&gt;RESULT IS DEPRECATED</title>
<p>It used to be legal for programs to
directly read and write <i>interp-&gt;result</i>
to manipulate the interpreter result.
Direct access to <i>interp-&gt;result</i> is now strongly deprecated
because it can make the result's string and object forms inconsistent.
Programs should always read the result
using the procedures <fun>Tcl_GetObjResult</fun> or <fun>Tcl_GetStringResult</fun>,
and write the result using <fun>Tcl_SetObjResult</fun> or <fun>Tcl_SetResult</fun>.

</p>
</section>
<section id="the-tcl_freeproc-argument-to-tcl_setresult">
<title>THE TCL_FREEPROC ARGUMENT TO TCL_SETRESULT</title>
<p><fun>Tcl_SetResult</fun>'s <i>freeProc</i> argument specifies how 
the Tcl system is to manage the storage for the <i>result</i> argument.
If <fun>Tcl_SetResult</fun> or <fun>Tcl_SetObjResult</fun> are called
at a time when <i>interp</i> holds a string result,
they do whatever is necessary to dispose of the old string result
(see the <type>Tcl_Interp</type> manual entry for details on this).
</p>
<p>If <i>freeProc</i> is <b>TCL_STATIC</b> it means that <i>result</i>
refers to an area of static storage that is guaranteed not to be
modified until at least the next call to <fun>Tcl_Eval</fun>.
If <i>freeProc</i>
is <b>TCL_DYNAMIC</b> it means that <i>result</i> was allocated with a call
to <fun>Tcl_Alloc</fun> and is now the property of the Tcl system.
<fun>Tcl_SetResult</fun> will arrange for the string's storage to be
released by calling <fun>Tcl_Free</fun> when it is no longer needed.
If <i>freeProc</i> is <b>TCL_VOLATILE</b> it means that <i>result</i>
points to an area of memory that is likely to be overwritten when
<fun>Tcl_SetResult</fun> returns (e.g. it points to something in a stack frame).
In this case <fun>Tcl_SetResult</fun> will make a copy of the string in
dynamically allocated storage and arrange for the copy to be the
result for the current Tcl command.
</p>
<p>If <i>freeProc</i> isn't one of the values <b>TCL_STATIC</b>,
<b>TCL_DYNAMIC</b>, and <b>TCL_VOLATILE</b>, then it is the address
of a procedure that Tcl should call to free the string.
This allows applications to use non-standard storage allocators.
When Tcl no longer needs the storage for the string, it will
call <i>freeProc</i>. <i>FreeProc</i> should have arguments and
result that match the type <type>Tcl_FreeProc</type>:
</p>
<syntax cat="type" name="Tcl_FreeProc" scope="global">
typedef void Tcl_FreeProc(char *<i>blockPtr</i>);
</syntax>
<p>When <i>freeProc</i> is called, its <i>blockPtr</i> will be set to
the value of <i>result</i> passed to <fun>Tcl_SetResult</fun>.

</p>
</section>
<seealso>
<ref>Tcl_AddErrorInfo</ref>
<ref>Tcl_CreateObjCommand</ref>
<ref>Tcl_SetErrorCode</ref>
<ref>Tcl_Interp</ref>
</seealso>
<keywords>
<keyword>append</keyword>
<keyword>command</keyword>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>object</keyword>
<keyword>result</keyword>
<keyword>return value</keyword>
<keyword>interpreter</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SetVar" title="Tcl_SetVar" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetVar.3,v 1.12 2004/10/07 16:05:15 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SetVar" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SetVar2Ex</name>
<name>Tcl_SetVar</name>
<name>Tcl_SetVar2</name>
<name>Tcl_ObjSetVar2</name>
<name>Tcl_GetVar2Ex</name>
<name>Tcl_GetVar</name>
<name>Tcl_GetVar2</name>
<name>Tcl_ObjGetVar2</name>
<name>Tcl_UnsetVar</name>
<name>Tcl_UnsetVar2</name>
<desc>manipulate Tcl variables</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_SetVar2Ex</fun>(<m>interp</m>, <m>name1</m>, <m>name2</m>, <m>newValuePtr</m>, <m>flags</m>)

const char *
<fun>Tcl_SetVar</fun>(<m>interp</m>, <m>varName</m>, <m>newValue</m>, <m>flags</m>)

const char *
<fun>Tcl_SetVar2</fun>(<m>interp</m>, <m>name1</m>, <m>name2</m>, <m>newValue</m>, <m>flags</m>)

Tcl_Obj *
<fun>Tcl_ObjSetVar2</fun>(<m>interp</m>, <m>part1Ptr</m>, <m>part2Ptr</m>, <m>newValuePtr</m>, <m>flags</m>)

Tcl_Obj *
<fun>Tcl_GetVar2Ex</fun>(<m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>)

const char *
<fun>Tcl_GetVar</fun>(<m>interp</m>, <m>varName</m>, <m>flags</m>)

const char *
<fun>Tcl_GetVar2</fun>(<m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>)

Tcl_Obj *
<fun>Tcl_ObjGetVar2</fun>(<m>interp</m>, <m>part1Ptr</m>, <m>part2Ptr</m>, <m>flags</m>)

int
<fun>Tcl_UnsetVar</fun>(<m>interp</m>, <m>varName</m>, <m>flags</m>)

int
<fun>Tcl_UnsetVar2</fun>(<m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter containing variable.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name1">*name1</name>
<argmode>in</argmode>
<desc>Contains the name of an array variable (if <i>name2</i> is non-NULL)
or (if <i>name2</i> is NULL) either the name of a scalar variable
or a complete name including both variable name and index.
May include <b>::</b> namespace qualifiers
to specify a variable in a particular namespace.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name2">*name2</name>
<argmode>in</argmode>
<desc>If non-NULL, gives name of element within array; in this
case <i>name1</i> must refer to an array variable.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="newValuePtr">*newValuePtr</name>
<argmode>in</argmode>
<desc>Points to a Tcl object containing the new value for the variable.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>OR-ed combination of bits providing additional information. See below
for valid values.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="varName">*varName</name>
<argmode>in</argmode>
<desc>Name of variable.
May include <b>::</b> namespace qualifiers
to specify a variable in a particular namespace.
May refer to a scalar variable or an element of
an array.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="newValue">*newValue</name>
<argmode>in</argmode>
<desc>New value for variable, specified as a null-terminated string.
A copy of this value is stored in the variable.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="part1Ptr">*part1Ptr</name>
<argmode>in</argmode>
<desc>Points to a Tcl object containing the variable's name.
The name may include a series of <b>::</b> namespace qualifiers
to specify a variable in a particular namespace.
May refer to a scalar variable or an element of an array variable.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="part2Ptr">*part2Ptr</name>
<argmode>in</argmode>
<desc>If non-NULL, points to an object containing the name of an element
within an array and <i>part1Ptr</i> must refer to an array variable.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures are used to create, modify, read, and delete
Tcl variables from C code.
</p>
<p><fun>Tcl_SetVar2Ex</fun>, <fun>Tcl_SetVar</fun>, <fun>Tcl_SetVar2</fun>, and
<fun>Tcl_ObjSetVar2</fun> 
will create a new variable or modify an existing one.
These procedures set the given variable to the value
given by <i>newValuePtr</i> or <i>newValue</i> and return a
pointer to the variable's new value, which is stored in Tcl's
variable structure.
<fun>Tcl_SetVar2Ex</fun> and <fun>Tcl_ObjSetVar2</fun> take the new value as a
Tcl_Obj and return
a pointer to a Tcl_Obj.  <fun>Tcl_SetVar</fun> and <fun>Tcl_SetVar2</fun>
take the new value as a string and return a string; they are
usually less efficient than <fun>Tcl_ObjSetVar2</fun>.  Note that the
return value may be different than the <i>newValuePtr</i> or
<i>newValue</i> argument, due to modifications made by write traces.
If an error occurs in setting the variable (e.g. an array
variable is referenced without giving an index into the array)
NULL is returned and an error message is left in <i>interp</i>'s
result if the <b>TCL_LEAVE_ERR_MSG</b> <i>flag</i> bit is set.
</p>
<p><fun>Tcl_GetVar2Ex</fun>, <fun>Tcl_GetVar</fun>, <fun>Tcl_GetVar2</fun>, and
<fun>Tcl_ObjGetVar2</fun>
return the current value of a variable.
The arguments to these procedures are treated in the same way
as the arguments to the procedures described above.
Under normal circumstances, the return value is a pointer
to the variable's value.  For <fun>Tcl_GetVar2Ex</fun> and
<fun>Tcl_ObjGetVar2</fun> the value is
returned as a pointer to a Tcl_Obj.  For <fun>Tcl_GetVar</fun> and
<fun>Tcl_GetVar2</fun> the value is returned as a string; this is
usually less efficient, so <fun>Tcl_GetVar2Ex</fun> or <fun>Tcl_ObjGetVar2</fun>
are preferred.
If an error occurs while reading the variable (e.g. the variable
doesn't exist or an array element is specified for a scalar
variable), then NULL is returned and an error message is left
in <i>interp</i>'s result if the <b>TCL_LEAVE_ERR_MSG</b> <i>flag</i>
bit is set.
</p>
<p><fun>Tcl_UnsetVar</fun> and <fun>Tcl_UnsetVar2</fun> may be used to remove
a variable, so that future attempts to read the variable will return
an error.
The arguments to these procedures are treated in the same way
as the arguments to the procedures above.
If the variable is successfully removed then <b>TCL_OK</b> is returned.
If the variable cannot be removed because it doesn't exist then
<b>TCL_ERROR</b> is returned and an error message is left
in <i>interp</i>'s result if the <b>TCL_LEAVE_ERR_MSG</b> <i>flag</i>
bit is set.
If an array element is specified, the given element is removed
but the array remains.
If an array name is specified without an index, then the entire
array is removed.
</p>
<p>The name of a variable may be specified to these procedures in
four ways:
</p>
<ol>
<li>If <fun>Tcl_SetVar</fun>, <fun>Tcl_GetVar</fun>, or <fun>Tcl_UnsetVar</fun>
is invoked, the variable name is given as
a single string, <i>varName</i>.
If <i>varName</i> contains an open parenthesis and ends with a
close parenthesis, then the value between the parentheses is
treated as an index (which can have any string value) and
the characters before the first open
parenthesis are treated as the name of an array variable.
If <i>varName</i> doesn't have parentheses as described above, then
the entire string is treated as the name of a scalar variable.
</li>
<li>If the <i>name1</i> and <i>name2</i> arguments are provided and
<i>name2</i> is non-NULL, then an array element is specified and
the array name and index have
already been separated by the caller: <i>name1</i> contains the
name and <i>name2</i> contains the index.  An error is generated
if <i>name1</i>  contains an open parenthesis and ends with a
close parenthesis (array element) and <i>name2</i> is non-NULL.
</li>
<li>If <i>name2</i> is NULL, <i>name1</i> is treated just like
<i>varName</i> in case [1] above (it can be either a scalar or an array
element variable name).
</li>
</ol>
<p>The <i>flags</i> argument may be used to specify any of several
options to the procedures.
It consists of an OR-ed combination of the following bits.
</p>
<dl>
<dle>
<dt><b>TCL_GLOBAL_ONLY</b></dt>
<dd>Under normal circumstances the procedures look up variables as follows.
If a procedure call is active in <i>interp</i>,
the variable is looked up at the current level of procedure call.
Otherwise, the variable is looked up first in the current namespace,
then in the global namespace.
However, if this bit is set in <i>flags</i> then the variable
is looked up only in the global namespace
even if there is a procedure call active.
If both <b>TCL_GLOBAL_ONLY</b> and <b>TCL_NAMESPACE_ONLY</b> are given,
<b>TCL_GLOBAL_ONLY</b> is ignored.
</dd>
</dle>
<dle>
<dt><b>TCL_NAMESPACE_ONLY</b></dt>
<dd>If this bit is set in <i>flags</i> then the variable
is looked up only in the current namespace; if a procedure is active
its variables are ignored, and the global namespace is also ignored unless
it is the current namespace.
</dd>
</dle>
<dle>
<dt><b>TCL_LEAVE_ERR_MSG</b></dt>
<dd>If an error is returned and this bit is set in <i>flags</i>, then
an error message will be left in the interpreter's result,
where it can be retrieved with <fun>Tcl_GetObjResult</fun>
or <fun>Tcl_GetStringResult</fun>.
If this flag bit isn't set then no error message is left
and the interpreter's result will not be modified.
</dd>
</dle>
<dle>
<dt><b>TCL_APPEND_VALUE</b></dt>
<dd>If this bit is set then <i>newValuePtr</i> or <i>newValue</i> is
appended to the current value instead of replacing it.
If the variable is currently undefined, then the bit is ignored.
This bit is only used by the <b>Tcl_Set*</b> procedures.
</dd>
</dle>
<dle>
<dt><b>TCL_LIST_ELEMENT</b></dt>
<dd>If this bit is set, then <i>newValue</i> is converted to a valid
Tcl list element before setting (or appending to) the variable.
A separator space is appended before the new list element unless
the list element is going to be the first element in a list or
sublist (i.e. the variable's current value is empty, or contains
the single character ``{'', or ends in `` }'').
When appending, the original value of the variable must also be
a valid list, so that the operation is the appending of a new
list element onto a list.
</dd>
</dle>
</dl>
<p><fun>Tcl_GetVar</fun> and <fun>Tcl_GetVar2</fun>
return the current value of a variable.
The arguments to these procedures are treated in the same way
as the arguments to <fun>Tcl_SetVar</fun> and <fun>Tcl_SetVar2</fun>.
Under normal circumstances, the return value is a pointer
to the variable's value (which is stored in Tcl's variable
structure and will not change before the next call to <fun>Tcl_SetVar</fun>
or <fun>Tcl_SetVar2</fun>).
<fun>Tcl_GetVar</fun> and <fun>Tcl_GetVar2</fun> use the flag bits <b>TCL_GLOBAL_ONLY</b>
and <b>TCL_LEAVE_ERR_MSG</b>, both of
which have
the same meaning as for <fun>Tcl_SetVar</fun>.
If an error occurs in reading the variable (e.g. the variable
doesn't exist or an array element is specified for a scalar
variable), then NULL is returned.
</p>
<p><fun>Tcl_UnsetVar</fun> and <fun>Tcl_UnsetVar2</fun> may be used to remove
a variable, so that future calls to <fun>Tcl_GetVar</fun> or <fun>Tcl_GetVar2</fun>
for the variable will return an error.
The arguments to these procedures are treated in the same way
as the arguments to <fun>Tcl_GetVar</fun> and <fun>Tcl_GetVar2</fun>.
If the variable is successfully removed then <b>TCL_OK</b> is returned.
If the variable cannot be removed because it doesn't exist then
<b>TCL_ERROR</b> is returned.
If an array element is specified, the given element is removed
but the array remains.
If an array name is specified without an index, then the entire
array is removed.

</p>
</section>
<seealso>
<ref>Tcl_GetObjResult</ref>
<ref>Tcl_GetStringResult</ref>
<ref>Tcl_TraceVar</ref>
</seealso>
<keywords>
<keyword>array</keyword>
<keyword>get variable</keyword>
<keyword>interpreter</keyword>
<keyword>object</keyword>
<keyword>scalar</keyword>
<keyword>set</keyword>
<keyword>unset</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_SetWindowVisual" id="SetVisual">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SetVisual.3,v 1.2 1998/09/14 18:22:53 stanton Exp $
 -->
<?TROFF.TH title="Tk_SetWindowVisual" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_SetWindowVisual</name>
<desc>change visual characteristics of window</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_SetWindowVisual</fun>(<m>tkwin</m>, <m>visual</m>, <m>depth</m>, <m>colormap</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
<argdef>
<argtype>Visual</argtype>
<name name="visual">*visual</name>
<argmode>in</argmode>
<desc>New visual type to use for <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>depth</name>
<argmode>in</argmode>
<desc>Number of bits per pixel desired for <i>tkwin</i>.
</desc>
</argdef>
<argdef>
<argtype>Colormap</argtype>
<name>colormap</name>
<argmode>in</argmode>
<desc>New colormap for <i>tkwin</i>, which must be compatible with
<i>visual</i> and <i>depth</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>When Tk creates a new window it assigns it the default visual
characteristics (visual, depth, and colormap) for its screen.
<fun>Tk_SetWindowVisual</fun> may be called to change them.
<fun>Tk_SetWindowVisual</fun> must be called before the window has
actually been created in X (e.g. before <fun>Tk_MapWindow</fun> or
<fun>Tk_MakeWindowExist</fun> has been invoked for the window).
The safest thing is to call <fun>Tk_SetWindowVisual</fun> immediately
after calling <fun>Tk_CreateWindow</fun>.
If <i>tkwin</i> has already been created before <fun>Tk_SetWindowVisual</fun>
is called then it returns 0 and doesn't make any changes;  otherwise
it returns 1 to signify that the operation
completed successfully.
</p>
<p>Note:  <fun>Tk_SetWindowVisual</fun> should not be called if you just want
to change a window's colormap without changing its visual or depth;
call <fun>Tk_SetWindowColormap</fun> instead.

</p>
</section>
<keywords>
<keyword>colormap</keyword>
<keyword>depth</keyword>
<keyword>visual</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Signal" title="Tcl_SignalId" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 ActiveState Tool Corp.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Signal.3,v 1.4 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SignalId" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SignalId</name>
<name>Tcl_SignalMsg</name>
<desc>Convert signal codes</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

const char *
<fun>Tcl_SignalId</fun>(<m>sig</m>)

const char *
<fun>Tcl_SignalMsg</fun>(<m>sig</m>)

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>sig</name>
<argmode>in</argmode>
<desc>A POSIX signal number such as <b>SIGPIPE</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_SignalId</fun> and <fun>Tcl_SignalMsg</fun> return a string
representation of the provided signal number (<i>sig</i>).
<fun>Tcl_SignalId</fun> returns a machine-readable textual identifier such
as "SIGPIPE". <fun>Tcl_SignalMsg</fun> returns a human-readable string such
as "bus error".  The strings returned by these functions are
statically allocated and the caller must not free or modify them.

</p>
</section>
<keywords>
<keyword>signals</keyword>
<keyword>signal numbers</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Sleep" title="Tcl_Sleep" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Sleep.3,v 1.3 2004/10/07 14:44:34 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Sleep" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Sleep</name>
<desc>delay execution for a given number of milliseconds</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_Sleep</fun>(<m>ms</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>ms</name>
<argmode>in</argmode>
<desc>Number of milliseconds to sleep.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure delays the calling process by the number of
milliseconds given by the <i>ms</i> parameter and returns
after that time has elapsed.  It is typically used for things
like flashing a button, where the delay is short and the
application needn't do anything while it waits.  For longer
delays where the application needs to respond to other events
during the delay, the procedure <fun>Tcl_CreateTimerHandler</fun>
should be used instead of <fun>Tcl_Sleep</fun>.

</p>
</section>
<keywords>
<keyword>sleep</keyword>
<keyword>time</keyword>
<keyword>wait</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="socket" version="8.0" title="socket">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
     Copyright (c) 1998-1999 by Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
    
     RCS: @(#) $Id: socket.n,v 1.13 2005/12/07 09:30:09 dkf Exp $
 -->
<?TROFF.TH title="socket" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>socket</name>
<desc>Open a TCP network connection</desc>
</namesection>
<synopsis>
<syntax>

<cmd>socket</cmd> ?<m>options</m>? <m>host port</m>

<cmd>socket</cmd> <b>-server</b> <m>command</m> ?<m>options</m>? <m>port</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command opens a network socket and returns a channel
identifier that may be used in future invocations of commands like
<b cat="AMBIGUOUS ambiguous cmd">read</b>, <cmd>puts</cmd> and <b cat="AMBIGUOUS ambiguous cmd">flush</b>.
At present only the TCP network protocol is supported;  future
releases may include support for additional protocols.
The <cmd>socket</cmd> command may be used to open either the client or
server side of a connection, depending on whether the <b>-server</b>
switch is specified.
</p>
<p>Note that the default encoding for <i>all</i> sockets is the system
encoding, as returned by <b>encoding system</b>.  Most of the time, you
will need to use <cmd>fconfigure</cmd> to alter this to something else,
such as <i>utf-8</i> (ideal for communicating with other Tcl
processes) or <i>iso8859-1</i> (useful for many network protocols,
especially the older ones).
</p>
</section>
<section>
<title>CLIENT SOCKETS</title>
<p>If the <b>-server</b> option is not specified, then the client side of a
connection is opened and the command returns a channel identifier
that can be used for both reading and writing.
<i>Port</i> and <i>host</i> specify a port
to connect to;  there must be a server accepting connections on
this port.  <i>Port</i> is an integer port number
(or service name, where supported and understood by the host operating
system) and <i>host</i>
is either a domain-style name such as <b>www.tcl.tk</b> or
a numerical IP address such as <b>127.0.0.1</b>.
Use <i>localhost</i> to refer to the host on which the command is invoked.
</p>
<p>The following options may also be present before <i>host</i>
to specify additional information about the connection:
</p>
<dl>
<dle>
<dt><b>-myaddr</b> <m>addr</m></dt>
<dd><i>Addr</i> gives the domain-style name or numerical IP address of
the client-side network interface to use for the connection.
This option may be useful if the client machine has multiple network
interfaces.  If the option is omitted then the client-side interface
will be chosen by the system software.
</dd>
</dle>
<dle>
<dt><b>-myport</b> <m>port</m></dt>
<dd><i>Port</i> specifies an integer port number (or service name, where
supported and understood by the host operating system) to use for the
client's
side of the connection.  If this option is omitted, the client's
port number will be chosen at random by the system software.
</dd>
</dle>
<dle>
<dt><b>-async</b></dt>
<dd>The <b>-async</b> option will cause the client socket to be connected
asynchronously. This means that the socket will be created immediately but
may not yet be connected to the server, when the call to <cmd>socket</cmd>
returns. When a <cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">flush</b> is done on the socket before the
connection attempt succeeds or fails, if the socket is in blocking mode, the
operation will wait until the connection is completed or fails. If the
socket is in nonblocking mode and a <cmd>gets</cmd> or <b cat="AMBIGUOUS ambiguous cmd">flush</b> is done on
the socket before the connection attempt succeeds or fails, the operation
returns immediately and <cmd>fblocked</cmd> on the socket returns 1. Synchronous
client sockets may be switched (after they have connected) to operating in
asynchronous mode using:
<example>
<cmd>fconfigure</cmd> <i>chan</i> <b>-blocking 0</b>
</example><p>See the <cmd>fconfigure</cmd> command for more details.
</p></dd>
</dle>
</dl>
</section>
<section>
<title>SERVER SOCKETS</title>
<p>If the <b>-server</b> option is specified then the new socket
will be a server for the port given by <i>port</i> (either an integer
or a service name, where supported and understood by the host
operating system; if <i>port</i> is zero, the operating system will
allocate a free port to the server socket which may be discovered by
using <cmd>fconfigure</cmd> to read the <b>-sockname</b> option).
Tcl will automatically accept connections to the given port.
For each connection Tcl will create a new channel that may be used to
communicate with the client.  Tcl then invokes <i>command</i>
with three additional arguments: the name of the new channel, the
address, in network address notation, of the client's host, and
the client's port number.
</p>
<p>The following additional option may also be specified before <i>host</i>:
</p>
<dl>
<dle>
<dt><b>-myaddr</b> <m>addr</m></dt>
<dd><i>Addr</i> gives the domain-style name or numerical IP address of
the server-side network interface to use for the connection.
This option may be useful if the server machine has multiple network
interfaces.  If the option is omitted then the server socket is bound
to the special address INADDR_ANY so that it can accept connections from
any interface.
</dd>
</dle>
</dl>
<p>Server channels cannot be used for input or output; their sole use is to
accept new client connections. The channels created for each incoming
client connection are opened for input and output. Closing the server
channel shuts down the server so that no new connections will be
accepted;  however, existing connections will be unaffected.
</p>
<p>Server sockets depend on the Tcl event mechanism to find out when
new connections are opened.  If the application doesn't enter the
event loop, for example by invoking the <cmd>vwait</cmd> command or
calling the C procedure <fun>Tcl_DoOneEvent</fun>, then no connections
will be accepted.
</p>
<p>If <i>port</i> is specified as zero, the operating system will allocate
an unused port for use as a server socket.  The port number actually
allocated may be retrieved from the created server socket using the
<cmd>fconfigure</cmd> command to retrieve the <b>-sockname</b> option as
described below.
</p>
</section>
<section>
<title>CONFIGURATION OPTIONS</title>
<p>The <cmd>fconfigure</cmd> command can be used to query several readonly
configuration options for socket channels:
</p>
<dl>
<dle>
<dt><b>-error</b></dt>
<dd>This option gets the current error status of the given socket.  This
is useful when you need to determine if an asynchronous connect
operation succeeded.  If there was an error, the error message is
returned.  If there was no error, an empty string is returned.
</dd>
</dle>
<dle>
<dt><b>-sockname</b></dt>
<dd>This option returns a list of three elements, the address, the host name
and the port number for the socket. If the host name cannot be computed,
the second element is identical to the address, the first element of the
list.
</dd>
</dle>
<dle>
<dt><b>-peername</b></dt>
<dd>This option is not supported by server sockets. For client and accepted
sockets, this option returns a list of three elements; these are the
address, the host name and the port to which the peer socket is connected
or bound. If the host name cannot be computed, the second element of the
list is identical to the address, its first element.
</dd>
</dle>
</dl>
</section>
<section>
<title>EXAMPLES</title>
<p>Here is a very simple time server:
</p>
<example>
proc Server {channel clientaddr clientport} {
   puts "Connection from $clientaddr registered"
   puts $channel [clock format [clock seconds]]
   close $channel
}

<cmd>socket</cmd> -server Server 9900
vwait forever
</example>
<p>And here is the corresponding client to talk to the server:
</p>
<example>
set server localhost
set sockChan [<cmd>socket</cmd> $server 9900]
gets $sockChan line
close $sockChan
puts "The time on $server is $line"
</example>


</section>
<seealso>
<ref>fconfigure(n)</ref>
<ref>flush(n)</ref>
<ref>open(n)</ref>
<ref>read(n)</ref>
</seealso>
<keywords>
<keyword>bind</keyword>
<keyword>channel</keyword>
<keyword>connection</keyword>
<keyword>domain name</keyword>
<keyword>host</keyword>
<keyword>network address</keyword>
<keyword>socket</keyword>
<keyword>tcp</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="source" title="source">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Scriptics Corporation.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: source.n,v 1.10 2004/10/27 14:24:37 dkf Exp $
 -->
<?TROFF.TH title="source" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>source</name>
<desc>Evaluate a file or resource as a Tcl script</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">source</b> <m>fileName</m>

<new version="8.5"><b cat="AMBIGUOUS ambiguous cmd">source</b> <b>-encoding</b> <m>encodingName fileName</m>
</new></syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command takes the contents of the specified file or resource
and passes it to the Tcl interpreter as a text script.  The return
value from <b cat="AMBIGUOUS ambiguous cmd">source</b> is the return value of the last command
executed in the script.  If an error occurs in evaluating the contents
of the script then the <b cat="AMBIGUOUS ambiguous cmd">source</b> command will return that error.
If a <cmd>return</cmd> command is invoked from within the script then the
remainder of the file will be skipped and the <b cat="AMBIGUOUS ambiguous cmd">source</b> command
will return normally with the result from the <cmd>return</cmd> command.
</p>
<p>The end-of-file character for files is '\32' (^Z) for all platforms.
The source command will read files up to this character.  This
restriction does not exist for the <b cat="AMBIGUOUS ambiguous cmd">read</b> or <cmd>gets</cmd> commands,
allowing for files containing code and data segments (scripted documents).
If you require a ``^Z'' in code for string comparison, you can use
``\032'' or ``\u001a'', which will be safely substituted by the Tcl
interpreter into ``^Z''.
</p>
<p><new version="8.5">The <b>-encoding</b> option is used to specify the encoding of
the data stored in <i>fileName</i>.  When the <b>-encoding</b> option
is omitted, the system encoding is assumed.
</new></p>
</section>
<section>
<title>EXAMPLE</title>
<p>Run the script in the file <b>foo.tcl</b> and then the script in the
file <b>bar.tcl</b>:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">source</b> foo.tcl
<b cat="AMBIGUOUS ambiguous cmd">source</b> bar.tcl
</example>
<p>Alternatively:
</p>
<example>
foreach scriptFile {foo.tcl bar.tcl} {
   <b cat="AMBIGUOUS ambiguous cmd">source</b> $scriptFile
}
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>cd(n)</ref>
<ref>encoding(n)</ref>
<ref>info(n)</ref>
</seealso>
<keywords>
<keyword>file</keyword>
<keyword>script</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SourceRCFile" title="Tcl_SourceRCFile" version="8.3">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1998-2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: SourceRCFile.3,v 1.4 2004/10/07 15:37:44 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SourceRCFile" section="3" date="8.3" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SourceRCFile</name>
<desc>source the Tcl rc file</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_SourceRCFile</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter to source rc file into.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_SourceRCFile</fun> is used to source the Tcl rc file at startup.
It is typically invoked by Tcl_Main or Tk_Main.  The name of the file
sourced is obtained from the global variable <b cat="variable">tcl_rcFileName</b> in
the interpreter given by <i>interp</i>.  If this variable is not
defined, or if the file it indicates cannot be found, no action is
taken.

</p>
</section>
<keywords>
<keyword>application-specific initialization</keyword>
<keyword>main program</keyword>
<keyword>rc file</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="spinbox" title="spinbox" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2000 Jeffrey Hobbs.
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: spinbox.n,v 1.4 2004/08/17 22:37:24 dkf Exp $
 -->
<?TROFF.TH title="spinbox" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>spinbox</name>
<desc>Create and manipulate spinbox widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">spinbox</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-activebackground</li>
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-exportselection</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-insertbackground</li>
<li>-insertborderwidth</li>
<li>-insertofftime</li>
<li>-insertontime</li>
<li>-insertwidth</li>
<li>-justify</li>
<li>-relief</li>
<li>-repeatdelay</li>
<li>-repeatinterval</li>
<li>-selectbackground</li>
<li>-selectborderwidth</li>
<li>-selectforeground</li>
<li>-takefocus</li>
<li>-textvariable</li>
<li>-xscrollcommand</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-buttonbackground</name>
<dbname>buttonBackground</dbname>
<dbclass>Background</dbclass>
<desc>The background color to be used for the spin buttons.
</desc>
</optiondef>
<optiondef>
<name>-buttoncursor</name>
<dbname>buttonCursor</dbname>
<dbclass>Cursor</dbclass>
<desc>The cursor to be used when over the spin buttons.  If this is empty
(the default), a default cursor will be used.
</desc>
</optiondef>
<optiondef>
<name>-buttondownrelief</name>
<dbname>buttonDownRelief</dbname>
<dbclass>Relief</dbclass>
<desc>The relief to be used for the upper spin button.
</desc>
</optiondef>
<optiondef>
<name>-buttonuprelief</name>
<dbname>buttonUpRelief</dbname>
<dbclass>Relief</dbclass>
<desc>The relief to be used for the lower spin button.
</desc>
</optiondef>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>Specifies a Tcl command to invoke whenever a spinbutton is invoked.
The command recognizes several percent substitutions: <b>%W</b> for
the widget path, <b>%s</b> for the current value of the widget, and
<b>%d</b> for the direction of the button pressed (<b>up</b> or <b>down</b>).
</desc>
</optiondef>
<optiondef>
<name>-disabledbackground</name>
<dbname>disabledBackground</dbname>
<dbclass>DisabledBackground</dbclass>
<desc>Specifies the background color to use when the spinbox is disabled.  If
this option is the empty string, the normal background color is used.
</desc>
</optiondef>
<optiondef>
<name>-disabledforeground</name>
<dbname>disabledForeground</dbname>
<dbclass>DisabledForeground</dbclass>
<desc>Specifies the foreground color to use when the spinbox is disabled.  If
this option is the empty string, the normal foreground color is used.
</desc>
</optiondef>
<optiondef>
<name>-format</name>
<dbname>format</dbname>
<dbclass>Format</dbclass>
<desc>Specifies an alternate format to use when setting the string value
when using the <b>-from</b> and <b>-to</b> range.
This must be a format specifier of the form <b>%&lt;pad&gt;.&lt;pad&gt;f</b>,
as it will format a floating-point number.
</desc>
</optiondef>
<optiondef>
<name>-from</name>
<dbname>from</dbname>
<dbclass>From</dbclass>
<desc>A floating-point value corresponding to the lowest value for a spinbox, to
be used in conjunction with <b>-to</b> and <b>-increment</b>.  When all
are specified correctly, the spinbox will use these values to control its
contents.  This value must be less than the <b>-to</b> option.
If <b>-values</b> is specified, it supercedes this option.
</desc>
</optiondef>
<optiondef>
<name name="-invalidcommand">-invalidcommand or -invcmd</name>
<dbname>invalidCommand</dbname>
<dbclass>InvalidCommand</dbclass>
<desc>Specifies a script to eval when <b>validateCommand</b> returns 0.  Setting
it to an empty string disables this feature (the default).  The best use of
this option is to set it to <i>bell</i>.  See <b>Validation</b> below for
more information.
</desc>
</optiondef>
<optiondef>
<name>-increment</name>
<dbname>increment</dbname>
<dbclass>Increment</dbclass>
<desc>A floating-point value specifying the increment.  When used with
<b>-from</b> and <b>-to</b>, the value in the widget will be adjusted by
<b>-increment</b> when a spin button is pressed (up adds the value,
down subtracts the value).
</desc>
</optiondef>
<optiondef>
<name>-readonlybackground</name>
<dbname>readonlyBackground</dbname>
<dbclass>ReadonlyBackground</dbclass>
<desc>Specifies the background color to use when the spinbox is readonly.  If
this option is the empty string, the normal background color is used.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of three states for the spinbox:  <b>normal</b>,
<b>disabled</b>, or <b>readonly</b>.  If the spinbox is readonly, then the
value may not be changed using widget commands and no insertion cursor
will be displayed, even if the input focus is in the widget; the
contents of the widget may still be selected.  If the spinbox is
disabled, the value may not be changed, no insertion cursor will be
displayed, the contents will not be selectable, and the spinbox may
be displayed in a different color, depending on the values of the
<b>-disabledforeground</b> and <b>-disabledbackground</b> options.
</desc>
</optiondef>
<optiondef>
<name>-to</name>
<dbname>to</dbname>
<dbclass>To</dbclass>
<desc>A floating-point value corresponding to the highest value for the spinbox,
to be used in conjunction with <b>-from</b> and <b>-increment</b>.  When
all are specified correctly, the spinbox will use these values to control
its contents.  This value must be greater than the <b>-from</b> option.
If <b>-values</b> is specified, it supercedes this option.
</desc>
</optiondef>
<optiondef>
<name>-validate</name>
<dbname>validate</dbname>
<dbclass>Validate</dbclass>
<desc>Specifies the mode in which validation should operate: <b>none</b>,
<cmd>focus</cmd>, <b>focusin</b>, <b>focusout</b>, <b>key</b>, or <b>all</b>.
It defaults to <b>none</b>.  When you want validation, you must explicitly
state which mode you wish to use.  See <b>Validation</b> below for more.
</desc>
</optiondef>
<optiondef>
<name name="-validatecommand">-validatecommand or -vcmd</name>
<dbname>validateCommand</dbname>
<dbclass>ValidateCommand</dbclass>
<desc>Specifies a script to evaluate when you want to validate the input in the
widget.  Setting it to an empty string disables this feature (the default).
Validation occurs according to the value of <b>-validate</b>.
This command must return a valid Tcl boolean value.  If it returns 0 (or
the valid Tcl boolean equivalent) then the value of the widget will not
change and the <b>invalidCommand</b> will be evaluated if it is set.  If it
returns 1, then value will be changed.
See <b>Validation</b> below for more information.
</desc>
</optiondef>
<optiondef>
<name>-values</name>
<dbname>values</dbname>
<dbclass>Values</dbclass>
<desc>Must be a proper list value.  If specified, the spinbox will use these
values as to control its contents, starting with the first value.  This
option has precedence over the <b>-from</b> and <b>-to</b> range.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies an integer value indicating the desired width of the spinbox window,
in average-size characters of the widget's font.
If the value is less than or equal to zero, the widget picks a
size just large enough to hold its current text.
</desc>
</optiondef>
<optiondef>
<name>-wrap</name>
<dbname>wrap</dbname>
<dbclass>wrap</dbclass>
<desc>Must be a proper boolean value.  If on, the spinbox will wrap around the
values of data in the widget.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">spinbox</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a spinbox widget.
Additional options, described above, may be specified on the
command line or in the option database
to configure aspects of the spinbox such as its colors, font,
and relief.  The <b cat="AMBIGUOUS widget cmd">spinbox</b> command returns its
<i>pathName</i> argument.  At the time this command is invoked,
there must not exist a window named <i>pathName</i>, but
<i>pathName</i>'s parent must exist.
</p>
<p>A <b cat="AMBIGUOUS widget cmd">spinbox</b> is an extended <b cat="AMBIGUOUS widget cmd">entry</b> widget that allows he user
to move, or spin, through a fixed set of ascending or descending values
such as times or dates in addition to editing the value as in an
<b cat="AMBIGUOUS widget cmd">entry</b>.  When first created, a spinbox's string is empty.
A portion of the spinbox may be selected as described below.
If a spinbox is exporting its selection (see the <b>exportSelection</b>
option), then it will observe the standard protocols for handling the
selection;  spinbox selections are available as type <b>STRING</b>.
Spinboxes also observe the standard Tk rules for dealing with the
input focus.  When a spinbox has the input focus it displays an
<i>insertion cursor</i> to indicate where new characters will be
inserted.
</p>
<p>Spinboxes are capable of displaying strings that are too long to
fit entirely within the widget's window.  In this case, only a
portion of the string will be displayed; commands described below
may be used to change the view in the window.  Spinboxes use
the standard <b>xScrollCommand</b> mechanism for interacting with
scrollbars (see the description of the <b>xScrollCommand</b> option
for details).  They also support scanning, as described below.

</p>
</section>
<section>
<title>VALIDATION</title>
<p>Validation works by setting the <b>validateCommand</b>
option to a script which will be evaluated according to the <b>validate</b>
option as follows:
</p>
<dl>
<dle>
<dt><b>none</b></dt>
<dd>Default.  This means no validation will occur.
</dd>
</dle>
<dle>
<dt><b>focus</b></dt>
<dd><b>validateCommand</b> will be called when the spinbox receives or
loses focus.
</dd>
</dle>
<dle>
<dt><b>focusin</b></dt>
<dd><b>validateCommand</b> will be called when the spinbox receives focus.
</dd>
</dle>
<dle>
<dt><b>focusout</b></dt>
<dd><b>validateCommand</b> will be called when the spinbox loses focus.
</dd>
</dle>
<dle>
<dt><b>key</b></dt>
<dd><b>validateCommand</b> will be called when the spinbox is edited.
</dd>
</dle>
<dle>
<dt><b>all</b></dt>
<dd><b>validateCommand</b> will be called for all above conditions.
</dd>
</dle>
</dl>
<p>It is possible to perform percent substitutions on the <b>validateCommand</b>
and <b>invalidCommand</b>, just as you would in a <cmd>bind</cmd> script.  The
following substitutions are recognized:
</p>
<dl>
<dle>
<dt><b>%d</b></dt>
<dd>Type of action: 1 for <b>insert</b>, 0 for <b>delete</b>,
or -1 for focus, forced or textvariable validation.
</dd>
</dle>
<dle>
<dt><b>%i</b></dt>
<dd>Index of char string to be inserted/deleted, if any, otherwise -1.
</dd>
</dle>
<dle>
<dt><b>%P</b></dt>
<dd>The value of the spinbox should edition occur.  If you are configuring the
spinbox widget to have a new textvariable, this will be the value of that
textvariable.
</dd>
</dle>
<dle>
<dt><b>%s</b></dt>
<dd>The current value of spinbox before edition.
</dd>
</dle>
<dle>
<dt><b>%S</b></dt>
<dd>The text string being inserted/deleted, if any.
Otherwise it is an empty string.
</dd>
</dle>
<dle>
<dt><b>%v</b></dt>
<dd>The type of validation currently set.
</dd>
</dle>
<dle>
<dt><b>%V</b></dt>
<dd>The type of validation that triggered the callback
(key, focusin, focusout, forced).
</dd>
</dle>
<dle>
<dt><b>%W</b></dt>
<dd>The name of the spinbox widget.
</dd>
</dle>
</dl>
<p>In general, the <b>textVariable</b> and <b>validateCommand</b> can be
dangerous to mix.  Any problems have been overcome so that using the
<b>validateCommand</b> will not interfere with the traditional behavior of
the spinbox widget.  Using the <b>textVariable</b> for read-only purposes will
never cause problems.  The danger comes when you try set the
<b>textVariable</b> to something that the <b>validateCommand</b> would not
accept, which causes <b>validate</b> to become <i>none</i> (the
<b>invalidCommand</b> will not be triggered).  The same happens
when an error occurs evaluating the <b>validateCommand</b>.
</p>
<p>Primarily, an error will occur when the <b>validateCommand</b> or
<b>invalidCommand</b> encounters an error in its script while evaluating or
<b>validateCommand</b> does not return a valid Tcl boolean value.  The
<b>validate</b> option will also set itself to <b>none</b> when you edit the
spinbox widget from within either the <b>validateCommand</b> or the
<b>invalidCommand</b>.  Such editions will override the one that was being
validated.  If you wish to edit the value of the widget
during validation and still have the <b>validate</b> option set, you should
include the command
</p>
<example>
     <i>%W config -validate %v</i>
</example>
<p>in the <b>validateCommand</b> or <b>invalidCommand</b> (whichever one you
were editing the spinbox widget from).  It is also recommended to not set an
associated <b>textVariable</b> during validation, as that can cause the
spinbox widget to become out of sync with the <b>textVariable</b>.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">spinbox</b> command creates a new Tcl command whose
name is <i>pathName</i>.  This command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.
</p>
<p>Many of the widget commands for spinboxes take one or more indices as
arguments.  An index specifies a particular character in the spinbox's
string, in any of the following ways:
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>Specifies the character as a numerical index, where 0 corresponds
to the first character in the string.
</dd>
</dle>
<dle>
<dt><b>anchor</b></dt>
<dd>Indicates the anchor point for the selection, which is set with the
<b>select from</b> and <b>select adjust</b> widget commands.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the character just after the last one in the spinbox's string.
This is equivalent to specifying a numerical index equal to the length
of the spinbox's string.
</dd>
</dle>
<dle>
<dt><b>insert</b></dt>
<dd>Indicates the character adjacent to and immediately following the
insertion cursor.
</dd>
</dle>
<dle>
<dt><b>sel.first</b></dt>
<dd>Indicates the first character in the selection.  It is an error to
use this form if the selection isn't in the spinbox window.
</dd>
</dle>
<dle>
<dt><b>sel.last</b></dt>
<dd>Indicates the character just after the last one in the selection.
It is an error to use this form if the selection isn't in the
spinbox window.
</dd>
</dle>
<dle>
<dt><b>@</b><m>number</m></dt>
<dd>In this form, <i>number</i> is treated as an x-coordinate in the
spinbox's window;  the character spanning that x-coordinate is used.
For example, ``<b>@0</b>'' indicates the left-most character in the
window.
</dd>
</dle>
</dl>
<p>Abbreviations may be used for any of the forms above, e.g. ``<b>e</b>''
or ``<b>sel.f</b>''.  In general, out-of-range indices are automatically
rounded to the nearest legal value.
</p>
<p>The following commands are possible for spinbox widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>index</m></dt>
<dd>Returns a list of four numbers describing the bounding box of the
character given by <i>index</i>.
The first two elements of the list give the x and y coordinates of
the upper-left corner of the screen area covered by the character
(in pixels relative to the widget) and the last two elements give
the width and height of the character, in pixels.
The bounding box may refer to a region outside the visible area
of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">spinbox</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">spinbox</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>first</m> ?<m>last</m>?</dt>
<dd>Delete one or more elements of the spinbox.
<i>First</i> is the index of the first character to delete, and
<i>last</i> is the index of the character just after the last
one to delete.
If <i>last</i> isn't specified it defaults to <i>first</i>+1,
i.e. a single character is deleted.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the spinbox's string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>icursor</b> <m>index</m></dt>
<dd>Arrange for the insertion cursor to be displayed just before the character
given by <i>index</i>.  Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns the name of the window element corresponding to coordinates
<i>x</i> and <i>y</i> in the spinbox.  Return value is one of:
<b>none</b>, <b>buttondown</b>, <b>buttonup</b>, <b cat="AMBIGUOUS widget cmd">entry</b>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the numerical index corresponding to <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index string</m></dt>
<dd>Insert the characters of <i>string</i> just before the character
indicated by <i>index</i>.  Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>invoke</b> <m>element</m></dt>
<dd>Causes the specified element, either <b>buttondown</b> or <b>buttonup</b>,
to be invoked, triggering the action associated with it.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan</b> <m>option args</m></dt>
<dd>This command is used to implement scanning on spinboxes.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>scan mark</b> <m>x</m></dt>
<dd>Records <i>x</i> and the current view in the spinbox window;  used in
conjunction with later <b>scan dragto</b> commands.  Typically this
command is associated with a mouse button press in the widget.  It
returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan dragto</b> <m>x</m></dt>
<dd>This command computes the difference between its <i>x</i> argument
and the <i>x</i> argument to the last <b>scan mark</b> command for
the widget.  It then adjusts the view left or right by 10 times the
difference in x-coordinates.  This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the spinbox at high speed through the window.  The return
value is an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection</b> <m>option arg</m></dt>
<dd>This command is used to adjust the selection within a spinbox.  It
has several forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>selection adjust</b> <m>index</m></dt>
<dd>Locate the end of the selection nearest to the character given by
<i>index</i>, and adjust that end of the selection to be at <i>index</i>
(i.e. including but not going beyond <i>index</i>).  The other
end of the selection is made the anchor point for future
<b>select to</b> commands.  If the selection
isn't currently in the spinbox, then a new selection is created to
include the characters between <i>index</i> and the most recent
selection anchor point, inclusive.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection clear</b></dt>
<dd>Clear the selection if it is currently in this widget.  If the
selection isn't in this widget then the command has no effect.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection element</b> ?<m>element</m>?</dt>
<dd>Sets or gets the currently selected element.  If a spinbutton element
is specified, it will be displayed depressed.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection from</b> <m>index</m></dt>
<dd>Set the selection anchor point to just before the character
given by <i>index</i>.  Doesn't change the selection.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection present</b></dt>
<dd>Returns 1 if there is are characters selected in the spinbox,
0 if nothing is selected.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection range</b> <m>start</m> <m>end</m></dt>
<dd>Sets the selection to include the characters starting with
the one indexed by <i>start</i> and ending with the one just
before <i>end</i>.
If <i>end</i> refers to the same character as <i>start</i> or an
earlier one, then the spinbox's selection is cleared.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection to</b> <m>index</m></dt>
<dd>If <i>index</i> is before the anchor point, set the selection
to the characters from <i>index</i> up to but not including
the anchor point.
If <i>index</i> is the same as the anchor point, do nothing.
If <i>index</i> is after the anchor point, set the selection
to the characters from the anchor point up to but not including
<i>index</i>.
The anchor point is determined by the most recent <b>select from</b>
or <b>select adjust</b> command in this widget.
If the selection isn't in this widget then a new selection is
created using the most recent anchor point specified for the widget.
Returns an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>set</b> ?<m>string</m>?</dt>
<dd>If <i>string</i> is specified, the spinbox will try and set it to this
value, otherwise it just returns the spinbox's string.
If validation is on, it will occur when setting the string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>validate</b></dt>
<dd>This command is used to force an evaluation of the <b>validateCommand</b>
independent of the conditions specified by the <b>validate</b> option.
This is done by temporarily setting the <b>validate</b> option to <b>all</b>.
It returns 0 or 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>args</m></dt>
<dd>This command is used to query and change the horizontal position of the
text in the widget's window.  It can take any of the following
forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the spinbox's text is off-screen to the left, the middle 40% is visible
in the window, and 40% of the text is off-screen to the right.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the character given by <i>index</i>
is displayed at the left edge of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that the character <i>fraction</i> of the
way through the text appears at the left edge of the window.
<i>Fraction</i> must be a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b> or an abbreviation
of one of these.
If <i>what</i> is <b>units</b>, the view adjusts left or right by
<i>number</i> average-width characters on the display;  if it is
<b>pages</b> then the view adjusts by <i>number</i> screenfuls.
If <i>number</i> is negative then characters farther to the left
become visible;  if it is positive then characters farther to the right
become visible.
</dd>
</dle>
</dl>
</dd>
</dle>
</dl>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>Tk automatically creates class bindings for spinboxes that give them
the following default behavior.
In the descriptions below, ``word'' refers to a contiguous group
of letters, digits, or ``_'' characters, or any single character
other than these.
</p>
<ol>
<li>Clicking mouse button 1 positions the insertion cursor
just before the character underneath the mouse cursor, sets the
input focus to this widget, and clears any selection in the widget.
Dragging with mouse button 1 strokes out a selection between
the insertion cursor and the character under the mouse.
</li>
<li>Double-clicking with mouse button 1 selects the word under the mouse
and positions the insertion cursor at the beginning of the word.
Dragging after a double click will stroke out a selection consisting
of whole words.
</li>
<li>Triple-clicking with mouse button 1 selects all of the text in the
spinbox and positions the insertion cursor before the first character.
</li>
<li>The ends of the selection can be adjusted by dragging with mouse
button 1 while the Shift key is down;  this will adjust the end
of the selection that was nearest to the mouse cursor when button
1 was pressed.
If the button is double-clicked before dragging then the selection
will be adjusted in units of whole words.
</li>
<li>Clicking mouse button 1 with the Control key down will position the
insertion cursor in the spinbox without affecting the selection.
</li>
<li>If any normal printing characters are typed in a spinbox, they are
inserted at the point of the insertion cursor.
</li>
<li>The view in the spinbox can be adjusted by dragging with mouse button 2.
If mouse button 2 is clicked without moving the mouse, the selection
is copied into the spinbox at the position of the mouse cursor.
</li>
<li>If the mouse is dragged out of the spinbox on the left or right sides
while button 1 is pressed, the spinbox will automatically scroll to
make more text visible (if there is more text off-screen on the side
where the mouse left the window).
</li>
<li>The Left and Right keys move the insertion cursor one character to the
left or right;  they also clear any selection in the spinbox and set
the selection anchor.
If Left or Right is typed with the Shift key down, then the insertion
cursor moves and the selection is extended to include the new character.
Control-Left and Control-Right move the insertion cursor by words, and
Control-Shift-Left and Control-Shift-Right move the insertion cursor
by words and also extend the selection.
Control-b and Control-f behave the same as Left and Right, respectively.
Meta-b and Meta-f behave the same as Control-Left and Control-Right,
respectively.
</li>
<li>The Home key, or Control-a, will move the insertion cursor to the
beginning of the spinbox and clear any selection in the spinbox.
Shift-Home moves the insertion cursor to the beginning of the spinbox
and also extends the selection to that point.
</li>
<li>The End key, or Control-e, will move the insertion cursor to the
end of the spinbox and clear any selection in the spinbox.
Shift-End moves the cursor to the end and extends the selection
to that point.
</li>
<li>The Select key and Control-Space set the selection anchor to the position
of the insertion cursor.  They don't affect the current selection.
Shift-Select and Control-Shift-Space adjust the selection to the
current position of the insertion cursor, selecting from the anchor
to the insertion cursor if there was not any selection previously.
</li>
<li>Control-/ selects all the text in the spinbox.
</li>
<li>Control-\ clears any selection in the spinbox.
</li>
<li>The F16 key (labelled Copy on many Sun workstations) or Meta-w
copies the selection in the widget to the clipboard, if there is a selection.
</li>
<li>The F20 key (labelled Cut on many Sun workstations) or Control-w
copies the selection in the widget to the clipboard and deletes
the selection.
If there is no selection in the widget then these keys have no effect.
</li>
<li>The F18 key (labelled Paste on many Sun workstations) or Control-y
inserts the contents of the clipboard at the position of the
insertion cursor.
</li>
<li>The Delete key deletes the selection, if there is one in the spinbox.
If there is no selection, it deletes the character to the right of
the insertion cursor.
</li>
<li>The BackSpace key and Control-h delete the selection, if there is one
in the spinbox.
If there is no selection, it deletes the character to the left of
the insertion cursor.
</li>
<li>Control-d deletes the character to the right of the insertion cursor.
</li>
<li>Meta-d deletes the word to the right of the insertion cursor.
</li>
<li>Control-k deletes all the characters to the right of the insertion
cursor.
</li>
<li>Control-t reverses the order of the two characters to the right of
the insertion cursor.
</li>
</ol>
<p>If the spinbox is disabled using the <b>-state</b> option, then the spinbox's
view can still be adjusted and text in the spinbox can still be selected,
but no insertion cursor will be displayed and no text modifications will
take place.
</p>
<p>The behavior of spinboxes can be changed by defining new bindings for
individual widgets or by redefining the class bindings.

</p>
</section>
<keywords>
<keyword>spinbox</keyword>
<keyword>entry</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="split" title="split">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: split.n,v 1.5 2004/10/27 14:24:37 dkf Exp $
 -->
<?TROFF.TH title="split" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>split</name>
<desc>Split a string into a proper Tcl list</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">split</b> <m>string</m> ?<m>splitChars</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns a list created by splitting <i>string</i> at each character
that is in the <i>splitChars</i> argument.
Each element of the result list will consist of the
characters from <i>string</i> that lie between instances of the
characters in <i>splitChars</i>.
Empty list elements will be generated if <i>string</i> contains
adjacent characters in <i>splitChars</i>, or if the first or last
character of <i>string</i> is in <i>splitChars</i>.
If <i>splitChars</i> is an empty string then each character of
<i>string</i> becomes a separate element of the result list.
<i>SplitChars</i> defaults to the standard white-space characters.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Divide up a USENET group name into its hierarchical components:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">split</b> "comp.lang.tcl.announce" .
     <i>=&gt; comp lang tcl announce</i>
</example>
<p>See how the <b cat="AMBIGUOUS ambiguous cmd">split</b> command splits on <i>every</i> character in
<i>splitChars</i>, which can result in information loss if you are not
careful:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">split</b> "alpha beta gamma" "temp"
     <i>=&gt; al {ha b} {} {a ga} {} a</i>
</example>
<p>Extract the list words from a string that is not a well-formed list:
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">split</b> "Example with {unbalanced brace character"
     <i>=&gt; Example with \{unbalanced brace character</i>
</example>
<p>Split a string into its constituent characters
</p>
<example>
<b cat="AMBIGUOUS ambiguous cmd">split</b> "Hello world" {}
     <i>=&gt; H e l l o { } w o r l d</i>
</example>
<subsection>
<title>PARSING RECORD-ORIENTED FILES</title>
<p>Parse a Unix /etc/passwd file, which consists of one entry per line,
with each line consisting of a colon-separated list of fields:
</p>
<example>
## Read the file
set fid [open /etc/passwd]
set content [read $fid]
close $fid

## Split into records on newlines
set records [<b cat="AMBIGUOUS ambiguous cmd">split</b> $content "\n"]

## Iterate over the records
foreach rec $records {

   ## Split into fields on colons
   set fields [<b cat="AMBIGUOUS ambiguous cmd">split</b> $rec ":"]

   ## Assign fields to variables and print some out...
   lassign $fields \
         userName password uid grp longName homeDir shell
   puts "$longName uses [file tail $shell] for a login shell"
}
</example>


</subsection>
</section>
<seealso>
<ref>join(n)</ref>
<ref>list(n)</ref>
<ref>string(n)</ref>
</seealso>
<keywords>
<keyword>list</keyword>
<keyword>split</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SplitList" title="Tcl_SplitList" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SplitList.3,v 1.9 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SplitList" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SplitList</name>
<name>Tcl_Merge</name>
<name>Tcl_ScanElement</name>
<name>Tcl_ConvertElement</name>
<name>Tcl_ScanCountedElement</name>
<name>Tcl_ConvertCountedElement</name>
<desc>manipulate Tcl lists</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_SplitList</fun>(<m>interp</m>, <m>list</m>, <m>argcPtr</m>, <m>argvPtr</m>)

char *
<fun>Tcl_Merge</fun>(<m>argc</m>, <m>argv</m>)

int
<fun>Tcl_ScanElement</fun>(<m>src</m>, <m>flagsPtr</m>)

int
<fun>Tcl_ScanCountedElement</fun>(<m>src</m>, <m>length</m>, <m>flagsPtr</m>)

int
<fun>Tcl_ConvertElement</fun>(<m>src</m>, <m>dst</m>, <m>flags</m>)

int
<fun>Tcl_ConvertCountedElement</fun>(<m>src</m>, <m>length</m>, <m>dst</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>Interpreter to use for error reporting.  If NULL, then no error message
is left.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="list">*list</name>
<argmode>in</argmode>
<desc>Pointer to a string with proper list structure.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="argcPtr">*argcPtr</name>
<argmode>out</argmode>
<desc>Filled in with number of elements in <i>list</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argvPtr">***argvPtr</name>
<argmode>out</argmode>
<desc><i>*argvPtr</i> will be filled in with the address of an array of
pointers to the strings that are the extracted elements of <i>list</i>.
There will be <i>*argcPtr</i> valid entries in the array, followed by
a NULL entry.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of elements in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>const char *const</argtype>
<name name="argv">*argv</name>
<argmode>in</argmode>
<desc>Array of strings to merge together into a single list.
Each string will become a separate element of the list.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="src">*src</name>
<argmode>in</argmode>
<desc>String that is to become an element of a list.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="flagsPtr">*flagsPtr</name>
<argmode>in</argmode>
<desc>Pointer to word to fill in with information about <i>src</i>.
The value of *<i>flagsPtr</i> must be passed to <fun>Tcl_ConvertElement</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>Number of bytes in string <i>src</i>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="dst">*dst</name>
<argmode>in</argmode>
<desc>Place to copy converted list element.  Must contain enough characters
to hold converted string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Information about <i>src</i>. Must be value returned by previous
call to <fun>Tcl_ScanElement</fun>, possibly OR-ed
with <b>TCL_DONT_USE_BRACES</b>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures may be used to disassemble and reassemble Tcl lists.
<fun>Tcl_SplitList</fun> breaks a list up into its constituent elements,
returning an array of pointers to the elements using
<i>argcPtr</i> and <i>argvPtr</i>.
While extracting the arguments, <fun>Tcl_SplitList</fun> obeys the usual
rules for backslash substitutions and braces.  The area of
memory pointed to by <i>*argvPtr</i> is dynamically allocated;  in
addition to the array of pointers, it
also holds copies of all the list elements.  It is the caller's
responsibility to free up all of this storage.
For example, suppose that you have called <fun>Tcl_SplitList</fun> with
the following code:
</p>
<example>
int argc, code;
char *string;
char **argv;
...
code = Tcl_SplitList(interp, string, &amp;argc, &amp;argv);
</example>
<p>Then you should eventually free the storage with a call like the
following:
</p>
<example>
Tcl_Free((char *) argv);
</example>
<p><fun>Tcl_SplitList</fun> normally returns <b>TCL_OK</b>, which means the list was
successfully parsed.
If there was a syntax error in <i>list</i>, then <b>TCL_ERROR</b> is returned
and the interpreter's result will point to an error message describing the
problem (if <i>interp</i> was not NULL).
If <b>TCL_ERROR</b> is returned then no memory is allocated and <i>*argvPtr</i>
is not modified.
</p>
<p><fun>Tcl_Merge</fun> is the inverse of <fun>Tcl_SplitList</fun>:  it
takes a collection of strings given by <i>argc</i>
and <i>argv</i> and generates a result string
that has proper list structure.
This means that commands like <b>index</b> may be used to
extract the original elements again.
In addition, if the result of <fun>Tcl_Merge</fun> is passed to <fun>Tcl_Eval</fun>,
it will be parsed into <i>argc</i> words whose values will
be the same as the <i>argv</i> strings passed to <fun>Tcl_Merge</fun>.
<fun>Tcl_Merge</fun> will modify the list elements with braces and/or
backslashes in order to produce proper Tcl list structure.
The result string is dynamically allocated
using <fun>Tcl_Alloc</fun>;  the caller must eventually release the space
using <fun>Tcl_Free</fun>.
</p>
<p>If the result of <fun>Tcl_Merge</fun> is passed to <fun>Tcl_SplitList</fun>,
the elements returned by <fun>Tcl_SplitList</fun> will be identical to
those passed into <fun>Tcl_Merge</fun>.
However, the converse is not true:  if <fun>Tcl_SplitList</fun>
is passed a given string, and the resulting <i>argc</i> and
<i>argv</i> are passed to <fun>Tcl_Merge</fun>, the resulting string
may not be the same as the original string passed to <fun>Tcl_SplitList</fun>.
This is because <fun>Tcl_Merge</fun> may use backslashes and braces
differently than the original string.
</p>
<p><fun>Tcl_ScanElement</fun> and <fun>Tcl_ConvertElement</fun> are the
procedures that do all of the real work of <fun>Tcl_Merge</fun>.
<fun>Tcl_ScanElement</fun> scans its <i>src</i> argument
and determines how to use backslashes and braces
when converting it to a list element.
It returns an overestimate of the number of characters
required to represent <i>src</i> as a list element, and
it stores information in <i>*flagsPtr</i> that is needed
by <fun>Tcl_ConvertElement</fun>.
</p>
<p><fun>Tcl_ConvertElement</fun> is a companion procedure to <fun>Tcl_ScanElement</fun>.
It does the actual work of converting a string to a list element.
Its <i>flags</i> argument must be the same as the value returned
by <fun>Tcl_ScanElement</fun>.
<fun>Tcl_ConvertElement</fun> writes a proper list element to memory
starting at *<i>dst</i> and returns a count of the total number
of characters written, which will be no more than the result
returned by <fun>Tcl_ScanElement</fun>.
<fun>Tcl_ConvertElement</fun> writes out only the actual list element
without any leading or trailing spaces: it is up to the caller to
include spaces between adjacent list elements.
</p>
<p><fun>Tcl_ConvertElement</fun> uses one of two different approaches to
handle the special characters in <i>src</i>.  Wherever possible, it
handles special characters by surrounding the string with braces.
This produces clean-looking output, but can't be used in some situations,
such as when <i>src</i> contains unmatched braces.
In these situations, <fun>Tcl_ConvertElement</fun> handles special
characters by generating backslash sequences for them.
The caller may insist on the second approach by OR-ing the
flag value returned by <fun>Tcl_ScanElement</fun> with
<b>TCL_DONT_USE_BRACES</b>.
Although this will produce an uglier result, it is useful in some
special situations, such as when <fun>Tcl_ConvertElement</fun> is being
used to generate a portion of an argument for a Tcl command.
In this case, surrounding <i>src</i> with curly braces would cause
the command not to be parsed correctly.
</p>
<p><new version="8.5">By default, <fun>Tcl_ConvertElement</fun> will use quoting in its output
to be sure the first character of an element is not the hash
character (``#'').  This is to be sure the first element of any list
passed to <b cat="AMBIGUOUS ambiguous cmd">eval</b> is not mis-parsed as the beginning of a comment.
When a list element is not the first element of a list, this quoting
is not necessary.  When the caller can be sure that the element is
not the first element of a list, it can disable quoting of the leading
hash character by OR-ing the flag value returned by <fun>Tcl_ScanElement</fun>
with <b>TCL_DONT_QUOTE_HASH</b>.
</new></p>
<p><fun>Tcl_ScanCountedElement</fun> and <fun>Tcl_ConvertCountedElement</fun> are
the same as <fun>Tcl_ScanElement</fun> and <fun>Tcl_ConvertElement</fun>, except
the length of string <i>src</i> is specified by the <i>length</i>
argument, and the string may contain embedded nulls.

</p>
</section>
<keywords>
<keyword>backslash</keyword>
<keyword>convert</keyword>
<keyword>element</keyword>
<keyword>list</keyword>
<keyword>merge</keyword>
<keyword>split</keyword>
<keyword>strings</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SplitPath" title="Tcl_SplitPath" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SplitPath.3,v 1.9 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SplitPath" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SplitPath</name>
<name>Tcl_JoinPath</name>
<name>Tcl_GetPathType</name>
<desc>manipulate platform-dependent file paths</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_SplitPath</fun>(<m>path</m>, <m>argcPtr</m>, <m>argvPtr</m>)

char *
<fun>Tcl_JoinPath</fun>(<m>argc</m>, <m>argv</m>, <m>resultPtr</m>)

Tcl_PathType
<fun>Tcl_GetPathType</fun>(<m>path</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char</argtype>
<name name="path">*path</name>
<argmode>in</argmode>
<desc>File path in a form appropriate for the current platform (see the
<b>filename</b> manual entry for acceptable forms for path names).
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="argcPtr">*argcPtr</name>
<argmode>out</argmode>
<desc>Filled in with number of path elements in <i>path</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="argvPtr">***argvPtr</name>
<argmode>out</argmode>
<desc><i>*argvPtr</i> will be filled in with the address of an array of
pointers to the strings that are the extracted elements of <i>path</i>.
There will be <i>*argcPtr</i> valid entries in the array, followed by
a NULL entry.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of elements in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>const char *const</argtype>
<name name="argv">*argv</name>
<argmode>in</argmode>
<desc>Array of path elements to merge together into a single path.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="resultPtr">*resultPtr</name>
<argmode>in/out</argmode>
<desc>A pointer to an initialized <type>Tcl_DString</type> to which the result of
<fun>Tcl_JoinPath</fun> will be appended.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These procedures have been superceded by the objectified procedures in
the <b>FileSystem</b> man page, which are more efficient.
</p>
<p>These procedures may be used to disassemble and reassemble file
paths in a platform independent manner: they provide C-level access to
the same functionality as the <b>file split</b>, <b>file join</b>, and
<b>file pathtype</b> commands.
</p>
<p><fun>Tcl_SplitPath</fun> breaks a path into its constituent elements,
returning an array of pointers to the elements using <i>argcPtr</i> and
<i>argvPtr</i>.  The area of memory pointed to by <i>*argvPtr</i> is
dynamically allocated; in addition to the array of pointers, it also
holds copies of all the path elements.  It is the caller's
responsibility to free all of this storage.
For example, suppose that you have called <fun>Tcl_SplitPath</fun> with the
following code:
</p>
<example>
int argc;
char *path;
char **argv;
...
Tcl_SplitPath(string, &amp;argc, &amp;argv);
</example>
<p>Then you should eventually free the storage with a call like the
following:
</p>
<example>
Tcl_Free((char *) argv);
</example>
<p><fun>Tcl_JoinPath</fun> is the inverse of <fun>Tcl_SplitPath</fun>: it takes a
collection of path elements given by <i>argc</i> and <i>argv</i> and
generates a result string that is a properly constructed path. The
result string is appended to <i>resultPtr</i>.  <i>ResultPtr</i> must
refer to an initialized <type>Tcl_DString</type>.
</p>
<p>If the result of <fun>Tcl_SplitPath</fun> is passed to <fun>Tcl_JoinPath</fun>,
the result will refer to the same location, but may not be in the same
form.  This is because <fun>Tcl_SplitPath</fun> and <fun>Tcl_JoinPath</fun>
eliminate duplicate path separators and return a normalized form for
each platform.
</p>
<p><fun>Tcl_GetPathType</fun> returns the type of the specified <i>path</i>,
where <b>Tcl_PathType</b> is one of <b>TCL_PATH_ABSOLUTE</b>,
<b>TCL_PATH_RELATIVE</b>, or <b>TCL_PATH_VOLUME_RELATIVE</b>.  See the
<b>filename</b> manual entry for a description of the path types for
each platform.

</p>
</section>
<keywords>
<keyword>file</keyword>
<keyword>filename</keyword>
<keyword>join</keyword>
<keyword>path</keyword>
<keyword>split</keyword>
<keyword>type</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="StaticPkg" title="Tcl_StaticPackage" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: StaticPkg.3,v 1.6 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_StaticPackage" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_StaticPackage</name>
<desc>make a statically linked package available via the `load' command</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_StaticPackage</fun>(<m>interp</m>, <m>pkgName</m>, <m>initProc</m>, <m>safeInitProc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>If not NULL, points to an interpreter into which the package has
already been loaded (i.e., the caller has already invoked the
appropriate initialization procedure).  NULL means the package
hasn't yet been incorporated into any interpreter.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pkgName">*pkgName</name>
<argmode>in</argmode>
<desc>Name of the package;  should be properly capitalized (first letter
upper-case, all others lower-case).
</desc>
</argdef>
<argdef>
<argtype>Tcl_PackageInitProc</argtype>
<name name="initProc">*initProc</name>
<argmode>in</argmode>
<desc>Procedure to invoke to incorporate this package into a trusted
interpreter.
</desc>
</argdef>
<argdef>
<argtype>Tcl_PackageInitProc</argtype>
<name name="safeInitProc">*safeInitProc</name>
<argmode>in</argmode>
<desc>Procedure to call to incorporate this package into a safe interpreter
(one that will execute untrusted scripts).   NULL means the package
can't be used in safe interpreters.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure may be invoked to announce that a package has been
linked statically with a Tcl application and, optionally, that it
has already been loaded into an interpreter.
Once <fun>Tcl_StaticPackage</fun> has been invoked for a package, it
may be loaded into interpreters using the <b cat="AMBIGUOUS ambiguous cmd">load</b> command.
<fun>Tcl_StaticPackage</fun> is normally invoked only by the <fun>Tcl_AppInit</fun>
procedure for the application, not by packages for themselves
(<fun>Tcl_StaticPackage</fun> should only be invoked for statically
loaded packages, and code in the package itself should not need
to know whether the package is dynamically or statically loaded).
</p>
<p>When the <b cat="AMBIGUOUS ambiguous cmd">load</b> command is used later to load the package into
an interpreter, one of <i>initProc</i> and <i>safeInitProc</i> will
be invoked, depending on whether the target interpreter is safe
or not.
<i>initProc</i> and <i>safeInitProc</i> must both match the
following prototype:
</p>
<syntax cat="type" name="Tcl_PackageInitProc" scope="global">
typedef int Tcl_PackageInitProc(Tcl_Interp *<i>interp</i>);
</syntax>
<p>The <i>interp</i> argument identifies the interpreter in which the package
is to be loaded.  The initialization procedure must return <b>TCL_OK</b> or
<b>TCL_ERROR</b> to indicate whether or not it completed successfully; in
the event of an error it should set the interpreter's result to point to an
error message.  The result or error from the initialization procedure will
be returned as the result of the <b cat="AMBIGUOUS ambiguous cmd">load</b> command that caused the
initialization procedure to be invoked.

</p>
</section>
<keywords>
<keyword>initialization procedure</keyword>
<keyword>package</keyword>
<keyword>static linking</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="StdChannels" title="Standard Channels" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 by ActiveState Corporation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: StdChannels.3,v 1.9 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="Standard Channels" section="3" date="7.5" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_StandardChannels</name>
<desc>How the Tcl library deals with the standard channels</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>This page explains the initialization and use of standard channels in
the Tcl library.
</p>
<p>The term <i>standard channels</i> comes out of the Unix world and
refers to the three channels automatically opened by the OS for
each new application. They are <b>stdin</b>, <b>stdout</b> and
<b>stderr</b>. The first is the standard input an application can read
from, the other two refer to writable channels, one for regular
output and the other for error messages.
</p>
<p>Tcl generalizes this concept in a cross-platform way and
exposes standard channels to the script level.

</p>
</section>
<section>
<title>APIs</title>
<p>The public API procedures dealing directly with standard channels are
<fun>Tcl_GetStdChannel</fun> and <fun>Tcl_SetStdChannel</fun>. Additional public
APIs to consider are <fun>Tcl_RegisterChannel</fun>,
<fun>Tcl_CreateChannel</fun> and <fun>Tcl_GetChannel</fun>.
</p>
</section>
<section>
<title>INITIALIZATION OF TCL STANDARD CHANNELS</title>
<p>Standard channels are initialized by the Tcl library in three cases:
when explicitly requested, when implicitly required before returning
channel information, or when implicitly required during registration
of a new channel.
</p>
<p>These cases differ in how they handle unavailable platform- specific
standard channels.  (A channel is not ``available'' if it could not be
successfully opened; for example, in a Tcl application run as a
Windows NT service.)
</p>
<ol>
<li>A single standard channel is initialized when it is explicitly
specified in a call to <fun>Tcl_SetStdChannel</fun>.  The states of the
other standard channels are unaffected.
<p>Missing platform-specific standard channels do not matter here. This
approach is not available at the script level.
</p></li>
<li>All uninitialized standard channels are initialized to
platform-specific default values:
<dl>
<dle>
<dt>(a)</dt>
<dd>when open channels are listed with <fun>Tcl_GetChannelNames</fun> (or the
<b>file channels</b> script command), or
</dd>
</dle>
<dle>
<dt>(b)</dt>
<dd>when information about any standard channel is requested with a call
to <fun>Tcl_GetStdChannel</fun>, or with a call to <fun>Tcl_GetChannel</fun>
which specifies one of the standard names (<b>stdin</b>, <b>stdout</b>
and <b>stderr</b>).
</dd>
</dle>
</dl><p>In case of missing platform-specific standard channels, the Tcl
standard channels are considered as initialized and then immediately
closed. This means that the first three Tcl channels then opened by
the application are designated as the Tcl standard channels.
</p></li>
<li>All uninitialized standard channels are initialized to
platform-specific default values when a user-requested channel is
registered with <fun>Tcl_RegisterChannel</fun>.
<p>In case of unavailable platform-specific standard channels the channel
whose creation caused the initialization of the Tcl standard channels
is made a normal channel.  The next three Tcl channels opened by the
application are designated as the Tcl standard channels.  In other
words, of the first four Tcl channels opened by the application the
second to fourth are designated as the Tcl standard channels.
</p></li>
</ol>
</section>
<section>
<title>RE-INITIALIZATION OF TCL STANDARD CHANNELS</title>
<p>Once a Tcl standard channel is initialized through one of the methods
above, closing this Tcl standard channel will cause the next call to
<fun>Tcl_CreateChannel</fun> to make the new channel the new standard
channel, too. If more than one Tcl standard channel was closed
<fun>Tcl_CreateChannel</fun> will fill the empty slots in the order
<b>stdin</b>, <b>stdout</b> and <b>stderr</b>.
</p>
<p><fun>Tcl_CreateChannel</fun> will not try to reinitialize an empty slot if
that slot was not initialized before. It is this behavior which
enables an application to employ method 1 of initialization, i.e. to
create and designate their own Tcl standard channels.

</p>
</section>
<section>
<title>tclsh</title>
<p>The Tcl shell (or rather <fun>Tcl_Main</fun>) uses method 2 to initialize
the standard channels.

</p>
</section>
<section>
<title>wish</title>
<p>The windowing shell (or rather <fun>Tk_MainEx</fun>) uses method 1 to
initialize the standard channels (See <fun>Tk_InitConsoleChannels</fun>)
on non-Unix platforms.  On Unix platforms, <fun>Tk_MainEx</fun> implicitly
uses method 2 to initialize the standard channels.

</p>
</section>
<seealso>
<ref>Tcl_CreateChannel(3)</ref>
<ref>Tcl_RegisterChannel(3)</ref>
<ref>Tcl_GetChannel(3)</ref>
<ref>Tcl_GetStdChannel(3)</ref>
<ref>Tcl_SetStdChannel(3)</ref>
<ref>Tk_InitConsoleChannels(3)</ref>
<ref>tclsh(1)</ref>
<ref>wish(1)</ref>
<ref>Tcl_Main(3)</ref>
<ref>Tk_MainEx(3)</ref>
</seealso>
<keywords>
<keyword>standard channel</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_StrictMotif" id="StrictMotif">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: StrictMotif.3,v 1.2 1998/09/14 18:22:54 stanton Exp $
 -->
<?TROFF.TH title="Tk_StrictMotif" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_StrictMotif</name>
<desc>Return value of tk_strictMotif variable</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_StrictMotif</fun>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This procedure returns the current value of the <b>tk_strictMotif</b>
variable in the interpreter associated with <i>tkwin</i>'s application.
The value is returned as an integer that is either 0 or 1.
1 means that strict Motif compliance has been requested, so anything
that is not part of the Motif specification should be avoided.
0 means that ``Motif-like'' is good enough, and extra features
are welcome.
</p>
<p>This procedure uses a link to the Tcl variable to provide much
faster access to the variable's value than could be had by calling
<fun>Tcl_GetVar</fun>.

</p>
</section>
<keywords>
<keyword>Motif compliance</keyword>
<keyword>tk_strictMotif variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="string" version="8.1" title="string">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: string.n,v 1.34 2006/12/19 10:25:34 dkf Exp $
 -->
<?TROFF.TH title="string" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>string</name>
<desc>Manipulate strings</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">string</b> <m>option arg</m> ?<m>arg ...?</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Performs one of several string operations, depending on <i>option</i>.
The legal <i>option</i>s (which may be abbreviated) are:
</p>
<commandlist>
<commanddef>
<command><b>string bytelength</b> <m>string</m></command>
<desc>Returns a decimal string giving the number of bytes used to represent
<i>string</i> in memory.  Because UTF-8 uses one to three bytes to
represent Unicode characters, the byte length will not be the same as
the character length in general.  The cases where a script cares about
the byte length are rare.  In almost all cases, you should use the
<b>string length</b> operation (including determining the length of a
Tcl ByteArray object).  Refer to the <fun>Tcl_NumUtfChars</fun> manual
entry for more details on the UTF-8 representation.
</desc>
</commanddef>
<commanddef>
<command><b>string compare</b> ?<b>-nocase</b>? ?<b>-length int</b>? <m>string1 string2</m></command>
<desc>Perform a character-by-character comparison of strings <i>string1</i>
and <i>string2</i>.  Returns -1, 0, or 1, depending on whether
<i>string1</i> is lexicographically less than, equal to, or greater
than <i>string2</i>.  If <b>-length</b> is specified, then only the
first <i>length</i> characters are used in the comparison.  If
<b>-length</b> is negative, it is ignored.  If <b>-nocase</b> is
specified, then the strings are compared in a case-insensitive manner.
</desc>
</commanddef>
<commanddef>
<command><b>string equal</b> ?<b>-nocase</b>? ?<b>-length int</b>? <m>string1 string2</m></command>
<desc>Perform a character-by-character comparison of strings <i>string1</i>
and <i>string2</i>.  Returns 1 if <i>string1</i> and <i>string2</i> are
identical, or 0 when not.  If <b>-length</b> is specified, then only
the first <i>length</i> characters are used in the comparison.  If
<b>-length</b> is negative, it is ignored.  If <b>-nocase</b> is
specified, then the strings are compared in a case-insensitive manner.
</desc>
</commanddef>
<commanddef>
<command><b>string first</b> <m>string1 string2</m> ?<m>startIndex</m>?</command>
<desc>Search <i>string2</i> for a sequence of characters that exactly match
the characters in <i>string1</i>.  If found, return the index of the
first character in the first such match within <i>string2</i>.  If not
found, return -1.  If <i>startIndex</i> is specified (in any of the
forms accepted by the <b>index</b> method), then the search is
constrained to start with the character in <i>string2</i> specified by
the index.  For example,
<example>
<b>string first a 0a23456789abcdef 5</b>
</example><p>will return <b>10</b>, but
</p><example>
<b>string first a 0123456789abcdef 11</b>
</example><p>will return <b>-1</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>string index</b> <m>string charIndex</m></command>
<desc>Returns the <i>charIndex</i>'th character of the <i>string</i> argument.
A <i>charIndex</i> of 0 corresponds to the first character of the
string.  <i>charIndex</i> may be specified as follows:
<?NEW 8.5?><dl>
<dle>
<dt><m>integer</m></dt>
<dd>For any index value that passes <b>string is integer -strict</b>,
the char specified at this integral index
(e.g. <b>2</b> would refer to the "c" in "abcd").
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>The last char of the string
(e.g. <b>end</b> would refer to the "d" in "abcd").
</dd>
</dle>
<dle>
<dt><b>end</b>-<m>N</m></dt>
<dd>The last char of the string minus the specified integer offset <i>N</i>
(e.g. <b>end</b>-1 would refer to the "c" in "abcd").
</dd>
</dle>
<dle>
<dt><b>end</b>+<m>N</m></dt>
<dd>The last char of the string plus the specified integer offset <i>N</i>
(e.g. <b>end</b>+-1 would refer to the "c" in "abcd").
</dd>
</dle>
<dle>
<dt><m>M</m>+<m>N</m></dt>
<dd>The char specified at the integral index that is the sum of 
integer values <i>M</i> and <i>N</i>
(e.g. <b>1+1</b> would refer to the "c" in "abcd").
</dd>
</dle>
<dle>
<dt><m>M</m>-<m>N</m></dt>
<dd>The char specified at the integral index that is the difference of 
integer values <i>M</i> and <i>N</i>
(e.g. <b>2-1</b> would refer to the "b" in "abcd").
</dd>
</dle>
</dl><p version="8.5">In the specifications above, the integer value <i>M</i> contains no
trailing whitespace and the integer value <i>N</i> contains no
leading whitespace.
</p><p version="8.5">If <i>charIndex</i> is less than 0 or greater than or equal to the
length of the string then this command returns an empty string.
</p><?ENDNEW?></desc>
</commanddef>
<commanddef>
<command><b>string is</b> <m>class</m> ?<b>-strict</b>? ?<b>-failindex</b> <m>varname</m>? <m>string</m></command>
<desc>Returns 1 if <i>string</i> is a valid member of the specified character
class, otherwise returns 0.  If <b>-strict</b> is specified, then an
empty string returns 0, otherwise an empty string will return 1 on
any class.  If <b>-failindex</b> is specified, then if the function
returns 0, the index in the string where the class was no longer valid
will be stored in the variable named <i>varname</i>.  The <i>varname</i>
will not be set if the function returns 1.  The following character
classes are recognized (the class name can be abbreviated):
<dl>
<dle>
<dt><b>alnum</b></dt>
<dd>Any Unicode alphabet or digit character.
</dd>
</dle>
<dle>
<dt><b>alpha</b></dt>
<dd>Any Unicode alphabet character.
</dd>
</dle>
<dle>
<dt><b>ascii</b></dt>
<dd>Any character with a value less than \u0080 (those that are in the
7-bit ascii range).
</dd>
</dle>
<dle>
<dt><b>boolean</b></dt>
<dd>Any of the forms allowed to <fun>Tcl_GetBoolean</fun>.
</dd>
</dle>
<dle>
<dt><b>control</b></dt>
<dd>Any Unicode control character.
</dd>
</dle>
<dle>
<dt><b>digit</b></dt>
<dd>Any Unicode digit character.  Note that this includes characters
outside of the [0-9] range.
</dd>
</dle>
<dle>
<dt><b>double</b></dt>
<dd>Any of the valid forms for a double in Tcl, with optional surrounding
whitespace.  In case of under/overflow in the value, 0 is returned and
the <i>varname</i> will contain -1.
</dd>
</dle>
<dle>
<dt><b>false</b></dt>
<dd>Any of the forms allowed to <fun>Tcl_GetBoolean</fun> where the value is
false.
</dd>
</dle>
<dle>
<dt><b>graph</b></dt>
<dd>Any Unicode printing character, except space.
</dd>
</dle>
<dle>
<dt><b>integer</b></dt>
<dd>Any of the valid string formats for a 32-bit integer value in Tcl,
with optional surrounding whitespace.  In case of under/overflow in
the value, 0 is returned and the <i>varname</i> will contain -1.
</dd>
</dle>
<dle>
<dt><b>list</b></dt>
<dd>Any proper list structure, with optional surrounding whitespace. In
case of improper list structure, 0 is returned and the <i>varname</i>
will contain the index of the "element" where the list parsing fails,
or -1 if this cannot be determined.
</dd>
</dle>
<dle>
<dt><b>lower</b></dt>
<dd>Any Unicode lower case alphabet character.
</dd>
</dle>
<dle>
<dt><b>print</b></dt>
<dd>Any Unicode printing character, including space.
</dd>
</dle>
<dle>
<dt><b>punct</b></dt>
<dd>Any Unicode punctuation character.
</dd>
</dle>
<dle>
<dt><b>space</b></dt>
<dd>Any Unicode space character.
</dd>
</dle>
<dle>
<dt><b>true</b></dt>
<dd>Any of the forms allowed to <fun>Tcl_GetBoolean</fun> where the value is
true.
</dd>
</dle>
<dle>
<dt><b>upper</b></dt>
<dd>Any upper case alphabet character in the Unicode character set.
</dd>
</dle>
<dle version="8.5">
<dt><b>wideinteger</b></dt>
<dd>Any of the valid forms for a wide integer in Tcl, with optional
surrounding whitespace.  In case of under/overflow in the value, 0 is
returned and the <i>varname</i> will contain -1.
</dd>
</dle>
<dle>
<dt><b>wordchar</b></dt>
<dd>Any Unicode word character.  That is any alphanumeric character, and
any Unicode connector punctuation characters (e.g. underscore).
</dd>
</dle>
<dle>
<dt><b>xdigit</b></dt>
<dd>Any hexadecimal digit character ([0-9A-Fa-f]).
</dd>
</dle>
</dl><p>In the case of <b>boolean</b>, <b>true</b> and <b>false</b>, if the
function will return 0, then the <i>varname</i> will always be set to
0, due to the varied nature of a valid boolean value.
</p></desc>
</commanddef>
<commanddef>
<command><b>string last</b> <m>string1 string2</m> ?<m>lastIndex</m>?</command>
<desc>Search <i>string2</i> for a sequence of characters that exactly match
the characters in <i>string1</i>.  If found, return the index of the
first character in the last such match within <i>string2</i>.  If there
is no match, then return -1.  If <i>lastIndex</i> is specified (in any
of the forms accepted by the <b>index</b> method), then only the
characters in <i>string2</i> at or before the specified <i>lastIndex</i>
will be considered by the search.  For example,
<example>
<b>string last a 0a23456789abcdef 15</b>
</example><p>will return <b>10</b>, but
</p><example>
<b>string last a 0a23456789abcdef 9</b>
</example><p>will return <b>1</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>string length</b> <m>string</m></command>
<desc>Returns a decimal string giving the number of characters in
<i>string</i>.  Note that this is not necessarily the same as the
number of bytes used to store the string.  If the object is a
ByteArray object (such as those returned from reading a binary encoded
channel), then this will return the actual byte length of the object.
</desc>
</commanddef>
<commanddef>
<command><b>string map</b> ?<b>-nocase</b>? <m>mapping string</m></command>
<desc>Replaces substrings in <i>string</i> based on the key-value pairs in
<i>mapping</i>.  <i>mapping</i> is a list of <i>key value key value ...</i>
as in the form returned by <b>array get</b>.  Each instance of a
key in the string will be replaced with its corresponding value.  If
<b>-nocase</b> is specified, then matching is done without regard to
case differences. Both <i>key</i> and <i>value</i> may be multiple
characters.  Replacement is done in an ordered manner, so the key
appearing first in the list will be checked first, and so on.
<i>string</i> is only iterated over once, so earlier key replacements
will have no affect for later key matches.  For example,
<example>
<b>string map {abc 1 ab 2 a 3 1 0} 1abcaababcabababc</b>
</example><p>will return the string <b>01321221</b>.
</p><p>Note that if an earlier <i>key</i> is a prefix of a later one, it will
completely mask the later one.  So if the previous example is
reordered like this,
</p><example>
<b>string map {1 0 ab 2 a 3 abc 1} 1abcaababcabababc</b>
</example><p>it will return the string <b>02c322c222c</b>.
</p></desc>
</commanddef>
<commanddef>
<command><b>string match</b> ?<b>-nocase</b>? <m>pattern</m> <m>string</m></command>
<desc>See if <i>pattern</i> matches <i>string</i>; return 1 if it does, 0 if
it doesn't.  If <b>-nocase</b> is specified, then the pattern attempts
to match against the string in a case insensitive manner.  For the two
strings to match, their contents must be identical except that the
following special sequences may appear in <i>pattern</i>:
<dl>
<dle>
<dt><b>*</b></dt>
<dd>Matches any sequence of characters in <i>string</i>, including a null
string.
</dd>
</dle>
<dle>
<dt><b>?</b></dt>
<dd>Matches any single character in <i>string</i>.
</dd>
</dle>
<dle>
<dt><b>[</b><m>chars</m><b>]</b></dt>
<dd>Matches any character in the set given by <i>chars</i>.  If a sequence
of the form <i>x</i><b>-</b><i>y</i> appears in <i>chars</i>, then any
character between <i>x</i> and <i>y</i>, inclusive, will match.  When
used with <b>-nocase</b>, the end points of the range are converted to
lower case first.  Whereas {[A-z]} matches '_' when matching
case-sensitively ('_' falls between the 'Z' and 'a'), with
<b>-nocase</b> this is considered like {[A-Za-z]} (and probably what
was meant in the first place).
</dd>
</dle>
<dle>
<dt><b>\</b><m>x</m></dt>
<dd>Matches the single character <i>x</i>.  This provides a way of avoiding
the special interpretation of the characters <b>*?[]\</b> in
<i>pattern</i>.
</dd>
</dle>
</dl></desc>
</commanddef>
<commanddef>
<command><b>string range</b> <m>string first last</m></command>
<desc>Returns a range of consecutive characters from <i>string</i>, starting
with the character whose index is <i>first</i> and ending with the
character whose index is <i>last</i>. An index of 0 refers to the first
character of the string.  <i>first</i> and <i>last</i> may be specified
as for the <b>index</b> method.  If <i>first</i> is less than zero then
it is treated as if it were zero, and if <i>last</i> is greater than or
equal to the length of the string then it is treated as if it were
<b>end</b>.  If <i>first</i> is greater than <i>last</i> then an empty
string is returned.
</desc>
</commanddef>
<commanddef>
<command><b>string repeat</b> <m>string count</m></command>
<desc>Returns <i>string</i> repeated <i>count</i> number of times.
</desc>
</commanddef>
<commanddef>
<command><b>string replace</b> <m>string first last</m> ?<m>newstring</m>?</command>
<desc>Removes a range of consecutive characters from <i>string</i>, starting
with the character whose index is <i>first</i> and ending with the
character whose index is <i>last</i>.  An index of 0 refers to the
first character of the string.  <i>First</i> and <i>last</i> may be
specified as for the <b>index</b> method.  If <i>newstring</i> is
specified, then it is placed in the removed character range.  If
<i>first</i> is less than zero then it is treated as if it were zero,
and if <i>last</i> is greater than or equal to the length of the string
then it is treated as if it were <b>end</b>.  If <i>first</i> is greater
than <i>last</i> or the length of the initial string, or <i>last</i> is
less than 0, then the initial string is returned untouched.
</desc>
</commanddef>
<commanddef version="8.5">
<command><b>string reverse</b> <m>string</m></command>
<desc>Returns a string that is the same length as <i>string</i> but with its
characters in the reverse order.
</desc>
</commanddef>
<commanddef>
<command><b>string tolower</b> <m>string</m> ?<m>first</m>? ?<m>last</m>?</command>
<desc>Returns a value equal to <i>string</i> except that all upper (or title)
case letters have been converted to lower case.  If <i>first</i> is
specified, it refers to the first char index in the string to start
modifying.  If <i>last</i> is specified, it refers to the char index in
the string to stop at (inclusive).  <i>first</i> and <i>last</i> may be
specified as for the <b>index</b> method.
</desc>
</commanddef>
<commanddef>
<command><b>string totitle</b> <m>string</m> ?<m>first</m>? ?<m>last</m>?</command>
<desc>Returns a value equal to <i>string</i> except that the first character
in <i>string</i> is converted to its Unicode title case variant (or
upper case if there is no title case variant) and the rest of the
string is converted to lower case.  If <i>first</i> is specified, it
refers to the first char index in the string to start modifying.  If
<i>last</i> is specified, it refers to the char index in the string to
stop at (inclusive).  <i>first</i> and <i>last</i> may be specified as
for the <b>index</b> method.
</desc>
</commanddef>
<commanddef>
<command><b>string toupper</b> <m>string</m> ?<m>first</m>? ?<m>last</m>?</command>
<desc>Returns a value equal to <i>string</i> except that all lower (or title)
case letters have been converted to upper case.  If <i>first</i> is
specified, it refers to the first char index in the string to start
modifying.  If <i>last</i> is specified, it refers to the char index in
the string to stop at (inclusive).  <i>first</i> and <i>last</i> may be
specified as for the <b>index</b> method.
</desc>
</commanddef>
<commanddef>
<command><b>string trim</b> <m>string</m> ?<m>chars</m>?</command>
<desc>Returns a value equal to <i>string</i> except that any leading or
trailing characters present in the string given by <i>chars</i> are removed.  If
<i>chars</i> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
</desc>
</commanddef>
<commanddef>
<command><b>string trimleft</b> <m>string</m> ?<m>chars</m>?</command>
<desc>Returns a value equal to <i>string</i> except that any leading
characters present in the string given by <i>chars</i> are removed.  If
<i>chars</i> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
</desc>
</commanddef>
<commanddef>
<command><b>string trimright</b> <m>string</m> ?<m>chars</m>?</command>
<desc>Returns a value equal to <i>string</i> except that any trailing
characters present in the string given by <i>chars</i> are removed.  If
<i>chars</i> is not specified then white space is removed (spaces,
tabs, newlines, and carriage returns).
</desc>
</commanddef>
<commanddef>
<command><b>string wordend</b> <m>string charIndex</m></command>
<desc>Returns the index of the character just after the last one in the word
containing character <i>charIndex</i> of <i>string</i>.  <i>charIndex</i>
may be specified as for the <b>index</b> method.  A word is
considered to be any contiguous range of alphanumeric (Unicode letters
or decimal digits) or underscore (Unicode connector punctuation)
characters, or any single character other than these.
</desc>
</commanddef>
<commanddef>
<command><b>string wordstart</b> <m>string charIndex</m></command>
<desc>Returns the index of the first character in the word containing
character <i>charIndex</i> of <i>string</i>.  <i>charIndex</i> may be
specified as for the <b>index</b> method.  A word is considered to be any
contiguous range of alphanumeric (Unicode letters or decimal digits)
or underscore (Unicode connector punctuation) characters, or any
single character other than these.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLE</title>
<p>Test if the string in the variable <i>string</i> is a proper non-empty
prefix of the string <b>foobar</b>.
</p>
<example>
set length [<b>string length</b> $string]
if {$length == 0} {
   set isPrefix 0
} else {
   set isPrefix [<b>string equal</b> -length $length $string "foobar"]
}
</example>


</section>
<seealso>
<ref>expr(n)</ref>
<ref>list(n)</ref>
</seealso>
<keywords>
<keyword>case conversion</keyword>
<keyword>compare</keyword>
<keyword>index</keyword>
<keyword>match</keyword>
<keyword>pattern</keyword>
<keyword>string</keyword>
<keyword>word</keyword>
<keyword>equal</keyword>
<keyword>ctype</keyword>
<keyword>character</keyword>
<keyword>reverse</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="StringObj" version="8.1" title="Tcl_StringObj">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: StringObj.3,v 1.20 2005/09/13 21:23:51 dgp Exp $
 -->
<?TROFF.TH title="Tcl_StringObj" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_NewStringObj</name>
<name>Tcl_NewUnicodeObj</name>
<name>Tcl_SetStringObj</name>
<name>Tcl_SetUnicodeObj</name>
<name>Tcl_GetStringFromObj</name>
<name>Tcl_GetString</name>
<name>Tcl_GetUnicodeFromObj</name>
<name>Tcl_GetUnicode</name>
<name>Tcl_GetUniChar</name>
<name>Tcl_GetCharLength</name>
<name>Tcl_GetRange</name>
<name>Tcl_AppendToObj</name>
<name>Tcl_AppendUnicodeToObj</name>
<name>Tcl_AppendStringsToObj</name>
<name>Tcl_AppendStringsToObjVA</name>
<name>Tcl_AppendObjToObj</name>
<name>Tcl_SetObjLength</name>
<name>Tcl_ConcatObj</name>
<name>Tcl_AttemptSetObjLength</name>
<desc>manipulate Tcl objects as strings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_NewStringObj</fun>(<m>bytes</m>, <m>length</m>)

Tcl_Obj *
<fun>Tcl_NewUnicodeObj</fun>(<m>unicode</m>, <m>numChars</m>)

void
<fun>Tcl_SetStringObj</fun>(<m>objPtr</m>, <m>bytes</m>, <m>length</m>)

void
<fun>Tcl_SetUnicodeObj</fun>(<m>objPtr</m>, <m>unicode</m>, <m>numChars</m>)

char *
<fun>Tcl_GetStringFromObj</fun>(<m>objPtr</m>, <m>lengthPtr</m>)

char *
<fun>Tcl_GetString</fun>(<m>objPtr</m>)

Tcl_UniChar *
<fun>Tcl_GetUnicodeFromObj</fun>(<m>objPtr</m>, <m>lengthPtr</m>)

Tcl_UniChar *
<fun>Tcl_GetUnicode</fun>(<m>objPtr</m>)

Tcl_UniChar
<fun>Tcl_GetUniChar</fun>(<m>objPtr</m>, <m>index</m>)

int
<fun>Tcl_GetCharLength</fun>(<m>objPtr</m>)

Tcl_Obj *
<fun>Tcl_GetRange</fun>(<m>objPtr</m>, <m>first</m>, <m>last</m>)

void
<fun>Tcl_AppendToObj</fun>(<m>objPtr</m>, <m>bytes</m>, <m>length</m>)

void
<fun>Tcl_AppendUnicodeToObj</fun>(<m>objPtr</m>, <m>unicode</m>, <m>numChars</m>)

void
<fun>Tcl_AppendObjToObj</fun>(<m>objPtr</m>, <m>appendObjPtr</m>)

void
<fun>Tcl_AppendStringsToObj</fun>(<m>objPtr</m>, <m>string</m>, <m>string</m>, <m>...</m><b>(char *) NULL</b>)

void
<fun>Tcl_AppendStringsToObjVA</fun>(<m>objPtr</m>, <m>argList</m>)

void
<fun>Tcl_SetObjLength</fun>(<m>objPtr</m>, <m>newLength</m>)

int
<fun>Tcl_AttemptSetObjLength</fun>(<m>objPtr</m>, <m>newLength</m>)

Tcl_Obj *
<fun>Tcl_ConcatObj</fun>(<m>objc</m>, <m>objv</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char</argtype>
<name name="bytes">*bytes</name>
<argmode>in</argmode>
<desc>Points to the first byte of an array of UTF-8-encoded bytes
used to set or append to a string object.
This byte array may contain embedded null characters
unless <i>numChars</i> is negative.  (Applications needing null bytes
should represent them as the two-byte sequence <i>\700\600</i>, use
<fun>Tcl_ExternalToUtf</fun> to convert, or <fun>Tcl_NewByteArrayObj</fun> if
the string is a collection of uninterpreted bytes.)
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>The number of bytes to copy from <i>bytes</i> when
initializing, setting, or appending to a string object.
If negative, all bytes up to the first null are used.
</desc>
</argdef>
<argdef>
<argtype>const Tcl_UniChar</argtype>
<name name="unicode">*unicode</name>
<argmode>in</argmode>
<desc>Points to the first byte of an array of Unicode characters
used to set or append to a string object.
This byte array may contain embedded null characters
unless <i>numChars</i> is negative.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numChars</name>
<argmode>in</argmode>
<desc>The number of Unicode characters to copy from <i>unicode</i> when
initializing, setting, or appending to a string object.
If negative, all characters up to the first null character are used.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>index</name>
<argmode>in</argmode>
<desc>The index of the Unicode character to return.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>first</name>
<argmode>in</argmode>
<desc>The index of the first Unicode character in the Unicode range to be
returned as a new object.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>last</name>
<argmode>in</argmode>
<desc>The index of the last Unicode character in the Unicode range to be
returned as a new object.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in/out</argmode>
<desc>Points to an object to manipulate.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="appendObjPtr">*appendObjPtr</name>
<argmode>in</argmode>
<desc>The object to append to <i>objPtr</i> in <fun>Tcl_AppendObjToObj</fun>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="lengthPtr">*lengthPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, the location where <fun>Tcl_GetStringFromObj</fun> will store
the length of an object's string representation.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Null-terminated string value to append to <i>objPtr</i>.
</desc>
</argdef>
<argdef>
<argtype>va_list</argtype>
<name>argList</name>
<argmode>in</argmode>
<desc>An argument list which must have been initialised using
<b>va_start</b>, and cleared using <b>va_end</b>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>newLength</name>
<argmode>in</argmode>
<desc>New length for the string value of <i>objPtr</i>, not including the
final null character.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>The number of elements to concatenate.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objv">*objv[]</name>
<argmode>in</argmode>
<desc>The array of objects to concatenate.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The procedures described in this manual entry allow Tcl objects to
be manipulated as string values.  They use the internal representation
of the object to store additional information to make the string
manipulations more efficient.  In particular, they make a series of
append operations efficient by allocating extra storage space for the
string so that it doesn't have to be copied for each append.
Also, indexing and length computations are optimized because the
Unicode string representation is calculated and cached as needed.
When using the <b>Tcl_Append*</b> family of functions where the
interpreter's result is the object being appended to, it is important
to call Tcl_ResetResult first to ensure you are not unintentionally
appending to existing data in the result object.
</p>
<p><fun>Tcl_NewStringObj</fun> and <fun>Tcl_SetStringObj</fun> create a new object
or modify an existing object to hold a copy of the string given by
<i>bytes</i> and <i>length</i>.  <fun>Tcl_NewUnicodeObj</fun> and
<fun>Tcl_SetUnicodeObj</fun> create a new object or modify an existing
object to hold a copy of the Unicode string given by <i>unicode</i> and
<i>numChars</i>.  <fun>Tcl_NewStringObj</fun> and <fun>Tcl_NewUnicodeObj</fun>
return a pointer to a newly created object with reference count zero.
All four procedures set the object to hold a copy of the specified
string.  <fun>Tcl_SetStringObj</fun> and <fun>Tcl_SetUnicodeObj</fun> free any
old string representation as well as any old internal representation
of the object.
</p>
<p><fun>Tcl_GetStringFromObj</fun> and <fun>Tcl_GetString</fun> return an object's
string representation.  This is given by the returned byte pointer and
(for <fun>Tcl_GetStringFromObj</fun>) length, which is stored in
<i>lengthPtr</i> if it is non-NULL.  If the object's UTF string
representation is invalid (its byte pointer is NULL), the string
representation is regenerated from the object's internal
representation.  The storage referenced by the returned byte pointer
is owned by the object manager.  It is passed back as a writable
pointer so that extension author creating their own <type>Tcl_ObjType</type>
will be able to modify the string representation within the
<type>Tcl_UpdateStringProc</type> of their <type>Tcl_ObjType</type>.  Except for that
limited purpose, the pointer returned by <fun>Tcl_GetStringFromObj</fun>
or <fun>Tcl_GetString</fun> should be treated as read-only.  It is
recommended that this pointer be assigned to a (const char *) variable.
Even in the limited situations where writing to this pointer is
acceptable, one should take care to respect the copy-on-write
semantics required by <type>Tcl_Obj</type>'s, with appropriate calls
to <fun>Tcl_IsShared</fun> and <fun>Tcl_DuplicateObj</fun> prior to any
in-place modification of the string representation.
The procedure <fun>Tcl_GetString</fun> is used in the common case
where the caller does not need the length of the string
representation.
</p>
<p><fun>Tcl_GetUnicodeFromObj</fun> and <fun>Tcl_GetUnicode</fun> return an object's
value as a Unicode string.  This is given by the returned pointer and
(for <fun>Tcl_GetUnicodeFromObj</fun>) length, which is stored in
<i>lengthPtr</i> if it is non-NULL.  The storage referenced by the returned
byte pointer is owned by the object manager and should not be modified by
the caller.  The procedure <fun>Tcl_GetUnicode</fun> is used in the common case
where the caller does not need the length of the unicode string
representation.
</p>
<p><fun>Tcl_GetUniChar</fun> returns the <i>index</i>'th character in the
object's Unicode representation.
</p>
<p><fun>Tcl_GetRange</fun> returns a newly created object comprised of the
characters between <i>first</i> and <i>last</i> (inclusive) in the
object's Unicode representation.  If the object's Unicode
representation is invalid, the Unicode representation is regenerated
from the object's string representation.
</p>
<p><fun>Tcl_GetCharLength</fun> returns the number of characters (as opposed
to bytes) in the string object.
</p>
<p><fun>Tcl_AppendToObj</fun> appends the data given by <i>bytes</i> and
<i>length</i> to the string representation of the object specified by
<i>objPtr</i>.  If the object has an invalid string representation,
then an attempt is made to convert <i>bytes</i> is to the Unicode
format.  If the conversion is successful, then the converted form of
<i>bytes</i> is appended to the object's Unicode representation.
Otherwise, the object's Unicode representation is invalidated and
converted to the UTF format, and <i>bytes</i> is appended to the
object's new string representation.
</p>
<p><fun>Tcl_AppendUnicodeToObj</fun> appends the Unicode string given by
<i>unicode</i> and <i>numChars</i> to the object specified by
<i>objPtr</i>.  If the object has an invalid Unicode representation,
then <i>unicode</i> is converted to the UTF format and appended to the
object's string representation.  Appends are optimized to handle
repeated appends relatively efficiently (it overallocates the string
or Unicode space to avoid repeated reallocations and copies of
object's string value).
</p>
<p><fun>Tcl_AppendObjToObj</fun> is similar to <fun>Tcl_AppendToObj</fun>, but it
appends the string or Unicode value (whichever exists and is best
suited to be appended to <i>objPtr</i>) of <i>appendObjPtr</i> to
<i>objPtr</i>.
</p>
<p><fun>Tcl_AppendStringsToObj</fun> is similar to <fun>Tcl_AppendToObj</fun>
except that it can be passed more than one value to append and
each value must be a null-terminated string (i.e. none of the
values may contain internal null characters).  Any number of
<i>string</i> arguments may be provided, but the last argument
must be a NULL pointer to indicate the end of the list.
</p>
<p><fun>Tcl_AppendStringsToObjVA</fun> is the same as <fun>Tcl_AppendStringsToObj</fun>
except that instead of taking a variable number of arguments it takes an
argument list.
</p>
<p>The <fun>Tcl_SetObjLength</fun> procedure changes the length of the
string value of its <i>objPtr</i> argument.  If the <i>newLength</i>
argument is greater than the space allocated for the object's
string, then the string space is reallocated and the old value
is copied to the new space; the bytes between the old length of
the string and the new length may have arbitrary values.
If the <i>newLength</i> argument is less than the current length
of the object's string, with <i>objPtr-&gt;length</i> is reduced without
reallocating the string space; the original allocated size for the
string is recorded in the object, so that the string length can be
enlarged in a subsequent call to <fun>Tcl_SetObjLength</fun> without
reallocating storage.  In all cases <fun>Tcl_SetObjLength</fun> leaves
a null character at <i>objPtr-&gt;bytes[newLength]</i>.
</p>
<p><fun>Tcl_AttemptSetObjLength</fun> is identical in function to
<fun>Tcl_SetObjLength</fun> except that if sufficient memory to satisfy the
request cannot be allocated, it does not cause the Tcl interpreter to
<b>panic</b>.  Thus, if <i>newLength</i> is greater than the space
allocated for the object's string, and there is not enough memory
available to satisfy the request, <fun>Tcl_AttemptSetObjLength</fun> will take
no action and return 0 to indicate failure.  If there is enough memory
to satisfy the request, <fun>Tcl_AttemptSetObjLength</fun> behaves just like
<fun>Tcl_SetObjLength</fun> and returns 1 to indicate success.
</p>
<p>The <fun>Tcl_ConcatObj</fun> function returns a new string object whose
value is the space-separated concatenation of the string
representations of all of the objects in the <i>objv</i>
array. <fun>Tcl_ConcatObj</fun> eliminates leading and trailing white space
as it copies the string representations of the <i>objv</i> array to the
result. If an element of the <i>objv</i> array consists of nothing but
white space, then that object is ignored entirely. This white-space
removal was added to make the output of the <cmd>concat</cmd> command
cleaner-looking. <fun>Tcl_ConcatObj</fun> returns a pointer to a
newly-created object whose ref count is zero.

</p>
</section>
<seealso>
<ref>Tcl_NewObj</ref>
<ref>Tcl_IncrRefCount</ref>
<ref>Tcl_DecrRefCount</ref>
</seealso>
<keywords>
<keyword>append</keyword>
<keyword>internal representation</keyword>
<keyword>object</keyword>
<keyword>object type</keyword>
<keyword>string object</keyword>
<keyword>string type</keyword>
<keyword>string representation</keyword>
<keyword>concat</keyword>
<keyword>concatenate</keyword>
<keyword>unicode</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="StrMatch" version="8.1" title="Tcl_StringMatch">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: StrMatch.3,v 1.9 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_StringMatch" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_StringMatch</name>
<name>Tcl_StringCaseMatch</name>
<desc>test whether a string matches a pattern</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_StringMatch</fun>(<m>str</m>, <m>pattern</m>)

int
<fun>Tcl_StringCaseMatch</fun>(<m>str</m>, <m>pattern</m>, <m>nocase</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>const char</argtype>
<name name="str">*str</name>
<argmode>in</argmode>
<desc>String to test.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="pattern">*pattern</name>
<argmode>in</argmode>
<desc>Pattern to match against string.  May contain special
characters from the set *?\[].
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>nocase</name>
<argmode>in</argmode>
<desc>Specifies whether the match should be done case-sensitive (0) or
case-insensitive (1).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This utility procedure determines whether a string matches
a given pattern.  If it does, then <fun>Tcl_StringMatch</fun> returns
1.  Otherwise <fun>Tcl_StringMatch</fun> returns 0.  The algorithm
used for matching is the same algorithm used in the ``string match''
Tcl command and is similar to the algorithm used by the C-shell
for file name matching;  see the Tcl manual entry for details.
</p>
<p>In <fun>Tcl_StringCaseMatch</fun>, the algorithm is the same, but you have
the option to make the matching case-insensitive.  If you choose this
(by passing <b>nocase</b> as 1), then the string and pattern are
essentially matched in the lower case.

</p>
</section>
<keywords>
<keyword>match</keyword>
<keyword>pattern</keyword>
<keyword>string</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="subst" version="7.4" title="subst">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2001 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: subst.n,v 1.9 2006/08/09 10:06:28 dkf Exp $
 -->
<?TROFF.TH title="subst" section="n" date="7.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>subst</name>
<desc>Perform backslash, command, and variable substitutions</desc>
</namesection>
<synopsis>
<syntax>
<cmd>subst</cmd> ?<b>-nobackslashes</b>? ?<b>-nocommands</b>? ?<b>-novariables</b>? <m>string</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command performs variable substitutions, command substitutions,
and backslash substitutions on its <i>string</i> argument and
returns the fully-substituted result.
The substitutions are performed in exactly the same way as for
Tcl commands.
As a result, the <i>string</i> argument is actually substituted twice,
once by the Tcl parser in the usual fashion for Tcl commands, and
again by the <i>subst</i> command.
</p>
<p>If any of the <b>-nobackslashes</b>, <b>-nocommands</b>, or
<b>-novariables</b> are specified, then the corresponding substitutions
are not performed.
For example, if <b>-nocommands</b> is specified, command substitution
is not performed:  open and close brackets are treated as ordinary characters
with no special interpretation.
</p>
<p>Note that the substitution of one kind can include substitution of 
other kinds.  For example, even when the <b>-novariables</b> option
is specified, command substitution is performed without restriction.
This means that any variable substitution necessary to complete the
command substitution will still take place.  Likewise, any command
substitution necessary to complete a variable substitution will
take place, even when <b>-nocommands</b> is specified.  See the
EXAMPLES below.
</p>
<p>If an error occurs during substitution, then <cmd>subst</cmd> will return
that error.  If a break exception occurs during command or variable
substitution, the result of the whole substitution will be the
string (as substituted) up to the start of the substitution that
raised the exception.  If a continue exception occurs during the
evaluation of a command or variable substitution, an empty string
will be substituted for that entire command or variable substitution
(as long as it is well-formed Tcl.)  If a return exception occurs,
or any other return code is returned during command or variable
substitution, then the returned value is substituted for that
substitution.  See the <ref refid="examples">EXAMPLES</ref> below.  In this way, all exceptional
return codes are ``caught'' by <cmd>subst</cmd>.  The <cmd>subst</cmd> command
itself will either return an error, or will complete successfully.
</p>
</section>
<section id="examples">
<title>EXAMPLES</title>
<p>When it performs its substitutions, <i>subst</i> does not give any
special treatment to double quotes or curly braces (except within
command substitutions) so the script
</p>
<example>
set a 44
<cmd>subst</cmd> {xyz {$a}}
</example>
<p>returns ``<b>xyz {44}</b>'', not ``<b>xyz {$a}</b>''
and the script
</p>
<example>
set a "p\} q \{r"
<cmd>subst</cmd> {xyz {$a}}
</example>
<p>return ``<b>xyz {p} q {r}</b>'', not ``<b>xyz {p\} q \{r}</b>''.
</p>
<p>When command substitution is performed, it includes any variable
substitution necessary to evaluate the script.  
</p>
<example>
set a 44
<cmd>subst</cmd> -novariables {$a [format $a]}
</example>
<p>returns ``<b>$a 44</b>'', not ``<b>$a $a</b>''.  Similarly, when
variable substitution is performed, it includes any command
substitution necessary to retrieve the value of the variable.
</p>
<example>
proc b {} {return c}
array set a {c c [b] tricky}
<cmd>subst</cmd> -nocommands {[b] $a([b])}
</example>
<p>returns ``<b>[b] c</b>'', not ``<b>[b] tricky</b>''.
</p>
<p>The continue and break exceptions allow command substitutions to
prevent substitution of the rest of the command substitution and the
rest of <i>string</i> respectively, giving script authors more options
when processing text using <i>subst</i>.  For example, the script
</p>
<example>
<cmd>subst</cmd> {abc,[break],def}
</example>
<p>returns ``<b>abc,</b>'', not ``<b>abc,,def</b>'' and the script
</p>
<example>
<cmd>subst</cmd> {abc,[continue;expr {1+2}],def}
</example>
<p>returns ``<b>abc,,def</b>'', not ``<b>abc,3,def</b>''.
</p>
<p>Other exceptional return codes substitute the returned value
</p>
<example>
<cmd>subst</cmd> {abc,[return foo;expr {1+2}],def}
</example>
<p>returns ``<b>abc,foo,def</b>'', not ``<b>abc,3,def</b>'' and
</p>
<example>
<cmd>subst</cmd> {abc,[return -code 10 foo;expr {1+2}],def}
</example>
<p>also returns ``<b>abc,foo,def</b>'', not ``<b>abc,3,def</b>''.

</p>
</section>
<seealso>
<ref>Tcl(n)</ref>
<ref>eval(n)</ref>
<ref>break(n)</ref>
<ref>continue(n)</ref>
</seealso>
<keywords>
<keyword>backslash substitution</keyword>
<keyword>command substitution</keyword>
<keyword>variable substitution</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="SubstObj" title="Tcl_SubstObj" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2001 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: SubstObj.3,v 1.3 2004/10/07 14:44:34 dkf Exp $
 -->
<?TROFF.TH title="Tcl_SubstObj" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_SubstObj</name>
<desc>perform substitutions on Tcl objects</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_Obj *
<fun>Tcl_SubstObj</fun>(<m>interp</m>, <m>objPtr</m>, <m>flags</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to execute Tcl scripts and lookup variables.  If
an error occurs, the interpreter's result is modified to hold an error
message.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj</argtype>
<name name="objPtr">*objPtr</name>
<argmode>in</argmode>
<desc>A Tcl object containing the string to perform substitutions on.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>ORed combination of flag bits that specify which substitutions to
perform.  The flags <b>TCL_SUBST_COMMANDS</b>,
<b>TCL_SUBST_VARIABLES</b> and <b>TCL_SUBST_BACKSLASHES</b> are
currently supported, and <b>TCL_SUBST_ALL</b> is provided as a
convenience for the common case where all substitutions are desired.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <fun>Tcl_SubstObj</fun> function is used to perform substitutions on
strings in the fashion of the <cmd>subst</cmd> command.  It gets the value
of the string contained in <i>objPtr</i> and scans it, copying
characters and performing the chosen substitutions as it goes to an
output object which is returned as the result of the function.  In the
event of an error occurring during the execution of a command or
variable substitution, the function returns NULL and an error message
is left in <i>interp</i>'s result.
</p>
<p>Three kinds of substitutions are supported.  When the
<b>TCL_SUBST_BACKSLASHES</b> bit is set in <i>flags</i>, sequences that
look like backslash substitutions for Tcl commands are replaced by
their corresponding character.
</p>
<p>When the <b>TCL_SUBST_VARIABLES</b> bit is set in <i>flags</i>,
sequences that look like variable substitutions for Tcl commands are
replaced by the contents of the named variable.
</p>
<p>When the <b>TCL_SUBST_COMMANDS</b> bit is set in <i>flags</i>, sequences
that look like command substitutions for Tcl commands are replaced by
the result of evaluating that script.  Where an uncaught `continue
exception' occurs during the evaluation of a command substitution, an
empty string is substituted for the command.  Where an uncaught `break
exception' occurs during the evaluation of a command substitution, the
result of the whole substitution on <i>objPtr</i> will be truncated at
the point immediately before the start of the command substitution,
and no characters will be added to the result or substitutions
performed after that point.

</p>
</section>
<seealso>
<ref>subst(n)</ref>
</seealso>
<keywords>
<keyword>backslash substitution</keyword>
<keyword>command substitution</keyword>
<keyword>variable substitution</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="switch" version="8.5" title="switch">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: switch.n,v 1.10 2006/08/09 10:06:28 dkf Exp $
 -->
<?TROFF.TH title="switch" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>switch</name>
<desc>Evaluate one of several scripts, depending on a given value</desc>
</namesection>
<synopsis>
<syntax>
<cmd>switch</cmd> ?<m>options</m>? <m>string pattern body</m> ?<m>pattern body</m> ...?

<cmd>switch</cmd> ?<m>options</m>? <m>string</m> {<m>pattern body</m> ?<m>pattern body</m> ...?}
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>switch</cmd> command matches its <i>string</i> argument against each of
the <i>pattern</i> arguments in order.
As soon as it finds a <i>pattern</i> that matches <i>string</i> it
evaluates the following <i>body</i> argument by passing it recursively
to the Tcl interpreter and returns the result of that evaluation.
If the last <i>pattern</i> argument is <b>default</b> then it matches
anything.
If no <i>pattern</i> argument
matches <i>string</i> and no default is given, then the <cmd>switch</cmd>
command returns an empty string.
</p>
<p>If the initial arguments to <cmd>switch</cmd> start with <b>-</b> then
they are treated as options.  The following options are
currently supported:
</p>
<dl>
<dle>
<dt><b>-exact</b></dt>
<dd>Use exact matching when comparing <i>string</i> to a pattern.  This
is the default.
</dd>
</dle>
<dle>
<dt><b>-glob</b></dt>
<dd>When matching <i>string</i> to the patterns, use glob-style matching
(i.e. the same as implemented by the <b>string match</b> command).
</dd>
</dle>
<dle>
<dt><b>-regexp</b></dt>
<dd>When matching <i>string</i> to the patterns, use regular
expression matching
(as described in the <b>re_syntax</b> reference page).
</dd>
</dle>
<dle version="8.5">
<dt><b>-nocase</b></dt>
<dd>Causes comparisons to be handled in a case-insensitive manner.
</dd>
</dle>
<dle version="8.5">
<dt><b>-matchvar</b> <m>varName</m></dt>
<dd>This option (only legal when <b>-regexp</b> is also specified)
specifies the name of a variable into which the list of matches
found by the regular expression engine will be written.  The first
element of the list written will be the overall substring of the input
string (i.e. the <i>string</i> argument to <cmd>switch</cmd>) matched, the
second element of the list will be the substring matched by the first
capturing parenthesis in the regular expression that matched, and so
on.  When a <b>default</b> branch is taken, the variable will have the
empty list written to it.  This option may be specified at the same
time as the <b>-indexvar</b> option.
</dd>
</dle>
<dle version="8.5">
<dt><b>-indexvar</b> <m>varName</m></dt>
<dd>This option (only legal when <b>-regexp</b> is also specified)
specifies the name of a variable into which the list of indices
referring to matching substrings
found by the regular expression engine will be written.  The first
element of the list written will be a two-element list specifying the
index of the start and index of the first character after the end of
the overall substring of the input
string (i.e. the <i>string</i> argument to <cmd>switch</cmd>) matched, in a
similar way to the <b>-indices</b> option to the <cmd>regexp</cmd> can
obtain.  Similarly, the second element of the list refers to the first
capturing parenthesis in the regular expression that matched, and so
on.  When a <b>default</b> branch is taken, the variable will have the
empty list written to it.  This option may be specified at the same
time as the <b>-matchvar</b> option.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of options.  The argument following this one will
be treated as <i>string</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>Two syntaxes are provided for the <i>pattern</i> and <i>body</i> arguments.
The first uses a separate argument for each of the patterns and commands;
this form is convenient if substitutions are desired on some of the
patterns or commands.
The second form places all of the patterns and commands together into
a single argument; the argument must have proper list structure, with
the elements of the list being the patterns and commands.
The second form makes it easy to construct multi-line switch commands,
since the braces around the whole list make it unnecessary to include a
backslash at the end of each line.
Since the <i>pattern</i> arguments are in braces in the second form,
no command or variable substitutions are performed on them;  this makes
the behavior of the second form different than the first form in some
cases.
</p>
<p>If a <i>body</i> is specified as ``<b>-</b>'' it means that the <i>body</i>
for the next pattern should also be used as the body for this
pattern (if the next pattern also has a body of ``<b>-</b>''
then the body after that is used, and so on).
This feature makes it possible to share a single <i>body</i> among
several patterns.
</p>
<p>Beware of how you place comments in <cmd>switch</cmd> commands.  Comments
should only be placed <b>inside</b> the execution body of one of the
patterns, and not intermingled with the patterns.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>The <cmd>switch</cmd> command can match against variables and not just
literals, as shown here (the result is <i>2</i>):
</p>
<example>
set foo "abc"
<cmd>switch</cmd> abc a - b {expr {1}} $foo {expr {2}} default {expr {3}}
</example>
<p>Using glob matching and the fall-through body is an alternative to
writing regular expressions with alternations, as can be seen here
(this returns <i>1</i>):
</p>
<example>
<cmd>switch</cmd> -glob aaab {
   a*b     -
   b       {expr {1}}
   a*      {expr {2}}
   default {expr {3}}
}
</example>
<p>Whenever nothing matches, the <b>default</b> clause (which must be
last) is taken.  This example has a result of <i>3</i>:
</p>
<example>
<cmd>switch</cmd> xyz {
   a  -
   b {
      # Correct Comment Placement
      expr {1}
   }
   c {
      expr {2}
   }
   default {
      expr {3}
   }
}
</example>
<p><?NEW 8.5?>When matching against regular expressions, information about what
exactly matched is easily obtained using the <b>-matchvar</b> option:
</p>
<example>
<cmd>switch</cmd> -regexp -matchvar foo -- $bar {
   a(b*)c {
      puts "Found [string length [lindex $foo 1]] 'b's"
   }
   d(e*)f(g*)h {
      puts "Found [string length [lindex $foo 1]] 'e's and\
            [string length [lindex $foo 2]] 'g's"
   }
}
</example>
<?ENDNEW CONFUSED 8.5?>


</section>
<seealso>
<ref>for(n)</ref>
<ref>if(n)</ref>
<ref>regexp(n)</ref>
</seealso>
<keywords>
<keyword>switch</keyword>
<keyword>match</keyword>
<keyword>regular expression</keyword>
</keywords>
</manpage>
<manpage version="8.1" cat="misc" title="Tcl" id="Tcl">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Tcl.n,v 1.9 2003/02/01 19:48:23 kennykb Exp $
 -->
<?TROFF.TH title="Tcl" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>Tcl</name>
<desc>Tool Command Language</desc>
</namesection>
<synopsis>
<syntax>
Summary of Tcl language syntax.
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The following rules define the syntax and semantics of the Tcl language:
</p>
<dl>
<dle>
<dt>[1] <b>Commands.</b></dt>
<dd>A Tcl script is a string containing one or more commands.
Semi-colons and newlines are command separators unless quoted as
described below.
Close brackets are command terminators during command substitution
(see below) unless quoted.
</dd>
</dle>
<dle>
<dt>[2] <b>Evaluation.</b></dt>
<dd>A command is evaluated in two steps.
First, the Tcl interpreter breaks the command into <i>words</i>
and performs substitutions as described below.
These substitutions are performed in the same way for all
commands.
The first word is used to locate a command procedure to
carry out the command, then all of the words of the command are
passed to the command procedure.
The command procedure is free to interpret each of its words
in any way it likes, such as an integer, variable name, list,
or Tcl script.
Different commands interpret their words differently.
</dd>
</dle>
<dle>
<dt>[3] <b>Words.</b></dt>
<dd>Words of a command are separated by white space (except for
newlines, which are command separators).
</dd>
</dle>
<dle>
<dt>[4] <b>Double quotes.</b></dt>
<dd>If the first character of a word is double-quote (``"'') then
the word is terminated by the next double-quote character.
If semi-colons, close brackets, or white space characters
(including newlines) appear between the quotes then they are treated
as ordinary characters and included in the word.
Command substitution, variable substitution, and backslash substitution
are performed on the characters between the quotes as described below.
The double-quotes are not retained as part of the word.
</dd>
</dle>
<dle>
<dt>[5] <b>Braces.</b></dt>
<dd>If the first character of a word is an open brace (``{'') then
the word is terminated by the matching close brace (``}'').
Braces nest within the word: for each additional open
brace there must be an additional close brace (however,
if an open brace or close brace within the word is
quoted with a backslash then it is not counted in locating the
matching close brace).
No substitutions are performed on the characters between the
braces except for backslash-newline substitutions described
below, nor do semi-colons, newlines, close brackets,
or white space receive any special interpretation.
The word will consist of exactly the characters between the
outer braces, not including the braces themselves.
</dd>
</dle>
<dle>
<dt>[6] <b>Command substitution.</b></dt>
<dd>If a word contains an open bracket (``['') then Tcl performs
<i>command substitution</i>.
To do this it invokes the Tcl interpreter recursively to process
the characters following the open bracket as a Tcl script.
The script may contain any number of commands and must be terminated
by a close bracket (``]'').
The result of the script (i.e. the result of its last command) is
substituted into the word in place of the brackets and all of the
characters between them.
There may be any number of command substitutions in a single word.
Command substitution is not performed on words enclosed in braces.
</dd>
</dle>
<dle>
<dt>[7] <b>Variable substitution.</b></dt>
<dd>If a word contains a dollar-sign (``$'') then Tcl performs <i>variable
substitution</i>:  the dollar-sign and the following characters are
replaced in the word by the value of a variable.
Variable substitution may take any of the following forms:
<dl>
<dle>
<dt><b>$</b><m>name</m></dt>
<dd><i>Name</i> is the name of a scalar variable;  the name is a sequence
of one or more characters that are a letter, digit, underscore,
or namespace separators (two or more colons).
</dd>
</dle>
<dle>
<dt><b>$</b><m>name</m><b>(</b><m>index</m><b>)</b></dt>
<dd><i>Name</i> gives the name of an array variable and <i>index</i> gives
the name of an element within that array.
<i>Name</i> must contain only letters, digits, underscores, and
namespace separators, and may be an empty string.
Command substitutions, variable substitutions, and backslash
substitutions are performed on the characters of <i>index</i>.
</dd>
</dle>
<dle>
<dt><b>${</b><m>name</m><b>}</b></dt>
<dd><i>Name</i> is the name of a scalar variable.  It may contain any
characters whatsoever except for close braces.
</dd>
</dle>
</dl><p>There may be any number of variable substitutions in a single word.
Variable substitution is not performed on words enclosed in braces.
</p></dd>
</dle>
<dle>
<dt>[8] <b>Backslash substitution.</b></dt>
<dd>If a backslash (``\'') appears within a word then
<i>backslash substitution</i> occurs.
In all cases but those described below the backslash is dropped and
the following character is treated as an ordinary
character and included in the word.
This allows characters such as double quotes, close brackets,
and dollar signs to be included in words without triggering
special processing.
The following table lists the backslash sequences that are
handled specially, along with the value that replaces each sequence.
<dl>
<dle>
<dt>\<b>a</b></dt>
<dd>Audible alert (bell) (0x7).
</dd>
</dle>
<dle>
<dt>\<b>b</b></dt>
<dd>Backspace (0x8).
</dd>
</dle>
<dle>
<dt>\<b>f</b></dt>
<dd>Form feed (0xc).
</dd>
</dle>
<dle>
<dt>\<b>n</b></dt>
<dd>Newline (0xa).
</dd>
</dle>
<dle>
<dt>\<b>r</b></dt>
<dd>Carriage-return (0xd).
</dd>
</dle>
<dle>
<dt>\<b>t</b></dt>
<dd>Tab (0x9).
</dd>
</dle>
<dle>
<dt>\<b>v</b></dt>
<dd>Vertical tab (0xb).
</dd>
</dle>
<dle>
<dt>\<b>&lt;newline&gt;</b><m>whiteSpace</m></dt>
<dd>A single space character replaces the backslash, newline, and all spaces
and tabs after the newline.  This backslash sequence is unique in that it
is replaced in a separate pre-pass before the command is actually parsed.
This means that it will be replaced even when it occurs between braces,
and the resulting space will be treated as a word separator if it isn't
in braces or quotes.
</dd>
</dle>
<dle>
<dt>\\</dt>
<dd>Backslash (``\'').
</dd>
</dle>
<dle version="8.1">
<dt>\<m>ooo</m> </dt>
<dd>The digits <i>ooo</i> (one, two, or three of them) give an eight-bit octal 
value for the Unicode character that will be inserted.  The upper bits of the
Unicode character will be 0.
</dd>
</dle>
<dle version="8.1">
<dt>\<b>x</b><m>hh</m> </dt>
<dd>The hexadecimal digits <i>hh</i> give an eight-bit hexadecimal value for the
Unicode character that will be inserted.  Any number of hexadecimal digits
may be present; however, all but the last two are ignored (the result is
always a one-byte quantity).  The upper bits of the Unicode character will
be 0.
</dd>
</dle>
<dle version="8.1">
<dt>\<b>u</b><m>hhhh</m> </dt>
<dd>The hexadecimal digits <i>hhhh</i> (one, two, three, or four of them) give a
sixteen-bit hexadecimal value for the Unicode character that will be
inserted.
</dd>
</dle>
</dl><p>Backslash substitution is not performed on words enclosed in braces,
except for backslash-newline as described above.
</p></dd>
</dle>
<dle>
<dt>[9] <b>Comments.</b></dt>
<dd>If a hash character (``#'') appears at a point where Tcl is
expecting the first character of the first word of a command,
then the hash character and the characters that follow it, up
through the next newline, are treated as a comment and ignored.
The comment character only has significance when it appears
at the beginning of a command.
</dd>
</dle>
<dle>
<dt>[10] <b>Order of substitution.</b></dt>
<dd>Each character is processed exactly once by the Tcl interpreter
as part of creating the words of a command.
For example, if variable substitution occurs then no further
substitutions are performed on the value of the variable;  the
value is inserted into the word verbatim.
If command substitution occurs then the nested command is
processed entirely by the recursive call to the Tcl interpreter;
no substitutions are performed before making the recursive
call and no additional substitutions are performed on the result
of the nested script.
<p>Substitutions take place from left to right, and each substitution is
evaluated completely before attempting to evaluate the next.  Thus, a
sequence like
</p><example>
set y [set x 0][incr x][incr x]
</example><p>will always set the variable <i>y</i> to the value, <i>012</i>.
</p></dd>
</dle>
<dle>
<dt>[11] <b>Substitution and word boundaries.</b></dt>
<dd>Substitutions do not affect the word boundaries of a command.
For example, during variable substitution the entire value of
the variable becomes part of a single word, even if the variable's
value contains spaces.
</dd>
</dle>
</dl>
</section>
</manpage>
<manual package="tcllib" version="1.6">
<title>TCLLIB - Tcl Standard Library</title>

<head>
<link rel="homepage" href="http://tcllib.sourceforge.net"/>
</head>

<division>
<title>Programming tools</title>
<subdoc href="cmdline.tmml"/>
<subdoc href="comm.tmml"/>
<subdoc href="comm_wire.tmml" />
<subdoc href="deleg_proc.tmml" />
<subdoc href="deleg_method.tmml" />
<subdoc href="control.tmml"/>
<subdoc href="fileutil.tmml"/>
<subdoc href="filetypes.tmml" />
<subdoc href="tcllib_interp.tmml" />
<subdoc href="mimetypes.tmml" />
<subdoc href="log.tmml"/>
<subdoc href="logger.tmml"/>
<subdoc href="loggerAppender.tmml" />
<subdoc href="loggerUtils.tmml" />
<subdoc href="multiplexer.tmml"/>
<subdoc href="snit.tmml" />
<subdoc href="snitfaq.tmml" />
<subdoc href="stooop.tmml"/>
<extref href="stooop_man.html" type="text/html"
	title = "stoop - Simple Tcl Only Object Oriented Programming" />
<extref href="switched.html" type="text/html"
	title = "switched - stooop switched class" />
<subdoc href="pluginmgr.tmml" />
<subdoc href="profiler.tmml"/>
<subdoc href="tie.tmml" />
<subdoc href="units.tmml" />
</division>

<division>
<title>Mathematics</title>
<subdoc href="bignum.tmml" />
<subdoc href="bigfloat.tmml" />
<subdoc href="constants.tmml" />
<subdoc href="statistics.tmml" />
<subdoc href="calculus.tmml"/>
<subdoc href="romberg.tmml" />
<subdoc href="linalg.tmml" />
<subdoc href="optimize.tmml"/>
<subdoc href="fourier.tmml"/>
<subdoc href="fuzzy.tmml"/>
<subdoc href="combinatorics.tmml"/>
<subdoc href="geometry.tmml"/>
<subdoc href="interpolate.tmml" />
<subdoc href="qcomplex.tmml" />
<subdoc href="polynomials.tmml" />
<subdoc href="rational_funcs.tmml" />
<subdoc href="special.tmml" />
<subdoc href="roman.tmml" />
<!-- Leave 'math' package out, it looks suspicious.
    <subdoc href="math.tmml"/>
-->
</division>

<division>
<title>Data structures</title>
<subdoc href="struct_list.tmml"/>
<subdoc href="struct_set.tmml"/>
<subdoc href="stack.tmml"/>
<subdoc href="queue.tmml"/>
<subdoc href="prioqueue.tmml"/>
<subdoc href="skiplist.tmml"/>
<subdoc href="struct_tree.tmml"/>
<subdoc href="graph.tmml"/>
<subdoc href="record.tmml"/>
<subdoc href="matrix.tmml"/>
<subdoc href="pool.tmml"/>
<subdoc href="report.tmml"/>
<subdoc href="treeql.tmml" />
<subdoc href="counter.tmml"/>
</division>

<division>
<title>Text processing</title>
<subdoc href="base64.tmml"/>
<subdoc href="base32.tmml"/>
<subdoc href="base32hex.tmml"/>
<subdoc href="base32core.tmml"/>
<subdoc href="yencode.tmml"/>
<subdoc href="uuencode.tmml"/>
<subdoc href="csv.tmml"/>
<subdoc href="ini.tmml"/>
<subdoc href="htmlparse.tmml"/>
<subdoc href="mime.tmml"/>
<extref href="mime-README.html" type="text/html"
    title="Tcl MIME - generates and parses MIME body parts" />
<subdoc href="textutil.tmml"/>
<subdoc href="bibtex.tmml" />
<subdoc href="rcs.tmml" />

</division>

<division>
<title>File formats</title>	<!-- OR: "graphics file formats" -->
<subdoc href="jpeg.tmml" />
<subdoc href="tiff.tmml"/>
<subdoc href="png.tmml" />
<subdoc href="tar.tmml" />
<subdoc href="exif.tmml" />
<extref href="exif-rfc.html" type="text/html"
    title="EXIF - extract and parse EXIF fields from digital images"/>
</division>

<division>
<title>Hashes, checksums, and encryption</title>
<subdoc href="aes.tmml" />
<subdoc href="blowfish.tmml" />
<subdoc href="cksum.tmml"/>
<subdoc href="crc16.tmml"/>
<subdoc href="crc32.tmml"/>
<subdoc href="des.tmml" />
<subdoc href="md4.tmml"/>
<subdoc href="md5.tmml"/>
<subdoc href="md5crypt.tmml"/>
<subdoc href="rc4.tmml" />
<subdoc href="ripemd160.tmml"/>
<subdoc href="ripemd128.tmml"/>
<subdoc href="sha1.tmml"/>
<subdoc href="otp.tmml" />	<!-- doesn't really fit here -->
<subdoc href="sum.tmml"/>
<subdoc href="soundex.tmml" />
<subdoc href="uuid.tmml" />	<!-- doesn't really fit here ... -->
</division>

<division>
<title>Documentation tools</title>
<subdoc href="mpexpand.tmml"/>
<subdoc href="doctools.tmml"/>
<subdoc href="doctoc_fmt.tmml" />
<subdoc href="doctools_api.tmml" />
<subdoc href="doctools_fmt.tmml" />
<subdoc href="docidx.tmml" />
<subdoc href="docidx_api.tmml" />
<subdoc href="docidx_fmt.tmml" />
<subdoc href="doctoc.tmml" />
<subdoc href="doctoc_api.tmml" />
<subdoc href="changelog.tmml" />
<subdoc href="cvs.tmml" />
<subdoc href="expander.tmml"/>
<subdoc href="docstrip.tmml" />
<subdoc href="docstrip_util.tmml" />
</division>

<division>
<title>Networking</title>

<subdoc href="asn.tmml" />
<subdoc href="autoproxy.tmml"/>
<subdoc href="bee.tmml" />
<subdoc href="ftp.tmml"/>
<extref href="ftp-docs/index.html" type="text/html" title="ftp - Client-side tcl implementation of the ftp protocol" />
<subdoc href="ftpd.tmml"/>
<subdoc href="ident.tmml"/>
<subdoc href="irc.tmml"/>
<subdoc href="ldap.tmml" />
<subdoc href="ldapx.tmml" />
<subdoc href="nntp.tmml"/>
<subdoc href="ntp_time.tmml"/>
<subdoc href="pop3.tmml"/>
<subdoc href="pop3d.tmml"/>
<subdoc href="pop3d_dbox.tmml" />
<subdoc href="pop3d_udb.tmml" />
<subdoc href="sasl.tmml" />
<subdoc href="smtp.tmml"/>
<subdoc href="smtpd.tmml"/>
<subdoc href="tcllib_dns.tmml"/>
<subdoc href="tcllib_ip.tmml" />
<subdoc href="uri.tmml"/>
</division>

<division>
<title>Terminal control</title>
<!-- from the "term" module -->
<subdoc href="term.tmml"/>
<subdoc href="receive.tmml"/>
<subdoc href="term_send.tmml"/>
<subdoc href="receive.tmml"/>
<subdoc href="term_bind.tmml"/>
<subdoc href="ipager.tmml"/>
<subdoc href="imenu.tmml"/>
<subdoc href="ansi_send.tmml"/>
<subdoc href="ansi_ctrlu.tmml"/>
<subdoc href="ansi_code.tmml"/>
<subdoc href="ansi_cmacros.tmml"/>
<subdoc href="ansi_cctrl.tmml"/>
<subdoc href="ansi_cattr.tmml"/>

</division>


<division>
<title>CGI programming</title>
<subdoc href="ncgi.tmml"/>
<subdoc href="json.tmml"/>
<subdoc href="html.tmml"/>
<subdoc href="javascript.tmml"/>
</division>

<division>
<title>Grammars and finite automata</title>
<subdoc href="fa.tmml" />
<subdoc href="faop.tmml" />
<subdoc href="dacceptor.tmml" />
<subdoc href="dexec.tmml" />
<subdoc href="peg.tmml" />
<subdoc href="peg_interp.tmml" />
<subdoc href="me_intro.tmml" />
<subdoc href="me_ast.tmml" />
<subdoc href="me_vm.tmml" />
<subdoc href="me_util.tmml" />
<subdoc href="me_tcl.tmml" />
<subdoc href="me_cpu.tmml" />
<subdoc href="me_cpucore.tmml" />
</division>

<division>
<title>TKLib</title>
<subdoc href="widget.tmml" />
<subdoc href="tooltip.tmml" />
<subdoc href="khim.tmml" />
<subdoc href="swaplist.tmml" />
<subdoc href="tklib_history.tmml" />
<subdoc href="tk_getString.tmml" />
<subdoc href="ctext.tmml" />
<subdoc href="plotchart.tmml" />
<subdoc href="pie.tmml" />
<subdoc href="pieboxlabeler.tmml" />
<subdoc href="pieperipherallabeler.tmml" />
<subdoc href="canvaslabel.tmml" />
<subdoc href="draw_diagram.tmml" />
<subdoc href="ico.tmml" />
<subdoc href="autoscroll.tmml" />
<subdoc href="cursor.tmml" />
<subdoc href="datefield.tmml" />
<subdoc href="ipentry.tmml" />
</division>

<division>
<title>Unfiled</title>
<subdoc href="nmea.tmml"/>

<division>
<title>Transfer module</title>
<subdoc href="connect.tmml"/>
<subdoc href="copyops.tmml"/>
<subdoc href="ddest.tmml"/>
<subdoc href="dsource.tmml"/>
<subdoc href="receiver.tmml"/>
<subdoc href="tqueue.tmml"/>
<subdoc href="transmitter.tmml"/>
</division>
</division>

</manual>

<!-- EOF -->
<manual package="Tcl" version="8.5">
<!--
    $Id: TCLMAN.XML,v 1.8 2006/04/08 20:58:49 jenglish Exp $
    Master index of Tcl manual pages
-->

<title>Tcl Reference Manual</title>
<head>
<link rel="homepage" href="http://tcl.sourceforge.net"/>
</head>


<division>
<title>General</title>
    <subdoc href="Tcl.xml"/>
    <subdoc href="tclvars.xml"/>
    <subdoc href="safe.xml"/>
    <subdoc href="library.xml"/>
    <subdoc href="filename.xml"/>
    <subdoc href="expr.xml"/>
    <subdoc href="mathfunc.xml"/>
    <subdoc href="tclsh.xml"/>
    <subdoc href="tcltest.xml"/>
</division>

<division>
<title>Tcl Built-In Commands</title>

    <division><title>String Handling</title>
	<subdoc href="string.xml"/>
	<subdoc href="subst.xml"/>
	<subdoc href="regexp.xml"/>
	<subdoc href="regsub.xml"/>
	<subdoc href="re_syntax.xml"/>
	<subdoc href="scan.xml"/>
	<subdoc href="format.xml"/>
	<subdoc href="binary.xml"/>
    </division>

    <division><title>List Handling</title>
	<subdoc href="list.xml"/>
	<subdoc href="split.xml"/>
	<subdoc href="join.xml"/>
	<subdoc href="concat.xml"/>
	<subdoc href="llength.xml"/>
	<subdoc href="lindex.xml"/>
	<subdoc href="lrange.xml"/>
	<subdoc href="linsert.xml"/>
	<subdoc href="lreplace.xml"/>
	<subdoc href="lsort.xml"/>
	<subdoc href="lsearch.xml"/>
	<subdoc href="lrepeat.xml"/>
	<subdoc href="dict.xml" />
    </division>

    <division><title>Control Constructs</title>
	<subdoc href="if.xml"/>
	<subdoc href="for.xml"/>
	<subdoc href="foreach.xml"/>
	<subdoc href="switch.xml"/>
	<subdoc href="case.xml"/>
	<subdoc href="while.xml"/>
	<subdoc href="continue.xml"/>
	<subdoc href="break.xml"/>
	<subdoc href="return.xml"/>
	<subdoc href="catch.xml"/>
	<subdoc href="error.xml"/>
	<subdoc href="eval.xml"/>
	<subdoc href="uplevel.xml"/>
	<subdoc href="apply.xml"/>
	<subdoc href="after.xml"/>
	<subdoc href="update.xml"/>
	<subdoc href="vwait.xml"/>
    </division>

    <division><title>Variables and Procedures</title>
	<subdoc href="proc.xml"/>
	<subdoc href="rename.xml"/>
	<subdoc href="set.xml"/>
	<subdoc href="unset.xml"/>
	<subdoc href="array.xml"/>
	<subdoc href="namespace.xml"/>
	<subdoc href="variable.xml"/>
	<subdoc href="upvar.xml"/>
	<subdoc href="global.xml"/>
	<subdoc href="trace.xml"/>
	<subdoc href="append.xml"/>
	<subdoc href="incr.xml"/>
	<subdoc href="lappend.xml"/>
	<subdoc href="lset.xml"/>
	<subdoc href="lassign.xml"/>
    </division>

    <division><title>Input/Output</title>
	<subdoc href="file.xml"/>
	<subdoc href="chan.xml"/>
	<subdoc href="open.xml"/>
	<subdoc href="close.xml"/>
	<subdoc href="socket.xml"/>
	<subdoc href="fconfigure.xml"/>
	<subdoc href="gets.xml"/>
	<subdoc href="puts.xml"/>
	<subdoc href="read.xml"/>
	<subdoc href="seek.xml"/>
	<subdoc href="tell.xml"/>
	<subdoc href="eof.xml"/>
	<subdoc href="flush.xml"/>
	<subdoc href="fblocked.xml"/>
	<subdoc href="fcopy.xml"/>
	<subdoc href="fileevent.xml"/>
	<subdoc href="refchan.xml"/>
    </division>

    <division><title>Packages and Source files</title>
	<subdoc href="source.xml"/>
	<subdoc href="load.xml"/>
	<subdoc href="unload.xml"/>
	<subdoc href="package.xml"/>
	<subdoc href="tm.xml"/>
	<subdoc href="packagens.xml"/>
	<subdoc href="pkgMkIndex.xml"/>
    </division>

    <division><title>Interpreter Routines</title>
	<subdoc href="info.xml"/>
	<subdoc href="interp.xml"/>
	<subdoc href="history.xml"/>
	<subdoc href="bgerror.xml"/>
	<subdoc href="unknown.xml"/>
	<subdoc href="memory.xml"/>
    </division>

    <division><title>Library Procedures</title>
	<subdoc href="http.xml"/>
	<subdoc href="encoding.xml"/>
	<subdoc href="msgcat.xml"/>
    </division>

    <division><title>System Related</title>
	<subdoc href="cd.xml"/>
	<subdoc href="pwd.xml"/>
	<subdoc href="clock.xml"/>
	<subdoc href="time.xml"/>
	<subdoc href="exec.xml"/>
	<subdoc href="glob.xml"/>
	<!-- put "glob" next to "exec" for people looking for "dir" -->
	<subdoc href="pid.xml"/>
	<subdoc href="exit.xml"/>
    </division>

    <division><title>Platform-specific</title>
	<subdoc href="registry.xml"/>
	<!-- Removed in 8.5: subdoc href="resource.xml" -->
	<subdoc href="dde.xml"/>
    </division>

</division>

<division>
<title>Tcl C Procedures</title><!-- "Tcl Library Procedures" -->

<division><title>Initialization</title>
    <subdoc href="Tcl_Main.xml"/>
    <subdoc href="AppInit.xml"/>
    <subdoc href="FindExec.xml"/> <!-- Put this near the beginning, people don't know about it -->
    <subdoc href="CrtInterp.xml"/>
    <subdoc href="CrtSlave.xml"/>
    <subdoc href="GetVersion.xml"/>
    <subdoc href="RegConfig.xml"/>
    <subdoc href="PkgRequire.xml"/>
    <subdoc href="StaticPkg.xml"/>
    <subdoc href="Init.xml"/>
    <subdoc href="CallDel.xml"/>
    <subdoc href="SourceRCFile.xml"/>
    <subdoc href="CExit.xml"/>			<!-- Source: Exit.3 -->
    <subdoc href="CInterp.xml"/>		<!-- Source: Interp.3 -->
    <subdoc href="InitStubs.xml"/>
</division>

<division><title>Utilities</title>
    <subdoc href="Alloc.xml"/>
    <subdoc href="Hash.xml"/>
    <subdoc href="DString.xml"/>
    <subdoc href="AssocData.xml"/>
    <subdoc href="Preserve.xml"/>
    <subdoc href="ToUpper.xml"/>
    <subdoc href="UniCharIsAlpha.xml"/>
    <subdoc href="CConcat.xml"/>		<!-- Source: Concat.3 -->
    <subdoc href="CRegExp.xml"/>		<!-- Source: RegExp.3 -->
    <subdoc href="SplitList.xml"/>
    <subdoc href="SplitPath.xml"/>
    <subdoc href="StrMatch.xml"/>
    <subdoc href="GetInt.xml"/>
    <subdoc href="PrintDbl.xml"/>
    <subdoc href="GetIndex.xml"/>
    <subdoc href="WrongNumArgs.xml"/>
    <subdoc href="Utf.xml"/>
    <subdoc href="CEncoding.xml"/>		<!-- Source: Encoding.3 -->
    <subdoc href="TCL_MEM_DEBUG.xml"/>
    <subdoc href="DumpActiveMemory.xml"/>
</division>

<division><title>Input/Output</title>
    <subdoc href="ChnlStack.xml"/>
    <subdoc href="CrtChannel.xml"/>
    <subdoc href="CrtChnlHdlr.xml"/>
    <subdoc href="CrtCloseHdlr.xml"/>
    <subdoc href="CrtFileHdlr.xml"/>
    <subdoc href="SetChanErr.xml"/>
    <subdoc href="GetOpnFl.xml"/>
    <subdoc href="StdChannels.xml"/>
    <subdoc href="GetStdChan.xml"/>
    <subdoc href="OpenFileChnl.xml"/>
    <subdoc href="OpenTcp.xml"/>
</division>

<division><title>The Event Loop</title>
    <subdoc href="Async.xml"/>
    <subdoc href="DoOneEvent.xml"/>
    <subdoc href="DoWhenIdle.xml"/>
    <subdoc href="Notifier.xml"/>
    <subdoc href="Sleep.xml"/>
    <subdoc href="CrtTimerHdlr.xml"/>
    <subdoc href="Thread.xml"/>
</division>

<division><title>Objects</title>
    <subdoc href="Object.xml"/>
    <subdoc href="ObjectType.xml"/>
    <subdoc href="BoolObj.xml"/>
    <subdoc href="ByteArrObj.xml"/>
    <subdoc href="IntObj.xml"/>
    <subdoc href="DoubleObj.xml"/>
    <subdoc href="ListObj.xml"/>
    <subdoc href="StringObj.xml"/>
    <subdoc href="DictObj.xml"/>
</division>

<division><title>Invoking the Interpreter</title> <!-- Calling Tcl from C -->
    <subdoc href="CEval.xml"/>			<!-- Source: Eval.3 -->
    <subdoc href="SubstObj.xml"/>
    <subdoc href="ExprLongObj.xml"/>
    <subdoc href="ExprLong.xml"/>
    <subdoc href="ParseCmd.xml"/>
    <subdoc href="Backslash.xml"/>
    <subdoc href="CmdCmplt.xml"/>
    <subdoc href="RecEvalObj.xml"/>
    <subdoc href="RecordEval.xml"/>
    <subdoc href="SetRecLmt.xml"/>
    <subdoc href="Limit.xml"/>
    <subdoc href="AllowExc.xml"/>
</division>

<division><title>Commands</title> <!-- Calling C from Tcl -->
    <subdoc href="CrtObjCmd.xml"/>
    <subdoc href="Ensemble.xml"/>
    <subdoc href="CrtCommand.xml"/>
    <subdoc href="CrtMathFnc.xml"/>
    <subdoc href="SetResult.xml"/>
    <subdoc href="SetErrno.xml"/>
    <subdoc href="SaveResult.xml"/>
    <subdoc href="AddErrInfo.xml"/>
    <subdoc href="BackgdErr.xml"/>
    <subdoc href="Panic.xml"/>
</division>

<division><title>Variables</title>
    <subdoc href="SetVar.xml"/>
    <subdoc href="LinkVar.xml"/>
    <subdoc href="TraceVar.xml"/>
    <subdoc href="CUpVar.xml"/>		<!-- Source: UpVar.3 -->
    <subdoc href="CrtTrace.xml"/>
    <subdoc href="TraceCmd.xml"/>
    <subdoc href="Namespace.xml"/>	<!-- doesn't really fit here ... -->
</division>

<division><title>Operating System Interface</title>
    <subdoc href="Environment.xml"/>
    <subdoc href="FileSystem.xml"/>
    <subdoc href="GetTime.xml"/>
    <subdoc href="GetCwd.xml"/>
    <subdoc href="GetHostName.xml"/>
    <subdoc href="Translate.xml"/>
    <subdoc href="Access.xml"/>
    <subdoc href="DetachPids.xml"/>
    <subdoc href="Macintosh.xml"/>
    <subdoc href="Signal.xml"/>
</division>

</division>

</manual>
<manpage cat="syscmd" id="tclsh" title="tclsh">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tclsh.1,v 1.10 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="tclsh" section="1" date="" source="Tcl" manual="Tcl Applications" ?>
<namesection>
<name>tclsh</name>
<desc>Simple shell containing Tcl interpreter</desc>
</namesection>
<synopsis>
<syntax>
<b>tclsh</b> ?-encoding <m>name</m>? ?<m>fileName arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>Tclsh</b> is a shell-like application that reads Tcl commands
from its standard input or from a file and evaluates them.
If invoked with no arguments then it runs interactively, reading
Tcl commands from standard input and printing command results and
error messages to standard output.
It runs until the <cmd>exit</cmd> command is invoked or until it
reaches end-of-file on its standard input.
If there exists a file <b>.tclshrc</b> (or <b>tclshrc.tcl</b> on
the Windows platforms) in the home directory of
the user, interactive <b>tclsh</b> evaluates the file as a Tcl script
just before reading the first command from standard input.

</p>
</section>
<section>
<title>SCRIPT FILES</title>
<p><new version="8.5">If <b>tclsh</b> is invoked with arguments then the first few arguments
specify the name of a script file, and, optionally, the encoding of
the text data stored in that script file. 
</new>Any additional arguments
are made available to the script as variables (see below).
Instead of reading commands from standard input <b>tclsh</b> will
read Tcl commands from the named file;  <b>tclsh</b> will exit
when it reaches the end of the file.
The end of the file may be marked either by the physical end of
the medium, or by the character, '\032' ('\u001a', control-Z).
If this character is present in the file, the <b>tclsh</b> application
will read text up to but not including the character.  An application
that requires this character in the file may safely encode it as
``\032'', ``\x1a'', or ``\u001a''; or may generate it by use of commands 
such as <b cat="AMBIGUOUS ambiguous cmd">format</b> or <b cat="AMBIGUOUS ambiguous cmd">binary</b>.
There is no automatic evaluation of <b>.tclshrc</b> when the name
of a script file is presented on the <b>tclsh</b> command
line, but the script file can always <b cat="AMBIGUOUS ambiguous cmd">source</b> it if desired.
</p>
<p>If you create a Tcl script in a file whose first line is
</p>
<example>
<b>#!/usr/local/bin/tclsh</b>
</example>
<p>then you can invoke the script file directly from your shell if
you mark the file as executable.
This assumes that <b>tclsh</b> has been installed in the default
location in /usr/local/bin;  if it's installed somewhere else
then you'll have to modify the above line to match.
Many UNIX systems do not allow the <b>#!</b> line to exceed about
30 characters in length, so be sure that the <b>tclsh</b>
executable can be accessed with a short file name.
</p>
<p>An even better approach is to start your script files with the
following three lines:
</p>
<example>
<b>#!/bin/sh
# the next line restarts using tclsh \
exec tclsh "$0" "$@"</b>
</example>
<p>This approach has three advantages over the approach in the previous
paragraph.  First, the location of the <b>tclsh</b> binary doesn't have
to be hard-wired into the script:  it can be anywhere in your shell
search path.  Second, it gets around the 30-character file name limit
in the previous approach.
Third, this approach will work even if <b>tclsh</b> is
itself a shell script (this is done on some systems in order to
handle multiple architectures or operating systems:  the <b>tclsh</b>
script selects one of several binaries to run).  The three lines
cause both <b>sh</b> and <b>tclsh</b> to process the script, but the
<cmd>exec</cmd> is only executed by <b>sh</b>.
<b>sh</b> processes the script first;  it treats the second
line as a comment and executes the third line.
The <cmd>exec</cmd> statement cause the shell to stop processing and
instead to start up <b>tclsh</b> to reprocess the entire script.
When <b>tclsh</b> starts up, it treats all three lines as comments,
since the backslash at the end of the second line causes the third
line to be treated as part of the comment on the second line.
</p>
<p>You should note that it is also common practice to install tclsh with
its version number as part of the name.  This has the advantage of
allowing multiple versions of Tcl to exist on the same system at once,
but also the disadvantage of making it harder to write scripts that
start up uniformly across different versions of Tcl.

</p>
</section>
<section>
<title>VARIABLES</title>
<p><b>Tclsh</b> sets the following Tcl variables:
</p>
<dl cat="variable" scope="global">
<dle>
<dt><b>argc</b></dt>
<dd>Contains a count of the number of <i>arg</i> arguments (0 if none),
not including the name of the script file.
</dd>
</dle>
<dle>
<dt><b>argv</b></dt>
<dd>Contains a Tcl list whose elements are the <i>arg</i> arguments,
in order, or an empty string if there are no <i>arg</i> arguments.
</dd>
</dle>
<dle>
<dt><b>argv0</b></dt>
<dd>Contains <i>fileName</i> if it was specified.
Otherwise, contains the name by which <b>tclsh</b> was invoked.
</dd>
</dle>
<dle>
<dt><b>tcl_interactive</b></dt>
<dd>Contains 1 if <b>tclsh</b> is running interactively (no
<i>fileName</i> was specified and standard input is a terminal-like
device), 0 otherwise.

</dd>
</dle>
</dl>
</section>
<section>
<title>PROMPTS</title>
<p>When <b>tclsh</b> is invoked interactively it normally prompts for each
command with ``<b>%</b> ''.  You can change the prompt by setting the
variables <b>tcl_prompt1</b> and <b>tcl_prompt2</b>.  If variable
<b>tcl_prompt1</b> exists then it must consist of a Tcl script
to output a prompt;  instead of outputting a prompt <b>tclsh</b>
will evaluate the script in <b>tcl_prompt1</b>.
The variable <b>tcl_prompt2</b> is used in a similar way when
a newline is typed but the current command isn't yet complete;
if <b>tcl_prompt2</b> isn't set then no prompt is output for
incomplete commands.

</p>
</section>
<section>
<title>STANDARD CHANNELS</title>
<p>See <fun>Tcl_StandardChannels</fun> for more explanations.

</p>
</section>
<seealso>
<ref>encoding(n)</ref>
<ref>fconfigure(n)</ref>
<ref>tclvars(n)</ref>
</seealso>
<keywords>
<keyword>argument</keyword>
<keyword>interpreter</keyword>
<keyword>prompt</keyword>
<keyword>script file</keyword>
<keyword>shell</keyword>
</keywords>
</manpage>
<manpage cat="package" id="tcltest" version="2.3" title="tcltest">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
     Copyright (c) 1998-1999 Scriptics Corporation
     Copyright (c) 2000 Ajuba Solutions
     Contributions from Don Porter, NIST, 2002. (not subject to US copyright)
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tcltest.n,v 1.47 2007/02/20 17:54:02 dgp Exp $
 -->
<?TROFF.TH title="tcltest" section="n" date="2.3" source="tcltest" manual="Tcl Bundled Packages" ?>
<namesection>
<name>tcltest</name>
<desc>Test harness support code and utilities</desc>
</namesection>
<synopsis>
<syntax id="synopsis">
<b>package require tcltest ?2.3?</b>

<b>tcltest::test</b> <m>name description ?option value ...?</m>
<b>tcltest::test</b> <m>name description ?constraints? body result</m>

<b>tcltest::loadTestedCommands</b>
<b>tcltest::makeDirectory</b> <m>name ?directory?</m>
<b>tcltest::removeDirectory</b> <m>name ?directory?</m>
<b>tcltest::makeFile</b> <m>contents name ?directory?</m>
<b>tcltest::removeFile</b> <m>name ?directory?</m>
<b>tcltest::viewFile</b> <m>name ?directory?</m>
<b>tcltest::cleanupTests</b> <m>?runningMultipleTests?</m>
<b>tcltest::runAllTests</b>

<b>tcltest::configure</b>
<b>tcltest::configure</b> <m>option</m>
<b>tcltest::configure</b> <m>option value ?option value ...?</m>
<b>tcltest::customMatch</b> <m>mode command</m>
<b>tcltest::testConstraint</b> <m>constraint ?value?</m>
<b>tcltest::outputChannel</b> <m>?channelID?</m>
<b>tcltest::errorChannel</b> <m>?channelID?</m>
<b>tcltest::interpreter</b> <m>?interp?</m>

<b>tcltest::debug</b> <m>?level?</m>
<b>tcltest::errorFile</b> <m>?filename?</m>
<b>tcltest::limitConstraints</b> <m>?boolean?</m>
<b>tcltest::loadFile</b> <m>?filename?</m>
<b>tcltest::loadScript</b> <m>?script?</m>
<b>tcltest::match</b> <m>?patternList?</m>
<b>tcltest::matchDirectories</b> <m>?patternList?</m>
<b>tcltest::matchFiles</b> <m>?patternList?</m>
<b>tcltest::outputFile</b> <m>?filename?</m>
<b>tcltest::preserveCore</b> <m>?level?</m>
<b>tcltest::singleProcess</b> <m>?boolean?</m>
<b>tcltest::skip</b> <m>?patternList?</m>
<b>tcltest::skipDirectories</b> <m>?patternList?</m>
<b>tcltest::skipFiles</b> <m>?patternList?</m>
<b>tcltest::temporaryDirectory</b> <m>?directory?</m>
<b>tcltest::testsDirectory</b> <m>?directory?</m>
<b>tcltest::verbose</b> <m>?level?</m>

<b>tcltest::test</b> <m>name description optionList</m>
<b>tcltest::bytestring</b> <m>string</m>
<b>tcltest::normalizeMsg</b> <m>msg</m>
<b>tcltest::normalizePath</b> <m>pathVar</m>
<b>tcltest::workingDirectory</b> <m>?dir?</m>
</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>tcltest</b> package provides several utility commands useful
in the construction of test suites for code instrumented to be
run by evaluation of Tcl commands.  Notably the built-in commands
of the Tcl library itself are tested by a test suite using the
tcltest package.
</p>
<p>All the commands provided by the <b>tcltest</b> package are defined
in and exported from the <b>::tcltest</b> namespace, as indicated in
the <ref refid="synopsis">SYNOPSIS</ref> above.  In the following sections, all commands
will be described by their simple names, in the interest of brevity.
</p>
<p>The central command of <b>tcltest</b> is [<b>test</b>] that defines
and runs a test.  Testing with [<b>test</b>] involves evaluation
of a Tcl script and comparing the result to an expected result, as
configured and controlled by a number of options.  Several other
commands provided by <b>tcltest</b> govern the configuration of
[<b>test</b>] and the collection of many [<b>test</b>] commands into
test suites.
</p>
<p>See <ref refid="creating-test-suites-with-tcltest">CREATING TEST SUITES WITH TCLTEST</ref> below for an extended example
of how to use the commands of <b>tcltest</b> to produce test suites
for your Tcl-enabled code.
</p>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><b>test</b> <m>name description ?option value ...?</m></dt>
<dd>Defines and possibly runs a test with the name <i>name</i> and
description <i>description</i>.  The name and description of a test
are used in messages reported by [<b>test</b>] during the
test, as configured by the options of <b>tcltest</b>.  The
remaining <i>option value</i> arguments to [<b>test</b>]
define the test, including the scripts to run, the conditions
under which to run them, the expected result, and the means
by which the expected and actual results should be compared.
See <ref refid="tests">TESTS</ref> below for a complete description of the valid
options and how they define a test.  The [<b>test</b>] command
returns an empty string.  
</dd>
</dle>
<dle>
<dt><b>test</b> <m>name description ?constraints? body result</m></dt>
<dd>This form of [<b>test</b>] is provided to support test suites written
for version 1 of the <b>tcltest</b> package, and also a simpler
interface for a common usage.  It is the same as
[<b>test</b> <i>name description</i> <b>-constraints</b> <i>constraints</i> <b>-body</b>
<i>body</i> <b>-result</b> <i>result</i>].  All other options to [<b>test</b>]
take their default values.  When <i>constraints</i> is omitted, this
form of [<b>test</b>] can be distinguished from the first because
all <i>option</i>s begin with ``-''.
</dd>
</dle>
<dle>
<dt><b>loadTestedCommands</b></dt>
<dd>Evaluates in the caller's context the script specified by 
[<b>configure -load</b>] or [<b>configure -loadfile</b>].
Returns the result of that script evaluation, including any error
raised by the script.  Use this command and the related
configuration options to provide the commands to be tested to
the interpreter running the test suite.
</dd>
</dle>
<dle>
<dt><b>makeFile</b> <m>contents name ?directory?</m></dt>
<dd>Creates a file named <i>name</i> relative to
directory <i>directory</i> and write <i>contents</i>
to that file using the encoding [<b>encoding system</b>].
If <i>contents</i> does not end with a newline, a newline
will be appended so that the file named <i>name</i>
does end with a newline.  Because the system encoding is used,
this command is only suitable for making text files.
The file will be removed by the next evaluation
of [<b>cleanupTests</b>], unless it is removed by
[<b>removeFile</b>] first.  The default value of
<i>directory</i> is the directory [<b>configure -tmpdir</b>].
Returns the full path of the file created.  Use this command
to create any text file required by a test with contents as needed.
</dd>
</dle>
<dle>
<dt><b>removeFile</b> <m>name ?directory?</m></dt>
<dd>Forces the file referenced by <i>name</i> to be removed.  This file name
should be relative to <i>directory</i>.   The default value of
<i>directory</i> is the directory [<b>configure -tmpdir</b>].
Returns an empty string.  Use this command to delete files
created by [<b>makeFile</b>].  
</dd>
</dle>
<dle>
<dt><b>makeDirectory</b> <m>name ?directory?</m></dt>
<dd>Creates a directory named <i>name</i> relative to directory <i>directory</i>.
The directory will be removed by the next evaluation of [<b>cleanupTests</b>],
unless it is removed by [<b>removeDirectory</b>] first.
The default value of <i>directory</i> is the directory
[<b>configure -tmpdir</b>].
Returns the full path of the directory created.  Use this command
to create any directories that are required to exist by a test.
</dd>
</dle>
<dle>
<dt><b>removeDirectory</b> <m>name ?directory?</m></dt>
<dd>Forces the directory referenced by <i>name</i> to be removed. This
directory should be relative to <i>directory</i>.
The default value of <i>directory</i> is the directory
[<b>configure -tmpdir</b>].
Returns an empty string.  Use this command to delete any directories
created by [<b>makeDirectory</b>].  
</dd>
</dle>
<dle>
<dt><b>viewFile</b> <m>file ?directory?</m></dt>
<dd>Returns the contents of <i>file</i>, except for any
final newline, just as [<b>read -nonewline</b>] would return.
This file name should be relative to <i>directory</i>.   
The default value of <i>directory</i> is the directory
[<b>configure -tmpdir</b>].  Use this command
as a convenient way to turn the contents of a file generated
by a test into the result of that test for matching against
an expected result.  The contents of the file are read using
the system encoding, so its usefulness is limited to text
files.
</dd>
</dle>
<dle>
<dt><b>cleanupTests</b></dt>
<dd>Intended to clean up and summarize after several tests have been
run.  Typically called once per test file, at the end of the file
after all tests have been completed.  For best effectiveness, be
sure that the [<b>cleanupTests</b>] is evaluated even if an error
occurs earlier in the test file evaluation.  
<p>Prints statistics about the tests run and removes files that were
created by [<b>makeDirectory</b>] and [<b>makeFile</b>] since the
last [<b>cleanupTests</b>].  Names of files and directories 
in the directory [<b>configure -tmpdir</b>] created since
the last [<b>cleanupTests</b>], but not created by
[<b>makeFile</b>] or [<b>makeDirectory</b>] are printed
to [<b>outputChannel</b>].  This command also restores the original
shell environment, as described by the ::env
array. Returns an empty string.
</p></dd>
</dle>
<dle>
<dt><b>runAllTests</b></dt>
<dd>This is a master command meant to run an entire suite of tests,
spanning multiple files and/or directories, as governed by
the configurable options of <b>tcltest</b>.  See <ref refid="running-all-tests">RUNNING ALL TESTS</ref>
below for a complete description of the many variations possible
with [<b>runAllTests</b>].
</dd>
</dle>
</dl>
</section>
<section>
<title>CONFIGURATION COMMANDS</title>
<dl>
<dle>
<dt><b>configure</b></dt>
<dd>Returns the list of configurable options supported by <b>tcltest</b>.
See <ref refid="configurable-options">CONFIGURABLE OPTIONS</ref> below for the full list of options,
their valid values, and their effect on <b>tcltest</b> operations.
</dd>
</dle>
<dle>
<dt><b>configure</b> <m>option</m></dt>
<dd>Returns the current value of the supported configurable option <i>option</i>.
Raises an error if <i>option</i> is not a supported configurable option.
</dd>
</dle>
<dle>
<dt><b>configure</b> <m>option value ?option value ...?</m></dt>
<dd>Sets the value of each configurable option <i>option</i> to the
corresponding value <i>value</i>, in order.  Raises an error if
an <i>option</i> is not a supported configurable option, or if
<i>value</i> is not a valid value for the corresponding <i>option</i>,
or if a <i>value</i> is not provided.  When an error is raised, the
operation of [<b>configure</b>] is halted, and subsequent <i>option value</i>
arguments are not processed.
<p>If the environment variable <b>::env(TCLTEST_OPTIONS)</b> exists when
the <b>tcltest</b> package is loaded (by [<b>package require tcltest</b>])
then its value is taken as a list of arguments to pass to [<b>configure</b>].
This allows the default values of the configuration options to be
set by the environment.
</p></dd>
</dle>
<dle>
<dt><b>customMatch</b> <m>mode script</m></dt>
<dd>Registers <i>mode</i> as a new legal value of the <b>-match</b> option
to [<b>test</b>].  When the <b>-match</b> <i>mode</i> option is
passed to [<b>test</b>], the script <i>script</i> will be evaluated
to compare the actual result of evaluating the body of the test
to the expected result.
To perform the match, the <i>script</i> is completed with two additional
words, the expected result, and the actual result, and the completed script
is evaluated in the global namespace.
The completed script is expected to return a boolean value indicating
whether or not the results match.  The built-in matching modes of
[<b>test</b>] are <b>exact</b>, <cmd>glob</cmd>, and <cmd>regexp</cmd>.
</dd>
</dle>
<dle>
<dt><b>testConstraint</b> <m>constraint ?boolean?</m></dt>
<dd>Sets or returns the boolean value associated with the named <i>constraint</i>.
See <ref refid="test-constraints">TEST CONSTRAINTS</ref> below for more information.
</dd>
</dle>
<dle>
<dt><b>interpreter</b> <m>?executableName?</m></dt>
<dd>Sets or returns the name of the executable to be [<cmd>exec</cmd>]ed by
[<b>runAllTests</b>] to run each test file when
[<b>configure -singleproc</b>] is false.
The default value for [<b>interpreter</b>] is the name of the
currently running program as returned by [<b>info nameofexecutable</b>].
</dd>
</dle>
<dle>
<dt><b>outputChannel</b> <m>?channelID?</m></dt>
<dd>Sets or returns the output channel ID.  This defaults to stdout.
Any test that prints test related output should send
that output to [<b>outputChannel</b>] rather than letting
that output default to stdout.
</dd>
</dle>
<dle>
<dt><b>errorChannel</b> <m>?channelID?</m></dt>
<dd>Sets or returns the error channel ID.  This defaults to stderr.
Any test that prints error messages should send
that output to [<b>errorChannel</b>] rather than printing
directly to stderr.
</dd>
</dle>
</dl>
</section>
<section>
<title>SHORTCUT COMMANDS</title>
<dl>
<dle>
<dt><b>debug</b> <m>?level?</m></dt>
<dd>Same as [<b>configure -debug</b> <i>?level?</i>].
</dd>
</dle>
<dle>
<dt><b>errorFile</b> <m>?filename?</m></dt>
<dd>Same as [<b>configure -errfile</b> <i>?filename?</i>].
</dd>
</dle>
<dle>
<dt><b>limitConstraints</b> <m>?boolean?</m></dt>
<dd>Same as [<b>configure -limitconstraints</b> <i>?boolean?</i>].
</dd>
</dle>
<dle>
<dt><b>loadFile</b> <m>?filename?</m></dt>
<dd>Same as [<b>configure -loadfile</b> <i>?filename?</i>].
</dd>
</dle>
<dle>
<dt><b>loadScript</b> <m>?script?</m></dt>
<dd>Same as [<b>configure -load</b> <i>?script?</i>].
</dd>
</dle>
<dle>
<dt><b>match</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -match</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>matchDirectories</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -relateddir</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>matchFiles</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -file</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>outputFile</b> <m>?filename?</m></dt>
<dd>Same as [<b>configure -outfile</b> <i>?filename?</i>].
</dd>
</dle>
<dle>
<dt><b>preserveCore</b> <m>?level?</m></dt>
<dd>Same as [<b>configure -preservecore</b> <i>?level?</i>].
</dd>
</dle>
<dle>
<dt><b>singleProcess</b> <m>?boolean?</m></dt>
<dd>Same as [<b>configure -singleproc</b> <i>?boolean?</i>].
</dd>
</dle>
<dle>
<dt><b>skip</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -skip</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>skipDirectories</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -asidefromdir</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>skipFiles</b> <m>?patternList?</m></dt>
<dd>Same as [<b>configure -notfile</b> <i>?patternList?</i>].
</dd>
</dle>
<dle>
<dt><b>temporaryDirectory</b> <m>?directory?</m></dt>
<dd>Same as [<b>configure -tmpdir</b> <i>?directory?</i>].
</dd>
</dle>
<dle>
<dt><b>testsDirectory</b> <m>?directory?</m></dt>
<dd>Same as [<b>configure -testdir</b> <i>?directory?</i>].
</dd>
</dle>
<dle>
<dt><b>verbose</b> <m>?level?</m></dt>
<dd>Same as [<b>configure -verbose</b> <i>?level?</i>].
</dd>
</dle>
</dl>
</section>
<section>
<title>OTHER COMMANDS</title>
<p>The remaining commands provided by <b>tcltest</b> have better
alternatives provided by <b>tcltest</b> or <b>Tcl</b> itself.  They
are retained to support existing test suites, but should be avoided
in new code.
</p>
<dl>
<dle>
<dt><b>test</b> <m>name description optionList</m></dt>
<dd>This form of [<b>test</b>] was provided to enable passing many
options spanning several lines to [<b>test</b>] as a single
argument quoted by braces, rather than needing to backslash quote
the newlines between arguments to [<b>test</b>].  The <i>optionList</i>
argument is expected to be a list with an even number of elements
representing <i>option</i> and <i>value</i> arguments to pass
to [<b>test</b>].  However, these values are not passed directly, as
in the alternate forms of [<cmd>switch</cmd>].  Instead, this form makes
an unfortunate attempt to overthrow Tcl's substitution rules by
performing substitutions on some of the list elements as an attempt to
implement a ``do what I mean'' interpretation of a brace-enclosed
``block''.  The result is nearly impossible to document clearly, and
for that reason this form is not recommended.  See the examples in
<ref refid="creating-test-suites-with-tcltest">CREATING TEST SUITES WITH TCLTEST</ref> below to see that this
form is really not necessary to avoid backslash-quoted newlines.
If you insist on using this form, examine
the source code of <b>tcltest</b> if you want to know the substitution
details, or just enclose the third through last argument
to [<b>test</b>] in braces and hope for the best.
</dd>
</dle>
<dle>
<dt><b>workingDirectory</b> <m>?directoryName?</m></dt>
<dd>Sets or returns the current working directory when the test suite is
running.  The default value for workingDirectory is the directory in
which the test suite was launched.  The Tcl commands [<cmd>cd</cmd>] and
[<cmd>pwd</cmd>] are sufficient replacements.
</dd>
</dle>
<dle>
<dt><b>normalizeMsg</b> <m>msg</m></dt>
<dd>Returns the result of removing the ``extra'' newlines from <i>msg</i>,
where ``extra'' is rather imprecise.  Tcl offers plenty of string
processing commands to modify strings as you wish, and
[<b>customMatch</b>] allows flexible matching of actual and expected
results.
</dd>
</dle>
<dle>
<dt><b>normalizePath</b> <m>pathVar</m></dt>
<dd>Resolves symlinks in a path, thus creating a path without internal
redirection.  It is assumed that <i>pathVar</i> is absolute.
<i>pathVar</i> is modified in place.  The Tcl command [<b>file normalize</b>]
is a sufficient replacement.
</dd>
</dle>
<dle>
<dt><b>bytestring</b> <m>string</m></dt>
<dd>Construct a string that consists of the requested sequence of bytes,
as opposed to a string of properly formed UTF-8 characters using the
value supplied in <i>string</i>.  This allows the tester to create
denormalized or improperly formed strings to pass to C procedures that
are supposed to accept strings with embedded NULL types and confirm
that a string result has a certain pattern of bytes.  This is
exactly equivalent to the Tcl command [<b>encoding convertfrom identity</b>].
</dd>
</dle>
</dl>
</section>
<section id="tests">
<title>TESTS</title>
<p>The [<b>test</b>] command is the heart of the <b>tcltest</b> package.
Its essential function is to evaluate a Tcl script and compare
the result with an expected result.  The options of [<b>test</b>]
define the test script, the environment in which to evaluate it,
the expected result, and how the compare the actual result to
the expected result.  Some configuration options of <b>tcltest</b>
also influence how [<b>test</b>] operates.
</p>
<p>The valid options for [<b>test</b>] are summarized:
</p>
<example>
<?TABSTOPS 0.8i?><b>test</b> <i>name</i> <i>description</i>
	?-constraints <i>keywordList|expression</i>?
	?-setup <i>setupScript</i>?
	?-body <i>testScript</i>?
	?-cleanup <i>cleanupScript</i>?
	?-result <i>expectedAnswer</i>?
	?-output <i>expectedOutput</i>?
	?-errorOutput <i>expectedError</i>?
	?-returnCodes <i>codeList</i>?
	?-match <i>mode</i>?
</example>
<p>The <i>name</i> may be any string.  It is conventional to choose
a <i>name</i> according to the pattern:
</p>
<example>
<i>target</i>-<i>majorNum</i>.<i>minorNum</i>
</example>
<p>For white-box (regression) tests, the target should be the name of the
C function or Tcl procedure being tested.  For black-box tests, the
target should be the name of the feature being tested.  Some conventions
call for the names of black-box tests to have the suffix <b>_bb</b>.
Related tests should share a major number.  As a test suite evolves,
it is best to have the same test name continue to correspond to the
same test, so that it remains meaningful to say things like ``Test
foo-1.3 passed in all releases up to 3.4, but began failing in
release 3.5.''
</p>
<p>During evaluation of [<b>test</b>], the <i>name</i> will be compared
to the lists of string matching patterns returned by
[<b>configure -match</b>], and [<b>configure -skip</b>].  The test
will be run only if <i>name</i> matches any of the patterns from
[<b>configure -match</b>] and matches none of the patterns
from [<b>configure -skip</b>].
</p>
<p>The <i>description</i> should be a short textual description of the
test.  The <i>description</i> is included in output produced by the
test, typically test failure messages.  Good <i>description</i> values
should briefly explain the purpose of the test to users of a test suite.
The name of a Tcl or C function being tested should be included in the
description for regression tests.  If the test case exists to reproduce
a bug, include the bug ID in the description. 
</p>
<p>Valid attributes and associated values are:
</p>
<dl>
<dle>
<dt><b>-constraints</b> <m>keywordList|expression</m></dt>
<dd>The optional <b>-constraints</b> attribute can be list of one or more
keywords or an expression.  If the <b>-constraints</b> value is a list of
keywords, each of these keywords should be the name of a constraint
defined by a call to [<b>testConstraint</b>].  If any of the listed
constraints is false or does not exist, the test is skipped.  If the
<b>-constraints</b> value is an expression, that expression
is evaluated. If the expression evaluates to true, then the test is run.
Note that the expression form of <b>-constraints</b> may interfere with the
operation of [<b>configure -constraints</b>] and
[<b>configure -limitconstraints</b>], and is not recommended.
Appropriate constraints should be added to any tests that should
not always be run.  That is, conditional evaluation of a test
should be accomplished by the <b>-constraints</b> option, not by
conditional evaluation of [<b>test</b>].  In that way, the same
number of tests are always reported by the test suite, though
the number skipped may change based on the testing environment.
The default value is an empty list.  
See <ref refid="test-constraints">TEST CONSTRAINTS</ref> below for a list of built-in constraints 
and information on how to add your own constraints.
</dd>
</dle>
<dle>
<dt><b>-setup</b> <m>script</m></dt>
<dd>The optional <b>-setup</b> attribute indicates a <i>script</i> that will be run
before the script indicated by the <b>-body</b> attribute.  If evaluation
of <i>script</i> raises an error, the test will fail.  The default value
is an empty script.
</dd>
</dle>
<dle>
<dt><b>-body</b> <m>script</m></dt>
<dd>The <b>-body</b> attribute indicates the <i>script</i> to run to carry out the 
test.  It must return a result that can be checked for correctness.
If evaluation of <i>script</i> raises an error, the test will fail.
The default value is an empty script.
</dd>
</dle>
<dle>
<dt><b>-cleanup</b> <m>script</m></dt>
<dd>The optional <b>-cleanup</b> attribute indicates a <i>script</i> that will be
run after the script indicated by the <b>-body</b> attribute.
If evaluation of <i>script</i> raises an error, the test will fail.
The default value is an empty script.
</dd>
</dle>
<dle>
<dt><b>-match</b> <m>mode</m></dt>
<dd>The <b>-match</b> attribute determines how expected answers supplied by
<b>-result</b>, <b>-output</b>, and <b>-errorOutput</b> are compared.  Valid
values for <i>mode</i> are <cmd>regexp</cmd>, <cmd>glob</cmd>, <b>exact</b>, and
any value registered by a prior call to [<b>customMatch</b>].  The default
value is <b>exact</b>.
</dd>
</dle>
<dle>
<dt><b>-result</b> <m>expectedValue</m></dt>
<dd>The <b>-result</b> attribute supplies the <i>expectedValue</i> against which
the return value from script will be compared. The default value is
an empty string.
</dd>
</dle>
<dle>
<dt><b>-output</b> <m>expectedValue</m></dt>
<dd>The <b>-output</b> attribute supplies the <i>expectedValue</i> against which
any output sent to <b>stdout</b> or [<b>outputChannel</b>] during evaluation
of the script(s) will be compared.  Note that only output printed using
[<b>::puts</b>] is used for comparison.  If <b>-output</b> is not specified,
output sent to <b>stdout</b> and [<b>outputChannel</b>] is not processed for
comparison.
</dd>
</dle>
<dle>
<dt><b>-errorOutput</b> <m>expectedValue</m></dt>
<dd>The <b>-errorOutput</b> attribute supplies the <i>expectedValue</i> against
which any output sent to <b>stderr</b> or [<b>errorChannel</b>] during 
evaluation of the script(s) will be compared. Note that only output
printed using [<b>::puts</b>] is used for comparison.  If <b>-errorOutput</b>
is not specified, output sent to <b>stderr</b> and [<b>errorChannel</b>] is
not processed for comparison.
</dd>
</dle>
<dle>
<dt><b>-returnCodes</b> <m>expectedCodeList</m></dt>
<dd>The optional <b>-returnCodes</b> attribute supplies <i>expectedCodeList</i>,
a list of return codes that may be accepted from evaluation of the
<b>-body</b> script.  If evaluation of the <b>-body</b> script returns
a code not in the <i>expectedCodeList</i>, the test fails.  All
return codes known to [<cmd>return</cmd>], in both numeric and symbolic
form, including extended return codes, are acceptable elements in
the <i>expectedCodeList</i>.  Default value is <b>{ok return}</b>.
</dd>
</dle>
</dl>
<p>To pass, a test must successfully evaluate its <b>-setup</b>, <b>-body</b>,
and <b>-cleanup</b> scripts.  The return code of the <b>-body</b> script and
its result must match expected values, and if specified, output and error
data from the test must match expected <b>-output</b> and <b>-errorOutput</b>
values.  If any of these conditions are not met, then the test fails.
Note that all scripts are evaluated in the context of the caller
of [<b>test</b>].
</p>
<p>As long as [<b>test</b>] is called with valid syntax and legal
values for all attributes, it will not raise an error.  Test
failures are instead reported as output written to [<b>outputChannel</b>].
In default operation, a successful test produces no output.  The output
messages produced by [<b>test</b>] are controlled by the
[<b>configure -verbose</b>] option as described in <ref refid="configurable-options">CONFIGURABLE OPTIONS</ref>
below.  Any output produced by the test scripts themselves should be
produced using [<b>::puts</b>] to [<b>outputChannel</b>] or
[<b>errorChannel</b>], so that users of the test suite may
easily capture output with the [<b>configure -outfile</b>] and
[<b>configure -errfile</b>] options, and so that the <b>-output</b>
and <b>-errorOutput</b> attributes work properly.
</p>
</section>
<section id="test-constraints">
<title>TEST CONSTRAINTS</title>
<p>Constraints are used to determine whether or not a test should be skipped.
Each constraint has a name, which may be any string, and a boolean
value.  Each [<b>test</b>] has a <b>-constraints</b> value which is a
list of constraint names.  There are two modes of constraint control.
Most frequently, the default mode is used, indicated by a setting
of [<b>configure -limitconstraints</b>] to false.  The test will run
only if all constraints in the list are true-valued.  Thus,
the <b>-constraints</b> option of [<b>test</b>] is a convenient, symbolic
way to define any conditions required for the test to be possible or
meaningful.  For example, a [<b>test</b>] with <b>-constraints unix</b>
will only be run if the constraint <b>unix</b> is true, which indicates
the test suite is being run on a Unix platform.
</p>
<p>Each [<b>test</b>] should include whatever <b>-constraints</b> are
required to constrain it to run only where appropriate.  Several
constraints are pre-defined in the <b>tcltest</b> package, listed
below.  The registration of user-defined constraints is performed
by the [<b>testConstraint</b>] command.  User-defined constraints
may appear within a test file, or within the script specified
by the [<b>configure -load</b>] or [<b>configure -loadfile</b>]
options.
</p>
<p>The following is a list of constraints pre-defined by the
<b>tcltest</b> package itself:
</p>
<dl>
<dle>
<dt><m>singleTestInterp</m></dt>
<dd>test can only be run if all test files are sourced into a single interpreter
</dd>
</dle>
<dle>
<dt><m>unix</m></dt>
<dd>test can only be run on any Unix platform
</dd>
</dle>
<dle>
<dt><m>win</m></dt>
<dd>test can only be run on any Windows platform
</dd>
</dle>
<dle>
<dt><m>nt</m></dt>
<dd>test can only be run on any Windows NT platform
</dd>
</dle>
<dle>
<dt><m>95</m></dt>
<dd>test can only be run on any Windows 95 platform
</dd>
</dle>
<dle>
<dt><m>98</m></dt>
<dd>test can only be run on any Windows 98 platform
</dd>
</dle>
<dle>
<dt><m>mac</m></dt>
<dd>test can only be run on any Mac platform
</dd>
</dle>
<dle>
<dt><m>unixOrWin</m></dt>
<dd>test can only be run on a Unix or Windows platform
</dd>
</dle>
<dle>
<dt><m>macOrWin</m></dt>
<dd>test can only be run on a Mac or Windows platform
</dd>
</dle>
<dle>
<dt><m>macOrUnix</m></dt>
<dd>test can only be run on a Mac or Unix platform
</dd>
</dle>
<dle>
<dt><m>tempNotWin</m></dt>
<dd>test can not be run on Windows.  This flag is used to temporarily
disable a test. 
</dd>
</dle>
<dle>
<dt><m>tempNotMac</m></dt>
<dd>test can not be run on a Mac.  This flag is used
to temporarily disable a test.
</dd>
</dle>
<dle>
<dt><m>unixCrash</m></dt>
<dd>test crashes if it's run on Unix.  This flag is used to temporarily
disable a test. 
</dd>
</dle>
<dle>
<dt><m>winCrash</m></dt>
<dd>test crashes if it's run on Windows.  This flag is used to temporarily
disable a test. 
</dd>
</dle>
<dle>
<dt><m>macCrash</m></dt>
<dd>test crashes if it's run on a Mac.  This flag is used to temporarily
disable a test. 
</dd>
</dle>
<dle>
<dt><m>emptyTest</m></dt>
<dd>test is empty, and so not worth running, but it remains as a
place-holder for a test to be written in the future.  This constraint
has value false to cause tests to be skipped unless the user specifies
otherwise.
</dd>
</dle>
<dle>
<dt><m>knownBug</m></dt>
<dd>test is known to fail and the bug is not yet fixed.  This constraint
has value false to cause tests to be skipped unless the user specifies
otherwise.
</dd>
</dle>
<dle>
<dt><m>nonPortable</m></dt>
<dd>test can only be run in some known development environment.
Some tests are inherently non-portable because they depend on things
like word length, file system configuration, window manager, etc.
This constraint has value false to cause tests to be skipped unless
the user specifies otherwise.  
</dd>
</dle>
<dle>
<dt><m>userInteraction</m></dt>
<dd>test requires interaction from the user.  This constraint has
value false to causes tests to be skipped unless the user specifies
otherwise.  
</dd>
</dle>
<dle>
<dt><m>interactive</m></dt>
<dd>test can only be run in if the interpreter is in interactive mode 
(when the global tcl_interactive variable is set to 1).
</dd>
</dle>
<dle>
<dt><m>nonBlockFiles</m></dt>
<dd>test can only be run if platform supports setting files into
nonblocking mode 
</dd>
</dle>
<dle>
<dt><m>asyncPipeClose</m></dt>
<dd>test can only be run if platform supports async flush and async close
on a pipe 
</dd>
</dle>
<dle>
<dt><m>unixExecs</m></dt>
<dd>test can only be run if this machine has Unix-style commands
<b>cat</b>, <b>echo</b>, <b>sh</b>, <b>wc</b>, <b>rm</b>, <b>sleep</b>,
<b>fgrep</b>, <b>ps</b>, <b>chmod</b>, and <b>mkdir</b> available
</dd>
</dle>
<dle>
<dt><m>hasIsoLocale</m></dt>
<dd>test can only be run if can switch to an ISO locale
</dd>
</dle>
<dle>
<dt><m>root</m></dt>
<dd>test can only run if Unix user is root
</dd>
</dle>
<dle>
<dt><m>notRoot</m></dt>
<dd>test can only run if Unix user is not root
</dd>
</dle>
<dle>
<dt><m>eformat</m></dt>
<dd>test can only run if app has a working version of sprintf with respect
to the "e" format of floating-point numbers.
</dd>
</dle>
<dle>
<dt><m>stdio</m></dt>
<dd>test can only be run if [<b>interpreter</b>] can be [<b cat="AMBIGUOUS ambiguous cmd">open</b>]ed
as a pipe.
</dd>
</dle>
</dl>
<p>The alternative mode of constraint control is enabled by setting
[<b>configure -limitconstraints</b>] to true.  With that configuration
setting, all existing constraints other than those in the constraint
list returned by [<b>configure -constraints</b>] are set to false.
When the value of [<b>configure -constraints</b>]
is set, all those constraints are set to true.  The effect is that
when both options [<b>configure -constraints</b>] and
[<b>configure -limitconstraints</b>] are in use, only those tests including
only constraints from the [<b>configure -constraints</b>] list
are run; all others are skipped.  For example, one might set
up a configuration with
</p>
<example>
<b>configure</b> -constraints knownBug \
          -limitconstraints true \
          -verbose pass
</example>
<p>to run exactly those tests that exercise known bugs, and discover
whether any of them pass, indicating the bug had been fixed.  
</p>
</section>
<section id="running-all-tests">
<title>RUNNING ALL TESTS</title>
<p>The single command [<b>runAllTests</b>] is evaluated to run an entire
test suite, spanning many files and directories.  The configuration
options of <b>tcltest</b> control the precise operations.  The
[<b>runAllTests</b>] command begins by printing a summary of its
configuration to [<b>outputChannel</b>].
</p>
<p>Test files to be evaluated are sought in the directory
[<b>configure -testdir</b>].  The list of files in that directory
that match any of the patterns in [<b>configure -file</b>] and
match none of the patterns in [<b>configure -notfile</b>] is generated
and sorted.  Then each file will be evaluated in turn.  If
[<b>configure -singleproc</b>] is true, then each file will
be [<b cat="AMBIGUOUS ambiguous cmd">source</b>]d in the caller's context.  If it is false,
then a copy of [<b>interpreter</b>] will be [<cmd>exec</cmd>]d to
evaluate each file.  The multi-process operation is useful
when testing can cause errors so severe that a process 
terminates.  Although such an error may terminate a child
process evaluating one file, the master process can continue
with the rest of the test suite.  In multi-process operation,
the configuration of <b>tcltest</b> in the master process is
passed to the child processes as command line arguments,
with the exception of [<b>configure -outfile</b>].  The
[<b>runAllTests</b>] command in the
master process collects all output from the child processes
and collates their results into one master report.  Any
reports of individual test failures, or messages requested
by a [<b>configure -verbose</b>] setting are passed directly
on to [<b>outputChannel</b>] by the master process.
</p>
<p>After evaluating all selected test files, a summary of the
results is printed to [<b>outputChannel</b>].  The summary
includes the total number of [<b>test</b>]s evaluated, broken
down into those skipped, those passed, and those failed.
The summary also notes the number of files evaluated, and the names
of any files with failing tests or errors.  A list of
the constraints that caused tests to be skipped, and the
number of tests skipped for each is also printed.  Also,
messages are printed if it appears that evaluation of
a test file has caused any temporary files to be left
behind in [<b>configure -tmpdir</b>].
</p>
<p>Having completed and summarized all selected test files,
[<b>runAllTests</b>] then recursively acts on subdirectories
of [<b>configure -testdir</b>].  All subdirectories that
match any of the patterns in [<b>configure -relateddir</b>]
and do not match any of the patterns in
[<b>configure -asidefromdir</b>] are examined.  If
a file named <b>all.tcl</b> is found in such a directory,
it will be [<b cat="AMBIGUOUS ambiguous cmd">source</b>]d in the caller's context.
Whether or not an examined directory contains an
<b>all.tcl</b> file, its subdirectories are also scanned
against the [<b>configure -relateddir</b>] and
[<b>configure -asidefromdir</b>] patterns.  In this way,
many directories in a directory tree can have all their
test files evaluated by a single [<b>runAllTests</b>]
command.
</p>
</section>
<section id="configurable-options">
<title>CONFIGURABLE OPTIONS</title>
<p>The [<b>configure</b>] command is used to set and query the configurable
options of <b>tcltest</b>.  The valid options are:
</p>
<dl>
<dle>
<dt><b>-singleproc</b> <m>boolean</m></dt>
<dd>Controls whether or not [<b>runAllTests</b>] spawns a child process for
each test file.  No spawning when <i>boolean</i> is true.  Default
value is false.
</dd>
</dle>
<dle>
<dt><b>-debug</b> <m>level</m></dt>
<dd>Sets the debug level to <i>level</i>, an integer value indicating how
much debugging information should be printed to stdout.  Note that
debug messages always go to stdout, independent of the value of
[<b>configure -outfile</b>].  Default value is 0.  Levels are defined as:
<dl>
<dle>
<dt>0</dt>
<dd>Do not display any debug information.
</dd>
</dle>
<dle>
<dt>1</dt>
<dd>Display information regarding whether a test is skipped because it
doesn't match any of the tests that were specified using by
[<b>configure -match</b>] (userSpecifiedNonMatch) or matches any of
the tests specified by [<b>configure -skip</b>] (userSpecifiedSkip).  Also
print warnings about possible lack of cleanup or balance in test files.
Also print warnings about any re-use of test names.
</dd>
</dle>
<dle>
<dt>2</dt>
<dd>Display the flag array parsed by the command line processor, the
contents of the ::env array, and all user-defined variables that exist
in the current namespace as they are used.
</dd>
</dle>
<dle>
<dt>3</dt>
<dd>Display information regarding what individual procs in the test
harness are doing.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>-verbose</b> <m>level</m></dt>
<dd>Sets the type of output verbosity desired to <i>level</i>,
a list of zero or more of the elements <b>body</b>, <b>pass</b>,
<b>skip</b>, <b>start</b>, <b cat="AMBIGUOUS ambiguous cmd">error</b> and <b cat="canvasitemtype">line</b>.  Default value
is <b>{body error}</b>.
Levels are defined as: 
<dl>
<dle>
<dt>body (b)</dt>
<dd>Display the body of failed tests
</dd>
</dle>
<dle>
<dt>pass (p)</dt>
<dd>Print output when a test passes
</dd>
</dle>
<dle>
<dt>skip (s)</dt>
<dd>Print output when a test is skipped
</dd>
</dle>
<dle>
<dt>start (t)</dt>
<dd>Print output whenever a test starts
</dd>
</dle>
<dle>
<dt>error (e)</dt>
<dd>Print errorInfo and errorCode, if they exist, when a test return code
does not match its expected return code
</dd>
</dle>
<dle>
<dt>line (l)</dt>
<dd>Print source file line information of failed tests
</dd>
</dle>
</dl>The single letter abbreviations noted above are also recognized
so that [<b>configure -verbose pt</b>] is the same as
[<b>configure -verbose  {pass start}</b>].
</dd>
</dle>
<dle>
<dt><b>-preservecore</b> <m>level</m></dt>
<dd>Sets the core preservation level to <i>level</i>.  This level
determines how stringent checks for core files are.  Default
value is 0.  Levels are defined as:
<dl>
<dle>
<dt>0</dt>
<dd>No checking - do not check for core files at the end of each test
command, but do check for them in [<b>runAllTests</b>] after all
test files have been evaluated.
</dd>
</dle>
<dle>
<dt>1</dt>
<dd>Also check for core files at the end of each [<b>test</b>] command.
</dd>
</dle>
<dle>
<dt>2</dt>
<dd>Check for core files at all times described above, and save a 
copy of each core file produced in [<b>configure -tmpdir</b>].
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>-limitconstraints</b> <m>boolean</m></dt>
<dd>Sets the mode by which [<b>test</b>] honors constraints as described
in <ref refid="tests">TESTS</ref> above.  Default value is false.
</dd>
</dle>
<dle>
<dt><b>-constraints</b> <m>list</m></dt>
<dd>Sets all the constraints in <i>list</i> to true.  Also used in
combination with [<b>configure -limitconstraints true</b>] to control an
alternative constraint mode as described in <ref refid="tests">TESTS</ref> above.
Default value is an empty list.
</dd>
</dle>
<dle>
<dt><b>-tmpdir</b> <m>directory</m></dt>
<dd>Sets the temporary directory to be used by [<b>makeFile</b>],
[<b>makeDirectory</b>], [<b>viewFile</b>], [<b>removeFile</b>], 
and [<b>removeDirectory</b>] as the default directory where
temporary files and directories created by test files should
be created.  Default value is [<b>workingDirectory</b>].
</dd>
</dle>
<dle>
<dt><b>-testdir</b> <m>directory</m></dt>
<dd>Sets the directory searched by [<b>runAllTests</b>] for test files
and subdirectories.  Default value is [<b>workingDirectory</b>].
</dd>
</dle>
<dle>
<dt><b>-file</b> <m>patternList</m></dt>
<dd>Sets the list of patterns used by [<b>runAllTests</b>] to determine
what test files to evaluate.  Default value is <b>*.test</b>.
</dd>
</dle>
<dle>
<dt><b>-notfile</b> <m>patternList</m></dt>
<dd>Sets the list of patterns used by [<b>runAllTests</b>] to determine
what test files to skip.  Default value is <b>l.*.test</b>, so
that any SCCS lock files are skipped.
</dd>
</dle>
<dle>
<dt><b>-relateddir</b> <m>patternList</m></dt>
<dd>Sets the list of patterns used by [<b>runAllTests</b>] to determine
what subdirectories to search for an <b>all.tcl</b> file.  Default
value is <b>*</b>.
</dd>
</dle>
<dle>
<dt><b>-asidefromdir</b> <m>patternList</m></dt>
<dd>Sets the list of patterns used by [<b>runAllTests</b>] to determine
what subdirectories to skip when searching for an <b>all.tcl</b> file.
Default value is an empty list.
</dd>
</dle>
<dle>
<dt><b>-match</b> <m>patternList</m></dt>
<dd>Set the list of patterns used by [<b>test</b>] to determine whether
a test should be run.  Default value is <b>*</b>.
</dd>
</dle>
<dle>
<dt><b>-skip</b> <m>patternList</m></dt>
<dd>Set the list of patterns used by [<b>test</b>] to determine whether
a test should be skipped.  Default value is an empty list.
</dd>
</dle>
<dle>
<dt><b>-load</b> <m>script</m></dt>
<dd>Sets a script to be evaluated by [<b>loadTestedCommands</b>].
Default value is an empty script.
</dd>
</dle>
<dle>
<dt><b>-loadfile</b> <m>filename</m></dt>
<dd>Sets the filename from which to read a script to be evaluated
by [<b>loadTestedCommands</b>].  This is an alternative to
<b>-load</b>.  They cannot be used together.
</dd>
</dle>
<dle>
<dt><b>-outfile</b> <m>filename</m> </dt>
<dd>Sets the file to which all output produced by tcltest should be
written.  A file named <i>filename</i> will be [<b cat="AMBIGUOUS ambiguous cmd">open</b>]ed for writing,
and the resulting channel will be set as the value of [<b>outputChannel</b>].
</dd>
</dle>
<dle>
<dt><b>-errfile</b> <m>filename</m></dt>
<dd>Sets the file to which all error output produced by tcltest
should be written.  A file named <i>filename</i> will be [<b cat="AMBIGUOUS ambiguous cmd">open</b>]ed
for writing, and the resulting channel will be set as the value
of [<b>errorChannel</b>].
</dd>
</dle>
</dl>
</section>
<section id="creating-test-suites-with-tcltest">
<title>CREATING TEST SUITES WITH TCLTEST</title>
<p>The fundamental element of a test suite is the individual [<b>test</b>]
command.  We begin with several examples.
</p>
<ol>
<li>Test of a script that returns normally.
<example>
<b>test</b> example-1.0 {normal return} {
    format %s value
} value
</example></li>
<li>Test of a script that requires context setup and cleanup.  Note the
bracing and indenting style that avoids any need for line continuation.
<example>
<b>test</b> example-1.1 {test file existence} -setup {
    set file [makeFile {} test]
} -body {
    file exists $file
} -cleanup {
    removeFile test
} -result 1
</example></li>
<li>Test of a script that raises an error.
<example>
<b>test</b> example-1.2 {error return} -body {
    error message
} -returnCodes error -result message
</example></li>
<li>Test with a constraint.
<example>
<b>test</b> example-1.3 {user owns created files} -constraints {
    unix
} -setup {
    set file [makeFile {} test]
} -body {
    file attributes $file -owner
} -cleanup {
    removeFile test
} -result $::tcl_platform(user)
</example></li>
</ol>
<p>At the next higher layer of organization, several [<b>test</b>] commands
are gathered together into a single test file.  Test files should have
names with the <b>.test</b> extension, because that is the default pattern
used by [<b>runAllTests</b>] to find test files.  It is a good rule of
thumb to have one test file for each source code file of your project.
It is good practice to edit the test file and the source code file
together, keeping tests synchronized with code changes.
</p>
<p>Most of the code in the test file should be the [<b>test</b>] commands.
Use constraints to skip tests, rather than conditional evaluation
of [<b>test</b>].  That is, do this:
</p>
<ol>
<li><example>
<b>testConstraint</b> X [expr $myRequirement]
<b>test</b> goodConditionalTest {} X {
    # body
} result
</example>and do not do this:
</li>
<li><example>
if $myRequirement {
    test badConditionalTest {} {
	#body
    } result
}
</example></li>
</ol>
<p>Use the <b>-setup</b> and <b>-cleanup</b> options to establish and release
all context requirements of the test body.  Do not make tests depend on
prior tests in the file.  Those prior tests might be skipped.  If several
consecutive tests require the same context, the appropriate setup
and cleanup scripts may be stored in variable for passing to each tests
<b>-setup</b> and <b>-cleanup</b> options.  This is a better solution than
performing setup outside of [<b>test</b>] commands, because the setup will
only be done if necessary, and any errors during setup will be reported,
and not cause the test file to abort.
</p>
<p>A test file should be able to be combined with other test files and not
interfere with them, even when [<b>configure -singleproc 1</b>] causes
all files to be evaluated in a common interpreter.  A simple way to
achieve this is to have your tests define all their commands and variables
in a namespace that is deleted when the test file evaluation is complete.
A good namespace to use is a child namespace <b>test</b> of the namespace
of the module you are testing.
</p>
<p>A test file should also be able to be evaluated directly as a script,
not depending on being called by a master [<b>runAllTests</b>].  This
means that each test file should process command line arguments to give
the tester all the configuration control that <b>tcltest</b> provides.
</p>
<p>After all [<b>test</b>]s in a test file, the command [<b>cleanupTests</b>]
should be called.
</p>
<ol>
<li>Here is a sketch of a sample test file illustrating those points:
<example>
package require tcltest 2.2
eval <b>::tcltest::configure</b> $argv
package require example
namespace eval ::example::test {
    namespace import ::tcltest::*
    <b>testConstraint</b> X [expr {...}]
    variable SETUP {#common setup code}
    variable CLEANUP {#common cleanup code}
    <b>test</b> example-1 {} -setup $SETUP -body {
	# First test
    } -cleanup $CLEANUP -result {...}
    <b>test</b> example-2 {} -constraints X -setup $SETUP -body {
	# Second test; constrained
    } -cleanup $CLEANUP -result {...}
    <b>test</b> example-3 {} {
	# Third test; no context required
    } {...}
    <b>cleanupTests</b>
}
namespace delete ::example::test
</example></li>
</ol>
<p>The next level of organization is a full test suite, made up of several
test files.  One script is used to control the entire suite.  The
basic function of this script is to call [<b>runAllTests</b>] after
doing any necessary setup.  This script is usually named <b>all.tcl</b>
because that's the default name used by [<b>runAllTests</b>] when combining
multiple test suites into one testing run.
</p>
<ol>
<li>Here is a sketch of a sample test suite master script:
<example>
package require Tcl 8.4
package require tcltest 2.2
package require example
<b>::tcltest::configure</b> -testdir \
        [file dirname [file normalize [info script]]]
eval <b>::tcltest::configure</b> $argv
<b>::tcltest::runAllTests</b>
</example></li>
</ol>
</section>
<section>
<title>COMPATIBILITY</title>
<p>A number of commands and variables in the <b>::tcltest</b> namespace
provided by earlier releases of <b>tcltest</b> have not been documented
here.  They are no longer part of the supported public interface of
<b>tcltest</b> and should not be used in new test suites.  However,
to continue to support existing test suites written to the older
interface specifications, many of those deprecated commands and
variables still work as before.  For example, in many circumstances,
[<b>configure</b>] will be automatically called shortly after
[<b>package require tcltest 2.1</b>] succeeds with arguments
from the variable <b>::argv</b>.  This is to support test suites
that depend on the old behavior that <b>tcltest</b> was automatically
configured from command line arguments.  New test files should not
depend on this, but should explicitly include
</p>
<example>
eval <b>::tcltest::configure</b> $::argv
</example>
<p>to establish a configuration from command line arguments.
</p>
</section>
<section>
<title>KNOWN ISSUES</title>
<p>There are two known issues related to nested evaluations of [<b>test</b>].  
The first issue relates to the stack level in which test scripts are
executed.  Tests nested within other tests may be executed at the same
stack level as the outermost test.  For example, in the following code: 
</p>
<example>
<b>test</b> level-1.1 {level 1} {
    -body {
        <b>test</b> level-2.1 {level 2} {
        }
    }
}
</example>
<p>any script executed in level-2.1 may be executed at the same stack
level as the script defined for level-1.1.  
</p>
<p>In addition, while two [<b>test</b>]s have been run, results will only
be reported by [<b>cleanupTests</b>] for tests at the same level as
test level-1.1.  However, test results for all tests run prior to
level-1.1 will be available when test level-2.1 runs.  What this
means is that if you try to access the test results for test level-2.1,
it will may say that 'm' tests have run, 'n' tests have
been skipped, 'o' tests have passed and 'p' tests have failed,
where 'm', 'n', 'o', and 'p' refer to tests that were run at the
same test level as test level-1.1. 
</p>
<p>Implementation of output and error comparison in the test command
depends on usage of ::puts in your application code.  Output is
intercepted by redefining the ::puts command while the defined test
script is being run.  Errors thrown by C procedures or printed
directly from C applications will not be caught by the test command.
Therefore, usage of the <b>-output</b> and <b>-errorOutput</b>
options to [<b>test</b>] is useful only for pure Tcl applications
that use [<b>::puts</b>] to produce output. 

</p>
</section>
<keywords>
<keyword>test</keyword>
<keyword>test harness</keyword>
<keyword>test suite</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="tclvars" version="8.0" title="tclvars">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tclvars.n,v 1.27 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="tclvars" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>tclvars</name>
<desc>Variables used by Tcl</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>The following global variables are created and managed automatically
by the Tcl library.  Except where noted below, these variables should
normally be treated as read-only by application-specific code and by users.
</p>
<dl cat="variable" scope="global">
<dle>
<dt><b>env</b></dt>
<dd>This variable is maintained by Tcl as an array
whose elements are the environment variables for the process.
Reading an element will return the value of the corresponding
environment variable.
Setting an element of the array will modify the corresponding
environment variable or create a new one if it doesn't already
exist.
Unsetting an element of <b cat="variable">env</b> will remove the corresponding
environment variable.
Changes to the <b cat="variable">env</b> array will affect the environment
passed to children by commands like <cmd>exec</cmd>.
If the entire <b cat="variable">env</b> array is unset then Tcl will stop
monitoring <b cat="variable">env</b> accesses and will not update environment
variables.
<p>Under Windows, the environment variables PATH and COMSPEC in any
capitalization are converted automatically to upper case.  For instance, the
PATH variable could be exported by the operating system as ``path'',
``Path'', ``PaTh'', etc., causing otherwise simple Tcl code to have to
support many special cases.  All other environment variables inherited by
Tcl are left unmodified.  Setting an env array variable to blank is the
same as unsetting it as this is the behavior of the underlying Windows OS.
It should be noted that relying on an existing and empty environment variable
won't work on windows and is discouraged for cross-platform usage.
</p></dd>
</dle>
<dle>
<dt><b>errorCode</b></dt>
<dd>This variable holds the value of the <b>-errorcode</b> return option
set by the most recent error that occurred in this interpreter.
This list value represents additional information about the error
in a form that is easy to process with programs.
The first element of the list identifies a general class of
errors, and determines the format of the rest of the list.
The following formats for <b>-errorcode</b> return options
are used by the Tcl core; individual applications may define
additional formats.
<dl>
<dle>
<dt><b>ARITH</b> <m>code msg</m></dt>
<dd>This format is used when an arithmetic error occurs (e.g. an attempt
to divide by zero in the <cmd>expr</cmd> command).
<i>Code</i> identifies the precise error and <i>msg</i> provides a
human-readable description of the error.  <i>Code</i> will be either
DIVZERO (for an attempt to divide by zero),
DOMAIN (if an argument is outside the domain of a function, such as acos(-3)),
IOVERFLOW (for integer overflow),
OVERFLOW (for a floating-point overflow),
or UNKNOWN (if the cause of the error cannot be determined).
</dd>
</dle>
<dle>
<dt><b>CHILDKILLED</b> <m>pid sigName msg</m></dt>
<dd>This format is used when a child process has been killed because of
a signal.  The <i>pid</i> element will be the process's identifier (in decimal).
The <i>sigName</i> element will be the symbolic name of the signal that caused
the process to terminate; it will be one of the names from the
include file signal.h, such as <b>SIGPIPE</b>.
The <i>msg</i> element will be a short human-readable message
describing the signal, such as ``write on pipe with no readers''
for <b>SIGPIPE</b>.
</dd>
</dle>
<dle>
<dt><b>CHILDSTATUS</b> <m>pid code</m></dt>
<dd>This format is used when a child process has exited with a non-zero
exit status.  The <i>pid</i> element will be the
process's identifier (in decimal) and the <i>code</i> element will be the exit
code returned by the process (also in decimal).
</dd>
</dle>
<dle>
<dt><b>CHILDSUSP</b> <m>pid sigName msg</m></dt>
<dd>This format is used when a child process has been suspended because
of a signal.
The <i>pid</i> element will be the process's identifier, in decimal.
The <i>sigName</i> element will be the symbolic name of the signal that caused
the process to suspend; this will be one of the names from the
include file signal.h, such as <b>SIGTTIN</b>.
The <i>msg</i> element will be a short human-readable message
describing the signal, such as ``background tty read''
for <b>SIGTTIN</b>.
</dd>
</dle>
<dle>
<dt><b>NONE</b></dt>
<dd>This format is used for errors where no additional information is
available for an error besides the message returned with the
error.  In these cases the <b>-errorcode</b> return option
will consist of a list containing a single element whose
contents are <b>NONE</b>.
</dd>
</dle>
<dle>
<dt><b>POSIX</b> <m>errName msg</m></dt>
<dd>If the first element is <b>POSIX</b>, then
the error occurred during a POSIX kernel call.
The <i>errName</i> element will contain the symbolic name
of the error that occurred, such as <b>ENOENT</b>; this will
be one of the values defined in the include file errno.h.
The <i>msg</i> element will be a human-readable
message corresponding to <i>errName</i>, such as
``no such file or directory'' for the <b>ENOENT</b> case.
</dd>
</dle>
</dl><p>To set the <b>-errorcode</b> return option, applications should use library
procedures such as <fun>Tcl_SetObjErrorCode</fun>, <fun>Tcl_SetReturnOptions</fun>,
and <fun>Tcl_PosixError</fun>, or they may invoke the <b>-errorcode</b>
option of the <cmd>return</cmd> command.
If one of these methods hasn't been used, then the Tcl
interpreter will reset the variable to <b>NONE</b> after
the next error.
</p></dd>
</dle>
<dle>
<dt><b>errorInfo</b></dt>
<dd>This variable holds the value of the <b>-errorinfo</b> return option
set by the most recent error that occurred in this interpreter.
This string value will contain one or more lines
identifying the Tcl commands and procedures that were being executed
when the most recent error occurred.
Its contents take the form of a stack trace showing the various
nested Tcl commands that had been invoked at the time of the error.
</dd>
</dle>
<dle>
<dt><b>tcl_library</b></dt>
<dd>This variable holds the name of a directory containing the
system library of Tcl scripts, such as those used for auto-loading.
The value of this variable is returned by the <b>info library</b> command.
See the <b>library</b> manual entry for details of the facilities 
provided by the Tcl script library.
Normally each application or package will have its own application-specific
script library in addition to the Tcl script library;
each application should set a global variable with a name like
<b>$</b><i>app</i><b>_library</b> (where <i>app</i> is the application's name)
to hold the network file name for that application's library directory.
The initial value of <b cat="variable">tcl_library</b> is set when an interpreter
is created by searching several different directories until one is
found that contains an appropriate Tcl startup script.
If the <b>TCL_LIBRARY</b> environment variable exists, then
the directory it names is checked first.
If <b>TCL_LIBRARY</b> isn't set or doesn't refer to an appropriate
directory, then Tcl checks several other directories based on a
compiled-in default location, the location of the binary containing
the application, and the current working directory.
</dd>
</dle>
<dle>
<dt><b>tcl_patchLevel</b></dt>
<dd>When an interpreter is created Tcl initializes this variable to
hold a string giving the current patch level for Tcl, such as
<b>7.3p2</b> for Tcl 7.3 with the first two official patches, or
<b>7.4b4</b> for the fourth beta release of Tcl 7.4.
The value of this variable is returned by the <b>info patchlevel</b>
command.
</dd>
</dle>
<dle>
<dt><b>tcl_pkgPath</b></dt>
<dd>This variable holds a list of directories indicating where packages are
normally installed.  It is not used on Windows.  It typically contains
either one or two entries; if it contains two entries, the first is
normally a directory for platform-dependent packages (e.g., shared library
binaries) and the second is normally a directory for platform-independent
packages (e.g., script files). Typically a package is installed as a
subdirectory of one of the entries in <b>$tcl_pkgPath</b>. The directories
in <b>$tcl_pkgPath</b> are included by default in the <b>auto_path</b>
variable, so they and their immediate subdirectories are automatically
searched for packages during <b>package require</b> commands.  Note:
<b cat="variable">tcl_pkgPath</b> is not intended to be modified by the application.  Its
value is added to <b>auto_path</b> at startup; changes to <b cat="variable">tcl_pkgPath</b>
are not reflected in <b>auto_path</b>.  If you want Tcl to search additional
directories for packages you should add the names of those directories to
<b>auto_path</b>, not <b cat="variable">tcl_pkgPath</b>.
</dd>
</dle>
<dle>
<dt><b>tcl_platform</b></dt>
<dd>This is an associative array whose elements contain information about
the platform on which the application is running, such as the name of
the operating system, its current release number, and the machine's
instruction set.  The elements listed below will always
be defined, but they may have empty strings as values if Tcl couldn't
retrieve any relevant information.  In addition, extensions
and applications may add additional values to the array.  The
predefined elements are:
<dl>
<dle>
<dt><b>byteOrder</b></dt>
<dd>The native byte order of this machine: either <b>littleEndian</b> or
<b>bigEndian</b>. 
</dd>
</dle>
<dle>
<dt><b>debug</b></dt>
<dd>If this variable exists, then the interpreter was compiled with and linked
to a debug-enabled C run-time.  This variable will only exist on Windows,
so extension writers can specify which package to load depending on the
C run-time library that is in use.  This is not an indication that this core
contains symbols.
</dd>
</dle>
<dle>
<dt><b>machine</b></dt>
<dd>The instruction set executed by this machine, such as
<b>intel</b>, <b>PPC</b>, <b>68k</b>, or <b>sun4m</b>.  On UNIX machines, this
is the value returned by <b>uname -m</b>.
</dd>
</dle>
<dle>
<dt><b>os</b> </dt>
<dd>The name of the operating system running on this machine,
such as <b>Windows 95</b>, <b>Windows NT</b>, or <b>SunOS</b>.
On UNIX machines, this is the value returned by <b>uname -s</b>.
On Windows 95 and Windows 98, the value returned will be <b>Windows
95</b> to provide better backwards compatibility to Windows 95; to
distinguish between the two, check the <b>osVersion</b>.
</dd>
</dle>
<dle>
<dt><b>osVersion</b></dt>
<dd>The version number for the operating system running on this machine.
On UNIX machines, this is the value returned by <b>uname -r</b>.  On
Windows 95, the version will be 4.0; on Windows 98, the version will
be 4.10.
</dd>
</dle>
<dle>
<dt><b>platform</b></dt>
<dd>Either <b>windows</b>, or <b>unix</b>.  This identifies the
general operating environment of the machine.
</dd>
</dle>
<dle>
<dt><b>threaded</b></dt>
<dd>If this variable exists, then the interpreter
was compiled with threads enabled.
</dd>
</dle>
<dle>
<dt><b>user</b></dt>
<dd>This identifies the
current user based on the login information available on the platform.
This comes from the USER or LOGNAME environment variable on Unix,
and the value from GetUserName on Windows.
</dd>
</dle>
<dle>
<dt><b>wordSize</b></dt>
<dd>This gives the size of the native-machine word in bytes (strictly, it
is same as the result of evaluating <i>sizeof(long)</i> in C.)
</dd>
</dle>
<dle>
<dt><b>pointerSize</b></dt>
<dd>This gives the size of the native-machine pointer in bytes (strictly, it
is same as the result of evaluating <i>sizeof(void*)</i> in C.)
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><b>tcl_precision</b></dt>
<dd>This variable controls the number of digits to generate
when converting floating-point values to strings.  It defaults
<?NEW 8.5?>to 0.  <i>Applications should not change this value;</i> it is
provided for compatibility with legacy code.
</dd>
</dle>
</dl>
<?TROFF.RS?>
<p>The default value of 0 is special, meaning that Tcl should
convert numbers using as few digits as possible while still
distinguishing any floating point number from its nearest
neighbours.  It differs from using an arbitrarily high value
for <i>tcl_precision</i> in that an inexact number like <i>1.4</i>
will convert as <i>1.4</i> rather than <i>1.3999999999999999</i>
even though the latter is nearer to the exact value of the
binary number.
</p>
<?TROFF.RE?>
<?ENDNEW CONFUSED 8.5?>
<?TROFF.RS?>
<p>17 digits is ``perfect'' for IEEE floating-point in that it allows
double-precision values to be converted to strings and back to
binary with no loss of information.  However, using 17 digits prevents
any rounding, which produces longer, less intuitive results.  For example,
<b>expr {1.4}</b> returns 1.3999999999999999 with <b cat="variable">tcl_precision</b>
set to 17, vs. 1.4 if <b cat="variable">tcl_precision</b> is 12.
</p>
<?TROFF.RE?>
<?TROFF.RS?>
<p>All interpreters in a thread share a single <b cat="variable">tcl_precision</b> value:
changing it in one interpreter will affect all other interpreters as
well.  However, safe interpreters are not allowed to modify the
variable.
</p>
<?TROFF.RE?>
<dl cat="variable" scope="global">
<dle>
<dt><b>tcl_rcFileName</b></dt>
<dd>This variable is used during initialization to indicate the name of a
user-specific startup file.  If it is set by application-specific
initialization, then the Tcl startup code will check for the existence
of this file and <b cat="AMBIGUOUS ambiguous cmd">source</b> it if it exists.  For example, for <b>wish</b>
the variable is set to <b>~/.wishrc</b> for Unix and <b>~/wishrc.tcl</b>
for Windows.
</dd>
</dle>
<dle>
<dt><b>tcl_traceCompile</b></dt>
<dd>The value of this variable can be set to control
how much tracing information
is displayed during bytecode compilation.
By default, tcl_traceCompile is zero and no information is displayed.
Setting tcl_traceCompile to 1 generates a one-line summary in stdout
whenever a procedure or top-level command is compiled.
Setting it to 2 generates a detailed listing in stdout of the
bytecode instructions emitted during every compilation.
This variable is useful in
tracking down suspected problems with the Tcl compiler.
It is also occasionally useful when converting
existing code to use Tcl8.0.
</dd>
</dle>
</dl>
<?TROFF.RS?>
<p>This variable and functionality only exist if
<b>TCL_COMPILE_DEBUG</b> was defined during Tcl's compilation.
</p>
<?TROFF.RE?>
<dl cat="variable" scope="global">
<dle>
<dt><b>tcl_traceExec</b></dt>
<dd>The value of this variable can be set to control
how much tracing information
is displayed during bytecode execution.
By default, tcl_traceExec is zero and no information is displayed.
Setting tcl_traceExec to 1 generates a one-line trace in stdout
on each call to a Tcl procedure.
Setting it to 2 generates a line of output
whenever any Tcl command is invoked
that contains the name of the command and its arguments.
Setting it to 3 produces a detailed trace showing the result of
executing each bytecode instruction.
Note that when tcl_traceExec is 2 or 3,
commands such as <b cat="AMBIGUOUS ambiguous cmd">set</b> and <cmd>incr</cmd>
that have been entirely replaced by a sequence
of bytecode instructions are not shown.
Setting this variable is useful in
tracking down suspected problems with the bytecode compiler
and interpreter.
It is also occasionally useful when converting
code to use Tcl8.0.
</dd>
</dle>
</dl>
<?TROFF.RS?>
<p>This variable and functionality only exist if
<b>TCL_COMPILE_DEBUG</b> was defined during Tcl's compilation.
</p>
<?TROFF.RE?>
<dl>
<dle>
<dt><b>tcl_wordchars</b></dt>
<dd>The value of this variable is a regular expression that can be set to
control what are considered ``word'' characters, for instances like
selecting a word by double-clicking in text in Tk.  It is platform
dependent.  On Windows, it defaults to <b>\S</b>, meaning anything
but a Unicode space character.  Otherwise it defaults to <b>\w</b>,
which is any Unicode word character (number, letter, or underscore).
</dd>
</dle>
<dle>
<dt><b>tcl_nonwordchars</b></dt>
<dd>The value of this variable is a regular expression that can be set to
control what are considered ``non-word'' characters, for instances like
selecting a word by double-clicking in text in Tk.  It is platform
dependent.  On Windows, it defaults to <b>\s</b>, meaning any Unicode space
character.  Otherwise it defaults to <b>\W</b>, which is anything but a
Unicode word character (number, letter, or underscore).
</dd>
</dle>
<dle>
<dt><b>tcl_version</b></dt>
<dd>When an interpreter is created Tcl initializes this variable to
hold the version number for this version of Tcl in the form <i>x.y</i>.
Changes to <i>x</i> represent major changes with probable
incompatibilities and changes to <i>y</i> represent small enhancements and
bug fixes that retain backward compatibility.
The value of this variable is returned by the <b>info tclversion</b>
command.
</dd>
</dle>
</dl>
</section>
<section>
<title>OTHER GLOBAL VARIABLES</title>
<p>The following variables are only guaranteed to exist in <b>tclsh</b>
and <b>wish</b> executables; the Tcl library does not define them
itself but many Tcl environments do.
</p>
<dl cat="variable" scope="global">
<dle>
<dt><b>argc</b></dt>
<dd>The number of arguments to <b>tclsh</b> or <b>wish</b>.
</dd>
</dle>
<dle>
<dt><b>argv</b></dt>
<dd>Tcl list of arguments to <b>tclsh</b> or <b>wish</b>.
</dd>
</dle>
<dle>
<dt><b>argv0</b></dt>
<dd>The script that <b>tclsh</b> or <b>wish</b> started executing (if it was
specified) or otherwise the name by which <b>tclsh</b> or <b>wish</b>
was invoked.
</dd>
</dle>
<dle>
<dt><b>tcl_interactive</b></dt>
<dd>Contains 1 if <b>tclsh</b> or <b>wish</b> is running interactively (no
script was specified and standard input is a terminal-like device), 0
otherwise.
</dd>
</dle>
</dl>
<p>The <b>wish</b> executable additionally specifies the following global
variable:
</p>
<dl>
<dle>
<dt><b>geometry</b></dt>
<dd>If set, contains the user-supplied geometry specification to use for
the main Tk window.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>eval(n)</ref>
<ref>tclsh(1)</ref>
<ref>wish(1)</ref>
</seealso>
<keywords>
<keyword>arithmetic</keyword>
<keyword>bytecode</keyword>
<keyword>compiler</keyword>
<keyword>error</keyword>
<keyword>environment</keyword>
<keyword>POSIX</keyword>
<keyword>precision</keyword>
<keyword>subprocess</keyword>
<keyword>variables</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Tcl_Main" title="Tcl_Main" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Tcl_Main.3,v 1.11 2004/10/07 14:44:34 dkf Exp $
 -->
<?TROFF.TH title="Tcl_Main" section="3" date="8.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_Main</name>
<name>Tcl_SetMainLoop</name>
<desc>main program and event loop definition for Tcl-based applications</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_Main</fun>(<m>argc</m>, <m>argv</m>, <m>appInitProc</m>)

<fun>Tcl_SetMainLoop</fun>(<m>mainLoopProc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of elements in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="argv">*argv[]</name>
<argmode>in</argmode>
<desc>Array of strings containing command-line arguments.
</desc>
</argdef>
<argdef>
<argtype>Tcl_AppInitProc</argtype>
<name name="appInitProc">*appInitProc</name>
<argmode>in</argmode>
<desc>Address of an application-specific initialization procedure.
The value for this argument is usually <fun>Tcl_AppInit</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_MainLoopProc</argtype>
<name name="mainLoopProc">*mainLoopProc</name>
<argmode>in</argmode>
<desc>Address of an application-specific event loop procedure.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_Main</fun> can serve as the main program for Tcl-based shell
applications.  A ``shell application'' is a program
like tclsh or wish that supports both interactive interpretation
of Tcl and evaluation of a script contained in a file given as
a command line argument.  <fun>Tcl_Main</fun> is offered as a convenience
to developers of shell applications, so they do not have to 
reproduce all of the code for proper initialization of the Tcl
library and interactive shell operation.  Other styles of embedding
Tcl in an application are not supported by <fun>Tcl_Main</fun>.  Those
must be achieved by calling lower level functions in the Tcl library
directly.

The <fun>Tcl_Main</fun> function has been offered by the Tcl library
since release Tcl 7.4.  In older releases of Tcl, the Tcl library
itself defined a function <b>main</b>, but that lacks flexibility
of embedding style and having a function <b>main</b> in a library
(particularly a shared library) causes problems on many systems.
Having <b>main</b> in the Tcl library would also make it hard to use
Tcl in C++ programs, since C++ programs must have special C++
<b>main</b> functions.
</p>
<p>Normally each shell application contains a small <b>main</b> function
that does nothing but invoke <fun>Tcl_Main</fun>.
<fun>Tcl_Main</fun> then does all the work of creating and running a
<b>tclsh</b>-like application.
</p>
<p><fun>Tcl_Main</fun> is not provided by the public interface of Tcl's
stub library.  Programs that call <fun>Tcl_Main</fun> must be linked
against the standard Tcl library.  Extensions (stub-enabled or
not) are not intended to call <fun>Tcl_Main</fun>.
</p>
<p><fun>Tcl_Main</fun> is not thread-safe.  It should only be called by
a single master thread of a multi-threaded application.  This
restriction is not a problem with normal use described above.
</p>
<p><fun>Tcl_Main</fun> and therefore all applications based upon it, like
<b>tclsh</b>, use <fun>Tcl_GetStdChannel</fun> to initialize the standard
channels to their default values. See <fun>Tcl_StandardChannels</fun> for
more information.
</p>
<p><fun>Tcl_Main</fun> supports two modes of operation, depending on the
values of <i>argc</i> and <i>argv</i>.  If the first few arguments
in <i>argv</i> match ?<b>-encoding</b> <i>name</i>? ?<i>fileName</i>?,
where <i>fileName</i> does not begin with the character <i>-</i>,
then <i>fileName</i> is taken to be the name of a file containing
a <i>startup script</i>, and <i>name</i> is taken to be the name
of the encoding of the contents of that file, which <fun>Tcl_Main</fun>
will attempt to evaluate.  Otherwise, <fun>Tcl_Main</fun> will enter an
interactive mode.
</p>
<p>In either mode, <fun>Tcl_Main</fun> will define in its master interpreter
the Tcl variables <i>argc</i>, <i>argv</i>, <i>argv0</i>, and
<i>tcl_interactive</i>, as described in the documentation for <b>tclsh</b>.
</p>
<p>When it has finished its own initialization, but before it processes
commands, <fun>Tcl_Main</fun> calls the procedure given by the
<i>appInitProc</i> argument.  This procedure provides a ``hook'' for
the application to perform its own initialization of the interpreter
created by <fun>Tcl_Main</fun>, such as defining application-specific
commands.  The procedure must have an interface that matches the
type <type>Tcl_AppInitProc</type>:
</p>
<syntax cat="type" name="Tcl_AppInitProc" scope="global">
typedef int Tcl_AppInitProc(Tcl_Interp *<i>interp</i>);
</syntax>


<p><i>AppInitProc</i> is almost always a pointer to <fun>Tcl_AppInit</fun>; for more
details on this procedure, see the documentation for <fun>Tcl_AppInit</fun>.
</p>
<p>When the <i>appInitProc</i> is finished, <fun>Tcl_Main</fun> enters one
of its two modes.  If a startup script has been provided, <fun>Tcl_Main</fun>
attempts to evaluate it.  Otherwise, interactive mode begins with
examination of the variable <i>tcl_rcFileName</i> in the master
interpreter.  If that variable exists and holds the name of a readable
file, the contents of that file are evaluated in the master interpreter.
Then interactive operations begin,
with prompts and command evaluation results written to the standard
output channel, and commands read from the standard input channel
and then evaluated.  The prompts written to the standard output
channel may be customized by defining the Tcl variables <i>tcl_prompt1</i>
and <i>tcl_prompt2</i> as described in the documentation for <b>tclsh</b>.
The prompts and command evaluation results are written to the standard
output channel only if the Tcl variable <i>tcl_interactive</i> in the
master interpreter holds a non-zero integer value.
</p>
<p><fun>Tcl_SetMainLoop</fun> allows setting an event loop procedure to be run.
This allows, for example, Tk to be dynamically loaded and set its event
loop.  The event loop will run following the startup script.  If you
are in interactive mode, setting the main loop procedure will cause the
prompt to become fileevent based and then the loop procedure is called.
When the loop procedure returns in interactive mode, interactive operation
will continue.
The main loop procedure must have an interface that matches the type
<type>Tcl_MainLoopProc</type>:
</p>
<syntax cat="type" name="Tcl_MainLoopProc" scope="global">
typedef void Tcl_MainLoopProc(void);
</syntax>
<p><fun>Tcl_Main</fun> does not return.  Normally a program based on
<fun>Tcl_Main</fun> will terminate when the <cmd>exit</cmd> command is
evaluated.  In interactive mode, if an EOF or channel error
is encountered on the standard input channel, then <fun>Tcl_Main</fun>
itself will evaluate the <cmd>exit</cmd> command after the main loop
procedure (if any) returns.  In non-interactive mode, after
<fun>Tcl_Main</fun> evaluates the startup script, and the main loop
procedure (if any) returns, <fun>Tcl_Main</fun> will also evaluate
the <cmd>exit</cmd> command.

</p>
</section>
<seealso>
<ref>tclsh(1)</ref>
<ref>Tcl_GetStdChannel(3)</ref>
<ref>Tcl_StandardChannels(3)</ref>
<ref>Tcl_AppInit(3)</ref>
<ref>exit(n)</ref>
</seealso>
<keywords>
<keyword>application-specific initialization</keyword>
<keyword>command-line arguments</keyword>
<keyword>main program</keyword>
</keywords>
</manpage>
<manpage cat="misc" id="TCL_MEM_DEBUG" title="TCL_MEM_DEBUG" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!--  
     Copyright (c) 1992-1999 Karl Lehenbauer and Mark Diekhans.
     Copyright (c) 2000 by Scriptics Corporation.
     All rights reserved.
     
     RCS: @(#) $Id: TCL_MEM_DEBUG.3,v 1.7 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="TCL_MEM_DEBUG" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>TCL_MEM_DEBUG</name>
<desc>Compile-time flag to enable Tcl memory debugging</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>When Tcl is compiled with <b>TCL_MEM_DEBUG</b> defined, a powerful set
of memory debugging aids is included in the compiled binary.  This
includes C and Tcl functions which can aid with debugging
memory leaks, memory allocation overruns, and other memory related
errors.

</p>
</section>
<section>
<title>ENABLING MEMORY DEBUGGING</title>
<p>To enable memory debugging, Tcl should be recompiled from scratch with
<b>TCL_MEM_DEBUG</b> defined (e.g. by passing the
<i>--enable-symbols=mem</i> flag to the <i>configure</i> script when
building).  This will also compile in a non-stub
version of <fun>Tcl_InitMemory</fun> to add the <b>memory</b> command to Tcl.
</p>
<p><b>TCL_MEM_DEBUG</b> must be either left defined for all modules or undefined
for all modules that are going to be linked together.  If they are not, link
errors will occur, with either <fun>Tcl_DbCkfree</fun> and <fun>Tcl_DbCkalloc</fun> or
<b>Tcl_Ckalloc</b> and <b>Tcl_Ckfree</b> being undefined.
</p>
<p>Once memory debugging support has been compiled into Tcl, the C
functions <fun>Tcl_ValidateAllMemory</fun>, and <fun>Tcl_DumpActiveMemory</fun>,
and the Tcl <b>memory</b> command can be used to validate and examine
memory usage.

</p>
</section>
<section>
<title>GUARD ZONES</title>
<p>When memory debugging is enabled, whenever a call to <fun>ckalloc</fun> is
made, slightly more memory than requested is allocated so the memory debugging
code can keep track of the allocated memory, and eight-byte ``guard
zones'' are placed in front of and behind the space that will be
returned to the caller.  (The sizes of the guard zones are defined by the
C #define <b>LOW_GUARD_SIZE</b> and #define <b>HIGH_GUARD_SIZE</b>
in the file <i>generic/tclCkalloc.c</i> -- it can
be extended if you suspect large overwrite problems, at some cost in
performance.)  A known pattern is written into the guard zones and, on
a call to <fun>ckfree</fun>, the guard zones of the space being freed are
checked to see if either zone has been modified in any way.  If one
has been, the guard bytes and their new contents are identified, and a
``low guard failed'' or ``high guard failed'' message is issued.  The
``guard failed'' message includes the address of the memory packet and
the file name and line number of the code that called <fun>ckfree</fun>.
This allows you to detect the common sorts of one-off problems, where
not enough space was allocated to contain the data written, for
example.

</p>
</section>
<section>
<title>DEBUGGING DIFFICULT MEMORY CORRUPTION PROBLEMS</title>
<p>Normally, Tcl compiled with memory debugging enabled will make it easy
to isolate a corruption problem.  Turning on memory validation with
the memory command can help isolate difficult problems.  If you
suspect (or know) that corruption is occurring before the Tcl
interpreter comes up far enough for you to issue commands, you can set
<b>MEM_VALIDATE</b> define, recompile tclCkalloc.c and rebuild Tcl.
This will enable memory validation from the first call to
<fun>ckalloc</fun>, again, at a large performance impact.
</p>
<p>If you are desperate and validating memory on every call to
<fun>ckalloc</fun> and <fun>ckfree</fun> isn't enough, you can explicitly call
<fun>Tcl_ValidateAllMemory</fun> directly at any point.  It takes a <i>char
*</i> and an <i>int</i> which are normally the filename and line number
of the caller, but they can actually be anything you want.  Remember
to remove the calls after you find the problem.

</p>
</section>
<seealso>
<ref>ckalloc</ref>
<ref>memory</ref>
<ref>Tcl_ValidateAllMemory</ref>
<ref>Tcl_DumpActiveMemory</ref>
</seealso>
<keywords>
<keyword>memory</keyword>
<keyword>debug</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="tell" version="8.1" title="tell">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tell.n,v 1.9 2005/05/10 18:34:03 kennykb Exp $
 -->
<?TROFF.TH title="tell" section="n" date="8.1" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>tell</name>
<desc>Return current access position for an open channel</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tell</cmd> <m>channelId</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Returns an integer string giving the current access position in
<i>channelId</i>.  This value returned is a byte offset that can be passed to
<cmd>seek</cmd> in order to set the channel to a particular position.  Note
that this value is in terms of bytes, not characters like <b cat="AMBIGUOUS ambiguous cmd">read</b>.
The value returned is -1 for channels that do not support
seeking.
</p>
<p><i>ChannelId</i> must be an identifier for an open channel such as a
Tcl standard channel (<b>stdin</b>, <b>stdout</b>, or <b>stderr</b>),
the return value from an invocation of <b cat="AMBIGUOUS ambiguous cmd">open</b> or <cmd>socket</cmd>, or
the result of a channel creation command provided by a Tcl extension.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Read a line from a file channel only if it starts with <b>foobar</b>:
</p>
<example>
# Save the offset in case we need to undo the read...
set offset [<cmd>tell</cmd> $chan]
if {[read $chan 6] eq "foobar"} {
    gets $chan line
} else {
    set line {}
    # Undo the read...
    seek $chan $offset
}
</example>


</section>
<seealso>
<ref>file(n)</ref>
<ref>open(n)</ref>
<ref>close(n)</ref>
<ref>gets(n)</ref>
<ref>seek(n)</ref>
<ref>Tcl_StandardChannels(3)</ref>
</seealso>
<keywords>
<keyword>access position</keyword>
<keyword>file</keyword>
<keyword>channel</keyword>
<keyword>seek</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="text" version="8.5" title="text">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: text.n,v 1.43 2006/11/15 13:29:17 dkf Exp $
 -->
<?TROFF.TH title="text" section="n" date="8.5" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>text</name>
<name>tk_textCopy</name>
<name>tk_textCut</name>
<name>tk_textPaste</name>
<desc>Create and manipulate text widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> <m>pathName</m> ?<m>options</m>?
<cmd>tk_textCopy</cmd> <m>pathName</m>
<cmd>tk_textCut</cmd> <m>pathName</m>
<cmd>tk_textPaste</cmd> <m>pathName</m>
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-background</li>
<li>-borderwidth</li>
<li>-cursor</li>
<li>-exportselection</li>
<li>-font</li>
<li>-foreground</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-insertbackground</li>
<li>-insertborderwidth</li>
<li>-insertofftime</li>
<li>-insertontime</li>
<li>-insertwidth</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-selectbackground</li>
<li>-selectborderwidth</li>
<li>-selectforeground</li>
<li>-setgrid</li>
<li>-takefocus</li>
<li>-xscrollcommand</li>
<li>-yscrollcommand</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-autoseparators</name>
<dbname>autoSeparators</dbname>
<dbclass>AutoSeparators</dbclass>
<desc>Specifies a boolean that says whether separators are automatically
inserted in the undo stack. Only meaningful when the <b>-undo</b>
option is true.
</desc>
</optiondef>
<optiondef>
<name>-blockcursor</name>
<dbname>blockCursor</dbname>
<dbclass>BlockCursor</dbclass>
<desc><new version="8.5">Specifies a boolean that says whether the blinking insertion cursor 
should be drawn as a character-sized rectangular block.  If false 
(the default) a thin vertical line is used for the insertion cursor.
</new></desc>
</optiondef>
<optiondef>
<name>-endline</name>
<dbname>endLine</dbname>
<dbclass>EndLine</dbclass>
<desc><new version="8.5">Specifies an integer line index representing the last line of the
underlying textual data store that should be contained in the widget.
This allows a text widget to reflect only a portion of a larger piece
of text.   Instead of an integer, the empty string can be provided to
this configuration option, which will configure the widget to end
at the very last line in the textual data store.
</new></desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the desired height for the window, in units of characters
in the font given by the <b>-font</b> option.
Must be at least one.
</desc>
</optiondef>
<optiondef>
<name>-inactiveselectionbackground</name>
<dbname>inactiveSelectionBackground</dbname>
<dbclass>Foreground</dbclass>
<desc><new version="8.5">Specifies the colour to use for the selection (the <b>sel</b> tag) when
the window does not have the input focus.  If empty, <b>{}</b>, then no
selection is shown when the window does not have the focus.
</new></desc>
</optiondef>
<optiondef>
<name>-maxundo</name>
<dbname>maxUndo</dbname>
<dbclass>MaxUndo</dbclass>
<desc>Specifies the maximum number of compound undo actions on the undo
stack. A zero or a negative value imply an unlimited undo stack.
</desc>
</optiondef>
<optiondef>
<name>-spacing1</name>
<dbname>spacing1</dbname>
<dbclass>Spacing1</dbclass>
<desc>Requests additional space above each text line in the widget,
using any of the standard forms for screen distances.
If a line wraps, this option only applies to the first line
on the display.
This option may be overridden with <b>-spacing1</b> options in
tags.
</desc>
</optiondef>
<optiondef>
<name>-spacing2</name>
<dbname>spacing2</dbname>
<dbclass>Spacing2</dbclass>
<desc>For lines that wrap (so that they cover more than one line on the
display) this option specifies additional space to provide between
the display lines that represent a single line of text.
The value may have any of the standard forms for screen distances.
This option may be overridden with <b>-spacing2</b> options in
tags.
</desc>
</optiondef>
<optiondef>
<name>-spacing3</name>
<dbname>spacing3</dbname>
<dbclass>Spacing3</dbclass>
<desc>Requests additional space below each text line in the widget,
using any of the standard forms for screen distances.
If a line wraps, this option only applies to the last line
on the display.
This option may be overridden with <b>-spacing3</b> options in
tags.
</desc>
</optiondef>
<optiondef>
<name>-startline</name>
<dbname>startLine</dbname>
<dbclass>StartLine</dbclass>
<desc><new version="8.5">Specifies an integer line index representing the first line of the
underlying textual data store that should be contained in the widget.
This allows a text widget to reflect only a portion of a larger piece
of text.  Instead of an integer, the empty string can be provided to
this configuration option, which will configure the widget to start
at the very first line in the textual data store.
</new></desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Specifies one of two states for the text:  <b>normal</b> or <b>disabled</b>.
If the text is disabled then characters may not be inserted or deleted
and no insertion cursor will be displayed, even if the input focus is
in the widget.
</desc>
</optiondef>
<optiondef>
<name>-tabs</name>
<dbname>tabs</dbname>
<dbclass>Tabs</dbclass>
<desc>Specifies a set of tab stops for the window.  The option's value consists
of a list of screen distances giving the positions of the tab stops,
each of which is a distance relative to the left edge of the widget
(excluding borders, padding, etc).  Each
position may optionally be followed in the next list element
by one of the keywords <b>left</b>, <b>right</b>, <b>center</b>,
or <b>numeric</b>, which specifies how to justify
text relative to the tab stop.  <b>Left</b> is the default; it causes
the text following the tab character to be positioned with its left edge
at the tab position.  <b>Right</b> means that the right edge of the text
following the tab character is positioned at the tab position, and
<b>center</b> means that the text is centered at the tab position.
<b>Numeric</b> means that the decimal point in the text is positioned
at the tab position;  if there is no decimal point then the least
significant digit of the number is positioned just to the left of the
tab position;  if there is no number in the text then the text is
right-justified at the tab position. 
For example, <b>-tabs {2c left 4c 6c center}</b> creates three
tab stops at two-centimeter intervals;  the first two use left
justification and the third uses center justification.  
If the list of tab stops does not have enough elements to cover all
of the tabs in a text line, then Tk extrapolates new tab stops using
the spacing and alignment from the last tab stop in the list.  Tab
distances must be strictly positive, and must always increase from one 
tab stop to the next (if not, an error is thrown).
The value of the <b>tabs</b> option may be overridden by <b>-tabs</b>
options in tags.
If no <b>-tabs</b> option is specified, or if it is specified as
an empty list, then Tk uses default tabs spaced every eight
(average size) characters.  To achieve a different standard spacing,
for example every 4 characters, simply configure the widget with 
<b>-tabs "[expr {4 * [font measure $font 0]}] left" -tabstyle wordprocessor</b>.
</desc>
</optiondef>
<optiondef>
<name>-tabstyle</name>
<dbname>tabStyle</dbname>
<dbclass>TabStyle</dbclass>
<desc>Specifies how to interpret the relationship between tab stops on a line
and tabs in the text of that line.  The value must be <b>tabular</b> (the
default) or <b>wordprocessor</b>. Note that tabs are interpreted as they
are encountered in the text.  If the tab style is <b>tabular</b> then the
n'th tab character in the line's text will be associated with the n'th
tab stop defined for that line.  If the tab character's x coordinate
falls to the right of the n'th tab stop, then a gap of a single space
will be inserted as a fallback.  If the tab style is <b>wordprocessor</b>
then any tab character being laid out will use (and be defined by) the
first tab stop to the right of the preceding characters already laid out
on that line.  The value of the <b>tabstyle</b> option may be overridden
by <b>-tabstyle</b> options in tags.
</desc>
</optiondef>
<optiondef>
<name>-undo</name>
<dbname>undo</dbname>
<dbclass>Undo</dbclass>
<desc>Specifies a boolean that says whether the undo mechanism is active or
not.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired width for the window in units of characters
in the font given by the <b>-font</b> option.
If the font doesn't have a uniform width then the width of the
character ``0'' is used in translating from character units to
screen units.
</desc>
</optiondef>
<optiondef>
<name>-wrap</name>
<dbname>wrap</dbname>
<dbclass>Wrap</dbclass>
<desc>Specifies how to handle lines in the text that are too long to be
displayed in a single line of the text's window.
The value must be <b>none</b> or <b>char</b> or <b>word</b>.
A wrap mode of <b>none</b> means that each line of text appears as
exactly one line on the screen;  extra characters that don't fit
on the screen are not displayed.
In the other modes each line of text will be broken up into several
screen lines if necessary to keep all the characters visible.
In <b>char</b> mode a screen line break may occur after any character;
in <b>word</b> mode a line break will only be made at word boundaries.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> command creates a new window (given by the
<i>pathName</i> argument) and makes it into a text widget.
Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the text such as its default background color
and relief.  The <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> command returns the
path name of the new window.
</p>
<p>A text widget displays one or more lines of text and allows that
text to be edited.
Text widgets support four different kinds of annotations on the
text, called tags, marks, embedded windows or embedded images.
Tags allow different portions of the text
to be displayed with different fonts and colors.
In addition, Tcl commands can be associated with tags so
that scripts are invoked when particular actions such as keystrokes
and mouse button presses occur in particular ranges of the text.
See <ref refid="tags">TAGS</ref> below for more details.
</p>
<p>The second form of annotation consists of floating markers in the text
called "marks".
Marks are used to keep track of various interesting positions in the
text as it is edited.
See <ref refid="marks">MARKS</ref> below for more details.
</p>
<p>The third form of annotation allows arbitrary windows to be
embedded in a text widget.
See <ref refid="embedded-windows">EMBEDDED WINDOWS</ref> below for more details.
</p>
<p>The fourth form of annotation allows Tk images to be embedded in a text
widget.
See <ref refid="embedded-images">EMBEDDED IMAGES</ref> below for more details.
</p>
<p>The text widget also has a built-in undo/redo mechanism.
See <ref refid="the-undo-mechanism">THE UNDO MECHANISM</ref> below for more details.
</p>
<p><new version="8.5">The text widget allows for the creation of peer widgets.  These are
other text widgets which share the same underlying data (text, marks,
tags, images, etc).  See <ref refid="peer-widgets">PEER WIDGETS</ref> below for more details.
</new></p>
</section>
<section id="indices">
<title>INDICES</title>
<p>Many of the widget commands for texts take one or more indices
as arguments.
An index is a string used to indicate a particular place within
a text, such as a place to insert characters or one endpoint of a
range of characters to delete.
Indices have the syntax
</p>
<example>
<i>base modifier modifier modifier ...</i>
</example>
<p>Where <i>base</i> gives a starting point and the <i>modifier</i>s
adjust the index from the starting point (e.g. move forward or
backward one character).  Every index must contain a <i>base</i>,
but the <i>modifier</i>s are optional.
<new version="8.5">Most modifiers (as documented below) allow
an optional submodifier.  Valid submodifiers are <b>any</b>
and <b>display</b>. If the submodifier is abbreviated, then it must be
followed by whitespace, but otherwise there need be no space between the
submodifier and the following <i>modifier</i>.  Typically the <b>display</b>
submodifier adjusts the meaning of the following <i>modifier</i> to make
it refer to visual or non-elided units rather than logical units, but
this is explained for each relevant case below.  Lastly, where <i>count</i>
is used as part of a modifier, it can be positive or negative, so '<i>base</i>
- -3 lines' is perfectly valid (and equivalent to '<i>base</i>
+3lines').
</new></p>
<p>The <i>base</i> for an index must have one of the following forms:
</p>
<dl>
<dle>
<dt><m>line</m><b>.</b><m>char</m></dt>
<dd>Indicates <i>char</i>'th character on line <i>line</i>.
Lines are numbered from 1 for consistency with other UNIX programs
that use this numbering scheme.
Within a line, characters are numbered from 0.
If <i>char</i> is <b>end</b> then it refers to the newline character
that ends the line.
</dd>
</dle>
<dle>
<dt><b>@</b><m>x</m><b>,</b><m>y</m></dt>
<dd>Indicates the character that covers the pixel whose x and y coordinates
within the text's window are <i>x</i> and <i>y</i>.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the end of the text (the character just after the last
newline).
</dd>
</dle>
<dle>
<dt><m>mark</m></dt>
<dd>Indicates the character just after the mark whose name is <i>mark</i>.
</dd>
</dle>
<dle>
<dt><m>tag</m><b>.first</b></dt>
<dd>Indicates the first character in the text that has been tagged with
<i>tag</i>.
This form generates an error if no characters are currently tagged
with <i>tag</i>.
</dd>
</dle>
<dle>
<dt><m>tag</m><b>.last</b></dt>
<dd>Indicates the character just after the last one in the text that has
been tagged with <i>tag</i>.
This form generates an error if no characters are currently tagged
with <i>tag</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m></dt>
<dd>Indicates the position of the embedded window whose name is
<i>pathName</i>.
This form generates an error if there is no embedded window
by the given name.
</dd>
</dle>
<dle>
<dt><m>imageName</m></dt>
<dd>Indicates the position of the embedded image whose name is
<i>imageName</i>.
This form generates an error if there is no embedded image
by the given name.
</dd>
</dle>
</dl>
<p>If the <i>base</i> could match more than one of the above forms, such
as a <i>mark</i> and <i>imageName</i> both having the same value, then
the form earlier in the above list takes precedence.
If modifiers follow the base index, each one of them must have one
of the forms listed below.  Keywords such as <b>chars</b> and <b>wordend</b>
may be abbreviated as long as the abbreviation is unambiguous.
</p>
<dl>
<dle>
<dt><b>+</b> <m>count</m> ?<m>submodifier</m>? <b>chars</b></dt>
<dd><new version="8.5">Adjust the index forward by <i>count</i> characters, moving to later lines
in the text if necessary.  If there are fewer than <i>count</i> characters
in the text after the current index, then set the index to the last index
in the text.  Spaces on either side of <i>count</i> are optional.  If the
<b>display</b> submodifier is given, elided characters are skipped over
without being counted.  If <b>any</b> is given, then all characters are
counted.  For historical reasons, if neither modifier is given then the
count actually takes place in units of index positions (see <b>indices</b>
for details).  This behaviour may be changed in a future major release,
so if you need an index count, you are encouraged to use <b>indices</b>
instead wherever possible.
</new></dd>
</dle>
<dle>
<dt><b>-</b> <m>count</m> ?<m>submodifier</m>? <b>chars</b></dt>
<dd>Adjust the index backward by <i>count</i> characters, moving to earlier
lines in the text if necessary.  If there are fewer than <i>count</i>
characters in the text before the current index, then set the index to
<new version="8.5">the first index in the text (1.0).  Spaces on either side of <i>count</i>
are optional.  If the <b>display</b> submodifier is given, elided
characters are skipped over without being counted.  If <b>any</b> is
given, then all characters are counted.  For historical reasons, if
neither modifier is given then the count actually takes place in units of
index positions (see <b>indices</b> for details).  This behaviour may be
changed in a future major release, so if you need an index count, you are
encouraged to use <b>indices</b> instead wherever possible.
</new></dd>
</dle>
<dle>
<dt><b>+</b> <m>count</m> ?<m>submodifier</m>? <b>indices</b></dt>
<dd><new version="8.5">Adjust the index forward by <i>count</i> index positions, moving to later
lines in the text if necessary.  If there are fewer than <i>count</i>
index positions in the text after the current index, then set the index
to the last index position in the text.  Spaces on either side of
<i>count</i> are optional.  Note that an index position is either a single
character or a single embedded image or embedded window.  If the
<b>display</b> submodifier is given, elided indices are skipped over
without being counted.  If <b>any</b> is given, then all indices are
counted; this is also the default behaviour if no modifier is given.
</new></dd>
</dle>
<dle>
<dt><b>-</b> <m>count</m> ?<m>submodifier</m>? <b>indices</b></dt>
<dd><new version="8.5">Adjust the index backward by <i>count</i> index positions, moving to
earlier lines in the text if necessary.  If there are fewer than
<i>count</i> index positions in the text before the current index, then
set the index to the first index position (1.0) in the text.  Spaces on
either side of <i>count</i> are optional.  If the <b>display</b>
submodifier is given, elided indices are skipped over without being
counted.  If <b>any</b> is given, then all indices are counted; this is
also the default behaviour if no modifier is given.
</new></dd>
</dle>
<dle>
<dt><b>+</b> <m>count</m> ?<m>submodifier</m>? <b>lines</b></dt>
<dd><new version="8.5">Adjust the index forward by <i>count</i> lines, retaining the same
character position within the line.  If there are fewer than <i>count</i>
lines after the line containing the current index, then set the index to
refer to the same character position on the last line of the text.  Then,
if the line is not long enough to contain a character at the indicated
character position, adjust the character position to refer to the last
character of the line (the newline).  Spaces on either side of
<i>count</i> are optional.  If the <b>display</b> submodifier is given,
then each visual display line is counted separately.  Otherwise, if
<b>any</b> (or no modifier) is given, then each logical line (no matter
how many times it is visually wrapped) counts just once.  If the relevant
lines are not wrapped, then these two methods of counting are equivalent.
</new></dd>
</dle>
<dle>
<dt><b>-</b> <m>count</m> ?<m>submodifier</m>? <b>lines</b></dt>
<dd><new version="8.5">Adjust the index backward by <i>count</i> logical lines, retaining the
same character position within the line.  If there are fewer than
<i>count</i> lines before the line containing the current index, then set
the index to refer to the same character position on the first line of
the text.  Then, if the line is not long enough to contain a character at
the indicated character position, adjust the character position to refer
to the last character of the line (the newline).  Spaces on either side
of <i>count</i> are optional.  If the <b>display</b> submodifier is given,
then each visual display line is counted separately.  Otherwise, if
<b>any</b> (or no modifier) is given, then each logical line (no matter
how many times it is visually wrapped) counts just once.  If the relevant
lines are not wrapped, then these two methods of counting are equivalent.
</new></dd>
</dle>
<dle>
<dt>?<m>submodifier</m>? <b>linestart</b></dt>
<dd><new version="8.5">Adjust the index to refer to the first index on the line.  If the 
<b>display</b> submodifier is given, this is the first index on the 
display line, otherwise on the logical line.
</new></dd>
</dle>
<dle>
<dt>?<m>submodifier</m>? <b>lineend</b></dt>
<dd><new version="8.5">Adjust the index to refer to the last index on the line (the
newline).  If the <b>display</b> submodifier is given, this is the last
index on the display line, otherwise on the logical line.
</new></dd>
</dle>
<dle>
<dt>?<m>submodifier</m>? <b>wordstart</b></dt>
<dd><new version="8.5">Adjust the index to refer to the first character of the word containing
the current index.  A word consists of any number of adjacent characters
that are letters, digits, or underscores, or a single character that is
not one of these.  If the <b>display</b> submodifier is given, this only
examines non-elided characters, otherwise all characters (elided or not)
are examined.
</new></dd>
</dle>
<dle>
<dt>?<m>submodifier</m>? <b>wordend</b></dt>
<dd><?NEW 8.5?>Adjust the index to refer to the character just after the last one of the
word containing the current index.  If the current index refers to the
last character of the text then it is not modified.  If the <b>display</b>
submodifier is given, this only examines non-elided characters, otherwise
all characters (elided or not) are examined.
</dd>
</dle>
</dl>
<p>If more than one modifier is present then they are applied in
left-to-right order.  For example, the index ``<b>end - 1 chars</b>''
refers to the next-to-last character in the text and
``<b>insert wordstart - 1 c</b>'' refers to the character just before
the first one in the word containing the insertion cursor.  Modifiers
are applied one by one in this left to right order, and after each step
the resulting index is constrained to be a valid index in the text 
widget.  So, for example, the index ``<b>1.0 -1c +1c</b>'' refers to the 
index ``<b>2.0</b>''.
</p>
<p>Where modifiers result in index changes by display lines, display chars
or display indices, and the <i>base</i> refers to an index inside an
elided tag,
that base index is considered to be equivalent to the first following
non-elided index.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<section id="tags">
<title>TAGS</title>
<p>The first form of annotation in text widgets is a tag.
A tag is a textual string that is associated with some of the characters
in a text.
Tags may contain arbitrary characters, but it is probably best to
avoid using the characters `` '' (space), <b>+</b>, or <b>-</b>:
these characters have special meaning in indices, so tags containing
them can't be used as indices.
There may be any number of tags associated with characters in a
text.
Each tag may refer to a single character, a range of characters, or
several ranges of characters.
An individual character may have any number of tags associated with it.
</p>
<p>A priority order is defined among tags, and this order is used in
implementing some of the tag-related functions described below.
When a tag is defined (by associating it with characters or setting
its display options or binding commands to it), it is given
a priority higher than any existing tag.
The priority order of tags may be redefined using the
``<i>pathName</i> <b>tag raise</b>'' and ``<i>pathName</i> <b>tag lower</b>''
widget commands.
</p>
<p>Tags serve three purposes in text widgets.
First, they control the way information is displayed on the screen.
By default, characters are displayed as determined by the
<b>background</b>, <cmd>font</cmd>, and <b>foreground</b> options for the
text widget.
However, display options may be associated with individual tags
using the ``<i>pathName</i> <b>tag configure</b>'' widget command.
If a character has been tagged, then the display options associated
with the tag override the default display style.
The following options are currently supported for tags:
</p>
<dl>
<dle>
<dt><b>-background</b> <m>color</m></dt>
<dd><i>Color</i> specifies the background color to use for characters
associated with the tag.
It may have any of the forms accepted by <fun>Tk_GetColor</fun>.
</dd>
</dle>
<dle>
<dt><b>-bgstipple</b> <m>bitmap</m></dt>
<dd><i>Bitmap</i> specifies a bitmap that is used as a stipple pattern
for the background.
It may have any of the forms accepted by <fun>Tk_GetBitmap</fun>.
If <i>bitmap</i> hasn't been specified, or if it is specified
as an empty string, then a solid fill will be used for the
background.
</dd>
</dle>
<dle>
<dt><b>-borderwidth</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies the width of a 3-D border to draw around
the background.
It may have any of the forms accepted by <fun>Tk_GetPixels</fun>.
This option is used in conjunction with the <b>-relief</b>
option to give a 3-D appearance to the background for characters;
it is ignored unless the <b>-background</b> option
has been set for the tag.
</dd>
</dle>
<dle>
<dt><b>-elide</b> <m>boolean</m> </dt>
<dd><i>Elide</i> specifies whether the data should
be elided.  Elided data (characters, images, embedded windows, etc) is
not displayed and takes no space on screen, but further on behaves just
as normal data.
</dd>
</dle>
<dle>
<dt><b>-fgstipple</b> <m>bitmap</m></dt>
<dd><i>Bitmap</i> specifies a bitmap that is used as a stipple pattern
when drawing text and other foreground information such as
underlines.
It may have any of the forms accepted by <fun>Tk_GetBitmap</fun>.
If <i>bitmap</i> hasn't been specified, or if it is specified
as an empty string, then a solid fill will be used.
</dd>
</dle>
<dle>
<dt><b>-font</b> <m>fontName</m></dt>
<dd><i>FontName</i> is the name of a font to use for drawing characters.
It may have any of the forms accepted by <fun>Tk_GetFont</fun>.
</dd>
</dle>
<dle>
<dt><b>-foreground</b> <m>color</m></dt>
<dd><i>Color</i> specifies the color to use when drawing text and other
foreground information such as underlines.
It may have any of the forms accepted by <fun>Tk_GetColor</fun>.
</dd>
</dle>
<dle>
<dt><b>-justify</b> <m>justify</m></dt>
<dd>If the first non-elided character of a display line has a tag for which this
option has been specified, then <i>justify</i> determines how to
justify the line.
It must be one of <b>left</b>, <b>right</b>, or <b>center</b>.
If a line wraps, then the justification for each line on the
display is determined by the first non-elided character of that display line.
</dd>
</dle>
<dle>
<dt><b>-lmargin1</b> <m>pixels</m></dt>
<dd>If the first non-elided character of a text line has a tag for which this
option has been specified, then <i>pixels</i> specifies how
much the line should be indented from the left edge of the
window.
<i>Pixels</i> may have any of the standard forms for screen
distances.
If a line of text wraps, this option only applies to the
first line on the display;  the <b>-lmargin2</b> option controls
the indentation for subsequent lines.
</dd>
</dle>
<dle>
<dt><b>-lmargin2</b> <m>pixels</m></dt>
<dd>If the first non-elided character of a display line has a tag for which this
option has been specified, and if the display line is not the
first for its text line (i.e., the text line has wrapped), then
<i>pixels</i> specifies how much the line should be indented from
the left edge of the window.
<i>Pixels</i> may have any of the standard forms for screen
distances.
This option is only used when wrapping is enabled, and it only
applies to the second and later display lines for a text line.
</dd>
</dle>
<dle>
<dt><b>-offset</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies an amount by which the text's baseline
should be offset vertically from the baseline of the overall
line, in pixels.
For example, a positive offset can be used for superscripts
and a negative offset can be used for subscripts.
<i>Pixels</i> may have any of the standard forms for screen
distances.
</dd>
</dle>
<dle>
<dt><b>-overstrike</b> <m>boolean</m></dt>
<dd>Specifies whether or not to draw a horizontal rule through
the middle of characters.
<i>Boolean</i> may have any of the forms accepted by <fun>Tcl_GetBoolean</fun>.
</dd>
</dle>
<dle>
<dt><b>-relief</b> <m>relief</m></dt>
<dd><i>Relief</i> specifies the 3-D relief to use for drawing backgrounds,
in any of the forms accepted by <fun>Tk_GetRelief</fun>.
This option is used in conjunction with the <b>-borderwidth</b>
option to give a 3-D appearance to the background for characters;
it is ignored unless the <b>-background</b> option
has been set for the tag.
</dd>
</dle>
<dle>
<dt><b>-rmargin</b> <m>pixels</m></dt>
<dd>If the first non-elided character of a display line has a tag for which this
option has been specified, then <i>pixels</i> specifies how wide
a margin to leave between the end of the line and the right
edge of the window.
<i>Pixels</i> may have any of the standard forms for screen
distances.
This option is only used when wrapping is enabled.
If a text line wraps, the right margin for each line on the
display is determined by the first non-elided character of that display
line.
</dd>
</dle>
<dle>
<dt><b>-spacing1</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies how much additional space should be
left above each text line, using any of the standard forms for
screen distances.
If a line wraps, this option only applies to the first
line on the display.
</dd>
</dle>
<dle>
<dt><b>-spacing2</b> <m>pixels</m></dt>
<dd>For lines that wrap, this option specifies how much additional
space to leave between the display lines for a single text line.
<i>Pixels</i> may have any of the standard forms for screen
distances.
</dd>
</dle>
<dle>
<dt><b>-spacing3</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies how much additional space should be
left below each text line, using any of the standard forms for
screen distances.
If a line wraps, this option only applies to the last
line on the display.
</dd>
</dle>
<dle>
<dt><b>-tabs</b> <m>tabList</m></dt>
<dd><i>TabList</i> specifies a set of tab stops in the same form
as for the <b>-tabs</b> option for the text widget.  This
option only applies to a display line if it applies to the
first non-elided character on that display line.
If this option is specified as an empty string, it cancels
the option, leaving it unspecified for the tag (the default).
If the option is specified as a non-empty string that is
an empty list, such as <b>-tags { }</b>, then it requests
default 8-character tabs as described for the <b>tags</b>
widget option.
</dd>
</dle>
<dle>
<dt><b>-tabstyle</b> <m>style</m></dt>
<dd><i>Style</i> specifies either the <i>tabular</i> or 
<i>wordprocessor</i> style of tabbing to use for the text widget.
This option only applies to a display line if it applies to the
first non-elided character on that display line.
If this option is specified as an empty string, it cancels
the option, leaving it unspecified for the tag (the default).
</dd>
</dle>
<dle>
<dt><b>-underline</b> <m>boolean</m></dt>
<dd><i>Boolean</i> specifies whether or not to draw an underline underneath
characters.
It may have any of the forms accepted by <fun>Tcl_GetBoolean</fun>.
</dd>
</dle>
<dle>
<dt><b>-wrap</b> <m>mode</m></dt>
<dd><i>Mode</i> specifies how to handle lines that are wider than the
text's window.
It has the same legal values as the <b>-wrap</b> option
for the text widget:  <b>none</b>, <b>char</b>, or <b>word</b>.
If this tag option is specified, it overrides the <b>-wrap</b> option
for the text widget.
</dd>
</dle>
</dl>
<p>If a character has several tags associated with it, and if their
display options conflict, then the options of the highest priority
tag are used.
If a particular display option hasn't been specified for a
particular tag, or if it is specified as an empty string, then
that option will never be used;  the next-highest-priority
tag's option will used instead.
If no tag specifies a particular display option, then the default
style for the widget will be used.
</p>
<p>The second purpose for tags is event bindings.
You can associate bindings with a tag in much the same way you can
associate bindings with a widget class:  whenever particular X
events occur on characters with the given tag, a given
Tcl command will be executed.
Tag bindings can be used to give behaviors to ranges of characters;
among other things, this allows hypertext-like
features to be implemented.
For details, see the description of the <b>tag bind</b> widget
command below.
<new version="8.5">Tag bindings are shared between all peer widgets
(including any bindings for the special <b>sel</b> tag).
</new></p>
<p>The third use for tags is in managing the selection.
See <ref refid="the-selection">THE SELECTION</ref> below.
<new version="8.5">With the exception of the special <b>sel</b>
tag, all tags are shared between peer text widgets, and may be
manipulated on an equal basis from any such widget.  The <b>sel</b>
tag exists separately and independently in each peer text widget (but
any tag bindings to <b>sel</b> are shared).
</new></p>
</section>
<section id="marks">
<title>MARKS</title>
<p>The second form of annotation in text widgets is a mark.
Marks are used for remembering particular places in a text.
They are something like tags, in that they have names and
they refer to places in the file, but a mark isn't associated
with particular characters.
Instead, a mark is associated with the gap between two characters.
Only a single position may be associated with a mark at any given
time.
If the characters around a mark are deleted the mark will still
remain;  it will just have new neighbor characters.
In contrast, if the characters containing a tag are deleted then
the tag will no longer have an association with characters in
the file.
Marks may be manipulated with the ``<i>pathName</i> <b>mark</b>'' widget
command, and their current locations may be determined by using the
mark name as an index in widget commands.
</p>
<p>Each mark also has a "gravity", which is either <b>left</b> or
<b>right</b>.
The gravity for a mark specifies what happens to the mark when
text is inserted at the point of the mark.
If a mark has left gravity, then the mark is treated as if it
were attached to the character on its left, so the mark will
remain to the left of any text inserted at the mark position.
If the mark has right gravity, new text inserted at the mark
position will appear to the left of the mark (so that the mark
remains rightmost).  The gravity for a mark defaults to <b>right</b>.
</p>
<p>The name space for marks is different from that for tags:  the
same name may be used for both a mark and a tag, but they will refer
to different things.
</p>
<p>Two marks have special significance.
First, the mark <b>insert</b> is associated with the insertion cursor,
as described under <ref refid="the-insertion-cursor">THE INSERTION CURSOR</ref> below.
Second, the mark <b>current</b> is associated with the character
closest to the mouse and is adjusted automatically to track the
mouse position and any changes to the text in the widget (one
exception:  <b>current</b> is not updated in response to mouse
motions if a mouse button is down;  the update will be deferred
until all mouse buttons have been released).
Neither of these special marks may be deleted.
<new version="8.5">With the exception of
these two special marks, all marks are shared between peer text 
widgets, and may be manipulated on an equal basis from any peer.
</new></p>
</section>
<section id="embedded-windows">
<title>EMBEDDED WINDOWS</title>
<p>The third form of annotation in text widgets is an embedded window.
Each embedded window annotation causes a window to be displayed
at a particular point in  the text.
There may be any number of embedded windows in a text widget,
and any widget may be used as an embedded window (subject to the
usual rules for geometry management, which require the text window
to be the parent of the embedded window or a descendant of its
parent).
The embedded window's position on the screen will be updated as the
text is modified or scrolled, and it will be mapped and unmapped as
it moves into and out of the visible area of the text widget.
Each embedded window occupies one
<new version="8.5">unit's
</new>worth of index space
in the text widget, and it may be referred to either by the name
of its embedded window or by its position in the widget's
index space.
If the range of text containing the embedded window is deleted then
the window is destroyed.
<new version="8.5">Similarly if the text widget as a whole is deleted, then the window is
destroyed.
</new></p>
<p>When an embedded window is added to a text widget with the
<b>window create</b> widget command, several configuration
options may be associated with it.
These options may be  modified later with the <b>window configure</b>
widget command.
The following options are currently supported:
</p>
<dl>
<dle>
<dt><b>-align</b> <m>where</m></dt>
<dd>If the window is not as tall as the line in which it is displayed,
this option determines where the window is displayed in the line.
<i>Where</i> must have one of the values <b>top</b> (align the top of the window
with the top of the line), <b>center</b> (center the window
within the range of the line), <b>bottom</b> (align the bottom of the
window with the bottom of the line's area),
or <b>baseline</b> (align the bottom of the window with the baseline
of the line).
</dd>
</dle>
<dle>
<dt><b>-create</b> <m>script</m></dt>
<dd>Specifies a Tcl script that may be evaluated to create the window
for the annotation.
If no <b>-window</b> option has been specified for the annotation
this script will be evaluated when the annotation is about to
be displayed on the screen.
<i>Script</i> must create a window for the annotation and return
the name of that window as its result.
<new version="8.5">Two substitutions will be performed in <i>script</i> before evaluation.
<i>%W</i> will be substituted by the name of the parent text widget,
and <i>%%</i> will be substituted by a single <i>%</i>.
</new>If the annotation's window should ever be deleted, <i>script</i>
will be evaluated again the next time the annotation is displayed.
</dd>
</dle>
<dle>
<dt><b>-padx</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies the amount of extra space to leave on
each side of the embedded window.
It may have any of the usual forms defined for a screen distance.
</dd>
</dle>
<dle>
<dt><b>-pady</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies the amount of extra space to leave on
the top and on the bottom of the embedded window.
It may have any of the usual forms defined for a screen distance.
</dd>
</dle>
<dle>
<dt><b>-stretch</b> <m>boolean</m></dt>
<dd>If the requested height of the embedded window is less than the
height of the line in which it is displayed, this option can be
used to specify whether the window should be stretched vertically
to fill its line.
If the <b>-pady</b> option has been specified as well, then the
requested padding will be retained even if the window is
stretched.
</dd>
</dle>
<dle>
<dt><b>-window</b> <m>pathName</m></dt>
<dd>Specifies the name of a window to display in the annotation.
<new version="8.5">Note that if a <i>pathName</i> has been set, then later configuring a
window to the empty string will not delete the widget corresponding to
the old <i>pathName</i>. Rather it will remove the association between
the old <i>pathName</i> and the text widget.  If multiple peer widgets
are in use, it is usually simpler to use the <b>-create</b> option if
embedded windows are desired in each peer.
</new></dd>
</dle>
</dl>
</section>
<section id="embedded-images">
<title>EMBEDDED IMAGES</title>
<p>The final form of annotation in text widgets is an embedded image.
Each embedded image annotation causes an image to be displayed
at a particular point in  the text.
There may be any number of embedded images in a text widget,
and a particular image may be embedded in multiple places in the same
text widget.
The embedded image's position on the screen will be updated as the
text is modified or scrolled.
Each embedded image occupies one
<new version="8.5">unit's
</new>worth of index space
in the text widget, and it may be referred to either by
its position in the widget's index space, or the name it is assigned
when the image is inserted into the text widget with <b>image create</b>.
If the range of text containing the embedded image is deleted then
that copy of the image is removed from the screen.
</p>
<p>When an embedded image is added to a text widget with the <b>image
create</b> widget command, a name unique to this instance of the image
is returned.  This name may then be used to refer to this image
instance.  The name is taken to be the value of the <b>-name</b> option
(described below).  If the <b>-name</b> option is not provided, the
<b>-image</b> name is used instead.  If the <i>imageName</i> is already
in use in the text widget, then <b>#</b><i>nn</i> is added to the end of the
<i>imageName</i>, where <i>nn</i> is an arbitrary integer.  This insures
the <i>imageName</i> is unique.
Once this name is assigned to this instance of the image, it does not 
change, even though the <b>-image</b> or <b>-name</b> values can be changed
with <b>image configure</b>.
</p>
<p>When an embedded image is added to a text widget with the
<b>image create</b> widget command, several configuration
options may be associated with it.
These options may be modified later with the <b>image configure</b>
widget command.
The following options are currently supported:
</p>
<dl>
<dle>
<dt><b>-align</b> <m>where</m></dt>
<dd>If the image is not as tall as the line in which it is displayed,
this option determines where the image is displayed in the line.
<i>Where</i> must have one of the values <b>top</b> (align the top of the image
with the top of the line), <b>center</b> (center the image
within the range of the line), <b>bottom</b> (align the bottom of the
image with the bottom of the line's area),
or <b>baseline</b> (align the bottom of the image with the baseline
of the line).
</dd>
</dle>
<dle>
<dt><b>-image</b> <m>image</m></dt>
<dd>Specifies the name of the Tk image to display in the annotation.
If <i>image</i> is not a valid Tk image, then an error is returned.
</dd>
</dle>
<dle>
<dt><b>-name</b> <m>ImageName</m></dt>
<dd>Specifies the name by which this image instance may be referenced in
the text widget. If <i>ImageName</i> is not supplied, then the
name of the Tk image is used instead.
If the <i>imageName</i> is already in use, <i>#nn</i> is appended to
the end of the name as described above.
</dd>
</dle>
<dle>
<dt><b>-padx</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies the amount of extra space to leave on
each side of the embedded image.
It may have any of the usual forms defined for a screen distance.
</dd>
</dle>
<dle>
<dt><b>-pady</b> <m>pixels</m></dt>
<dd><i>Pixels</i> specifies the amount of extra space to leave on
the top and on the bottom of the embedded image.
It may have any of the usual forms defined for a screen distance.
</dd>
</dle>
</dl>
</section>
<section id="the-selection">
<title>THE SELECTION</title>
<p>Selection support is implemented via tags.
If the <b>exportSelection</b> option for the text widget is true
then the <b>sel</b> tag will be associated with the selection:
</p>
<ol>
<li>Whenever characters are tagged with <b>sel</b> the text widget
will claim ownership of the selection.
</li>
<li>Attempts to retrieve the
selection will be serviced by the text widget, returning all the
characters with the <b>sel</b> tag.
</li>
<li>If the selection is claimed away by another application or by another
window within this application, then the <b>sel</b> tag will be removed
from all characters in the text.
</li>
<li>Whenever the <b>sel</b> tag range changes a virtual event 
<b>&lt;&lt;Selection&gt;&gt;</b> is generated.
</li>
</ol>
<p>The <b>sel</b> tag is automatically defined when a text widget is
created, and it may not be deleted with the ``<i>pathName</i> <b>tag delete</b>''
widget command.  Furthermore, the <b>selectBackground</b>,
<b>selectBorderWidth</b>, and <b>selectForeground</b> options for
the text widget are tied to the <b>-background</b>,
<b>-borderwidth</b>, and <b>-foreground</b> options for the <b>sel</b>
tag:  changes in either will automatically be reflected in the
other.
<new version="8.5">Also the
<b>-inactiveselectionbackground</b> option for the text widget is used
instead of <b>-selectbackground</b> when the text widget does not have
the focus.  This allows programmatic control over the visualization of
the <b>sel</b> tag for foreground and background windows, or to have
<b>sel</b> not shown at all (when <b>-inactiveselectionbackground</b> is
empty) for background windows.  Each peer text widget has its own
<b>sel</b> tag which can be separately configured and set.
</new></p>
</section>
<section id="the-insertion-cursor">
<title>THE INSERTION CURSOR</title>
<p>The mark named <b>insert</b> has special significance in text widgets.
It is defined automatically when a text widget is created and it
may not be unset with the ``<i>pathName</i> <b>mark unset</b>'' widget
command.
The <b>insert</b> mark represents the position of the insertion
cursor, and the insertion cursor will automatically be drawn at
this point whenever the text widget has the input focus.
</p>
</section>
<section>
<title>THE MODIFIED FLAG</title>
<p>The text widget can keep track of changes to the content of the widget
by means of the modified flag. Inserting or deleting text will set
this flag. The flag can be queried, set and cleared programmatically
as well. Whenever the flag changes state a <b>&lt;&lt;Modified&gt;&gt;</b> virtual 
event is generated. See the <b>edit modified</b> widget command for 
more details.
</p>
</section>
<section id="the-undo-mechanism">
<title>THE UNDO MECHANISM</title>
<p>The text widget has an unlimited undo and redo mechanism (when the
<b>-undo</b> widget option is true) which records every insert and
delete action on a stack.
</p>
<p>Boundaries (called "separators") are inserted between edit actions.  The
purpose of these separators is to group inserts, deletes and replaces
into one compound edit action.  When undoing a change everything between
two separators will be undone.  The undone changes are then moved to the
redo stack, so that an undone edit can be redone again.  The redo stack
is cleared whenever new edit actions are recorded on the undo stack.  The
undo and redo stacks can be cleared to keep their depth under control.
</p>
<p>Separators are inserted automatically when the <b>-autoseparators</b>
widget option is true.  You can insert separators programmatically as
well.  If a separator is already present at the top of the undo stack
no other will be inserted.  That means that two separators on the undo
stack are always separated by at least one insert or delete action.
</p>
<p>The undo mechanism is also linked to the modified flag.  This means
that undoing or redoing changes can take a modified text widget back
to the unmodified state or vice versa.  The modified flag will be set
automatically to the appropriate state.  This automatic coupling
does not work when the modified flag has been set by the user, until
the flag has been reset again.
</p>
<p>See below for the <b>edit</b> widget command that controls the undo
mechanism.
</p>
</section>
<section id="peer-widgets">
<title>PEER WIDGETS</title>
<p><?NEW 8.5?>The text widget has a separate store of all its data concerning each
line's textual contents, marks, tags, images and windows, and the undo
stack.
</p>
<p>While this data store cannot be accessed directly (i.e. without a text
widget as an intermediary), multiple text widgets can be created, each
of which present different views on the same underlying data.  Such
text widgets are known as peer text widgets.
</p>
<p>As text is added, deleted, edited and coloured in any one widget, and as
images, marks, tags are adjusted, all such changes will be reflected in
all peers.
</p>
<p>All data and markup is shared, except for a few small details.  First,
the <b>sel</b> tag may be set and configured (in its display style)
differently for each peer.  Second, each peer has its own <b>insert</b>
and <b>current</b> mark positions (but all other marks are shared).
Third, embedded windows, which are arbitrary other widgets, cannot be
shared between peers.  This means the <b>-window</b> option of embedded
windows is independently set for each peer (it is advisable to use
the <b>-create</b> script capabilities to allow each peer to create its
own embedded windows as needed).  Fourth, all of the configuration
options of each peer (e.g. <b>-font</b>, etc) can be set independently,
with the exception of <b>-undo</b>, <b>-maxUndo</b>, <b>-autoSeparators</b>
(i.e. all undo, redo and modified state issues are shared).
</p>
<p>Finally any single peer need not contain all lines from the underlying
data store.  When creating a peer, a contiguous range of lines (e.g.
only lines 52 through 125) may be specified.  This allows a peer to
contain just a small portion of the overall text.  The range of lines
will expand and contract as text is inserted or deleted.  The peer will
only ever display complete lines of text (one cannot share just part of
a line).  If the peer's contents contracts to nothing (i.e. all complete
lines in the peer widget have been deleted from another widget), then it
is impossible for new lines to be inserted.  The peer will simply become
an empty shell on which the background can be configured, but which will
never show any content (without manual reconfiguration of the start and
end lines).  Note that a peer which does not contain all of the
underlying data store still has indices numbered from "1.0" to "end".
It is simply that those indices reflect a subset of the total data, and
data outside the contained range is not accessible to the peer.  This
means that the command <b>$peer index end</b> may return quite different
values in different peers.  Similarly, commands like <b>$peer tag
ranges</b> will not return index ranges outside that which is meaningful
to the peer.  The configuration options <b>-startline</b> and
<b>-endline</b> may be used to control how much of the underlying data is
contained in any given text widget.
</p>
<p>Note that peers are really peers.  Deleting the 'original' text widget
will not cause any other peers to be deleted, or otherwise affected.
</p>
<p>See below for the <b>peer</b> widget command that controls the creation
of peer widgets.
</p>
</section>
<?ENDNEW CONFUSED 8.5?>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> command creates a new Tcl command whose
name is the same as the path name of the text's window.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>PathName</i> is the name of the command, which is the same as
the text widget's path name.  <i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for text widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>index</m></dt>
<dd>Returns a list of four elements describing the screen area
of the character given by <i>index</i>.
The first two elements of the list give the x and y coordinates
of the upper-left corner of the area occupied by the
character, and the last two elements give the width and height
of the area.
If the character is only partially visible on the screen, then
the return value reflects just the visible part.
If the character is not visible on the screen then the return
value is an empty list.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>compare</b> <m>index1 op index2</m></dt>
<dd>Compares the indices given by <i>index1</i> and <i>index2</i> according
to the relational operator given by <i>op</i>, and returns 1 if
the relationship is satisfied and 0 if it isn't.
<i>Op</i> must be one of the operators &lt;, &lt;=, ==, &gt;=, &gt;, or !=.
If <i>op</i> is == then 1 is returned if the two indices refer to
the same character, if <i>op</i> is &lt; then 1 is returned if <i>index1</i>
refers to an earlier character in the text than <i>index2</i>, and
so on.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? <m>?value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b>
command.
</dd>
</dle>
<dle version="8.5">
<dt><m>pathName</m> <b>count</b> <m>?options</m>? <m>index1 index2</m></dt>
<dd>Counts the number of relevant things between the two indices.
If <i>index1</i> is after <i>index2</i>, the result will be a negative number 
(and this holds for each of the possible options).
The actual items which are counted depend on the
options given.  The result is a list of integers, one for the result of
each counting option given.  Valid counting options are <b>-chars</b>,
<b>-displaychars</b>, <b>-displayindices</b>, <b>-displaylines</b>,
<b>-indices</b>, <b>-lines</b>, <b>-xpixels</b> and <b>-ypixels</b>. The
default value, if no option is specified, is <b>-indices</b>. There is an
additional possible option <b>-update</b> which is a modifier.  If given,
then all subsequent options ensure that any possible out of date
information is recalculated.  This currently only has any effect for the
<i>-ypixels</i> count (which, if <b>-update</b> is not given, will use the text
widget's current cached value for each line).  The count options are
interpreted as follows:
<dl>
<dle>
<dt><b>-chars</b></dt>
<dd>count all characters, whether elided or not.  Do not count
embedded windows or images.
</dd>
</dle>
<dle>
<dt><b>-displaychars</b></dt>
<dd>count all non-elided characters.
</dd>
</dle>
<dle>
<dt><b>-displayindices</b></dt>
<dd>count all non-elided characters, windows and images.
</dd>
</dle>
<dle>
<dt><b>-displaylines</b></dt>
<dd>count all display lines (i.e. counting one for each
time a line wraps) from the line of the first index up to, but not
including the display line of the second index.  Therefore if they are
both on the same display line, zero will be returned.  By definition
displaylines are visible and therefore this only counts portions of
actual visible lines.
</dd>
</dle>
<dle>
<dt><b>-indices</b></dt>
<dd>count all characters and embedded windows or images (i.e.
everything which counts in text-widget index space), whether they are
elided or not.
</dd>
</dle>
<dle>
<dt><b>-lines</b></dt>
<dd>count all logical lines (irrespective of wrapping) from
the line of the first index up to, but not including the line of the
second index.  Therefore if they are both on the same line, zero will be
returned.  Logical lines are counted whether they are currently visible
(non-elided) or not.
</dd>
</dle>
<dle>
<dt><b>-xpixels</b></dt>
<dd>count the number of horizontal pixels from the first
pixel of the first index to (but not including) the first pixel of the
second index.  To count the total desired width of the text widget
(assuming wrapping is not enabled), first find the longest line and then
use '.text count -xpixels "${line}.0" "${line}.0 lineend"'.
</dd>
</dle>
<dle>
<dt><b>-ypixels</b></dt>
<dd>count the number of vertical pixels from the first pixel
of the first index to (but not including) the first pixel of the second
index.  If both indices are on the same display line, zero will be
returned.  To count the total number of vertical pixels in the text
widget, use '.text count -ypixels 1.0 end', and to ensure this is up to
date, use '.text count -update -ypixels 1.0 end'.
</dd>
</dle>
</dl><p>The command returns a positive or negative integer corresponding to the 
number of items counted between the two indices.  One such integer is
returned for each counting option given, so a list is returned if more 
than one option was supplied.  For example '.text count -xpixels
-ypixels 1.3 4.5' is perfectly valid and will return a list of two
elements.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>debug</b> ?<m>boolean</m>?</dt>
<dd>If <i>boolean</i> is specified, then it must have one of the true or
false values accepted by Tcl_GetBoolean.
If the value is a true one then internal consistency checks will be
turned on in the B-tree code associated with text widgets.
If <i>boolean</i> has a false value then the debugging checks will
be turned off.
In either case the command returns an empty string.
If <i>boolean</i> is not specified then the command returns <b>on</b>
or <b>off</b> to indicate whether or not debugging is turned on.
There is a single debugging switch shared by all text widgets:  turning
debugging on or off in any widget turns it on or off for all widgets.
For widgets with large amounts of text, the consistency checks may
cause a noticeable slow-down.
</dd>
</dle>
</dl>
<p>When debugging is turned on, the drawing routines of the text widget
set the global variables <b>tk_textRedraw</b> and <b>tk_textRelayout</b>
to the lists of indices that are redrawn.  The values of these variables
are tested by Tk's test suite.
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>index1</m> ?<m>index2 ...</m>?</dt>
<dd>Delete a range of characters from the text.
If both <i>index1</i> and <i>index2</i> are specified, then delete
all the characters starting with the one given by <i>index1</i>
and stopping just before <i>index2</i> (i.e. the character at
<i>index2</i> is not deleted).
If <i>index2</i> doesn't specify a position later in the text
than <i>index1</i> then no characters are deleted.
If <i>index2</i> isn't specified then the single character at
<i>index1</i> is deleted.
It is not allowable to delete characters in a way that would leave
the text without a newline as the last character.
The command returns an empty string.
If more indices are given, multiple ranges of text will be deleted.
All indices are first checked for validity before any deletions are made.
They are sorted and the text is removed from the last range to the
first range to deleted text does not cause an undesired index shifting
side-effects.  If multiple ranges with the same start index are given,
then the longest range is used.  If overlapping ranges are given, then
they will be merged into spans that do not cause deletion of text
outside the given ranges due to text shifted during deletion.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>dlineinfo</b> <m>index</m></dt>
<dd>Returns a list with five elements describing the area occupied
by the display line containing <i>index</i>.
The first two elements of the list give the x and y coordinates
of the upper-left corner of the area occupied by the
line, the third and fourth elements give the width and height
of the area, and the fifth element gives the position of the baseline
for the line, measured down from the top of the area.
All of this information is measured in pixels.
If the current wrap mode is <b>none</b> and the line extends beyond
the boundaries of the window,
the area returned reflects the entire area of the line, including the
portions that are out of the window.
If the line is shorter than the full width of the window then the
area returned reflects just the portion of the line that is occupied
by characters and embedded windows.
If the display line containing <i>index</i> is not visible on
the screen then the return value is an empty list.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>dump</b> ?<m>switches</m>? <m>index1</m> ?<m>index2</m>?</dt>
<dd>Return the contents of the text widget from <i>index1</i> up to,
but not including <i>index2</i>,
including the text and
information about marks, tags, and embedded windows.
If <i>index2</i> is not specified, then it defaults to
one character past <i>index1</i>.  The information is returned
in the following format:
</dd>
</dle>
</dl>
<?TROFF.RS?>
<p><i>key1 value1 index1 key2 value2 index2</i> ...
</p>
<p>The possible <i>key</i> values are <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b>, <b>mark</b>,
<b>tagon</b>, <b>tagoff</b>, <b cat="AMBIGUOUS canvasitemtype cmd">image</b>, and <b cat="canvasitemtype">window</b>.  The corresponding
<i>value</i> is the text, mark name, tag name, image name, or window name.
The <i>index</i> information is the index of the
start of the text, mark, tag transition, image or window.
One or more of the following switches (or abbreviations thereof)
may be specified to control the dump:
</p>
<dl>
<dle>
<dt><b>-all</b></dt>
<dd>Return information about all elements: text, marks, tags, images and windows.
This is the default.
</dd>
</dle>
<dle>
<dt><b>-command</b> <m>command</m></dt>
<dd>Instead of returning the information as the result of the dump operation,
invoke the <i>command</i> on each element of the text widget within the range.
The command has three arguments appended to it before it is evaluated:
the <i>key</i>, <i>value</i>, and <i>index</i>.
</dd>
</dle>
<dle>
<dt><b>-image</b></dt>
<dd>Include information about images in the dump results.
</dd>
</dle>
<dle>
<dt><b>-mark</b></dt>
<dd>Include information about marks in the dump results.
</dd>
</dle>
<dle>
<dt><b>-tag</b></dt>
<dd>Include information about tag transitions in the dump results. Tag
information is returned as <b>tagon</b> and <b>tagoff</b> elements that
indicate the begin and end of each range of each tag, respectively.
</dd>
</dle>
<dle>
<dt><b>-text</b></dt>
<dd>Include information about text in the dump results.  The value is the
text up to the next element or the end of range indicated by <i>index2</i>.
A text element does not span newlines.  A multi-line block of text that
contains no marks or tag transitions will still be dumped as a set
of text segments that each end with a newline.  The newline is part
of the value.
</dd>
</dle>
<dle>
<dt><b>-window</b></dt>
<dd>Include information about embedded windows in the dump results.
The value of a window is its Tk pathname, unless the window
has not been created yet.  (It must have a create script.)
In this case an empty string is returned, and you must query the
window by its index position to get more information.
</dd>
</dle>
</dl>
<?TROFF.RE?>
<dl>
<dle>
<dt><m>pathName</m> <b>edit</b> <m>option</m> ?<m>arg arg ...</m>?</dt>
<dd>This command controls the undo mechanism and the modified flag.  The
exact behavior of the command depends on the <i>option</i> argument
that follows the <b>edit</b> argument.  The following forms of the
command are currently supported:
<dl>
<dle>
<dt><m>pathName</m> <b>edit modified ?</b><m>boolean</m>?</dt>
<dd>If <i>boolean</i> is not specified, returns the modified flag of the
widget. The insert, delete, edit undo and edit redo commands or the
user can set or clear the modified flag.  If <i>boolean</i> is
specified, sets the modified flag of the widget to <i>boolean</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>edit redo</b></dt>
<dd>When the <b>-undo</b> option is true, reapplies the last undone edits
provided no other edits were done since then. Generates an error when
the redo stack is empty.  Does nothing when the <b>-undo</b> option is
false.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>edit reset</b></dt>
<dd>Clears the undo and redo stacks.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>edit separator</b></dt>
<dd>Inserts a separator (boundary) on the undo stack. Does nothing when
the <b>-undo</b> option is false.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>edit undo</b></dt>
<dd>Undoes the last edit action when the <b>-undo</b> option is true.  An
edit action is defined as all the insert and delete commands that are
recorded on the undo stack in between two separators. Generates an
error when the undo stack is empty.  Does nothing when the <b>-undo</b>
option is false.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b> <m>?-displaychars?</m> <m>-- index1</m> ?<m>index2 ...</m>?</dt>
<dd>Return a range of characters from the text.
The return value will be all the characters in the text starting
with the one whose index is <i>index1</i> and ending just before
the one whose index is <i>index2</i> (the character at <i>index2</i>
will not be returned).
If <i>index2</i> is omitted then the single character at <i>index1</i>
is returned.
If there are no characters in the specified range (e.g. <i>index1</i>
is past the end of the file or <i>index2</i> is less than or equal
to <i>index1</i>) then an empty string is returned.
If the specified range contains embedded windows, no information
about them is included in the returned string.
If multiple index pairs are given, multiple ranges of text will be returned
in a list.  Invalid ranges will not be represented with empty strings in
the list.  The ranges are returned in the order passed to <b>get</b>.
<new version="8.5">If the <b>-displaychars</b> option is given, then, within each range,
only those characters which are not elided will be returned.  This may 
have the effect that some of the returned ranges are empty strings.
</new></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>image</b> <m>option</m> ?<m>arg arg ...</m>?</dt>
<dd>This command is used to manipulate embedded images.
The behavior of the command depends on the <i>option</i> argument
that follows the <b>tag</b> argument.
The following forms of the command are currently supported:
<dl>
<dle>
<dt><m>pathName</m> <b>image cget</b> <m>index option</m></dt>
<dd>Returns the value of a configuration option for an embedded image.
<i>Index</i> identifies the embedded image, and <i>option</i>
specifies a particular configuration option, which must be one of
the ones listed in the section <ref refid="embedded-images">EMBEDDED IMAGES</ref>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>image configure</b> <m>index</m> ?<m>option value ...</m>?</dt>
<dd>Query or modify the configuration options for an embedded image.
If no <i>option</i> is specified, returns a list describing all of
the available options for the embedded image at <i>index</i>
(see <fun>Tk_ConfigureInfo</fun> for information on the format of this list).
If <i>option</i> is specified with no <i>value</i>, then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
<i>option</i> is specified).
If one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s);  in
this case the command returns an empty string.
See <ref refid="embedded-images">EMBEDDED IMAGES</ref> for information on the options that
are supported.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>image create</b> <m>index</m> ?<m>option value ...</m>?</dt>
<dd>This command creates a new image annotation, which will appear
in the text at the position given by <i>index</i>.
Any number of <i>option-value</i> pairs may be specified to
configure the annotation.
Returns a unique identifier that may be used as an index to refer to
this image.
See <ref refid="embedded-images">EMBEDDED IMAGES</ref> for information on the options that
are supported, and a description of the identifier returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>image names</b></dt>
<dd>Returns a list whose elements are the names of all image instances currently
embedded in <i>window</i>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the position corresponding to <i>index</i> in the form
<i>line.char</i> where <i>line</i> is the line number and <i>char</i>
is the character number.
<i>Index</i> may have any of the forms described under <ref refid="indices">INDICES</ref> above.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index chars</m> ?<m>tagList chars tagList ...</m>?</dt>
<dd>Inserts all of the <i>chars</i> arguments just before the character at
<i>index</i>.
If <i>index</i> refers to the end of the text (the character after
the last newline) then the new text is inserted just before the
last newline instead.
If there is a single <i>chars</i> argument and no <i>tagList</i>, then
the new text will receive any tags that are present on both the
character before and the character after the insertion point; if a tag
is present on only one of these characters then it will not be
applied to the new text.
If <i>tagList</i> is specified then it consists of a list of
tag names;  the new characters will receive all of the tags in
this list and no others, regardless of the tags present around
the insertion point.
If multiple <i>chars</i>-<i>tagList</i> argument pairs are present,
they produce the same effect as if a separate <b>insert</b> widget
command had been issued for each pair, in order.
The last <i>tagList</i> argument may be omitted.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark</b> <m>option</m> ?<m>arg arg ...</m>?</dt>
<dd>This command is used to manipulate marks.  The exact behavior of
the command depends on the <i>option</i> argument that follows
the <b>mark</b> argument.  The following forms of the command
are currently supported:
<dl>
<dle>
<dt><m>pathName</m> <b>mark gravity</b> <m>markName</m> ?<m>direction</m>?</dt>
<dd>If <i>direction</i> is not specified, returns <b>left</b> or <b>right</b>
to indicate which of its adjacent characters <i>markName</i> is attached
to.
If <i>direction</i> is specified, it must be <b>left</b> or <b>right</b>;
the gravity of <i>markName</i> is set to the given value.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark names</b></dt>
<dd>Returns a list whose elements are the names of all the marks that
are currently set.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark next</b> <m>index</m></dt>
<dd>Returns the name of the next mark at or after <i>index</i>.
If <i>index</i> is specified in numerical form, then the search for
the next mark begins at that index.
If <i>index</i> is the name of a mark, then the search for
the next mark begins immediately after that mark.
This can still return a mark at the same position if
there are multiple marks at the same index.
These semantics mean that the <b>mark next</b> operation can be used to
step through all the marks in a text widget in the same order
as the mark information returned by the <b>dump</b> operation.
If a mark has been set to the special <b>end</b> index,
then it appears to be <i>after</i> <b>end</b> with respect to the <b>mark next</b> operation.
An empty string is returned if there are no marks after <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark previous</b> <m>index</m></dt>
<dd>Returns the name of the mark at or before <i>index</i>.
If <i>index</i> is specified in numerical form, then the search for
the previous mark begins with the character just before that index.
If <i>index</i> is the name of a mark, then the search for
the next mark begins immediately before that mark.
This can still return a mark at the same position if
there are multiple marks at the same index.
These semantics mean that the <b>mark previous</b> operation can be used to
step through all the marks in a text widget in the reverse order
as the mark information returned by the <b>dump</b> operation.
An empty string is returned if there are no marks before <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark set</b> <m>markName index</m></dt>
<dd>Sets the mark named <i>markName</i> to a position just before the
character at <i>index</i>.
If <i>markName</i> already exists, it is moved from its old position;
if it doesn't exist, a new mark is created.
This command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>mark unset</b> <m>markName</m> ?<m>markName markName ...</m>?</dt>
<dd>Remove the mark corresponding to each of the <i>markName</i> arguments.
The removed marks will not be usable in indices and will not be
returned by future calls to ``<i>pathName</i> <b>mark names</b>''.
This command returns an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>peer</b> <m>option args</m></dt>
<dd><?NEW 8.5?>This command is used to create and query widget peers.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>peer create</b> <m>newPathName</m> ?<m>options</m>?</dt>
<dd>Creates a peer text widget with the given <i>newPathName</i>, and any
optional standard configuration options (as for the <i>text</i> command).
By default the peer will have the same start and end line as the
parent widget, but these can be overridden with the standard
configuration options.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>peer names</b></dt>
<dd>Returns a list of peers of this widget (this does not include the widget
itself).  The order within this list is undefined.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>replace</b> <m>index1 index2 chars</m> ?<m>tagList chars tagList ...</m>?</dt>
<dd>Replaces the range of characters between <i>index1</i> and <i>index2</i> 
with the given characters and tags.  See the section on <i>pathName</i>
<b>insert</b> for an explanation of the handling of the <i>tagList...</i>
arguments, and the section on <i>pathName</i>
<b>delete</b> for an explanation of the handling of the indices.  If
<i>index2</i> corresponds to an index earlier in the text than
<i>index1</i>, an error will be generated.
<p>The deletion and insertion are arranged so that no unnecessary
scrolling of the window or movement of insertion cursor occurs.  In
addition the undo/redo stack are correctly modified, if undo operations
are active in the text widget.  The command returns an empty string.
</p></dd>
</dle>
<?ENDNEW CONFUSED 8.5?>
<dle>
<dt><m>pathName</m> <b>scan</b> <m>option args</m></dt>
<dd>This command is used to implement scanning on texts.  It has
two forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>scan mark</b> <m>x y</m></dt>
<dd>Records <i>x</i> and <i>y</i> and the current view in the text window,
for use in conjunction with later <b>scan dragto</b> commands.
Typically this command is associated with a mouse button press in
the widget.  It returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>scan dragto</b> <m>x y</m></dt>
<dd>This command computes the difference between its <i>x</i> and <i>y</i>
arguments and the <i>x</i> and <i>y</i> arguments to the last
<b>scan mark</b> command for the widget.
It then adjusts the view by 10 times the difference in coordinates.
This command is typically associated
with mouse motion events in the widget, to produce the effect of
dragging the text at high speed through the window.  The return
value is an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>search</b> ?<m>switches</m>? <m>pattern index</m> ?<m>stopIndex</m>?</dt>
<dd>Searches the text in <i>pathName</i> starting at <i>index</i> for a range
of characters that matches <i>pattern</i>.
If a match is found, the index of the first character in the match is
returned as result;  otherwise an empty string is returned.
One or more of the following switches (or abbreviations thereof)
may be specified to control the search:
<dl>
<dle>
<dt><b>-forwards</b></dt>
<dd>The search will proceed forward through the text, finding the first
matching range starting at or after the position given by <i>index</i>.
This is the default.
</dd>
</dle>
<dle>
<dt><b>-backwards</b></dt>
<dd>The search will proceed backward through the text, finding the
matching range closest to <i>index</i> whose first character
is before <i>index</i>
<new version="8.5">(it is not allowed to be at <i>index</i>).  Note that, for a variety of
reasons, backwards searches can be substantially slower than forwards
searches (particularly when using <b>-regexp</b>), so it is recommended
that performance-critical code use forward searches.
</new></dd>
</dle>
<dle>
<dt><b>-exact</b></dt>
<dd>Use exact matching:  the characters in the matching range must be
identical to those in <i>pattern</i>.
This is the default.
</dd>
</dle>
<dle>
<dt><b>-regexp</b></dt>
<dd>Treat <i>pattern</i> as a regular expression and match it against
the text using the rules for regular expressions (see the <cmd>regexp</cmd>
command for details).
<new version="8.5">The default matching automatically passes
both the <b>-lineanchor</b> and <b>-linestop</b> options 
to the regexp engine (unless <b>-nolinestop</b> is used), so that
<i>^$</i> match beginning and end of line, and <i>.</i>, <i>[^</i> 
sequences will never match the newline character <i>\n</i>.
</new></dd>
</dle>
<dle>
<dt><b>-nolinestop</b></dt>
<dd><new version="8.5">This allows <i>.</i> and <i>[^</i> sequences to match the newline 
character <i>\n</i>, which they will otherwise not do (see the <cmd>regexp</cmd>
command for details). This option is only meaningful if <b>-regexp</b> 
is also given, and an error will be thrown otherwise.  For example,
to match the entire text, use 'search -nolinestop -regexp ".*" 1.0'.
</new></dd>
</dle>
<dle>
<dt><b>-nocase</b></dt>
<dd>Ignore case differences between the pattern and the text.
</dd>
</dle>
<dle>
<dt><b>-count</b> <m>varName</m></dt>
<dd>The argument following <b>-count</b> gives the name of a variable;
if a match is found, the number of index positions between beginning and
end of the matching range will be stored in the variable.  If there are no
embedded images or windows in the matching range (and there are no
elided characters if <b>-elide</b> is not given), this is equivalent to the
number of characters matched.  In either case, the range <i>matchIdx</i> to
<i>matchIdx + $count chars</i> will return the entire matched text.
</dd>
</dle>
<dle>
<dt><b>-all</b></dt>
<dd><new version="8.5">Find all matches in the given range and return a list of the indices of
the first character of each match.  If a <b>-count</b> <i>varName</i> switch is 
given, then <b>varName</b> is also set to a list containing one element 
for each successful match.  Note that, even for exact searches, the
elements of this list may be different, if there are embedded images,
windows or hidden text.  Searches with <b>-all</b> behave very
similarly to the Tcl command <b>regexp -all</b>, in that overlapping
matches are not normally returned.  For example, applying an
<b>-all</b> search 
of the pattern '\w+' against 'hello there' will just match twice, once
for each word, and matching 'Z[a-z]+Z' against 'ZooZooZoo' will just
match once.
</new></dd>
</dle>
<dle>
<dt><b>-overlap</b> </dt>
<dd><new version="8.5">When performing <b>-all</b> searches, the normal behaviour is that
matches which overlap an already-found match will not be returned.  This
switch changes that behaviour so that all matches which are not totally
enclosed within another match are returned.  For example, applying an
<b>-overlap</b> search of the pattern '\w+' against 'hello there' will
just match twice (i.e. no different to just <b>-all</b>),
but matching 'Z[a-z]+Z' against 'ZooZooZoo' will now match twice.  
An error will be thrown if this switch is used without <b>-all</b>.
</new></dd>
</dle>
<dle>
<dt><b>-strictlimits</b> </dt>
<dd><new version="8.5">When performing any search, the normal behaviour is that
the start and stop limits are checked with respect to the
start of the matching text.  With the <b>-strictlimits</b> flag,
the entire matching range must lie inside the start and stop
limits specified for the match to be valid.
</new></dd>
</dle>
<dle>
<dt><b>-elide</b></dt>
<dd>Find elided (hidden) text as well. By default only displayed text is
searched.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>This switch has no effect except to terminate the list of switches:
the next argument will be treated as <i>pattern</i> even if it starts
with <b>-</b>.
</dd>
</dle>
</dl><p><new version="8.5">The matching range may be within a single line of text, or run across
multiple lines (if parts of the pattern can match a new-line).  For
regular expression matching one can use the various newline-matching
features such as <b>$</b> to match the end of a line, and to control
whether <b>.</b> is allowed to match a new-line.
</new>If <i>stopIndex</i> is specified, the search stops at that index:
for forward searches, no match at or after <i>stopIndex</i> will
be considered;  for backward searches, no match earlier in the
text than <i>stopIndex</i> will be considered.
If <i>stopIndex</i> is omitted, the entire text will be searched:
when the beginning or end of the text is reached, the search
continues at the other end until the starting location is reached
again;  if <i>stopIndex</i> is specified, no wrap-around will occur.
This means that, for example, if the search is <b>-forwards</b> 
but <i>stopIndex</i> is earlier in the text than <i>startIndex</i>, 
nothing will ever be found.  See <ref refid="known-bugs">KNOWN BUGS</ref> below for a number of
minor limitations of the <b>search</b> command.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>see</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the character given by <i>index</i>
is completely visible.
If <i>index</i> is already visible then the command does nothing.
If <i>index</i> is a short distance out of view, the command
adjusts the view just enough to make <i>index</i> visible at the
edge of the window.
If <i>index</i> is far out of view, then the command centers
<i>index</i> in the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag</b> <m>option</m> ?<m>arg arg ...</m>?</dt>
<dd>This command is used to manipulate tags.  The exact behavior of the
command depends on the <i>option</i> argument that follows the
<b>tag</b> argument.  The following forms of the command are currently
supported:
<dl>
<dle>
<dt><m>pathName</m> <b>tag add</b> <m>tagName index1</m> ?<m>index2 index1 index2 ...</m>?</dt>
<dd>Associate the tag <i>tagName</i> with all of the characters starting
with <i>index1</i> and ending just before
<i>index2</i> (the character at <i>index2</i> isn't tagged).
A single command may contain any number of <i>index1</i>-<i>index2</i>
pairs.
If the last <i>index2</i> is omitted then the single character at
<i>index1</i> is tagged.
If there are no characters in the specified range (e.g. <i>index1</i>
is past the end of the file or <i>index2</i> is less than or equal
to <i>index1</i>) then the command has no effect.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag bind</b> <m>tagName</m> ?<m>sequence</m>? ?<m>script</m>?</dt>
<dd>This command associates <i>script</i> with the tag given by
<i>tagName</i>.
Whenever the event sequence given by <i>sequence</i> occurs for a
character that has been tagged with <i>tagName</i>,
the script will be invoked.
This widget command is similar to the <cmd>bind</cmd> command except that
it operates on characters in a text rather than entire widgets.
See the <cmd>bind</cmd> manual entry for complete details
on the syntax of <i>sequence</i> and the substitutions performed
on <i>script</i> before invoking it.
If all arguments are specified then a new binding is created, replacing
any existing binding for the same <i>sequence</i> and <i>tagName</i>
(if the first character of <i>script</i> is ``+'' then <i>script</i>
augments an existing binding rather than replacing it).
In this case the return value is an empty string.
If <i>script</i> is omitted then the command returns the <i>script</i>
associated with <i>tagName</i> and <i>sequence</i> (an error occurs
if there is no such binding).
If both <i>script</i> and <i>sequence</i> are omitted then the command
returns a list of all the sequences for which bindings have been
defined for <i>tagName</i>.
<p>The only events for which bindings may be specified are those related
to the mouse and keyboard (such as <b cat="event">Enter</b>, <b cat="event">Leave</b>, 
<b cat="event">ButtonPress</b>, <b cat="event">Motion</b>, and <b>KeyPress</b>) or virtual events.
Event bindings for a text widget use the <b>current</b> mark described
under <ref refid="marks">MARKS</ref> above.  An <b cat="event">Enter</b> event triggers for a tag when the tag
first becomes present on the current character, and a <b cat="event">Leave</b> event
triggers for a tag when it ceases to be present on the current character.
<b cat="event">Enter</b> and <b cat="event">Leave</b> events can happen either because the
<b>current</b> mark moved or because the character at that position
changed.  Note that these events are different than <b cat="event">Enter</b> and
<b cat="event">Leave</b> events for windows.  Mouse and keyboard events are directed
to the current character.  If a virtual event is used in a binding, that
binding can trigger only if the virtual event is defined by an underlying
mouse-related or keyboard-related event.
</p><p>It is possible for the current character to have multiple tags,
and for each of them to have a binding for a particular event
sequence.
When this occurs, one binding is invoked for each tag, in order
from lowest-priority to highest priority.
If there are multiple matching bindings for a single tag, then
the most specific binding is chosen (see the manual entry for
the <cmd>bind</cmd> command for details).
<cmd>continue</cmd> and <cmd>break</cmd> commands within binding scripts
are processed in the same way as for bindings created with
the <cmd>bind</cmd> command.
</p><p>If bindings are created for the widget as a whole using the
<cmd>bind</cmd> command, then those bindings will supplement the
tag bindings.
The tag bindings will be invoked first, followed by bindings
for the window as a whole.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag cget</b> <m>tagName option</m></dt>
<dd>This command returns the current value of the option named <i>option</i>
associated with the tag given by <i>tagName</i>.
<i>Option</i> may have any of the values accepted by the <b>tag configure</b>
widget command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag configure</b> <m>tagName</m> ?<m>option</m>? ?<m>value</m>? ?<m>option value ...</m>?</dt>
<dd>This command is similar to the <b>configure</b> widget command except
that it modifies options associated with the tag given by <i>tagName</i>
instead of modifying options for the overall text widget.
If no <i>option</i> is specified, the command returns a list describing
all of the available options for <i>tagName</i> (see <fun>Tk_ConfigureInfo</fun>
for information on the format of this list).
If <i>option</i> is specified with no <i>value</i>, then the command returns
a list describing the one named option (this list will be identical to
the corresponding sublist of the value returned if no <i>option</i>
is specified).
If one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s) in <i>tagName</i>;
in this case the command returns an empty string.
See <ref refid="tags">TAGS</ref> above for details on the options available for tags.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag delete</b> <m>tagName</m> ?<m>tagName ...</m>?</dt>
<dd>Deletes all tag information for each of the <i>tagName</i>
arguments.
The command removes the tags from all characters in the file
and also deletes any other information associated with the tags,
such as bindings and display information.
The command returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag lower</b> <m>tagName</m> ?<m>belowThis</m>?</dt>
<dd>Changes the priority of tag <i>tagName</i> so that it is just lower
in priority than the tag whose name is <i>belowThis</i>.
If <i>belowThis</i> is omitted, then <i>tagName</i>'s priority
is changed to make it lowest priority of all tags.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag names</b> ?<m>index</m>?</dt>
<dd>Returns a list whose elements are the names of all the tags that
are active at the character position given by <i>index</i>.
If <i>index</i> is omitted, then the return value will describe
all of the tags that exist for the text (this includes all tags
that have been named in a ``<i>pathName</i> <b>tag</b>'' widget
command but haven't been deleted by a ``<i>pathName</i> <b>tag delete</b>''
widget command, even if no characters are currently marked with
the tag).
The list will be sorted in order from lowest priority to highest
priority.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag nextrange</b> <m>tagName index1</m> ?<m>index2</m>?</dt>
<dd>This command searches the text for a range of characters tagged
with <i>tagName</i> where the first character of the range is
no earlier than the character at <i>index1</i> and no later than
the character just before <i>index2</i> (a range starting at
<i>index2</i> will not be considered).
If several matching ranges exist, the first one is chosen.
The command's return value is a list containing
two elements, which are the index of the first character of the
range and the index of the character just after the last one in
the range.
If no matching range is found then the return value is an
empty string.
If <i>index2</i> is not given then it defaults to the end of the text.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag prevrange</b> <m>tagName index1</m> ?<m>index2</m>?</dt>
<dd>This command searches the text for a range of characters tagged
with <i>tagName</i> where the first character of the range is
before the character at <i>index1</i> and no earlier than
the character at <i>index2</i> (a range starting at
<i>index2</i> will be considered).
If several matching ranges exist, the one closest to <i>index1</i> is chosen.
The command's return value is a list containing
two elements, which are the index of the first character of the
range and the index of the character just after the last one in
the range.
If no matching range is found then the return value is an
empty string.
If <i>index2</i> is not given then it defaults to the beginning of the text.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag raise</b> <m>tagName</m> ?<m>aboveThis</m>?</dt>
<dd>Changes the priority of tag <i>tagName</i> so that it is just higher
in priority than the tag whose name is <i>aboveThis</i>.
If <i>aboveThis</i> is omitted, then <i>tagName</i>'s priority
is changed to make it highest priority of all tags.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag ranges</b> <m>tagName</m></dt>
<dd>Returns a list describing all of the ranges of text that have been
tagged with <i>tagName</i>.
The first two elements of the list describe the first tagged range
in the text, the next two elements describe the second range, and
so on.
The first element of each pair contains the index of the first
character of the range, and the second element of the pair contains
the index of the character just after the last one in the
range.
If there are no characters tagged with <i>tag</i> then an
empty string is returned.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag remove</b> <m>tagName index1</m> ?<m>index2 index1 index2 ...</m>?</dt>
<dd>Remove the tag <i>tagName</i> from all of the characters starting
at <i>index1</i> and ending just before
<i>index2</i> (the character at <i>index2</i> isn't affected).
A single command may contain any number of <i>index1</i>-<i>index2</i>
pairs.
If the last <i>index2</i> is omitted then the single character at
<i>index1</i> is tagged.
If there are no characters in the specified range (e.g. <i>index1</i>
is past the end of the file or <i>index2</i> is less than or equal
to <i>index1</i>) then the command has no effect.
This command returns an empty string.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>window</b> <m>option</m> ?<m>arg arg ...</m>?</dt>
<dd>This command is used to manipulate embedded windows.
The behavior of the command depends on the <i>option</i> argument
that follows the <b>tag</b> argument.
The following forms of the command are currently supported:
<dl>
<dle>
<dt><m>pathName</m> <b>window cget</b> <m>index option</m></dt>
<dd>Returns the value of a configuration option for an embedded window.
<i>Index</i> identifies the embedded window, and <i>option</i>
specifies a particular configuration option, which must be one of
the ones listed in the section <ref refid="embedded-windows">EMBEDDED WINDOWS</ref>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>window configure</b> <m>index</m> ?<m>option value ...</m>?</dt>
<dd>Query or modify the configuration options for an embedded window.
If no <i>option</i> is specified, returns a list describing all of
the available options for the embedded window at <i>index</i>
(see <fun>Tk_ConfigureInfo</fun> for information on the format of this list).
If <i>option</i> is specified with no <i>value</i>, then the command
returns a list describing the one named option (this list will be
identical to the corresponding sublist of the value returned if no
<i>option</i> is specified).
If one or more <i>option-value</i> pairs are specified, then the command
modifies the given option(s) to have the given value(s);  in
this case the command returns an empty string.
See <ref refid="embedded-windows">EMBEDDED WINDOWS</ref> for information on the options that
are supported.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>window create</b> <m>index</m> ?<m>option value ...</m>?</dt>
<dd>This command creates a new window annotation, which will appear
in the text at the position given by <i>index</i>.
Any number of <i>option-value</i> pairs may be specified to
configure the annotation.
See <ref refid="embedded-windows">EMBEDDED WINDOWS</ref> for information on the options that
are supported.
Returns an empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>window names</b></dt>
<dd>Returns a list whose elements are the names of all windows currently
embedded in <i>window</i>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>option args</m></dt>
<dd>This command is used to query and change the horizontal position of the
text in the widget's window.  It can take any of the following
forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1;  together they describe
the portion of the document's horizontal span that is visible in
the window.
For example, if the first element is .2 and the second element is .6,
20% of the text is off-screen to the left, the middle 40% is visible
in the window, and 40% of the text is off-screen to the right.
The fractions refer only to the lines that are actually visible in the
window:  if the lines in the window are all very short, so that they
are entirely visible, the returned fractions will be 0 and 1,
even if there are other lines in the text that are
much wider than the window.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that <i>fraction</i> of the horizontal
span of the text is off-screen to the left.
<i>Fraction</i> is a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>What</i> must be <b>units</b>, <b>pages</b> or <b>pixels</b>.
<new version="8.5">If <i>what</i> is <b>units</b> or <b>pages</b> then <i>number</i> must be an
integer, otherwise number may be specified in any of the forms acceptable
to <fun>Tk_GetPixels</fun>, such as ``2.0c'' or ``1i'' (the result is rounded
to the nearest integer value.  If no units are given, pixels are
assumed).  If <i>what</i> is <b>units</b>, the view adjusts left or right by
<i>number</i> average-width characters on the display; if it is
<b>pages</b> then the view adjusts by <i>number</i> screenfuls; if it is
<b>pixels</b> then the view adjusts by <i>number</i> pixels.  If
</new><i>number</i> is negative then characters farther to the left become
visible; if it is positive then characters farther to the right become
visible.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>?args</m>?</dt>
<dd>This command is used to query and change the vertical position of the
text in the widget's window.
It can take any of the following forms:
<dl>
<dle>
<dt><m>pathName</m> <b>yview</b></dt>
<dd>Returns a list containing two elements, both of which are real fractions
between 0 and 1.
The first element gives the position of the first visible pixel of the
first character (or image, etc) in the
top line in the window, relative to the text as a whole (0.5 means
it is halfway through the text, for example).
The second element gives the position of the first pixel just after the
last visible one in the bottom line of the window,
relative to the text as a whole.
These are the same values passed to scrollbars via the <b>-yscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that the pixel given by <i>fraction</i>
appears at the top of the top line of the window.
<i>Fraction</i> is a fraction between 0 and 1;  0 indicates the first
pixel of the first character in the text, 0.33 indicates the pixel that is
one-third the way through the text; and so on.
<new version="8.5">Values close to 1 will 
indicate values close to the last pixel in the text (1 actually refers
to one pixel beyond the last pixel), but in such cases the widget will
never scroll beyond the last pixel, and so a value of 1 will effectively
be rounded back to whatever fraction ensures the last pixel is at the
bottom of the window, and some other pixel is at the top.
</new></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview scroll</b> <m>number what</m></dt>
<dd>This command adjust the view in the window up or down according to
<i>number</i> and <i>what</i>.
<i>What</i> must be <b>units</b>, <b>pages</b> or <b>pixels</b>.
<new version="8.5">If <i>what</i> is <b>units</b> or <b>pages</b> then <i>number</i> must be an
integer, otherwise number may be specified in any of the forms acceptable
to <fun>Tk_GetPixels</fun>, such as ``2.0c'' or ``1i'' (the result is rounded
to the nearest integer value.  If no units are given, pixels are
assumed).  If <i>what</i> is <b>units</b>, the view adjusts up or down by
<i>number</i> lines on the display; if it is <b>pages</b> then the view
adjusts by <i>number</i> screenfuls; if it is <b>pixels</b> then the view
adjusts by <i>number</i> pixels.
</new>If <i>number</i> is negative then earlier positions in the text
become visible;  if it is positive then later positions in the text
become visible.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> ?<b>-pickplace</b>? <m>index</m></dt>
<dd>Changes the view in the widget's window to make <i>index</i> visible.
If the <b>-pickplace</b> option isn't specified then <i>index</i> will
appear at the top of the window.
If <b>-pickplace</b> is specified then the widget chooses where
<i>index</i> appears in the window:
<ol>
<li>If <i>index</i> is already visible somewhere in the window then the
command does nothing.
</li>
<li>If <i>index</i> is only a few lines off-screen above the window then
it will be positioned at the top of the window.
</li>
<li>If <i>index</i> is only a few lines off-screen below the window then
it will be positioned at the bottom of the window.
</li>
<li>Otherwise, <i>index</i> will be centered in the window.
</li>
</ol><p>The <b>-pickplace</b> option has been obsoleted by the <b>see</b> widget
command (<b>see</b> handles both x- and y-motion to make a location
visible, whereas <b>-pickplace</b> only handles motion in y).
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>number</m></dt>
<dd>This command makes the first character on the line after
the one given by <i>number</i> visible at the top of the window.
<i>Number</i> must be an integer.
This command used to be used for scrolling, but now it is obsolete.
</dd>
</dle>
</dl></dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>Tk automatically creates class bindings for texts that give them
the following default behavior.
In the descriptions below, ``word'' is dependent on the value of
the <b>tcl_wordchars</b> variable.  See tclvars(n).
</p>
<ol>
<li>Clicking mouse button 1 positions the insertion cursor
just before the character underneath the mouse cursor, sets the
input focus to this widget, and clears any selection in the widget.
Dragging with mouse button 1 strokes out a selection between
the insertion cursor and the character under the mouse.
</li>
<li>Double-clicking with mouse button 1 selects the word under the mouse
and positions the insertion cursor at the start of the word.
Dragging after a double click will stroke out a selection consisting
of whole words.
</li>
<li>Triple-clicking with mouse button 1 selects the line under the mouse
and positions the insertion cursor at the start of the line.
Dragging after a triple click will stroke out a selection consisting
of whole lines.
</li>
<li>The ends of the selection can be adjusted by dragging with mouse
button 1 while the Shift key is down;  this will adjust the end
of the selection that was nearest to the mouse cursor when button
1 was pressed.
If the button is double-clicked before dragging then the selection
will be adjusted in units of whole words;  if it is triple-clicked
then the selection will be adjusted in units of whole lines.
</li>
<li>Clicking mouse button 1 with the Control key down will reposition the
insertion cursor without affecting the selection.
</li>
<li>If any normal printing characters are typed, they are
inserted at the point of the insertion cursor.
</li>
<li>The view in the widget can be adjusted by dragging with mouse button 2.
If mouse button 2 is clicked without moving the mouse, the selection
is copied into the text at the position of the mouse cursor.
The Insert key also inserts the selection, but at the position of
the insertion cursor.
</li>
<li>If the mouse is dragged out of the widget
while button 1 is pressed, the entry will automatically scroll to
make more text visible (if there is more text off-screen on the side
where the mouse left the window).
</li>
<li>The Left and Right keys move the insertion cursor one character to the
left or right;  they also clear any selection in the text.
If Left or Right is typed with the Shift key down, then the insertion
cursor moves and the selection is extended to include the new character.
Control-Left and Control-Right move the insertion cursor by words, and
Control-Shift-Left and Control-Shift-Right move the insertion cursor
by words and also extend the selection.
Control-b and Control-f behave the same as Left and Right, respectively.
Meta-b and Meta-f behave the same as Control-Left and Control-Right,
respectively.
</li>
<li>The Up and Down keys move the insertion cursor one line up or
down and clear any selection in the text.
If Up or Right is typed with the Shift key down, then the insertion
cursor moves and the selection is extended to include the new character.
Control-Up and Control-Down move the insertion cursor by paragraphs (groups
of lines separated by blank lines), and
Control-Shift-Up and Control-Shift-Down move the insertion cursor
by paragraphs and also extend the selection.
Control-p and Control-n behave the same as Up and Down, respectively.
</li>
<li>The Next and Prior keys move the insertion cursor forward or backwards
by one screenful and clear any selection in the text.
If the Shift key is held down while Next or Prior is typed, then
the selection is extended to include the new character.
</li>
<li>Control-Next and Control-Prior scroll the view right or left by one page
without moving the insertion cursor or affecting the selection.
</li>
<li>Home and Control-a move the insertion cursor to the
beginning of its display line and clear any selection in the widget.
Shift-Home moves the insertion cursor to the beginning of the display line
and also extends the selection to that point.
</li>
<li>End and Control-e move the insertion cursor to the
end of the display line and clear any selection in the widget.
Shift-End moves the cursor to the end of the display line and extends 
the selection to that point.
</li>
<li>Control-Home and Meta-&lt; move the insertion cursor to the beginning of
the text and clear any selection in the widget.
Control-Shift-Home moves the insertion cursor to the beginning of the text
and also extends the selection to that point.
</li>
<li>Control-End and Meta-&gt; move the insertion cursor to the end of the
text and clear any selection in the widget.
Control-Shift-End moves the cursor to the end of the text and extends
the selection to that point.
</li>
<li>The Select key and Control-Space set the selection anchor to the position
of the insertion cursor.  They don't affect the current selection.
Shift-Select and Control-Shift-Space adjust the selection to the
current position of the insertion cursor, selecting from the anchor
to the insertion cursor if there was not any selection previously.
</li>
<li>Control-/ selects the entire contents of the widget.
</li>
<li>Control-\ clears any selection in the widget.
</li>
<li>The F16 key (labelled Copy on many Sun workstations) or Meta-w
copies the selection in the widget to the clipboard, if there is a selection.
This action is carried out by the command <cmd>tk_textCopy</cmd>.
</li>
<li>The F20 key (labelled Cut on many Sun workstations) or Control-w
copies the selection in the widget to the clipboard and deletes
the selection.
This action is carried out by the command <cmd>tk_textCut</cmd>.
If there is no selection in the widget then these keys have no effect.
</li>
<li>The F18 key (labelled Paste on many Sun workstations) or Control-y
inserts the contents of the clipboard at the position of the
insertion cursor.
This action is carried out by the command <cmd>tk_textPaste</cmd>.
</li>
<li>The Delete key deletes the selection, if there is one in the widget.
If there is no selection, it deletes the character to the right of
the insertion cursor.
</li>
<li>Backspace and Control-h delete the selection, if there is one
in the widget.
If there is no selection, they delete the character to the left of
the insertion cursor.
</li>
<li>Control-d deletes the character to the right of the insertion cursor.
</li>
<li>Meta-d deletes the word to the right of the insertion cursor.
</li>
<li>Control-k deletes from the insertion cursor to the end of its line;
if the insertion cursor is already at the end of a line, then
Control-k deletes the newline character.
</li>
<li>Control-o opens a new line by inserting a newline character in
front of the insertion cursor without moving the insertion cursor.
</li>
<li>Meta-backspace and Meta-Delete delete the word to the left of the
insertion cursor.
</li>
<li>Control-x deletes whatever is selected in the text widget
after copying it to the clipboard.
</li>
<li>Control-t reverses the order of the two characters to the right of
the insertion cursor. 
</li>
<li>Control-z (and Control-underscore on UNIX when <b>tk_strictMotif</b> is
true) undoes the last edit action if the <b>-undo</b> option is true.
Does nothing otherwise.
</li>
<li>Control-Z (or Control-y on Windows) reapplies the last undone edit
action if the <b>-undo</b> option is true. Does nothing otherwise.
</li>
</ol>
<p>If the widget is disabled using the <b>-state</b> option, then its
view can still be adjusted and text can still be selected,
but no insertion cursor will be displayed and no text modifications will
take place.
</p>
<p>The behavior of texts can be changed by defining new bindings for
individual widgets or by redefining the class bindings.
</p>
</section>
<section>
<title>ISSUES CONCERNING CHARS AND INDICES</title>
<p version="8.5">Before Tk 8.5, the widget used the string "chars" to refer to index
positions (which included characters, embedded windows and embedded
images).  As of Tk 8.5 the text widget deals separately and correctly
with "chars" and "indices".  For backwards compatibility, however, the
index modifiers "+N chars" and "-N chars" continue to refer to indices.
One must use any of the full forms "+N any chars" or "-N any chars" etc
to refer to actual character indices.  This confusion may be fixed in a
future release by making the widget correctly interpret "+N chars" as a
synonym for "+N any chars".  
</p>
</section>
<section>
<title>PERFORMANCE ISSUES</title>
<p>Text widgets should run efficiently under a variety
of conditions.  The text widget uses about 2-3 bytes of
main memory for each byte of text, so texts containing a megabyte
or more should be practical on most workstations.
Text is represented internally with a modified B-tree structure
that makes operations relatively efficient even with large texts.
Tags are included in the B-tree structure in a way that allows
tags to span large ranges or have many disjoint smaller ranges
without loss of efficiency.
Marks are also implemented in a way that allows large numbers of
marks.
In most cases it is fine to have large numbers of unique tags,
or a tag that has many distinct ranges.
</p>
<p>One performance problem can arise if you have hundreds or thousands
of different tags that all have the following characteristics:
the first and last ranges of each tag are near the beginning and
end of the text, respectively,
or a single tag range covers most of the text widget.
The cost of adding and deleting tags like this is proportional
to the number of other tags with the same properties.
In contrast, there is no problem with having thousands of distinct
tags if their overall ranges are localized and spread uniformly throughout
the text.
</p>
<p>Very long text lines can be expensive,
especially if they have many marks and tags within them.
</p>
<p>The display line with the insert cursor is redrawn each time the
cursor blinks, which causes a steady stream of graphics traffic.
Set the <b>insertOffTime</b> attribute to 0 avoid this.
</p>
</section>
<section id="known-bugs">
<title>KNOWN BUGS</title>
<?NEW 8.5?>
<p>The <b>search -regexp</b> sub-command attempts to perform sophisticated
regexp matching across multiple lines in an efficient fashion (since Tk
8.5), examining each line individually, and then in small groups of lines,
whether searching forwards or backwards.  Under certain conditions the
search result might differ from that obtained by applying the same regexp
to the entire text from the widget in one go.  For example, when
searching with a greedy regexp, the widget will continue to attempt to
add extra lines to the match as long as one of two conditions are true:
either Tcl's regexp library returns a code to indicate a longer match is
possible (but there are known bugs in Tcl which mean this code is not
always correctly returned); or if each extra line added results in at
least a partial match with the pattern.  This means in the case where the
first extra line added results in no match and Tcl's regexp system
returns the incorrect code and adding a second extra line would actually
match, the text widget will return the wrong result.  In practice this is
a rare problem, but it can occur, for example:
</p>
<example>
 pack [text .t]
 .t insert 1.0 "aaaa\nbbbb\ncccc\nbbbb\naaaa\n" 
 .t search -regexp -- {(a+|b+\nc+\nb+)+\na+} 1.0
</example>
<p>will not find a match when one exists of 19
characters starting from the first 'b'.
</p>
<p>Whenever one possible match is fully enclosed in another, the search
command will attempt to ensure only the larger match is returned.
When performing backwards regexp searches it is possible that Tcl
will not always achieve this, in the case where a match is preceded by 
one or more short, non-overlapping matches, all of which are preceded
by a large match which actually encompasses all of them.  The search
algorithm used by the widget does not look back arbitrarily far for a
possible match which might cover large portions of the widget.
For example:
</p>
<example>
 pack [text .t] 
 .t insert 1.0 "aaaa\nbbbb\nbbbb\nbbbb\nbbbb\n"
 .t search -regexp -backward -- {b+\n|a+\n(b+\n)+} end 
</example>
<p>matches at '5.0' when a true greedy match would match at '1.0'.  
Similarly if we add <b>-all</b> to this case, it matches at 
all of '5.0', '4.0', '3.0' and '1.0', 
when really it should only match at '1.0' since that match
encloses all the others.
<?ENDNEW CONFUSED 8.5?>
</p>
</section>
<seealso>
<ref>entry(n)</ref>
<ref>scrollbar(n)</ref>
</seealso>
<keywords>
<keyword>text</keyword>
<keyword>widget</keyword>
<keyword>tkvars</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="TextLayout" version="8.1" title="Tk_ComputeTextLayout">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: TextLayout.3,v 1.7 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="Tk_ComputeTextLayout" section="3" date="8.1" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_ComputeTextLayout</name>
<name>Tk_FreeTextLayout</name>
<name>Tk_DrawTextLayout</name>
<name>Tk_UnderlineTextLayout</name>
<name>Tk_PointToChar</name>
<name>Tk_CharBbox</name>
<name>Tk_DistanceToTextLayout</name>
<name>Tk_IntersectTextLayout</name>
<name>Tk_TextLayoutToPostscript</name>
<desc>routines to measure and display single-font, multi-line, justified text.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Tk_TextLayout
<b>Tk_ComputeTextLayout(</b><m>tkfont</m>, <m>string</m>, <m>numChars</m>, <m>wrapLength</m>, <m>justify</m>, <m>flags</m>, <m>widthPtr</m>, <m>heightPtr</m><b>)</b>

void
<b>Tk_FreeTextLayout(</b><m>layout</m><b>)</b>

void
<b>Tk_DrawTextLayout(</b><m>display</m>, <m>drawable</m>, <m>gc</m>, <m>layout</m>, <m>x</m>, <m>y</m>, <m>firstChar</m>, <m>lastChar</m><b>)</b>

void
<b>Tk_UnderlineTextLayout(</b><m>display</m>, <m>drawable</m>, <m>gc</m>, <m>layout</m>, <m>x</m>, <m>y</m>, <m>underline</m><b>)</b>

int
<b>Tk_PointToChar(</b><m>layout</m>, <m>x</m>, <m>y</m><b>)</b>

int
<b>Tk_CharBbox(</b><m>layout</m>, <m>index</m>, <m>xPtr</m>, <m>yPtr</m>, <m>widthPtr</m>, <m>heightPtr</m><b>)</b>

int
<b>Tk_DistanceToTextLayout(</b><m>layout</m>, <m>x</m>, <m>y</m><b>)</b>

int
<b>Tk_IntersectTextLayout(</b><m>layout</m>, <m>x</m>, <m>y</m>, <m>width</m>, <m>height</m><b>)</b>

void
<b>Tk_TextLayoutToPostscript(</b><m>interp</m>, <m>layout</m><b>)</b>

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Font</argtype>
<name>tkfont</name>
<argmode>in</argmode>
<desc>Font to use when constructing and displaying a text layout.  The
<i>tkfont</i> must remain valid for the lifetime of the text layout.  Must
have been returned by a previous call to <fun>Tk_GetFont</fun>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="string">*string</name>
<argmode>in</argmode>
<desc>Potentially multi-line string whose dimensions are to be computed and
stored in the text layout.  The <i>string</i> must remain valid for the
lifetime of the text layout.  
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>numChars</name>
<argmode>in</argmode>
<desc>The number of characters to consider from <i>string</i>.  If
<i>numChars</i> is less than 0, then assumes <i>string</i> is null
terminated and uses <fun>Tcl_NumUtfChars</fun> to determine the length of
<i>string</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>wrapLength</name>
<argmode>in</argmode>
<desc>Longest permissible line length, in pixels.  Lines in <i>string</i> will
automatically be broken at word boundaries and wrapped when they reach
this length.  If <i>wrapLength</i> is too small for even a single
character to fit on a line, it will be expanded to allow one character to
fit on each line.  If <i>wrapLength</i> is &lt;= 0, there is no automatic
wrapping; lines will get as long as they need to be and only wrap if a
newline/return character is encountered.
</desc>
</argdef>
<argdef>
<argtype>Tk_Justify</argtype>
<name>justify</name>
<argmode>in</argmode>
<desc>How to justify the lines in a multi-line text layout.  Possible values
are <b>TK_JUSTIFY_LEFT</b>, <b>TK_JUSTIFY_CENTER</b>, or
<b>TK_JUSTIFY_RIGHT</b>. If the text layout only occupies a single
line, then <i>justify</i> is irrelevant.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Various flag bits OR-ed together. <b>TK_IGNORE_TABS</b> means that tab
characters should not be expanded to the next tab stop.
<b>TK_IGNORE_NEWLINES</b> means that newline/return characters should
not cause a line break.  If either tabs or newlines/returns are
ignored, then they will be treated as regular characters, being
measured and displayed in a platform-dependent manner as described in
<fun>Tk_MeasureChars</fun>, and will not have any special behaviors.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="widthPtr">*widthPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, filled with either the width, in pixels, of the widest
line in the text layout, or the width, in pixels, of the bounding box for the 
character specified by <i>index</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="heightPtr">*heightPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, filled with either the total height, in pixels, of all
the lines in the text layout, or the height, in pixels, of the bounding
box for the character specified by <i>index</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_TextLayout</argtype>
<name>layout</name>
<argmode>in</argmode>
<desc>A token that represents the cached layout information about the single-font,
multi-line, justified piece of text.  This token is returned by
<fun>Tk_ComputeTextLayout</fun>.
</desc>
</argdef>
<argdef>
<argtype>Display</argtype>
<name name="display">*display</name>
<argmode>in</argmode>
<desc>Display on which to draw.
</desc>
</argdef>
<argdef>
<argtype>Drawable</argtype>
<name>drawable</name>
<argmode>in</argmode>
<desc>Window or pixmap in which to draw.
</desc>
</argdef>
<argdef>
<argtype>GC</argtype>
<name>gc</name>
<argmode>in</argmode>
<desc>Graphics context to use for drawing text layout.  The font selected in
this GC must correspond to the <i>tkfont</i> used when constructing the
text layout.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x, y</name>
<argmode>in</argmode>
<desc>Point, in pixels, at which to place the upper-left hand corner of the
text layout when it is being drawn, or the coordinates of a point (with
respect to the upper-left hand corner of the text layout) to check
against the text layout.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>firstChar</name>
<argmode>in</argmode>
<desc>The index of the first character to draw from the given text layout.  
The number 0 means to draw from the beginning.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>lastChar</name>
<argmode>in</argmode>
<desc>The index of the last character up to which to draw.  The character
specified by <i>lastChar</i> itself will not be drawn.  A number less
than 0 means to draw all characters in the text layout.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>underline</name>
<argmode>in</argmode>
<desc>Index of the single character to underline in the text layout, or a number
less than 0 for no underline.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>index</name>
<argmode>in</argmode>
<desc>The index of the character whose bounding box is desired.  The bounding
box is computed with respect to the upper-left hand corner of the text layout.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="xPtr, yPtr">*xPtr, *yPtr</name>
<argmode>out</argmode>
<desc>Filled with the upper-left hand corner, in pixels, of the bounding box
for the character specified by <i>index</i>.  Either or both <i>xPtr</i>
and <i>yPtr</i> may be NULL, in which case the corresponding value
is not calculated.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width, height</name>
<argmode>in</argmode>
<desc>Specifies the width and height, in pixels, of the rectangular area to 
compare for intersection against the text layout.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>out</argmode>
<desc>Postscript code that will print the text layout is appended to
<i>interp-&gt;result</i>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These routines are for measuring and displaying single-font, multi-line,
justified text.  To measure and display simple single-font, single-line
strings, refer to the documentation for <fun>Tk_MeasureChars</fun>.  There is
no programming interface in the core of Tk that supports multi-font,
multi-line text; support for that behavior must be built on top of
simpler layers.  
Note that unlike the lower level text display routines, the functions
described here all operate on character-oriented lengths and indices
rather than byte-oriented values.  See the description of
<fun>Tcl_UtfAtIndex</fun> for more details on converting between character
and byte offsets.
</p>
<p>The routines described here are built on top of the programming interface
described in the <fun>Tk_MeasureChars</fun> documentation.  Tab characters and
newline/return characters may be treated specially by these procedures,
but all other characters are passed through to the lower level.
</p>
<p><fun>Tk_ComputeTextLayout</fun> computes the layout information needed to
display a single-font, multi-line, justified <i>string</i> of text and
returns a Tk_TextLayout token that holds this information.  This token is
used in subsequent calls to procedures such as <fun>Tk_DrawTextLayout</fun>,
<fun>Tk_DistanceToTextLayout</fun>, and <fun>Tk_FreeTextLayout</fun>.  The
<i>string</i> and <i>tkfont</i> used when computing the layout must remain
valid for the lifetime of this token.  
</p>
<p><fun>Tk_FreeTextLayout</fun> is called to release the storage associated with
<i>layout</i> when it is no longer needed.  A <i>layout</i> should not be used
in any other text layout procedures once it has been released. 
</p>
<p><fun>Tk_DrawTextLayout</fun> uses the information in <i>layout</i> to display a
single-font, multi-line, justified string of text at the specified location.
</p>
<p><fun>Tk_UnderlineTextLayout</fun> uses the information in <i>layout</i> to
display an underline below an individual character.  This procedure does
not draw the text, just the underline.  To produce natively underlined
text, an underlined font should be constructed and used.  All characters,
including tabs, newline/return characters, and spaces at the ends of
lines, can be underlined using this method.  However, the underline will
never be drawn outside of the computed width of <i>layout</i>; the
underline will stop at the edge for any character that would extend
partially outside of <i>layout</i>, and the underline will not be visible
at all for any character that would be located completely outside of the
layout.
</p>
<p><fun>Tk_PointToChar</fun> uses the information in <i>layout</i> to determine the
character closest to the given point.  The point is specified with respect
to the upper-left hand corner of the <i>layout</i>, which is considered to be
located at (0, 0).  Any point whose <i>y</i>-value is less that 0 will be
considered closest to the first character in the text layout; any point
whose <i>y</i>-value is greater than the height of the text layout will be
considered closest to the last character in the text layout.  Any point
whose <i>x</i>-value is less than 0 will be considered closest to the first
character on that line; any point whose <i>x</i>-value is greater than the
width of the text layout will be considered closest to the last character on
that line.  The return value is the index of the character that was closest
to the point.  Given a <i>layout</i> with no characters, the value 0 will
always be returned, referring to a hypothetical zero-width placeholder
character.  
</p>
<p><fun>Tk_CharBbox</fun> uses the information in <i>layout</i> to return the
bounding box for the character specified by <i>index</i>.  The width of the
bounding box is the advance width of the character, and does not include any
left or right bearing.  Any character that extends partially outside of 
<i>layout</i> is considered to be truncated at the edge.  Any character
that would be located completely outside of <i>layout</i> is considered to
be zero-width and pegged against the edge.  The height of the bounding
box is the line height for this font, extending from the top of the
ascent to the bottom of the descent; information about the actual height
of individual letters is not available.  For measurement purposes, a
<i>layout</i> that contains no characters is considered to contain a
single zero-width placeholder character at index 0.  If <i>index</i> was
not a valid character index, the return value is 0 and <i>*xPtr</i>,
<i>*yPtr</i>, <i>*widthPtr</i>, and <i>*heightPtr</i> are unmodified.
Otherwise, if <i>index</i> did specify a valid, the return value is
non-zero, and <i>*xPtr</i>, <i>*yPtr</i>, <i>*widthPtr</i>, and
<i>*heightPtr</i> are filled with the bounding box information for the
character.  If any of <i>xPtr</i>, <i>yPtr</i>, <i>widthPtr</i>, or
<i>heightPtr</i> are NULL, the corresponding value is not calculated or
stored.
</p>
<p><fun>Tk_DistanceToTextLayout</fun> computes the shortest distance in pixels from
the given point (<i>x, y</i>) to the characters in <i>layout</i>.
Newline/return characters and non-displaying space characters that occur at
the end of individual lines in the text layout are ignored for hit detection
purposes, but tab characters are not.  The return value is 0 if the point
actually hits the <i>layout</i>.  If the point didn't hit the <i>layout</i>
then the return value is the distance in pixels from the point to the
<i>layout</i>.
</p>
<p><fun>Tk_IntersectTextLayout</fun> determines whether a <i>layout</i> lies
entirely inside, entirely outside, or overlaps a given rectangle.
Newline/return characters and non-displaying space characters that occur
at the end of individual lines in the <i>layout</i> are ignored for
intersection calculations.  The return value is -1 if the <i>layout</i> is
entirely outside of the rectangle, 0 if it overlaps, and 1 if it is
entirely inside of the rectangle.
</p>
<p><fun>Tk_TextLayoutToPostscript</fun> outputs code consisting of a Postscript
array of strings that represent the individual lines in <i>layout</i>.  It
is the responsibility of the caller to take the Postscript array of
strings and add some Postscript function operate on the array to render
each of the lines.  The code that represents the Postscript array of
strings is appended to <i>interp-&gt;result</i>.
</p>
</section>
<section>
<title>DISPLAY MODEL</title>
<p>When measuring a text layout, space characters that occur at the end of a
line are ignored.  The space characters still exist and the insertion point
can be positioned amongst them, but their additional width is ignored when
justifying lines or returning the total width of a text layout.  All
end-of-line space characters are considered to be attached to the right edge
of the line; this behavior is logical for left-justified text and reasonable
for center-justified text, but not very useful when editing right-justified
text.  Spaces are considered variable width characters; the first space that
extends past the edge of the text layout is clipped to the edge, and any
subsequent spaces on the line are considered zero width and pegged against
the edge.  Space characters that occur in the middle of a line of text are
not suppressed and occupy their normal space width.
</p>
<p>Tab characters are not ignored for measurement calculations.  If wrapping
is turned on and there are enough tabs on a line, the next tab will wrap
to the beginning of the next line.  There are some possible strange
interactions between tabs and justification; tab positions are calculated
and the line length computed in a left-justified world, and then the
whole resulting line is shifted so it is centered or right-justified,
causing the tab columns not to align any more.
</p>
<p>When wrapping is turned on, lines may wrap at word breaks (space or tab
characters) or newline/returns.  A dash or hyphen character in the middle
of a word is not considered a word break.  <fun>Tk_ComputeTextLayout</fun>
always attempts to place at least one word on each line.  If it cannot
because the <i>wrapLength</i> is too small, the word will be broken and as
much as fits placed on the line and the rest on subsequent line(s).  If
<i>wrapLength</i> is so small that not even one character can fit on a
given line, the <i>wrapLength</i> is ignored for that line and one
character will be placed on the line anyhow.  When wrapping is turned
off, only newline/return characters may cause a line break.  
</p>
<p>When a text layout has been created using an underlined <i>tkfont</i>,
then any space characters that occur at the end of individual lines,
newlines/returns, and tabs will not be displayed underlined when 
<fun>Tk_DrawTextLayout</fun> is called, because those characters are never
actually drawn - they are merely placeholders maintained in the
<i>layout</i>.  
</p>
</section>
<keywords>
<keyword>font</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Thread" version="8.1" title="Threads">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1999 Scriptics Corporation
     Copyright (c) 1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Thread.3,v 1.24 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Threads" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_ConditionNotify</name>
<name>Tcl_ConditionWait</name>
<name>Tcl_ConditionFinalize</name>
<name>Tcl_GetThreadData</name>
<name>Tcl_MutexLock</name>
<name>Tcl_MutexUnlock</name>
<name>Tcl_MutexFinalize</name>
<name>Tcl_CreateThread</name>
<name>Tcl_JoinThread</name>
<desc>Tcl thread support</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

void
<fun>Tcl_ConditionNotify</fun>(<m>condPtr</m>)

void
<fun>Tcl_ConditionWait</fun>(<m>condPtr</m>, <m>mutexPtr</m>, <m>timePtr</m>)

void
<fun>Tcl_ConditionFinalize</fun>(<m>condPtr</m>)

Void *
<fun>Tcl_GetThreadData</fun>(<m>keyPtr</m>, <m>size</m>)

void
<fun>Tcl_MutexLock</fun>(<m>mutexPtr</m>)

void
<fun>Tcl_MutexUnlock</fun>(<m>mutexPtr</m>)

void
<fun>Tcl_MutexFinalize</fun>(<m>mutexPtr</m>)

int
<fun>Tcl_CreateThread</fun>(<m>idPtr</m>, <m>threadProc</m>, <m>clientData</m>, <m>stackSize</m>, <m>flags</m>)

int
<fun>Tcl_JoinThread</fun>(<m>id</m>, <m>result</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Condition</argtype>
<name name="condPtr">*condPtr</name>
<argmode>in</argmode>
<desc>A condition variable, which must be associated with a mutex lock.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Mutex</argtype>
<name name="mutexPtr">*mutexPtr</name>
<argmode>in</argmode>
<desc>A mutex lock.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Time</argtype>
<name name="timePtr">*timePtr</name>
<argmode>in</argmode>
<desc>A time limit on the condition wait.  NULL to wait forever.
Note that a polling value of 0 seconds doesn't make much sense.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ThreadDataKey</argtype>
<name name="keyPtr">*keyPtr</name>
<argmode>in</argmode>
<desc>This identifies a block of thread local storage.  The key should be
static and process-wide, yet each thread will end up associating
a different block of storage with this key.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="size">*size</name>
<argmode>in</argmode>
<desc>The size of the thread local storage block.  This amount of data
is allocated and initialized to zero the first time each thread
calls <fun>Tcl_GetThreadData</fun>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ThreadId</argtype>
<name name="idPtr">*idPtr</name>
<argmode>out</argmode>
<desc>The referred storage will contain the id of the newly created thread as
returned by the operating system.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ThreadId</argtype>
<name>id</name>
<argmode>in</argmode>
<desc>Id of the thread waited upon.
</desc>
</argdef>
<argdef>
<argtype>Tcl_ThreadCreateProc</argtype>
<name>threadProc</name>
<argmode>in</argmode>
<desc>This procedure will act as the <b>main()</b> of the newly created
thread. The specified <i>clientData</i> will be its sole argument.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary information. Passed as sole argument to the <i>threadProc</i>.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>stackSize</name>
<argmode>in</argmode>
<desc>The size of the stack given to the new thread.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>Bitmask containing flags allowing the caller to modify behaviour of
the new thread.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="result">*result</name>
<argmode>out</argmode>
<desc>The referred storage is used to place the exit code of the thread
waited upon into it.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>INTRODUCTION</title>
<p>Beginning with the 8.1 release, the Tcl core is thread safe, which
allows you to incorporate Tcl into multithreaded applications without
customizing the Tcl core.  To enable Tcl multithreading support,
you must include the <b>--enable-threads</b> option to <b>configure</b>
when you configure and compile your Tcl core.
</p>
<p>An important constraint of the Tcl threads implementation is that
<i>only the thread that created a Tcl interpreter can use that
interpreter</i>.  In other words, multiple threads can not access
the same Tcl interpreter.  (However, a single thread can safely create
and use multiple interpreters.)
</p>
</section>
<section>
<title>DESCRIPTION</title>
<p>Tcl provides <fun>Tcl_CreateThread</fun> for creating threads. The
caller can determine the size of the stack given to the new thread and
modify the behaviour through the supplied <i>flags</i>. The value
<b>TCL_THREAD_STACK_DEFAULT</b> for the <i>stackSize</i> indicates that
the default size as specified by the operating system is to be used
for the new thread. As for the flags, currently only the values
<b>TCL_THREAD_NOFLAGS</b> and <b>TCL_THREAD_JOINABLE</b> are defined. The
first of them invokes the default behaviour with no
specialties. Using the second value marks the new thread as
<i>joinable</i>. This means that another thread can wait for the such
marked thread to exit and join it.
</p>
<p>Restrictions: On some UNIX systems the pthread-library does not
contain the functionality to specify the stack size of a thread. The
specified value for the stack size is ignored on these systems.
Windows currently does not support joinable threads. This
flag value is therefore ignored on this platform.
</p>
<p>Tcl provides the <fun>Tcl_ExitThread</fun> and <fun>Tcl_FinalizeThread</fun> functions
for terminating threads and invoking optional per-thread exit
handlers.  See the <fun>Tcl_Exit</fun> page for more information on these
procedures.
</p>
<p>The <fun>Tcl_JoinThread</fun> function is provided to allow threads to wait
upon the exit of another thread, which must have been marked as
joinable through usage of the <b>TCL_THREAD_JOINABLE</b>-flag during
its creation via <fun>Tcl_CreateThread</fun>.
</p>
<p>Trying to wait for the exit of a non-joinable thread or a thread which
is already waited upon will result in an error. Waiting for a joinable
thread which already exited is possible, the system will retain the
necessary information until after the call to <fun>Tcl_JoinThread</fun>.
This means that not calling <fun>Tcl_JoinThread</fun> for a joinable thread
will cause a memory leak.
</p>
<p>The <fun>Tcl_GetThreadData</fun> call returns a pointer to a block of
thread-private data.  Its argument is a key that is shared by all threads
and a size for the block of storage.  The storage is automatically 
allocated and initialized to all zeros the first time each thread asks for it.
The storage is automatically deallocated by <fun>Tcl_FinalizeThread</fun>.
</p>
<subsection>
<title>SYNCHRONIZATION AND COMMUNICATION</title>
<p>Tcl provides <fun>Tcl_ThreadQueueEvent</fun> and <fun>Tcl_ThreadAlert</fun>
for handling event queuing in multithreaded applications.  See
the <b>Notifier</b> manual page for more information on these procedures.
</p>
<p>A mutex is a lock that is used to serialize all threads through a piece
of code by calling <fun>Tcl_MutexLock</fun> and <fun>Tcl_MutexUnlock</fun>.
If one thread holds a mutex, any other thread calling <fun>Tcl_MutexLock</fun> will
block until <fun>Tcl_MutexUnlock</fun> is called.
A mutex can be destroyed after its use by calling <fun>Tcl_MutexFinalize</fun>.
The result of locking a mutex twice from the same thread is undefined.
On some platforms it will result in a deadlock.
The <fun>Tcl_MutexLock</fun>, <fun>Tcl_MutexUnlock</fun> and <fun>Tcl_MutexFinalize</fun>
procedures are defined as empty macros if not compiling with threads enabled.
For declaration of mutexes the <b>TCL_DECLARE_MUTEX</b> macro should be used.
This macro assures correct mutex handling even when the core is compiled
without threads enabled.
</p>
<p>A condition variable is used as a signaling mechanism:
a thread can lock a mutex and then wait on a condition variable
with <fun>Tcl_ConditionWait</fun>.  This atomically releases the mutex lock
and blocks the waiting thread until another thread calls
<fun>Tcl_ConditionNotify</fun>.  The caller of <fun>Tcl_ConditionNotify</fun> should
have the associated mutex held by previously calling <fun>Tcl_MutexLock</fun>,
but this is not enforced.  Notifying the
condition variable unblocks all threads waiting on the condition variable,
but they do not proceed until the mutex is released with <fun>Tcl_MutexUnlock</fun>.
The implementation of <fun>Tcl_ConditionWait</fun> automatically locks
the mutex before returning.
</p>
<p>The caller of <fun>Tcl_ConditionWait</fun> should be prepared for spurious
notifications by calling <fun>Tcl_ConditionWait</fun> within a while loop
that tests some invariant.
</p>
<p>A condition variable can be destroyed after its use by calling
<fun>Tcl_ConditionFinalize</fun>.
</p>
<p>The <fun>Tcl_ConditionNotify</fun>, <fun>Tcl_ConditionWait</fun> and
<fun>Tcl_ConditionFinalize</fun> procedures are defined as empty macros if
not compiling with threads enabled.
</p>
</subsection>
<subsection>
<title>INITIALIZATION</title>
<p>All of these synchronization objects are self-initializing.
They are implemented as opaque pointers that should be NULL
upon first use.
The mutexes and condition variables are
either cleaned up by process exit handlers (if living that long) or
explicitly by calls to <fun>Tcl_MutexFinalize</fun> or
<fun>Tcl_ConditionFinalize</fun>.
Thread local storage is reclaimed during <fun>Tcl_FinalizeThread</fun>.
</p>
</subsection>
</section>
<section>
<title>SCRIPT-LEVEL ACCESS TO THREADS</title>
<p version="8.5">Tcl provides no built-in commands for scripts to use to create,
manage, or join threads, nor any script-level access to mutex or
condition variables.  It provides such facilities only via C
interfaces, and leaves it up to packages to expose these matters to
the script level.  One such package is the <b>Thread</b> package.
</p>
</section>
<seealso>
<ref>Tcl_GetCurrentThread(3)</ref>
<ref>Tcl_ThreadQueueEvent(3)</ref>
<ref>Tcl_ThreadAlert(3)</ref>
<ref>Tcl_ExitThread(3)</ref>
<ref>Tcl_FinalizeThread(3)</ref>
<ref>Tcl_CreateThreadExitHandler(3)</ref>
<ref>Tcl_DeleteThreadExitHandler(3)</ref>
<ref>Thread</ref>
</seealso>
<keywords>
<keyword>thread</keyword>
<keyword>mutex</keyword>
<keyword>condition variable</keyword>
<keyword>thread local storage</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="time" title="time">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: time.n,v 1.5 2004/10/27 14:43:54 dkf Exp $
 -->
<?TROFF.TH title="time" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>time</name>
<desc>Time the execution of a script</desc>
</namesection>
<synopsis>
<syntax>
<cmd>time</cmd> <m>script</m> ?<m>count</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command will call the Tcl interpreter <i>count</i>
times to evaluate <i>script</i> (or once if <i>count</i> isn't
specified).  It will then return a string of the form
</p>
<example>
<b>503 microseconds per iteration</b>
</example>
<p>which indicates the average amount of time required per iteration,
in microseconds.
Time is measured in elapsed time, not CPU time.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Estimate how long it takes for a simple Tcl <cmd>for</cmd> loop to count to
a thousand:
</p>
<example>
time {
    for {set i 0} {$i&lt;1000} {incr i} {
        # empty body
    }
}
</example>


</section>
<seealso>
<ref>clock(n)</ref>
</seealso>
<keywords>
<keyword>script</keyword>
<keyword>time</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="tk" version="8.4" title="tk">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tk.n,v 1.11 2006/11/16 13:44:02 dkf Exp $
 -->
<?TROFF.TH title="tk" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tk</name>
<desc>Manipulate Tk internal state</desc>
</namesection>
<synopsis>
<syntax>
<cmd>tk</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>tk</cmd> command provides access to miscellaneous
elements of Tk's internal state.
Most of the information manipulated by this command pertains to the
application as a whole, or to a screen or display, rather than to a
particular window.
The command can take any of a number of different forms
depending on the <i>option</i> argument.  The legal forms are:
</p>
<commandlist>
<commanddef>
<command><b>tk appname</b> ?<m>newName</m>?</command>
<desc>If <i>newName</i> isn't specified, this command returns the name
of the application (the name that may be used in <cmd>send</cmd>
commands to communicate with the application).
If <i>newName</i> is specified, then the name of the application
is changed to <i>newName</i>.
If the given name is already in use, then a suffix of the form
`` <b>#2</b>'' or `` <b>#3</b>'' is appended in order to make the name unique.
The command's result is the name actually chosen.
<i>newName</i> should not start with a capital letter.
This will interfere with option processing, since names starting with
capitals are assumed to be classes;  as a result, Tk may not
be able to find some options for the application.
If sends have been disabled by deleting the <cmd>send</cmd> command,
this command will reenable them and recreate the <cmd>send</cmd>
command.
</desc>
</commanddef>
<commanddef>
<command><b>tk caret window</b> ?<b>-x</b> <m>x</m>? ?<b>-y</b> <m>y</m>? ?<b>-height</b> <m>height</m>?</command>
<desc>Sets and queries the caret location for the display of the specified
Tk window <i>window</i>.  The caret is the per-display cursor location
used for indicating global focus (e.g. to comply with Microsoft
Accessibility guidelines), as well as for location of the over-the-spot
XIM (X Input Methods) or Windows IME windows.  If no options are specified,
the last values used for setting the caret are return in option-value pair
format.  <i>-x</i> and <i>-y</i> represent window-relative coordinates, and
<i>-height</i> is the height of the current cursor location, or the height
of the specified <i>window</i> if none is given.
</desc>
</commanddef>
<commanddef>
<command><b>tk scaling</b> ?<b>-displayof</b> <m>window</m>? ?<m>number</m>?</command>
<desc>Sets and queries the current scaling factor used by Tk to convert between
physical units (for example, points, inches, or millimeters) and pixels.  The
<i>number</i> argument is a floating point number that specifies the number of
pixels per point on <i>window</i>'s display.  If the <i>window</i> argument is
omitted, it defaults to the main window.  If the <i>number</i> argument is 
omitted, the current value of the scaling factor is returned.
<p>A ``point'' is a unit of measurement equal to 1/72 inch.  A scaling factor
of 1.0 corresponds to 1 pixel per point, which is equivalent to a standard
72 dpi monitor.  A scaling factor of 1.25 would mean 1.25 pixels per point,
which is the setting for a 90 dpi monitor; setting the scaling factor to
1.25 on a 72 dpi monitor would cause everything in the application to be
displayed 1.25 times as large as normal.  The initial value for the scaling
factor is set when the application starts, based on properties of the
installed monitor, but it can be changed at any time.  Measurements made
after the scaling factor is changed will use the new scaling factor, but it
is undefined whether existing widgets will resize themselves dynamically to
accomodate the new scaling factor.
</p></desc>
</commanddef>
<commanddef>
<command><b>tk inactive</b> ?<b>-displayof</b> <m>window</m>? ?<b>reset</b>?</command>
<desc>Returns a positive integer, the number of milliseconds since the last
time the user interacted with the system. If the <b>-displayof</b>
option is given then the return value refers to the display of
<i>window</i>; otherwise it refers to the display of the application's
main window.

<b>tk inactive</b> will return -1, if querying the user inactive time
is not supported by the system, and in safe interpreters.

If the literal string <b>reset</b> is given as an additional argument,
the timer is reset and an empty string is returned. Resetting the
inactivity time is forbidden in safe interpreters and will throw and
error if tried.
</desc>
</commanddef>
<commanddef>
<command><b>tk useinputmethods</b> ?<b>-displayof</b> <m>window</m>? ?<m>boolean</m>?</command>
<desc>Sets and queries the state of whether Tk should use XIM (X Input Methods)
for filtering events.  The resulting state is returned.  XIM is used in
some locales (i.e., Japanese, Korean), to handle special input devices. This
feature is only significant on X.  If XIM support is not available, this
will always return 0.  If the <i>window</i> argument is omitted, it defaults
to the main window.  If the <i>boolean</i> argument is omitted, the current
state is returned.  This is turned on by default for the main display.
</desc>
</commanddef>
<commanddef>
<command><b>tk windowingsystem</b></command>
<desc>Returns the current Tk windowing system, one of
<b>x11</b> (X11-based), <b>win32</b> (MS Windows),
or <b>aqua</b> (Mac OS X Aqua).
</desc>
</commanddef>
</commandlist>
</section>
<keywords>
<keyword>application name</keyword>
<keyword>send</keyword>
</keywords>
</manpage>
<manpage version="4.1" cat="cmd" title="tkerror" id="tkerror">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tkerror.n,v 1.2 1998/09/14 18:23:00 stanton Exp $
 -->
<?TROFF.TH title="tkerror" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tkerror</name>
<desc>Command invoked to process background errors</desc>
</namesection>
<synopsis>
<syntax>
<b>tkerror</b> <m>message</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>Note: as of Tk 4.1 the <b>tkerror</b> command has been renamed to
<b>bgerror</b> because the event loop (which is what usually invokes
it) is now part of Tcl.  For backward compatibility
the <b>bgerror</b> provided by the current Tk version still
tries to call <b>tkerror</b> if there is one (or an auto loadable one), 
so old script defining that error handler should still work, but you
should anyhow modify your scripts to use <b>bgerror</b> instead 
of <b>tkerror</b> because that support for the old name might vanish
in the near future. If that call fails, <b>bgerror</b> 
posts a dialog showing the error and offering to see the stack trace
to the user. If you want your own error management you should
directly override <b>bgerror</b> instead of <b>tkerror</b>.
Documentation for <b>bgerror</b> is available as part of Tcl's
documentation.

</p>
</section>
<keywords>
<keyword>background error</keyword>
<keyword>reporting</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="TkInitStubs" version="8.4" title="Tk_InitStubs">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1999 Scriptics Corportation
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: TkInitStubs.3,v 1.5 2007/01/05 00:00:48 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_InitStubs" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_InitStubs</name>
<desc>initialize the Tk stubs mechanism</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

const char *
<fun>Tk_InitStubs</fun>(<m>interp</m>, <m>version</m>, <m>exact</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Tcl interpreter handle.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="version">*version</name>
<argmode>in</argmode>
<desc>A version string consisting of one or more decimal numbers
separated by dots.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>exact</name>
<argmode>in</argmode>
<desc>Non-zero means that only the particular Tk version specified by
<i>version</i> is acceptable.
Zero means that versions newer than <i>version</i> are also
acceptable as long as they have the same major version number
as <i>version</i>.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>INTRODUCTION</title>
<p>The Tcl stubs mechanism defines a way to dynamically bind
extensions to a particular Tcl implementation at run time.
the stubs mechanism requires no changes to applications
incoporating Tcl/Tk interpreters.  Only developers creating
C-based Tcl/Tk extensions need to take steps to use the
stubs mechanism with their extensions.
See the <fun>Tcl_InitStubs</fun> page for more information.
</p>
<p>Enabling the stubs mechanism for a Tcl/Tk extension requires the following
steps:
</p>
<dl>
<dle>
<dt>1)</dt>
<dd>Call <fun>Tcl_InitStubs</fun> in the extension before calling any other
Tcl functions.
</dd>
</dle>
<dle>
<dt>2)</dt>
<dd>Call <fun>Tk_InitStubs</fun> if the extension before calling any other
Tk functions.
</dd>
</dle>
<dle>
<dt>2)</dt>
<dd>Define the <b>USE_TCL_STUBS</b> symbol. Typically, you would include the
<b>-DUSE_TCL_STUBS</b> flag when compiling the extension.
</dd>
</dle>
<dle>
<dt>3)</dt>
<dd>Link the extension with the Tcl and Tk stubs libraries instead of
the standard Tcl and Tk libraries.  On Unix platforms, the library
names are <i>libtclstub8.4.a</i> and <i>libtkstub8.4.a</i>; on Windows
platforms, the library names are <i>tclstub84.lib</i> and <i>tkstub84.lib</i>
(adjust names with appropriate version number).
</dd>
</dle>
</dl>
</section>
<section>
<title>DESCRIPTION</title>
<p><fun>Tk_InitStubs</fun> attempts to initialize the Tk stub table pointers
and ensure that the correct version of Tk is loaded.  In addition
to an interpreter handle, it accepts as arguments a version number
and a Boolean flag indicating whether the extension requires
an exact version match or not.  If <i>exact</i> is 0, then the
extension is indicating that newer versions of Tk are acceptable
as long as they have the same major version number as <i>version</i>;
non-zero means that only the specified <i>version</i> is acceptable.
<fun>Tcl_InitStubs</fun> returns a string containing the actual version
of Tk satisfying the request, or NULL if the Tk version is not
acceptable, does not support the stubs mechanism, or any other
error condition occurred.
</p>
</section>
<seealso>
<ref>Tcl_InitStubs</ref>
</seealso>
<keywords>
<keyword>stubs</keyword>
</keywords>
</manpage>
<manual package="tk" version="8.5">
<!-- 
    $Id: TKMAN.XML,v 1.7 2006/04/08 20:58:49 jenglish Exp $
    Master index of Tk manual pages
-->

<title>Tk Reference Manual</title>
<head>
<link rel="homepage" href="http://tktoolkit.sourceforge.net" />
</head>

<division><title>Tk built-in commands</title>

<division><title>General</title>
    <subdoc href="tk.xml" />
    <subdoc href="loadTk.xml" />
    <subdoc href="tkerror.xml" />
    <subdoc href="tkvars.xml" />
    <subdoc href="winfo.xml" />
    <subdoc href="wm.xml" />
    <subdoc href="tkwait.xml" />
    <subdoc href="destroy.xml" />
    <subdoc href="console.xml"/>
    <subdoc href="wish.xml" />
</division>

<division><title>Resources and Options</title>
    <subdoc href="option.xml" />
    <subdoc href="options.xml" />
    <subdoc href="colors.xml" />
    <subdoc href="cursors.xml" />
    <subdoc href="keysyms.xml" />
    <subdoc href="font.xml" />
    <subdoc href="image.xml" />
    <subdoc href="bitmap.xml" />
    <subdoc href="photo.xml" />
    <subdoc href="palette.xml" />
</division>

<division><title>Widgets</title>
    <subdoc href="button.xml" />
    <subdoc href="canvas.xml" />
    <subdoc href="checkbutton.xml" />
    <subdoc href="entry.xml" />
    <subdoc href="frame.xml" />
    <subdoc href="label.xml" />
    <subdoc href="labelframe.xml"/>
    <subdoc href="listbox.xml" />
    <subdoc href="menu.xml" />
    <subdoc href="menubutton.xml" />
    <subdoc href="message.xml" />
    <subdoc href="optionMenu.xml" />
    <subdoc href="panedwindow.xml"/>
    <subdoc href="radiobutton.xml" />
    <subdoc href="scale.xml" />
    <subdoc href="scrollbar.xml" />
    <subdoc href="spinbox.xml" />
    <subdoc href="text.xml" />
</division>

<division><title>Dialogs and toplevels</title>
    <subdoc href="toplevel.xml" />
    <subdoc href="messageBox.xml" />
    <subdoc href="dialog.xml" />
    <subdoc href="getOpenFile.xml" />
    <subdoc href="chooseDirectory.xml" />
    <subdoc href="chooseColor.xml" />
    <subdoc href="popup.xml" />
</division>

<division><title>Geometry management</title>
    <subdoc href="grid.xml" />
    <subdoc href="pack.xml" />
    <subdoc href="place.xml" />
    <subdoc href="lower.xml" />
    <subdoc href="raise.xml" />
</division>

<division><title>Events and bindings</title>
    <subdoc href="bind.xml" />
    <subdoc href="bindtags.xml" />
    <subdoc href="event.xml" />
    <subdoc href="grab.xml" />
    <subdoc href="focus.xml" />
    <subdoc href="focusNext.xml" />
</division>

<division><title>Inter-client Communication</title>
    <subdoc href="bell.xml" />
    <subdoc href="selection.xml" />
    <subdoc href="clipboard.xml" />
    <subdoc href="send.xml" />
</division>
</division>

<division><title>Tk C Procedures</title>
<division><title>Initialization</title>
    <subdoc href="Tk_Main.xml" />
    <subdoc href="Tk_Init.xml" />
    <subdoc href="TkInitStubs.xml" />
    <subdoc href="ParseArgv.xml" />
    <subdoc href="MainWin.xml" />
    <subdoc href="MainLoop.xml" />
    <subdoc href="SetAppName.xml" />
    <subdoc href="CrtErrHdlr.xml" />
    <subdoc href="StrictMotif.xml" />
</division>

<division><title>Widget Implementation</title>
    <subdoc href="CrtWindow.xml" />
    <subdoc href="ConfigWind.xml" />
    <subdoc href="SetClass.xml" />
    <subdoc href="SetClassProcs.xml" />
    <subdoc href="EventHndlr.xml" />
    <subdoc href="GeomReq.xml" />
    <subdoc href="WindowId.xml" />
    <subdoc href="MaintGeom.xml" />
    <subdoc href="ManageGeom.xml" />
    <subdoc href="SetGrid.xml" />
    <subdoc href="CoordToWin.xml" />
    <subdoc href="SetVisual.xml" />
    <subdoc href="MapWindow.xml" />
    <subdoc href="MoveToplev.xml" />
    <subdoc href="Restack.xml" />
    <subdoc href="Name.xml" />
    <subdoc href="GetAnchor.xml" />
    <subdoc href="GetScroll.xml" />
    <subdoc href="GetUid.xml" />
</division>

<division><title>Events and Bindings</title>
    <subdoc href="BindTable.xml" />
    <subdoc href="CGrab.xml" />		<!-- Source: Grab.3 -->
    <subdoc href="HandleEvent.xml" />
    <subdoc href="RestrictEv.xml" />
    <subdoc href="QWinEvent.xml" />
    <subdoc href="SetCaret.xml" />	<!-- Not sure where to put this... -->
    <subdoc href="Inactive.xml" />	<!-- ... or this either ... -->
</division>

<division><title>Resources and Options</title>
    <subdoc href="AddOption.xml" />
    <subdoc href="GetOption.xml" />
    <subdoc href="SetOptions.xml" />
    <subdoc href="ConfigWidg.xml" />
    <subdoc href="FontId.xml" />
</division>

<division><title>Images</title>
    <subdoc href="GetImage.xml" />
    <subdoc href="CrtImgType.xml" />
    <subdoc href="CrtPhImgFmt.xml" />
    <subdoc href="DeleteImg.xml" />
    <subdoc href="FindPhoto.xml" />
    <subdoc href="GetBitmap.xml" />
    <subdoc href="ImgChanged.xml" />
    <subdoc href="NameOfImg.xml" />
</division>

<division><title>Canvas Widgets</title>
    <subdoc href="CanvPsY.xml" />
    <subdoc href="CanvTkwin.xml" />
    <subdoc href="CanvTxtInfo.xml" />
    <subdoc href="CrtItemType.xml" />
</division>

<division><title>Graphics Routines</title>
    <subdoc href="GetGC.xml" />
    <subdoc href="GetCapStyl.xml" />
    <subdoc href="GetClrmap.xml" />
    <subdoc href="GetColor.xml" />
    <subdoc href="GetCursor.xml" />
    <subdoc href="GetDash.xml" />
    <subdoc href="GetFont.xml" />
    <subdoc href="GetJoinStl.xml" />
    <subdoc href="GetJustify.xml" />
    <subdoc href="GetPixels.xml" />
    <subdoc href="GetPixmap.xml" />
    <subdoc href="GetRelief.xml" />
    <subdoc href="GetRootCrd.xml" />
    <subdoc href="DrawFocHlt.xml" />
    <subdoc href="Border.xml" />		<!-- Source: 3DBorder.3 -->
    <subdoc href="TextLayout.xml" />
    <subdoc href="MeasureChar.xml" />
    </division>

<division><title>System-specific</title>
    <!-- Windows -->
    <subdoc href="GetHINSTANCE.xml" />
    <subdoc href="GetHWND.xml" />
    <subdoc href="HWNDToWindow.xml" />
    <!-- X11 -->
    <subdoc href="IdToWindow.xml" />
    <subdoc href="GetVRoot.xml" />
    <subdoc href="GetVisual.xml" />
    <subdoc href="FreeXId.xml" />
    <subdoc href="CrtCmHdlr.xml" />
    <subdoc href="CrtGenHdlr.xml" />
    <subdoc href="InternAtom.xml" />
</division>

<division><title>Selection and Clipboard</title>
    <subdoc href="CClipboard.xml" />	<!-- Source: Clipboard.3 -->
    <subdoc href="ClrSelect.xml" />
    <subdoc href="CrtSelHdlr.xml" />
    <subdoc href="GetSelect.xml" />
    <subdoc href="OwnSelect.xml" />
</division>

</division>

</manual>
<manpage version="4.1" cat="misc" title="tkvars" id="tkvars">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tkvars.n,v 1.3 2001/08/01 16:21:11 dgp Exp $
 -->
<?TROFF.TH title="tkvars" section="n" date="4.1" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tkvars</name>
<desc>Variables used or set by Tk</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>The following Tcl variables are either set or used by Tk at various times
in its execution:
</p>
<dl>
<dle>
<dt><b>tk_library</b></dt>
<dd>This variable holds the file name for a directory containing a library
of Tcl scripts related to Tk.  These scripts include an initialization
file that is normally processed whenever a Tk application starts up,
plus other files containing procedures that implement default behaviors
for widgets.
The initial value of <b cat="variable">tcl_library</b> is set when Tk is added to
an interpreter;  this is done by searching several different directories
until one is found that contains an appropriate Tk startup script.
If the <b>TK_LIBRARY</b> environment variable exists, then
the directory it names is checked first.
If <b>TK_LIBRARY</b> isn't set or doesn't refer to an appropriate
directory, then Tk checks several other directories based on a
compiled-in default location, the location of the Tcl library directory,
the location of the binary containing the application, and the current
working directory.
The variable can be modified by an application to switch to a different
library.
</dd>
</dle>
<dle>
<dt><b>tk_patchLevel</b></dt>
<dd>Contains a decimal integer giving the current patch level for Tk.
The patch level is incremented for each new release or patch, and
it uniquely identifies an official version of Tk.
</dd>
</dle>
<dle>
<dt><b>tk::Priv</b></dt>
<dd>This variable is an array containing several pieces of information
that are private to Tk.  The elements of <b>tk::Priv</b> are used by
Tk library procedures and default bindings.
They should not be accessed by any code outside Tk.
</dd>
</dle>
<dle>
<dt><b>tk_strictMotif</b></dt>
<dd>This variable is set to zero by default.
If an application sets it to one, then Tk attempts to adhere as
closely as possible to Motif look-and-feel standards.
For example, active elements such as buttons and scrollbar
sliders will not change color when the pointer passes over them.
</dd>
</dle>
<dle>
<dt><b>tk_textRedraw</b></dt>
<dd/>
</dle>
<dle>
<dt><b>tk_textRelayout</b></dt>
<dd>These variables are set by text widgets when they have debugging
turned on.  The values written to these variables can be used to
test or debug text widget operations.  These variables are mostly
used by Tk's test suite.
</dd>
</dle>
<dle>
<dt><b>tk_version</b></dt>
<dd>Tk sets this variable in the interpreter for each application.
The variable holds the current version number of the Tk
library in the form <i>major</i>.<i>minor</i>.  <i>Major</i> and
<i>minor</i> are integers.  The major version number increases in
any Tk release that includes changes that are not backward compatible
(i.e. whenever existing Tk applications and scripts may have to change to
work with the new release).  The minor version number increases with
each new release of Tk, except that it resets to zero whenever the
major version number changes.

</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>variables</keyword>
<keyword>version</keyword>
<keyword>text</keyword>
</keywords>
</manpage>
<manpage cat="cmd" title="tkwait" id="tkwait">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tkwait.n,v 1.2 1998/09/14 18:23:00 stanton Exp $
 -->
<?TROFF.TH title="tkwait" section="n" date="" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>tkwait</name>
<desc>Wait for variable to change or window to be destroyed</desc>
</namesection>
<synopsis>
<syntax>
<b>tkwait variable</b> <m>name</m>

<b>tkwait visibility</b> <m>name</m>

<b>tkwait window</b> <m>name</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>tkwait</cmd> command waits for one of several things to happen,
then it returns without taking any other actions.
The return value is always an empty string.
If the first argument is <b cat="AMBIGUOUS ambiguous cmd">variable</b> (or any abbreviation of
it) then the second argument is the name of a global variable and the
command waits for that variable to be modified.
If the first argument is <b>visibility</b> (or any abbreviation
of it) then the second argument is the name of a window and the
<cmd>tkwait</cmd> command waits for a change in its
visibility state (as indicated by the arrival of a VisibilityNotify
event).  This form is typically used to wait for a newly-created
window to appear on the screen before taking some action.
If the first argument is <b cat="canvasitemtype">window</b> (or any abbreviation
of it) then the second argument is the name of a window and the
<cmd>tkwait</cmd> command waits for that window to be destroyed.
This form is typically used to wait for a user to finish interacting
with a dialog box before using the result of that interaction.
</p>
<p>While the <cmd>tkwait</cmd> command is waiting it processes events in
the normal fashion, so the application will continue to respond
to user interactions.
If an event handler invokes <cmd>tkwait</cmd> again, the nested call
to <cmd>tkwait</cmd> must complete before the outer call can complete.

</p>
</section>
<keywords>
<keyword>variable</keyword>
<keyword>visibility</keyword>
<keyword>wait</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage version="8.0" cat="fun" title="Tk_Init" id="Tk_Init">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Tk_Init.3,v 1.4 2000/09/07 17:38:16 hobbs Exp $
 -->
<?TROFF.TH title="Tk_Init" section="3" date="8.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_Init</name>
<name>Tk_SafeInit</name>
<desc>add Tk to an interpreter and make a new Tk application.</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

int
<fun>Tk_Init</fun>(<m>interp</m>)

int
<fun>Tk_SafeInit</fun>(<m>interp</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to load Tk.  Tk should not already be loaded
in this interpreter.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_Init</fun> is the package initialization procedure for Tk.
It is normally invoked by the <fun>Tcl_AppInit</fun> procedure
for an application or by the <b cat="AMBIGUOUS ambiguous cmd">load</b> command.
<fun>Tk_Init</fun> adds all of Tk's commands to <i>interp</i>
and creates a new Tk application, including its main window.
If the initialization is successful <fun>Tk_Init</fun> returns
<b>TCL_OK</b>;  if there is an error it returns <b>TCL_ERROR</b>.
<fun>Tk_Init</fun> also leaves a result or error message
in <i>interp-&gt;result</i>.
</p>
<p>If there is a variable <b cat="variable">argv</b> in <i>interp</i>, <fun>Tk_Init</fun>
treats the contents of this variable as a list of options for the
new Tk application.
The options may have any of the forms documented for the
<b>wish</b> application (in fact, <b>wish</b> uses Tk_Init to process
its command-line arguments).
</p>
<p><fun>Tk_SafeInit</fun> is identical to <fun>Tk_Init</fun> except that it removes
all Tk commands that are considered unsafe.  Those commands and the
reasons for their exclusion are:
</p>
<dl>
<dle>
<dt><b>bell</b></dt>
<dd>Continuous ringing of the bell is a nuisance.
</dd>
</dle>
<dle>
<dt><b>clipboard</b></dt>
<dd>A malicious script could replace the contents of the clipboard with
the string <b>"rm -r *"</b> and lead to surprises when the contents of
the clipboard are pasted.
</dd>
</dle>
<dle>
<dt><b>grab</b></dt>
<dd>Grab can be used to block the user from using any other applications.
</dd>
</dle>
<dle>
<dt><b>menu</b></dt>
<dd>Menus can be used to cover the entire screen and to steal input from
the user.
</dd>
</dle>
<dle>
<dt><b>selection</b></dt>
<dd>See clipboard.
</dd>
</dle>
<dle>
<dt><b>send</b></dt>
<dd>Send can be used to cause unsafe interpreters to execute commands.
</dd>
</dle>
<dle>
<dt><b>tk</b></dt>
<dd>The tk command recreates the send command, which is unsafe.
</dd>
</dle>
<dle>
<dt><b>tkwait</b></dt>
<dd>Tkwait can block the containing process forever
</dd>
</dle>
<dle>
<dt><b>toplevel</b></dt>
<dd>Toplevels can be used to cover the entire screen and to steal input
from the user.
</dd>
</dle>
<dle>
<dt><b>wm</b></dt>
<dd>If toplevels are ever allowed, wm can be used to remove decorations,
move windows around, etc.

</dd>
</dle>
</dl>
</section>
<keywords>
<keyword>safe</keyword>
<keyword>application</keyword>
<keyword>initialization</keyword>
<keyword>load</keyword>
<keyword>main window</keyword>
</keywords>
</manpage>
<manpage version="4.0" cat="fun" title="Tk_Main" id="Tk_Main">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Tk_Main.3,v 1.2 1998/09/14 18:22:54 stanton Exp $
 -->
<?TROFF.TH title="Tk_Main" section="3" date="4.0" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_Main</name>
<desc>main program for Tk-based applications</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

<fun>Tk_Main</fun>(<m>argc</m>, <m>argv</m>, <m>appInitProc</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>argc</name>
<argmode>in</argmode>
<desc>Number of elements in <i>argv</i>.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="argv">*argv[]</name>
<argmode>in</argmode>
<desc>Array of strings containing command-line arguments.
</desc>
</argdef>
<argdef>
<argtype>Tcl_AppInitProc</argtype>
<name name="appInitProc">*appInitProc</name>
<argmode>in</argmode>
<desc>Address of an application-specific initialization procedure.
The value for this argument is usually <fun>Tcl_AppInit</fun>.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_Main</fun> acts as the main program for most Tk-based applications.
Starting with Tk 4.0 it is not called <b>main</b> anymore because it 
is part of the Tk library and having a function <b>main</b>
in a library (particularly a shared library) causes problems on many
systems.
Having <b>main</b> in the Tk library would also make it hard to use
Tk in C++ programs, since C++ programs must have special C++
<b>main</b> functions.
</p>
<p>Normally each application contains a small <b>main</b> function that does
nothing but invoke <fun>Tk_Main</fun>.
<fun>Tk_Main</fun> then does all the work of creating and running a
<b>wish</b>-like application.
</p>
<p>When it is has finished its own initialization, but before
it processes commands, <fun>Tk_Main</fun> calls the procedure given by
the <i>appInitProc</i> argument.  This procedure provides a ``hook''
for the application to perform its own initialization, such as defining
application-specific commands.  The procedure must have an interface
that matches the type <type>Tcl_AppInitProc</type>:
</p>
<syntax name="Tcl_AppInitProc" cat="type" scope="global">
typedef int Tcl_AppInitProc(Tcl_Interp *<i>interp</i>);
</syntax>
<p><i>AppInitProc</i> is almost always a pointer to <fun>Tcl_AppInit</fun>;
for more details on this procedure, see the documentation
for <fun>Tcl_AppInit</fun>.

</p>
</section>
<keywords>
<keyword>application-specific initialization</keyword>
<keyword>command-line arguments</keyword>
<keyword>main program</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="tm" version="8.5" title="tm">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Andreas Kupries <andreas_kupries@users.sourceforge.net>
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: tm.n,v 1.6 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="tm" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>tm</name>
<desc>Facilities for locating and loading of Tcl Modules</desc>
</namesection>
<synopsis>
<syntax>
<b>::tcl::tm::path</b> <b>add</b> <m>path</m>...
<b>::tcl::tm::path</b> <b>remove</b> <m>path</m>...
<b>::tcl::tm::path</b> <b cat="AMBIGUOUS ambiguous cmd">list</b>
<b>::tcl::tm::roots</b> <m>path</m>...
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This document describes the facilities for locating and loading Tcl
Modules. The following commands are supported:
</p>
<dl>
<dle>
<dt><b>::tcl::tm::path</b> <b>add</b> <m>path</m>...</dt>
<dd>The paths are added at the head to the list of module paths, in order
of appearance. This means that the last argument ends up as the new
head of the list.
<p>The command enforces the restriction that no path may be an ancestor
directory of any other path on the list. If any of the new paths
violates this restriction an error will be raised, before any of the
paths have been added. In other words, if only one path argument
violates the restriction then none will be added.
</p><p>If a path is already present as is, no error will be raised and no
action will be taken.
</p><p>Paths are searched later in the order of their appearance in the
list. As they are added to the front of the list they are searched in
reverse order of addition. In other words, the paths added last are
looked at first.
</p></dd>
</dle>
<dle>
<dt><b>::tcl::tm::path</b> <b>remove</b> <m>path</m>...</dt>
<dd>Removes the paths from the list of module paths. The command silently
ignores all paths which are not on the list.
</dd>
</dle>
<dle>
<dt><b>::tcl::tm::path</b> <b>list</b></dt>
<dd>Returns a list containing all registered module paths, in the order
that they are searched for modules.
</dd>
</dle>
<dle>
<dt><b>::tcl::tm::roots</b> <m>path</m>...</dt>
<dd>Similar to <b>path add</b>, and layered on top of it. This command
takes a list of paths, extends each with "<b>tcl</b><i>X</i><b>/site-tcl</b>",
and "<b>tcl</b><i>X</i><b>/</b><i>X</i><b>.</b><i>y</i>", for major version <i>X</i> of the
Tcl interpreter and minor version <i>y</i> less than or equal to the
minor version of the interpreter, and adds the resulting set of paths
to the list of paths to search.
<p>This command is used internally by the system to set up the
system-specific default paths.
</p><p>The command has been exposed to allow a build system to define
additional root paths beyond those described by this document.
</p></dd>
</dle>
</dl>
</section>
<section id="module-definition">
<title>MODULE DEFINITION</title>
<p>A Tcl Module is a Tcl Package contained in a single file, and no other
files required by it. This file has to be <b cat="AMBIGUOUS ambiguous cmd">source</b>able. In other
words, a Tcl Module is always imported via:
</p>
<example>
source module_file
</example>
<p>The <b cat="AMBIGUOUS ambiguous cmd">load</b> command is not directly used. This restriction is not
an actual limitation, as some may believe.
Ever since 8.4 the Tcl <b cat="AMBIGUOUS ambiguous cmd">source</b> command reads only until the first
^Z character. This allows us to combine an arbitrary Tcl script with
arbitrary binary data into one file, where the script processes the
attached data in any it chooses to fully import and activate the
package.
</p>
<p>The name of a module file has to match the regular expression:
</p>
<example>
([[:alpha:]][:[:alnum:]]*)-([[:digit:]].*)\.tm
</example>
<p>The first capturing parentheses provides the name of the package, the
second clause its version. In addition to matching the pattern, the
extracted version number must not raise an error when used in the
command:
</p>
<example>
package vcompare $version 0
</example>
</section>
<section id="finding-modules">
<title>FINDING MODULES</title>
<p>The directory tree for storing Tcl modules is separate from other
parts of the filesystem and independent of <b>auto_path</b>.
</p>
<p>Tcl Modules are searched for in all directories listed in the result
of the command <b>::tcl::tm::path list</b>.
This is called the <i>Module path</i>. Neither the <b>auto_path</b> nor
the <b cat="variable">tcl_pkgPath</b> variables are used.
All directories on the module path have to obey one restriction:
</p>
<dl>
<dle>
<dt/>
<dd>For any two directories, neither is an ancestor directory of the
other.
</dd>
</dle>
</dl>
<p>This is required to avoid ambiguities in package naming. If for
example the two directories "<i>foo/</i>" and "<i>foo/cool</i>" were on
the path a package named <b>cool::ice</b> could be found via the
names <b>cool::ice</b> or <b>ice</b>, the latter potentially
obscuring a package named <b>ice</b>, unqualified.
</p>
<p>Before the search is started, the name of the requested package is
translated into a partial path, using the following algorithm:
</p>
<dl>
<dle>
<dt/>
<dd>All occurrences of "<b>::</b>" in the package name are replaced by
the appropriate directory separator character for the platform we are
on. On Unix, for example, this is "<b>/</b>".
</dd>
</dle>
</dl>
<p>Example:
</p>
<dl>
<dle>
<dt/>
<dd>The requested package is <b>encoding::base64</b>. The generated
partial path is "<i>encoding/base64</i>"
</dd>
</dle>
</dl>
<p>After this translation the package is looked for in all module paths,
by combining them one-by-one, first to last with the partial path to
form a complete search pattern. Note that the search algorithm rejects
all files where the filename does not match the regular expression
given in the section <ref refid="module-definition">MODULE DEFINITION</ref>. For the remaining
files <i>provide scripts</i> are generated and added to the package
ifneeded database.
</p>
<p>The algorithm falls back to the previous unknown handler when none of
the found module files satisfy the request. If the request was
satisfied the fall-back is ignored.
</p>
<p>Note that packages in module form have <i>no</i> control over the
<i>index</i> and <i>provide script</i>s entered into the package
database for them.
For a module file <b>MF</b> the <i>index script</i> is always:
</p>
<example>
package ifneeded <b>PNAME PVERSION</b> [list source <b>MF</b>]
</example>
<p>and the <i>provide script</i> embedded in the above is:
</p>
<example>
source <b>MF</b>
</example>
<p>Both package name <b>PNAME</b> and package version <b>PVERSION</b> are
extracted from the filename <b>MF</b> according to the definition
below:
</p>
<example>
<b>MF</b> = /module_path/<b>PNAME'</b>-<b>PVERSION</b>.tm
</example>
<p>Where <b>PNAME'</b> is the partial path of the module as defined in
section <ref refid="finding-modules">FINDING MODULES</ref>, and translated into <b/>PNAME by
changing all directory separators to "<b>::</b>",
and <b>module_path</b> is the path (from the list of paths to search)
that we found the module file under.
</p>
<p>Note also that we are here creating a connection between package names
and paths. Tcl is case-sensitive when it comes to comparing package
names, but there are filesystems which are not, like NTFS. Luckily
these filesystems do store the case of the name, despite not using the
information when comparing.
</p>
<p>Given the above we allow the names for packages in Tcl modules to have
mixed-case, but also require that there are no collisions when
comparing names in a case-insensitive manner. In other words, if a
package <b>Foo</b> is deployed in the form of a Tcl Module,
packages like <b>foo</b>, <b>fOo</b>, etc. are not allowed
anymore.
</p>
</section>
<section>
<title>DEFAULT PATHS</title>
<p>The default list of paths on the module path is computed by a
<b>tclsh</b> as follows, where <i>X</i> is the major version of the Tcl
interpreter and <i>y</i> is less than or equal to the minor version of
the Tcl interpreter.
</p>
<p>All the default paths are added to the module path, even those paths
which do not exist. Non-existent paths are filtered out during actual
searches. This enables a user to create one of the paths searched when
needed and all running applications will automatically pick up any
modules placed in them.
</p>
<p>The paths are added in the order as they are listed below, and for
lists of paths defined by an environment variable in the order they
are found in the variable.
</p>
<subsection>
<title>SYSTEM SPECIFIC PATHS</title>
<commandlist>
<commanddef>
<command><b>file normalize [info library]/../tcl</b><m>X</m><b>/</b><m>X</m><b>.</b><m>y</m></command>
<desc>In other words, the interpreter will look into a directory specified
by its major version and whose minor versions are less than or equal
to the minor version of the interpreter.
<p>For example for Tcl 8.4 the paths searched are:
</p><example>
<b>[info library]/../tcl8/8.4</b>
<b>[info library]/../tcl8/8.3</b>
<b>[info library]/../tcl8/8.2</b>
<b>[info library]/../tcl8/8.1</b>
<b>[info library]/../tcl8/8.0</b>
</example><p>This definition assumes that a package defined for Tcl <i>X</i><b>.</b><i>y</i>
can also be used by all interpreters which have the same major number
<i>X</i> and a minor number greater than <i>y</i>.
</p></desc>
</commanddef>
<commanddef>
<command><b>file normalize EXEC/tcl</b><m>X</m><b>/</b><m>X</m><b>.</b><m>y</m></command>
<desc>Where <b>EXEC</b> is <b>file normalize [info nameofexecutable]/../lib</b>
or <b>file normalize [::tcl::pkgconfig get libdir,runtime]</b>
<p>This sets of paths is handled equivalently to the set coming before,
except that it is anchored in <b>EXEC_PREFIX</b>.
For a build with <b>PREFIX</b> = <b>EXEC_PREFIX</b> the two sets are
identical.
</p></desc>
</commanddef>
</commandlist>
</subsection>
<subsection>
<title>SITE SPECIFIC PATHS</title>
<dl>
<dle>
<dt><b>file normalize [info library]/../tcl</b><m>X</m><b>/site-tcl</b></dt>
<dd>Note that this is always a single entry because <i>X</i> is always a
specific value (the current major version of Tcl).
</dd>
</dle>
</dl>
</subsection>
<subsection>
<title>USER SPECIFIC PATHS</title>
<dl>
<dle>
<dt><b>$::env(TCL</b><m>X</m><b>.</b><m>y</m><b>_TM_PATH)</b></dt>
<dd>A list of paths, separated by either <b>:</b> (Unix) or <b>;</b>
(Windows). This is user and site specific as this environment variable
can be set not only by the user's profile, but by system configuration
scripts as well.
<p>These paths are seen and therefore shared by all Tcl shells in the
<b>$::env(PATH)</b> of the user.
</p><p>Note that <i>X</i> and <i>y</i> follow the general rules set out
above. In other words, Tcl 8.4, for example, will look at these 5
environment variables:
</p><example>
<b>$::env(TCL8.4_TM_PATH)</b>
<b>$::env(TCL8.3_TM_PATH)</b>
<b>$::env(TCL8.2_TM_PATH)</b>
<b>$::env(TCL8.1_TM_PATH)</b>
<b>$::env(TCL8.0_TM_PATH)</b>
</example>
</dd>
</dle>
</dl>
</subsection>
</section>
<seealso>
<ref>package(n)</ref>
<ref>Tcl Improvement Proposal #189 "Tcl Modules" (online
at http://tip.tcl.tk/189.html)</ref>
<ref>Tcl Improvement Proposal #190
"Implementation Choices for Tcl Modules" (online at
http://tip.tcl.tk/190.html)</ref>
</seealso>
<keywords>
<keyword>modules</keyword>
<keyword>package</keyword>
</keywords>
</manpage>
<manpage cat="widget" id="toplevel" version="8.4" title="toplevel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: toplevel.n,v 1.7 2005/01/05 16:40:39 dkf Exp $
 -->
<?TROFF.TH title="toplevel" section="n" date="8.4" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>toplevel</name>
<desc>Create and manipulate toplevel widgets</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS widget cmd">toplevel</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-borderwidth</li>
<li>-cursor</li>
<li>-highlightbackground</li>
<li>-highlightcolor</li>
<li>-highlightthickness</li>
<li>-padx</li>
<li>-pady</li>
<li>-relief</li>
<li>-takefocus</li>
</sl>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-background</name>
<dbname>background</dbname>
<dbclass>Background</dbclass>
<desc>This option is the same as the standard <b>background</b> option
except that its value may also be specified as an empty string.
In this case, the widget will display no background or border, and
no colors will be consumed from its colormap for its background
and border.
</desc>
</optiondef>
<optiondef>
<name>-class</name>
<dbname>class</dbname>
<dbclass>Class</dbclass>
<desc>Specifies a class for the window.
This class will be used when querying the option database for
the window's other options, and it will also be used later for
other purposes such as bindings.
The <b>class</b> option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-colormap</name>
<dbname>colormap</dbname>
<dbclass>Colormap</dbclass>
<desc>Specifies a colormap to use for the window.
The value may be either <b>new</b>, in which case a new colormap is
created for the window and its children, or the name of another
window (which must be on the same screen and have the same visual
as <i>pathName</i>), in which case the new window will use the colormap
from the specified window.
If the <b>colormap</b> option is not specified, the new window
uses the default colormap of its screen.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-container</name>
<dbname>container</dbname>
<dbclass>Container</dbclass>
<desc>The value must be a boolean.  If true, it means that this window will
be used as a container in which some other application will be embedded
(for example, a Tk toplevel can be embedded using the <b>-use</b> option).
The window will support the appropriate window manager protocols for
things like geometry requests.  The window should not have any
children of its own in this application.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the desired height for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.
If this option is less than or equal to zero then the window will
not request any size at all.
</desc>
</optiondef>
<optiondef>
<name>-menu</name>
<dbname>menu</dbname>
<dbclass>Menu</dbclass>
<desc>Specifies a menu widget to be used as a menubar. On the Macintosh, the
menubar will be displayed across the top of the main monitor. On
Microsoft Windows and all UNIX platforms, the menu will appear across
the toplevel window as part of the window dressing maintained by the
window manager.
</desc>
</optiondef>
<optiondef>
<name>-screen</name>
<dbname></dbname>
<dbclass></dbclass>
<desc>Specifies the screen on which to place the new window.
Any valid screen name may be used, even one associated with a
different display.
Defaults to the same screen as its parent.
This option is special in that it may not be specified via the option
database, and it may not be modified with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-use</name>
<dbname>use</dbname>
<dbclass>Use</dbclass>
<desc>This option is used for embedding. If the value isn't an empty string,
it must be the window identifier of a container window, specified as
a hexadecimal string like the ones returned by the <b>winfo id</b>
command. The toplevel widget will be created as a child of the given
container instead of the root window for the screen.  If the container
window is in a Tk application, it must be a frame or toplevel widget for
which the <b>-container</b> option was specified.
This option may not be changed with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-visual</name>
<dbname>visual</dbname>
<dbclass>Visual</dbclass>
<desc>Specifies visual information for the new window in any of the
forms accepted by <fun>Tk_GetVisual</fun>.
If this option is not specified, the new window will use the default
visual for its screen.
The <b>visual</b> option may not be modified with the <b>configure</b>
widget command.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies the desired width for the window in any of the forms
acceptable to <fun>Tk_GetPixels</fun>.
If this option is less than or equal to zero then the window will
not request any size at all.
</desc>
</optiondef>
</optionlist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The <b cat="AMBIGUOUS widget cmd">toplevel</b> command creates a new toplevel widget (given
by the <i>pathName</i> argument).  Additional
options, described above, may be specified on the command line
or in the option database
to configure aspects of the toplevel such as its background color
and relief.  The <b cat="AMBIGUOUS widget cmd">toplevel</b> command returns the
path name of the new window.
</p>
<p>A toplevel is similar to a frame except that it is created as a
top-level window:  its X parent is the root window of a screen
rather than the logical parent from its path name.  The primary
purpose of a toplevel is to serve as a container for dialog boxes
and other collections of widgets.  The only visible features
of a toplevel are its background color and an optional 3-D border
to make the toplevel appear raised or sunken.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The <b cat="AMBIGUOUS widget cmd">toplevel</b> command creates a new Tcl command whose
name is the same as the path name of the toplevel's window.  This
command may be used to invoke various
operations on the widget.  It has the following general form:
</p>
<example>
<i>pathName option</i> ?<i>arg arg ...</i>?
</example>
<p><i>PathName</i> is the name of the command, which is the same as
the toplevel widget's path name.  <i>Option</i> and the <i>arg</i>s
determine the exact behavior of the command.  The following
commands are possible for toplevel widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">toplevel</b>
command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i> (see <fun>Tk_ConfigureInfo</fun> for
information on the format of this list).  If <i>option</i> is specified
with no <i>value</i>, then the command returns a list describing the
one named option (this list will be identical to the corresponding
sublist of the value returned if no <i>option</i> is specified).  If
one or more <i>option-value</i> pairs are specified, then the command
modifies the given widget option(s) to have the given value(s);  in
this case the command returns an empty string.
<i>Option</i> may have any of the values accepted by the <b cat="AMBIGUOUS widget cmd">toplevel</b>
command.

</dd>
</dle>
</dl>
</section>
<section>
<title>BINDINGS</title>
<p>When a new toplevel is created, it has no default event bindings:
toplevels are not intended to be interactive.

</p>
</section>
<seealso>
<ref>frame(n)</ref>
</seealso>
<keywords>
<keyword>toplevel</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ToUpper" title="Tcl_UtfToUpper" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 by Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ToUpper.3,v 1.3 2004/09/06 09:44:57 dkf Exp $
 -->
<?TROFF.TH title="Tcl_UtfToUpper" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_UniCharToUpper</name>
<name>Tcl_UniCharToLower</name>
<name>Tcl_UniCharToTitle</name>
<name>Tcl_UtfToUpper</name>
<name>Tcl_UtfToLower</name>
<name>Tcl_UtfToTitle</name>
<desc>routines for manipulating the case of Unicode characters and UTF-8 strings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

Tcl_UniChar
<fun>Tcl_UniCharToUpper</fun>(<m>ch</m>)

Tcl_UniChar
<fun>Tcl_UniCharToLower</fun>(<m>ch</m>)

Tcl_UniChar
<fun>Tcl_UniCharToTitle</fun>(<m>ch</m>)

int
<fun>Tcl_UtfToUpper</fun>(<m>str</m>)

int
<fun>Tcl_UtfToLower</fun>(<m>str</m>)

int
<fun>Tcl_UtfToTitle</fun>(<m>str</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>ch</name>
<argmode>in</argmode>
<desc>The Tcl_UniChar to be converted.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="str">*str</name>
<argmode>in/out</argmode>
<desc>Pointer to UTF-8 string to be converted in place.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>The first three routines convert the case of individual Unicode characters:
</p>
<p>If <i>ch</i> represents a lower-case character,
<fun>Tcl_UniCharToUpper</fun> returns the corresponding upper-case
character.  If no upper-case character is defined, it returns the
character unchanged.
</p>
<p>If <i>ch</i> represents an upper-case character,
<fun>Tcl_UniCharToLower</fun> returns the corresponding lower-case
character.  If no lower-case character is defined, it returns the
character unchanged.
</p>
<p>If <i>ch</i> represents a lower-case character,
<fun>Tcl_UniCharToTitle</fun> returns the corresponding title-case
character.  If no title-case character is defined, it returns the
corresponding upper-case character.  If no upper-case character is
defined, it returns the character unchanged.  Title-case is defined
for a small number of characters that have a different appearance when
they are at the beginning of a capitalized word.
</p>
<p>The next three routines convert the case of UTF-8 strings in place in
memory:
</p>
<p><fun>Tcl_UtfToUpper</fun> changes every UTF-8 character in <i>str</i> to
upper-case.  Because changing the case of a character may change its
size, the byte offset of each character in the resulting string may
differ from its original location.  <fun>Tcl_UtfToUpper</fun> writes a null
byte at the end of the converted string.  <fun>Tcl_UtfToUpper</fun> returns
the new length of the string in bytes.  This new length is guaranteed
to be no longer than the original string length.
</p>
<p><fun>Tcl_UtfToLower</fun> is the same as <fun>Tcl_UtfToUpper</fun> except it
turns each character in the string into its lower-case equivalent.
</p>
<p><fun>Tcl_UtfToTitle</fun> is the same as <fun>Tcl_UtfToUpper</fun> except it
turns the first character in the string into its title-case equivalent
and all following characters into their lower-case equivalents.

</p>
</section>
<section>
<title>BUGS</title>
<p>At this time, the case conversions are only defined for the ISO8859-1
characters.  Unicode characters above 0x00ff are not modified by these
routines.

</p>
</section>
<keywords>
<keyword>utf</keyword>
<keyword>unicode</keyword>
<keyword>toupper</keyword>
<keyword>tolower</keyword>
<keyword>totitle</keyword>
<keyword>case</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="trace" title="trace" version="8.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: trace.n,v 1.18 2004/10/27 14:43:54 dkf Exp $
 -->
<?TROFF.TH title="trace" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>trace</name>
<desc>Monitor variable accesses, command usages and command executions</desc>
</namesection>
<synopsis>
<syntax>
<cmd>trace</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command causes Tcl commands to be executed whenever certain operations are
invoked.  The legal <i>option</i>'s (which may be abbreviated) are:
</p>
<commandlist>
<commanddef>
<command><b>trace add</b> <m>type name ops ?args?</m></command>
<desc>Where <i>type</i> is <b>command</b>, <b>execution</b>, or <b cat="AMBIGUOUS ambiguous cmd">variable</b>.
<commandlist>
<commanddef>
<command><b>trace add command</b> <m>name ops command</m></command>
<desc>Arrange for <i>command</i> to be executed whenever command <i>name</i>
is modified in one of the ways given by the list <i>ops</i>.  <i>Name</i> will be
resolved using the usual namespace resolution rules used by
procedures.  If the command does not exist, an error will be thrown.
<p><i>Ops</i> indicates which operations are of interest, and is a list of
one or more of the following items:
</p><dl>
<dle>
<dt><b>rename</b></dt>
<dd>Invoke <i>command</i> whenever the command is renamed.  Note that
renaming to the empty string is considered deletion, and will not
be traced with '<b cat="AMBIGUOUS ambiguous cmd">rename</b>'.
</dd>
</dle>
<dle>
<dt><b>delete</b></dt>
<dd>Invoke <i>command</i> when the command is deleted.  Commands can be
deleted explicitly by using the <b cat="AMBIGUOUS ambiguous cmd">rename</b> command to rename the
command to an empty string.  Commands are also deleted when the
interpreter is deleted, but traces will not be invoked because there is no
interpreter in which to execute them.
</dd>
</dle>
</dl><p>When the trace triggers, depending on the operations being traced, a 
number of arguments are appended to <i>command</i> so that the actual 
command is as follows:
</p><example>
<i>command oldName newName op</i>
</example><p><i>OldName</i> and <i>newName</i> give the traced command's current
(old) name, and the name to which it is being renamed (the empty
string if this is a 'delete' operation).
<i>Op</i> indicates what operation is being performed on the
command, and is one of <b cat="AMBIGUOUS ambiguous cmd">rename</b> or <b>delete</b> as
defined above.  The trace operation cannot be used to stop a command
from being deleted.  Tcl will always remove the command once the trace
is complete.  Recursive renaming or deleting will not cause further traces 
of the same type to be evaluated, so a delete trace which itself
deletes the command, or a rename trace which itself renames the
command will not cause further trace evaluations to occur.
Both <i>oldName</i> and <i>newName</i> are fully qualified with any namespace(s)
in which they appear.
</p></desc>
</commanddef>
<commanddef>
<command><b>trace add execution</b> <m>name ops command</m></command>
<desc>Arrange for <i>command</i> to be executed whenever command <i>name</i>
is executed, with traces occurring at the points indicated by the list
<i>ops</i>.  <i>Name</i> will be
resolved using the usual namespace resolution rules used by
procedures.  If the command does not exist, an error will be thrown.
<p><i>Ops</i> indicates which operations are of interest, and is a list of
one or more of the following items:
</p><dl>
<dle>
<dt><b>enter</b></dt>
<dd>Invoke <i>command</i> whenever the command <i>name</i> is executed,
just before the actual execution takes place.
</dd>
</dle>
<dle>
<dt><b>leave</b></dt>
<dd>Invoke <i>command</i> whenever the command <i>name</i> is executed,
just after the actual execution takes place.
</dd>
</dle>
<dle>
<dt><b>enterstep</b></dt>
<dd>Invoke <i>command</i> for every Tcl command which is executed 
inside the procedure <i>name</i>, just before the actual execution
takes place.  For example if we have 'proc foo {} { puts "hello" }',
then an <i>enterstep</i> trace would be 
invoked just before <i>puts "hello"</i> is executed.
Setting an <i>enterstep</i> trace on a <i>command</i>
will not result in an error and is simply ignored.
</dd>
</dle>
<dle>
<dt><b>leavestep</b></dt>
<dd>Invoke <i>command</i> for every Tcl command which is executed 
inside the procedure <i>name</i>, just after the actual execution
takes place.
Setting a <i>leavestep</i> trace on a <i>command</i>
will not result in an error and is simply ignored.
</dd>
</dle>
</dl><p>When the trace triggers, depending on the operations being traced, a 
number of arguments are appended to <i>command</i> so that the actual 
command is as follows:
</p><p>For <b>enter</b> and <b>enterstep</b> operations:
</p><example>
<i>command command-string op</i>
</example><p><i>Command-string</i> gives the complete current command being 
executed (the traced command for a <b>enter</b> operation, an 
arbitrary command for a <b>enterstep</b> operation), including
all arguments in their fully expanded form.
<i>Op</i> indicates what operation is being performed on the
command execution, and is one of <b>enter</b> or <b>enterstep</b> as
defined above.  The trace operation can be used to stop the
command from executing, by deleting the command in question.  Of
course when the command is subsequently executed, an 'invalid command'
error will occur.
</p><p>For <b>leave</b> and <b>leavestep</b> operations:
</p><example>
<i>command command-string code result op</i>
</example><p><i>Command-string</i> gives the complete current command being 
executed (the traced command for a <b>enter</b> operation, an 
arbitrary command for a <b>enterstep</b> operation), including
all arguments in their fully expanded form.
<i>Code</i> gives the result code of that execution, and <i>result</i>
the result string.
<i>Op</i> indicates what operation is being performed on the
command execution, and is one of <b>leave</b> or <b>leavestep</b> as
defined above.  
Note that the creation of many <b>enterstep</b> or
<b>leavestep</b> traces can lead to unintuitive results, since the
invoked commands from one trace can themselves lead to further
command invocations for other traces.
</p><p><i>Command</i> executes in the same context as the code that invoked
the traced operation: thus the <i>command</i>, if invoked from a procedure,
will have access to the same local variables as code in the procedure.
This context may be different than the context in which the trace was
created. If <i>command</i> invokes a procedure (which it normally does)
then the procedure will have to use upvar or uplevel commands if it wishes
to access the local variables of the code which invoked the trace operation.
</p><p>While <i>command</i> is executing during an execution trace, traces
on <i>name</i> are temporarily disabled. This allows the <i>command</i>
to execute <i>name</i> in its body without invoking any other traces again.
If an error occurs while executing the <i>command</i> body, then the
command <i>name</i> as a whole will return that same error.
</p><p>When multiple traces are set on <i>name</i>, then for <i>enter</i>
and <i>enterstep</i> operations, the traced commands are invoked
in the reverse order of how the traces were originally created;
and for <i>leave</i> and <i>leavestep</i> operations, the traced
commands are invoked in the original order of creation.
</p><p>The behavior of execution traces is currently undefined for a command 
<i>name</i> imported into another namespace.
</p></desc>
</commanddef>
<commanddef>
<command><b>trace add variable</b> <m>name ops command</m></command>
<desc>Arrange for <i>command</i> to be executed whenever variable <i>name</i>
is accessed in one of the ways given by the list <i>ops</i>.  <i>Name</i> may
refer to a normal variable, an element of an array, or to an array
as a whole (i.e. <i>name</i> may be just the name of an array, with no
parenthesized index).  If <i>name</i> refers to a whole array, then
<i>command</i> is invoked whenever any element of the array is
manipulated.  If the variable does not exist, it will be created but
will not be given a value, so it will be visible to <b>namespace which</b>
queries, but not to <b>info exists</b> queries.
<p><i>Ops</i> indicates which operations are of interest, and is a list of
one or more of the following items:
</p><dl>
<dle>
<dt><b>array</b></dt>
<dd>Invoke <i>command</i> whenever the variable is accessed or modified via
the <cmd>array</cmd> command, provided that <i>name</i> is not a scalar
variable at the time that the <cmd>array</cmd> command is invoked.  If
<i>name</i> is a scalar variable, the access via the <cmd>array</cmd>
command will not trigger the trace.
</dd>
</dle>
<dle>
<dt><b>read</b></dt>
<dd>Invoke <i>command</i> whenever the variable is read.
</dd>
</dle>
<dle>
<dt><b>write</b></dt>
<dd>Invoke <i>command</i> whenever the variable is written.
</dd>
</dle>
<dle>
<dt><b>unset</b></dt>
<dd>Invoke <i>command</i> whenever the variable is unset.  Variables
can be unset explicitly with the <cmd>unset</cmd> command, or
implicitly when procedures return (all of their local variables
are unset).  Variables are also unset when interpreters are
deleted, but traces will not be invoked because there is no
interpreter in which to execute them.
</dd>
</dle>
</dl><p>When the trace triggers, three arguments are appended to
<i>command</i> so that the actual command is as follows:
</p><example>
<i>command name1 name2 op</i>
</example><p><i>Name1</i> and <i>name2</i> give the name(s) for the variable
being accessed:  if the variable is a scalar then <i>name1</i>
gives the variable's name and <i>name2</i> is an empty string;
if the variable is an array element then <i>name1</i> gives the
name of the array and name2 gives the index into the array;
if an entire array is being deleted and the trace was registered
on the overall array, rather than a single element, then <i>name1</i>
gives the array name and <i>name2</i> is an empty string.
<i>Name1</i> and <i>name2</i> are not necessarily the same as the
name used in the <b>trace variable</b> command:  the <cmd>upvar</cmd>
command allows a procedure to reference a variable under a
different name.
<i>Op</i> indicates what operation is being performed on the
variable, and is one of <b cat="AMBIGUOUS ambiguous cmd">read</b>, <b>write</b>, or <cmd>unset</cmd> as
defined above.
</p><p><i>Command</i> executes in the same context as the code that invoked
the traced operation:  if the variable was accessed as part of a Tcl
procedure, then <i>command</i> will have access to the same local
variables as code in the procedure.  This context may be different
than the context in which the trace was created. If <i>command</i>
invokes a procedure (which it normally does) then the procedure will
have to use <cmd>upvar</cmd> or <cmd>uplevel</cmd> if it wishes to access the
traced variable.  Note also that <i>name1</i> may not necessarily be
the same as the name used to set the trace on the variable;
differences can occur if the access is made through a variable defined
with the <cmd>upvar</cmd> command.
</p><p>For read and write traces, <i>command</i> can modify the variable to
affect the result of the traced operation.  If <i>command</i> modifies
the value of a variable during a read or write trace, then the new
value will be returned as the result of the traced operation.  The
return value from  <i>command</i> is ignored except that if it returns
an error of any sort then the traced operation also returns an error
with the same error message returned by the trace command (this
mechanism can be used to implement read-only variables, for example).
For write traces, <i>command</i> is invoked after the variable's value
has been changed; it can write a new value into the variable to
override the original value specified in the write operation.  To
implement read-only variables, <i>command</i> will have to restore the
old value of the variable.
</p><p>While <i>command</i> is executing during a read or write trace, traces
on the variable are temporarily disabled.  This means that reads and
writes invoked by <i>command</i> will occur directly, without invoking
<i>command</i> (or any other traces) again.  However, if <i>command</i>
unsets the variable then unset traces will be invoked.
</p><p>When an unset trace is invoked, the variable has already been deleted:
it will appear to be undefined with no traces.  If an unset occurs
because of a procedure return, then the trace will be invoked in the
variable context of the procedure being returned to:  the stack frame
of the returning procedure will no longer exist.  Traces are not
disabled during unset traces, so if an unset trace command creates a
new trace and accesses the variable, the trace will be invoked.  Any
errors in unset traces are ignored.
</p><p>If there are multiple traces on a variable they are invoked in order
of creation, most-recent first.  If one trace returns an error, then
no further traces are invoked for the variable.  If an array element
has a trace set, and there is also a trace set on the array as a
whole, the trace on the overall array is invoked before the one on the
element.
</p><p>Once created, the trace remains in effect either until the trace is
removed with the <b>trace remove variable</b> command described below,
until the variable is unset, or until the interpreter is deleted.
Unsetting an element of array will remove any traces on that element,
but will not remove traces on the overall array.
</p><p>This command returns an empty string.
</p></desc>
</commanddef>
</commandlist></desc>
</commanddef>
<commanddef>
<command><b>trace remove</b> <m>type name opList command</m></command>
<desc>Where <i>type</i> is either <b>command</b>, <b>execution</b> or <b cat="AMBIGUOUS ambiguous cmd">variable</b>.
<commandlist>
<commanddef>
<command><b>trace remove command</b> <m>name opList command</m></command>
<desc>If there is a trace set on command <i>name</i> with the operations and
command given by <i>opList</i> and <i>command</i>, then the trace is
removed, so that <i>command</i> will never again be invoked.  Returns
an empty string.   If <i>name</i> doesn't exist, the command will throw
an error.
</desc>
</commanddef>
<commanddef>
<command><b>trace remove execution</b> <m>name opList command</m></command>
<desc>If there is a trace set on command <i>name</i> with the operations and
command given by <i>opList</i> and <i>command</i>, then the trace is
removed, so that <i>command</i> will never again be invoked.  Returns
an empty string.   If <i>name</i> doesn't exist, the command will throw
an error.
</desc>
</commanddef>
<commanddef>
<command><b>trace remove variable</b> <m>name opList command</m></command>
<desc>If there is a trace set on variable <i>name</i> with the operations and
command given by <i>opList</i> and <i>command</i>, then the trace is
removed, so that <i>command</i> will never again be invoked.  Returns
an empty string.
</desc>
</commanddef>
</commandlist></desc>
</commanddef>
<commanddef>
<command><b>trace info</b> <m>type name</m></command>
<desc>Where <i>type</i> is either <b>command</b>, <b>execution</b> or <b cat="AMBIGUOUS ambiguous cmd">variable</b>.
<commandlist>
<commanddef>
<command><b>trace info command</b> <m>name</m></command>
<desc>Returns a list containing one element for each trace currently set on
command <i>name</i>. Each element of the list is itself a list
containing two elements, which are the <i>opList</i> and <i>command</i>
associated with the trace.  If <i>name</i> doesn't have any traces set,
then the result of the command will be an empty string.  If <i>name</i>
doesn't exist, the command will throw an error.
</desc>
</commanddef>
<commanddef>
<command><b>trace info execution</b> <m>name</m></command>
<desc>Returns a list containing one element for each trace currently set on
command <i>name</i>. Each element of the list is itself a list
containing two elements, which are the <i>opList</i> and <i>command</i>
associated with the trace.  If <i>name</i> doesn't have any traces set,
then the result of the command will be an empty string.  If <i>name</i>
doesn't exist, the command will throw an error.
</desc>
</commanddef>
<commanddef>
<command><b>trace info variable</b> <m>name</m></command>
<desc>Returns a list containing one element for each trace currently set on
variable <i>name</i>.  Each element of the list is itself a list
containing two elements, which are the <i>opList</i> and <i>command</i>
associated with the trace.  If <i>name</i> doesn't exist or doesn't
have any traces set, then the result of the command will be an empty
string.
</desc>
</commanddef>
</commandlist></desc>
</commanddef>
</commandlist>
<p>For backwards compatibility, three other subcommands are available:
</p>
<commandlist>
<commanddef>
<command><b>trace variable</b> <m>name ops command</m></command>
<desc>This is equivalent to <b>trace add variable</b> <i>name ops command</i>.
</desc>
</commanddef>
<commanddef>
<command><b>trace vdelete</b> <m>name ops command</m></command>
<desc>This is equivalent to <b>trace remove variable</b> <i>name ops command</i>
</desc>
</commanddef>
<commanddef>
<command><b>trace vinfo</b> <m>name</m> </command>
<desc>This is equivalent to <b>trace info variable</b> <i>name</i>
</desc>
</commanddef>
</commandlist>
<p>These subcommands are deprecated and will likely be removed in a
future version of Tcl.  They use an older syntax in which <cmd>array</cmd>,
<b cat="AMBIGUOUS ambiguous cmd">read</b>, <b>write</b>, <cmd>unset</cmd> are replaced by <b>a</b>, <b>r</b>,
<b>w</b> and <b>u</b> respectively, and the <i>ops</i> argument is not a
list, but simply a string concatenation of the operations, such as
<b>rwua</b>.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Print a message whenever either of the global variables <b>foo</b> and
<b>bar</b> are updated, even if they have a different local name at the
time (which can be done with the <cmd>upvar</cmd> command):
</p>
<example>
proc tracer {varname args} {
    upvar #0 $varname var
    puts "$varname was updated to be \"$var\""
}
<b>trace add</b> variable foo write "tracer foo"
<b>trace add</b> variable bar write "tracer bar"
</example>
<p>Ensure that the global variable <b>foobar</b> always contains the
product of the global variables <b>foo</b> and <b>bar</b>:
</p>
<example>
proc doMult args {
    global foo bar foobar
    set foobar [expr {$foo * $bar}]
}
<b>trace add</b> variable foo write doMult
<b>trace add</b> variable bar write doMult
</example>


</section>
<seealso>
<ref>set(n)</ref>
<ref>unset(n)</ref>
</seealso>
<keywords>
<keyword>read</keyword>
<keyword>command</keyword>
<keyword>rename</keyword>
<keyword>variable</keyword>
<keyword>write</keyword>
<keyword>trace</keyword>
<keyword>unset</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="TraceCmd" title="Tcl_TraceCommand" version="7.4">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2002 Donal K. Fellows
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     CVS: @(#) $Id: TraceCmd.3,v 1.8 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_TraceCommand" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_CommandTraceInfo</name>
<name>Tcl_TraceCommand</name>
<name>Tcl_UntraceCommand</name>
<desc>monitor renames and deletes of a command</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

ClientData
<b>Tcl_CommandTraceInfo(</b><m>interp</m>, <m>cmdName</m>, <m>flags</m>, <m>proc</m>, <m>prevClientData</m><b>)</b>

int
<b>Tcl_TraceCommand(</b><m>interp</m>, <m>cmdName</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>

void
<b>Tcl_UntraceCommand(</b><m>interp</m>, <m>cmdName</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter containing the command.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="cmdName">*cmdName</name>
<argmode>in</argmode>
<desc>Name of command.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>OR-ed collection of the values <b>TCL_TRACE_RENAME</b> and
<b>TCL_TRACE_DELETE</b>.
</desc>
</argdef>
<argdef>
<argtype>Tcl_CommandTraceProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to call when specified operations occur to <i>cmdName</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary argument to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>prevClientData</name>
<argmode>in</argmode>
<desc>If non-NULL, gives last value returned by <fun>Tcl_CommandTraceInfo</fun>,
so this call will return information about next trace.  If NULL, this
call will return information about first trace.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_TraceCommand</fun> allows a C procedure to monitor operations
performed on a Tcl command, so that the C procedure is invoked
whenever the command is renamed or deleted.  If the trace is created
successfully then <fun>Tcl_TraceCommand</fun> returns <b>TCL_OK</b>. If an error
occurred (e.g. <i>cmdName</i> specifies a non-existent command) then
<b>TCL_ERROR</b> is returned and an error message is left in the
interpreter's result.
</p>
<p>The <i>flags</i> argument to <fun>Tcl_TraceCommand</fun> indicates when the
trace procedure is to be invoked.  It consists of an OR-ed combination
of any of the following values:
</p>
<dl>
<dle>
<dt><b>TCL_TRACE_RENAME</b></dt>
<dd>Invoke <i>proc</i> whenever the command is renamed.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_DELETE</b></dt>
<dd>Invoke <i>proc</i> when the command is deleted.
</dd>
</dle>
</dl>
<p>Whenever one of the specified operations occurs to the command,
<i>proc</i> will be invoked.  It should have arguments and result that
match the type <type>Tcl_CommandTraceProc</type>:
</p>
<syntax cat="type" name="Tcl_CommandTraceProc" scope="global">
typedef void Tcl_CommandTraceProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        const char *<i>oldName</i>,
        const char *<i>newName</i>,
        int <i>flags</i>);
</syntax>
<p>The <i>clientData</i> and <i>interp</i> parameters will have the same
values as those passed to <fun>Tcl_TraceCommand</fun> when the trace was
created.  <i>ClientData</i> typically points to an application-specific
data structure that describes what to do when <i>proc</i> is invoked.
<i>OldName</i> gives the name of the command being renamed, and
<i>newName</i> gives the name that the command is being renamed to (or
an empty string or NULL when the command is being deleted.)
<i>Flags</i> is an OR-ed combination of bits potentially providing
several pieces of information.  One of the bits <b>TCL_TRACE_RENAME</b> and
<b>TCL_TRACE_DELETE</b> will be set in <i>flags</i> to indicate which
operation is being performed on the command.  The bit
<b>TCL_TRACE_DESTROYED</b> will be set in <i>flags</i> if the trace is about
to be destroyed; this information may be useful to <i>proc</i> so that
it can clean up its own internal data structures (see the section
<b>TCL_TRACE_DESTROYED</b> below for more details).  Lastly, the bit
<ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> will be set if the entire interpreter is being
destroyed.  When this bit is set, <i>proc</i> must be especially
careful in the things it does (see the section <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref>
below).
</p>
<p><fun>Tcl_UntraceCommand</fun> may be used to remove a trace.  If the
command specified by <i>interp</i>, <i>cmdName</i>, and <i>flags</i> has
a trace set with <i>flags</i>, <i>proc</i>, and <i>clientData</i>, then
the corresponding trace is removed.  If no such trace exists, then the
call to <fun>Tcl_UntraceCommand</fun> has no effect.  The same bits are
valid for <i>flags</i> as for calls to <fun>Tcl_TraceCommand</fun>.
</p>
<p><fun>Tcl_CommandTraceInfo</fun> may be used to retrieve information about
traces set on a given command.
The return value from <fun>Tcl_CommandTraceInfo</fun> is the <i>clientData</i>
associated with a particular trace.
The trace must be on the command specified by the <i>interp</i>,
<i>cmdName</i>, and <i>flags</i> arguments (note that currently the
flags are ignored; <i>flags</i> should be set to 0 for future
compatibility) and its trace procedure must the same as the <i>proc</i>
argument.
If the <i>prevClientData</i> argument is NULL then the return
value corresponds to the first (most recently created) matching
trace, or NULL if there are no matching traces.
If the <i>prevClientData</i> argument isn't NULL, then it should
be the return value from a previous call to <fun>Tcl_CommandTraceInfo</fun>.
In this case, the new return value will correspond to the next
matching trace after the one whose <i>clientData</i> matches
<i>prevClientData</i>, or NULL if no trace matches <i>prevClientData</i>
or if there are no more matching traces after it.
This mechanism makes it possible to step through all of the
traces for a given command that have the same <i>proc</i>.

</p>
</section>
<section>
<title>CALLING COMMANDS DURING TRACES</title>
<p>During rename traces, the command being renamed is visible with both
names simultaneously, and the command still exists during delete
traces (if <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> is not set).  However, there is no
mechanism for signaling that an error occurred in a trace procedure,
so great care should be taken that errors do not get silently lost.

</p>
</section>
<section>
<title>MULTIPLE TRACES</title>
<p>It is possible for multiple traces to exist on the same command.
When this happens, all of the trace procedures will be invoked on each
access, in order from most-recently-created to least-recently-created.
Attempts to delete the command during a delete trace will fail
silently, since the command is already scheduled for deletion anyway.
If the command being renamed is renamed by one of its rename traces,
that renaming takes precedence over the one that triggered the trace
and the collection of traces will not be reexecuted; if several traces
rename the command, the last renaming takes precedence.

</p>
</section>
<section>
<title>TCL_TRACE_DESTROYED FLAG</title>
<p>In a delete callback to <i>proc</i>, the <b>TCL_TRACE_DESTROYED</b> bit
is set in <i>flags</i>.


</p>
</section>
<section id="tcl_interp_destroyed">
<title>TCL_INTERP_DESTROYED</title>
<p>When an interpreter is destroyed, unset traces are called for
all of its commands.
The <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> bit will be set in the <i>flags</i>
argument passed to the trace procedures.
Trace procedures must be extremely careful in what they do if
the <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> bit is set.
It is not safe for the procedures to invoke any Tcl procedures
on the interpreter, since its state is partially deleted.
All that trace procedures should do under these circumstances is
to clean up and free their own internal data structures.

</p>
</section>
<section>
<title>BUGS</title>
<p>Tcl doesn't do any error checking to prevent trace procedures
from misusing the interpreter during traces with <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref>
set.

</p>
</section>
<keywords>
<keyword>clientData</keyword>
<keyword>trace</keyword>
<keyword>command</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="TraceVar" version="7.4" title="Tcl_TraceVar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: TraceVar.3,v 1.15 2005/05/10 18:33:57 kennykb Exp $
 -->
<?TROFF.TH title="Tcl_TraceVar" section="3" date="7.4" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_TraceVar</name>
<name>Tcl_TraceVar2</name>
<name>Tcl_UntraceVar</name>
<name>Tcl_UntraceVar2</name>
<name>Tcl_VarTraceInfo</name>
<name>Tcl_VarTraceInfo2</name>
<desc>monitor accesses to a variable</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<b>Tcl_TraceVar(</b><m>interp</m>, <m>varName</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>

int
<b>Tcl_TraceVar2(</b><m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>

<b>Tcl_UntraceVar(</b><m>interp</m>, <m>varName</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>

<b>Tcl_UntraceVar2(</b><m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>, <m>proc</m>, <m>clientData</m><b>)</b>

ClientData
<b>Tcl_VarTraceInfo(</b><m>interp</m>, <m>varName</m>, <m>flags</m>, <m>proc</m>, <m>prevClientData</m><b>)</b>

ClientData
<b>Tcl_VarTraceInfo2(</b><m>interp</m>, <m>name1</m>, <m>name2</m>, <m>flags</m>, <m>proc</m>, <m>prevClientData</m><b>)</b>
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter containing variable.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="varName">*varName</name>
<argmode>in</argmode>
<desc>Name of variable.  May refer to a scalar variable, to
an array variable with no index, or to an array variable
with a parenthesized index.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>flags</name>
<argmode>in</argmode>
<desc>OR-ed combination of the values <b>TCL_TRACE_READS</b>,
<b>TCL_TRACE_WRITES</b>, <b>TCL_TRACE_UNSETS</b>, <b>TCL_TRACE_ARRAY</b>,
<b>TCL_GLOBAL_ONLY</b>, <b>TCL_NAMESPACE_ONLY</b>,
<b>TCL_TRACE_RESULT_DYNAMIC</b> and <b>TCL_TRACE_RESULT_OBJECT</b>.
Not all flags are used by all
procedures.  See below for more information.
</desc>
</argdef>
<argdef>
<argtype>Tcl_VarTraceProc</argtype>
<name name="proc">*proc</name>
<argmode>in</argmode>
<desc>Procedure to invoke whenever one of the traced operations occurs.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>clientData</name>
<argmode>in</argmode>
<desc>Arbitrary one-word value to pass to <i>proc</i>.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name1">*name1</name>
<argmode>in</argmode>
<desc>Name of scalar or array variable (without array index).
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name2">*name2</name>
<argmode>in</argmode>
<desc>For a trace on an element of an array, gives the index of the
element.  For traces on scalar variables or on whole arrays,
is NULL.
</desc>
</argdef>
<argdef>
<argtype>ClientData</argtype>
<name>prevClientData</name>
<argmode>in</argmode>
<desc>If non-NULL, gives last value returned by <fun>Tcl_VarTraceInfo</fun> or
<fun>Tcl_VarTraceInfo2</fun>, so this call will return information about
next trace.  If NULL, this call will return information about first
trace.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_TraceVar</fun> allows a C procedure to monitor and control
access to a Tcl variable, so that the C procedure is invoked
whenever the variable is read or written or unset.
If the trace is created successfully then <fun>Tcl_TraceVar</fun> returns
<b>TCL_OK</b>.  If an error occurred (e.g. <i>varName</i> specifies an element
of an array, but the actual variable isn't an array) then <b>TCL_ERROR</b>
is returned and an error message is left in the interpreter's result.
</p>
<p>The <i>flags</i> argument to <fun>Tcl_TraceVar</fun> indicates when the
trace procedure is to be invoked and provides information
for setting up the trace.  It consists of an OR-ed combination
of any of the following values:
</p>
<dl>
<dle>
<dt><b>TCL_GLOBAL_ONLY</b></dt>
<dd>Normally, the variable will be looked up at the current level of
procedure call;  if this bit is set then the variable will be looked
up at global level, ignoring any active procedures.
</dd>
</dle>
<dle>
<dt><b>TCL_NAMESPACE_ONLY</b></dt>
<dd>Normally, the variable will be looked up at the current level of
procedure call;  if this bit is set then the variable will be looked
up in the current namespace, ignoring any active procedures.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_READS</b></dt>
<dd>Invoke <i>proc</i> whenever an attempt is made to read the variable.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_WRITES</b></dt>
<dd>Invoke <i>proc</i> whenever an attempt is made to modify the variable.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_UNSETS</b></dt>
<dd>Invoke <i>proc</i> whenever the variable is unset.
A variable may be unset either explicitly by an <cmd>unset</cmd> command,
or implicitly when a procedure returns (its local variables are
automatically unset) or when the interpreter is deleted (all
variables are automatically unset).
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_ARRAY</b></dt>
<dd>Invoke <i>proc</i> whenever the array command is invoked.
This gives the trace procedure a chance to update the array before
array names or array get is called.  Note that this is called
before an array set, but that will trigger write traces.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_RESULT_DYNAMIC</b></dt>
<dd>The result of invoking the <i>proc</i> is a dynamically allocated
string that will be released by the Tcl library via a call to
<fun>ckfree</fun>.  Must not be specified at the same time as
<b>TCL_TRACE_RESULT_OBJECT</b>.
</dd>
</dle>
<dle>
<dt><b>TCL_TRACE_RESULT_OBJECT</b></dt>
<dd>The result of invoking the <i>proc</i> is a Tcl_Obj* (cast to a char*)
with a reference count of at least one.  The ownership of that
reference will be transferred to the Tcl core for release (when the
core has finished with it) via a call to <fun>Tcl_DecrRefCount</fun>.  Must
not be specified at the same time as <b>TCL_TRACE_RESULT_DYNAMIC</b>.
</dd>
</dle>
</dl>
<p>Whenever one of the specified operations occurs on the variable,
<i>proc</i> will be invoked.
It should have arguments and result that match the type
<type>Tcl_VarTraceProc</type>:
</p>
<syntax cat="type" name="Tcl_VarTraceProc" scope="global">
typedef char *Tcl_VarTraceProc(
        ClientData <i>clientData</i>,
        Tcl_Interp *<i>interp</i>,
        char *<i>name1</i>,
        char *<i>name2</i>,
        int <i>flags</i>);
</syntax>
<p>The <i>clientData</i> and <i>interp</i> parameters will
have the same values as those passed to <fun>Tcl_TraceVar</fun> when the
trace was created.
<i>ClientData</i> typically points to an application-specific
data structure that describes what to do when <i>proc</i>
is invoked.
<i>Name1</i> and <i>name2</i> give the name of the traced variable
in the normal two-part form (see the description of <fun>Tcl_TraceVar2</fun>
below for details).
<i>Flags</i> is an OR-ed combination of bits providing several
pieces of information.
One of the bits <b>TCL_TRACE_READS</b>, <b>TCL_TRACE_WRITES</b>,
<b>TCL_TRACE_ARRAY</b>, or <b>TCL_TRACE_UNSETS</b>
will be set in <i>flags</i> to indicate which operation is being performed
on the variable.
The bit <b>TCL_GLOBAL_ONLY</b> will be set whenever the variable being
accessed is a global one not accessible from the current level of
procedure call:  the trace procedure will need to pass this flag
back to variable-related procedures like <fun>Tcl_GetVar</fun> if it
attempts to access the variable.
The bit <b>TCL_NAMESPACE_ONLY</b> will be set whenever the variable being
accessed is a namespace one not accessible from the current level of
procedure call:  the trace procedure will need to pass this flag
back to variable-related procedures like <fun>Tcl_GetVar</fun> if it
attempts to access the variable.
The bit <b>TCL_TRACE_DESTROYED</b> will be set in <i>flags</i> if the trace is
about to be destroyed;  this information may be useful to <i>proc</i>
so that it can clean up its own internal data structures (see
the section <b>TCL_TRACE_DESTROYED</b> below for more details).
Lastly, the bit <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> will be set if the entire
interpreter is being destroyed.
When this bit is set, <i>proc</i> must be especially careful in
the things it does (see the section <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> below).
The trace procedure's return value should normally be NULL;  see
<ref refid="error-returns">ERROR RETURNS</ref> below for information on other possibilities.
</p>
<p><fun>Tcl_UntraceVar</fun> may be used to remove a trace.
If the variable specified by <i>interp</i>, <i>varName</i>, and <i>flags</i>
has a trace set with <i>flags</i>, <i>proc</i>, and
<i>clientData</i>, then the corresponding trace is removed.
If no such trace exists, then the call to <fun>Tcl_UntraceVar</fun>
has no effect.
The same bits are valid for <i>flags</i> as for calls to <fun>Tcl_TraceVar</fun>.
</p>
<p><fun>Tcl_VarTraceInfo</fun> may be used to retrieve information about
traces set on a given variable.
The return value from <fun>Tcl_VarTraceInfo</fun> is the <i>clientData</i>
associated with a particular trace.
The trace must be on the variable specified by the <i>interp</i>,
<i>varName</i>, and <i>flags</i> arguments (only the <b>TCL_GLOBAL_ONLY</b> and
<b>TCL_NAMESPACE_ONLY</b> bits from <i>flags</i> is used;  other bits are
ignored) and its trace procedure must the same as the <i>proc</i>
argument.
If the <i>prevClientData</i> argument is NULL then the return
value corresponds to the first (most recently created) matching
trace, or NULL if there are no matching traces.
If the <i>prevClientData</i> argument isn't NULL, then it should
be the return value from a previous call to <fun>Tcl_VarTraceInfo</fun>.
In this case, the new return value will correspond to the next
matching trace after the one whose <i>clientData</i> matches
<i>prevClientData</i>, or NULL if no trace matches <i>prevClientData</i>
or if there are no more matching traces after it.
This mechanism makes it possible to step through all of the
traces for a given variable that have the same <i>proc</i>.

</p>
</section>
<section>
<title>TWO-PART NAMES</title>
<p>The procedures <fun>Tcl_TraceVar2</fun>, <fun>Tcl_UntraceVar2</fun>, and
<fun>Tcl_VarTraceInfo2</fun> are identical to <fun>Tcl_TraceVar</fun>,
<fun>Tcl_UntraceVar</fun>, and <fun>Tcl_VarTraceInfo</fun>, respectively,
except that the name of the variable consists of two parts.
<i>Name1</i> gives the name of a scalar variable or array,
and <i>name2</i> gives the name of an element within an array.
When <i>name2</i> is NULL, 
<i>name1</i> may contain both an array and an element name:
if the name contains an open parenthesis and ends with a
close parenthesis, then the value between the parentheses is
treated as an element name (which can have any string value) and
the characters before the first open
parenthesis are treated as the name of an array variable.
If <i>name2</i> is NULL and <i>name1</i> does not refer
to an array element 
it means that either the variable is
a scalar or the trace is to be set on the entire array rather
than an individual element (see <ref refid="whole-array-traces">WHOLE-ARRAY TRACES</ref> below for
more information). 


</p>
</section>
<section>
<title>ACCESSING VARIABLES DURING TRACES</title>
<p>During read, write, and array traces, the
trace procedure can read, write, or unset the traced
variable using <fun>Tcl_GetVar2</fun>, <fun>Tcl_SetVar2</fun>, and
other procedures.
While <i>proc</i> is executing, traces are temporarily disabled
for the variable, so that calls to <fun>Tcl_GetVar2</fun> and
<fun>Tcl_SetVar2</fun> will not cause <i>proc</i> or other trace procedures
to be invoked again.
Disabling only occurs for the variable whose trace procedure
is active;  accesses to other variables will still be traced.
However, if a variable is unset during a read or write trace then unset
traces will be invoked.
</p>
<p>During unset traces the variable has already been completely
expunged.
It is possible for the trace procedure to read or write the
variable, but this will be a new version of the variable.
Traces are not disabled during unset traces as they are for
read and write traces, but existing traces have been removed
from the variable before any trace procedures are invoked.
If new traces are set by unset trace procedures, these traces
will be invoked on accesses to the variable by the trace
procedures.

</p>
</section>
<section>
<title>CALLBACK TIMING</title>
<p>When read tracing has been specified for a variable, the trace
procedure will be invoked whenever the variable's value is
read.  This includes <b cat="AMBIGUOUS ambiguous cmd">set</b> Tcl commands, <b>$</b>-notation
in Tcl commands, and invocations of the <fun>Tcl_GetVar</fun>
and <fun>Tcl_GetVar2</fun> procedures.
<i>Proc</i> is invoked just before the variable's value is
returned.
It may modify the value of the variable to affect what
is returned by the traced access.
If it unsets the variable then the access will return an error
just as if the variable never existed.
</p>
<p>When write tracing has been specified for a variable, the
trace procedure will be invoked whenever the variable's value
is modified.  This includes <b cat="AMBIGUOUS ambiguous cmd">set</b> commands,
commands that modify variables as side effects (such as
<cmd>catch</cmd> and <b cat="AMBIGUOUS ambiguous cmd">scan</b>), and calls to the <fun>Tcl_SetVar</fun>
and <fun>Tcl_SetVar2</fun> procedures).
<i>Proc</i> will be invoked after the variable's value has been
modified, but before the new value of the variable has been
returned.
It may modify the value of the variable to override the change
and to determine the value actually returned by the traced
access.
If it deletes the variable then the traced access will return
an empty string.
</p>
<p>When array tracing has been specified, the trace procedure
will be invoked at the beginning of the array command implementation,
before any of the operations like get, set, or names have been invoked.
The trace procedure can modify the array elements with <fun>Tcl_SetVar</fun>
and <fun>Tcl_SetVar2</fun>.
</p>
<p>When unset tracing has been specified, the trace procedure
will be invoked whenever the variable is destroyed.
The traces will be called after the variable has been
completely unset.

</p>
</section>
<section id="whole-array-traces">
<title>WHOLE-ARRAY TRACES</title>
<p>If a call to <fun>Tcl_TraceVar</fun> or <fun>Tcl_TraceVar2</fun> specifies
the name of an array variable without an index into the array,
then the trace will be set on the array as a whole.
This means that <i>proc</i> will be invoked whenever any
element of the array is accessed in the ways specified by
<i>flags</i>.
When an array is unset, a whole-array trace will be invoked
just once, with <i>name1</i> equal to the name of the array
and <i>name2</i> NULL;  it will not be invoked once for each
element.

</p>
</section>
<section>
<title>MULTIPLE TRACES</title>
<p>It is possible for multiple traces to exist on the same variable.
When this happens, all of the trace procedures will be invoked on each
access, in order from most-recently-created to least-recently-created.
When there exist whole-array traces for an array as well as
traces on individual elements, the whole-array traces are invoked
before the individual-element traces.
If a read or write trace unsets the variable then all of the unset
traces will be invoked but the remainder of the read and write traces
will be skipped.

</p>
</section>
<section id="error-returns">
<title>ERROR RETURNS</title>
<p>Under normal conditions trace procedures should return NULL, indicating
successful completion.
If <i>proc</i> returns a non-NULL value it signifies that an
error occurred.
The return value must be a pointer to a static character string
containing an error message,
unless (<i>exactly</i> one of) the <b>TCL_TRACE_RESULT_DYNAMIC</b> and
<b>TCL_TRACE_RESULT_OBJECT</b> flags is set, which specify that the result is
either a dynamic string (to be released with <fun>ckfree</fun>) or a
Tcl_Obj* (cast to char* and to be released with
<fun>Tcl_DecrRefCount</fun>) containing the error message.
If a trace procedure returns an error, no further traces are
invoked for the access and the traced access aborts with the
given message.
Trace procedures can use this facility to make variables
read-only, for example (but note that the value of the variable
will already have been modified before the trace procedure is
called, so the trace procedure will have to restore the correct
value).
</p>
<p>The return value from <i>proc</i> is only used during read and
write tracing.
During unset traces, the return value is ignored and all relevant
trace procedures will always be invoked.

</p>
</section>
<section>
<title>RESTRICTIONS</title>
<p>A trace procedure can be called at any time, even when there
is a partially formed result in the interpreter's result area.  If
the trace procedure does anything that could damage this result (such
as calling <fun>Tcl_Eval</fun>) then it must save the original values of
the interpreter's <b>result</b> and <b>freeProc</b> fields and restore
them before it returns.

</p>
</section>
<section>
<title>UNDEFINED VARIABLES</title>
<p>It is legal to set a trace on an undefined variable.
The variable will still appear to be undefined until the
first time its value is set.
If an undefined variable is traced and then unset, the unset will fail
with an error (``no such variable''), but the trace
procedure will still be invoked.

</p>
</section>
<section>
<title>TCL_TRACE_DESTROYED FLAG</title>
<p>In an unset callback to <i>proc</i>, the <b>TCL_TRACE_DESTROYED</b> bit
is set in <i>flags</i> if the trace is being removed as part
of the deletion.
Traces on a variable are always removed whenever the variable
is deleted;  the only time <b>TCL_TRACE_DESTROYED</b> isn't set is for
a whole-array trace invoked when only a single element of an
array is unset.

</p>
</section>
<section id="tcl_interp_destroyed">
<title>TCL_INTERP_DESTROYED</title>
<p>When an interpreter is destroyed, unset traces are called for
all of its variables.
The <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> bit will be set in the <i>flags</i>
argument passed to the trace procedures.
Trace procedures must be extremely careful in what they do if
the <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref> bit is set.
It is not safe for the procedures to invoke any Tcl procedures
on the interpreter, since its state is partially deleted.
All that trace procedures should do under these circumstances is
to clean up and free their own internal data structures.

</p>
</section>
<section>
<title>BUGS</title>
<p>Tcl doesn't do any error checking to prevent trace procedures
from misusing the interpreter during traces with <ref refid="tcl_interp_destroyed">TCL_INTERP_DESTROYED</ref>
set.
</p>
<p>Array traces are not yet integrated with the Tcl "info exists" command,
nor is there Tcl-level access to array traces.

</p>
</section>
<keywords>
<keyword>clientData</keyword>
<keyword>trace</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Translate" title="Tcl_TranslateFileName" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1989-1993 The Regents of the University of California.
     Copyright (c) 1994-1998 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Translate.3,v 1.9 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_TranslateFileName" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_TranslateFileName</name>
<desc>convert file name to native form and replace tilde with home directory</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

char *
<fun>Tcl_TranslateFileName</fun>(<m>interp</m>, <m>name</m>, <m>bufferPtr</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name name="interp">*interp</name>
<argmode>in</argmode>
<desc>Interpreter in which to report an error, if any.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="name">*name</name>
<argmode>in</argmode>
<desc>File name, which may start with a ``~''.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="bufferPtr">*bufferPtr</name>
<argmode>in/out</argmode>
<desc>If needed, this dynamic string is used to store the new file name.
At the time of the call it should be uninitialized or free.  The
caller must eventually call <fun>Tcl_DStringFree</fun> to free up
anything stored here.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>This utility procedure translates a file name to a platform-specific form
which, after being converted to the appropriate encoding, is suitable for
passing to the local operating system.  In particular, it converts
network names into native form and does tilde substitution.  
</p>
<p>However, with the advent of the newer <fun>Tcl_FSGetNormalizedPath</fun> and
<b>Tcl_GetNativePath</b>, there is no longer any need to use this
procedure.  In particular, <b>Tcl_GetNativePath</b> performs all the
necessary translation and encoding conversion, is virtual-filesystem
aware, and caches the native result for faster repeated calls.
Finally <b>Tcl_GetNativePath</b> does not require you to free anything
afterwards.
</p>
<p>If
<fun>Tcl_TranslateFileName</fun> has to do tilde substitution or translate
the name then it uses
the dynamic string at <i>*bufferPtr</i> to hold the new string it
generates.
After <fun>Tcl_TranslateFileName</fun> returns a non-NULL result, the caller must
eventually invoke <fun>Tcl_DStringFree</fun> to free any information
placed in <i>*bufferPtr</i>.  The caller need not know whether or
not <fun>Tcl_TranslateFileName</fun> actually used the string;  <fun>Tcl_TranslateFileName</fun>
initializes <i>*bufferPtr</i> even if it doesn't use it, so the call to
<fun>Tcl_DStringFree</fun> will be safe in either case.
</p>
<p>If an error occurs (e.g. because there was no user by the given
name) then NULL is returned and an error message will be left
in the interpreter's result.
When an error occurs, <fun>Tcl_TranslateFileName</fun>
frees the dynamic string itself so that the caller need not call
<fun>Tcl_DStringFree</fun>.
</p>
<p>The caller is responsible for making sure that the interpreter's result
has its default empty value when <fun>Tcl_TranslateFileName</fun> is invoked.

</p>
</section>
<seealso>
<ref>filename</ref>
</seealso>
<keywords>
<keyword>file name</keyword>
<keyword>home directory</keyword>
<keyword>tilde</keyword>
<keyword>translate</keyword>
<keyword>user</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_button" version="8.5" title="ttk_button">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_button.n,v 1.3 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="ttk_button" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_button</name>
<desc>Widget that issues a command when pressed</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::button</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::button</b> widget displays a textual label and/or image,
and evaluates a command when pressed.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-compound</li>
<li>-cursor</li>
<li>-image</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-width</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>A script to evaluate when the widget is invoked.
</desc>
</optiondef>
<optiondef>
<name>-default</name>
<dbname>default</dbname>
<dbclass>Default</dbclass>
<desc>May be set to one of  <b>normal</b>, <b>active</b>, or <b>disabled</b>.
In a dialog box, one button may be designated the "default" button
(meaning, roughly, "the one that gets invoked when the user presses &lt;Enter&gt;").
<b>active</b> indicates that this is currently the default button;
<b>normal</b> means that it may become the default button, and
<b>disabled</b> means that it is not defaultable.
The default is <b>normal</b>.
<br/>Depending on the theme, the default button may be displayed 
with an extra highlight ring, or with a different border color.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>If greater than zero, specifies how much space, in character widths, 
to allocate for the text label.  
If less than zero, specifies a minimum width.
If zero or unspecified, the natural width of the text label is used.
Note that some themes may specify a non-zero <b>-width</b>
in the style.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathName</m> <b>invoke</b></dt>
<dd>Invokes the command associated with the button.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>stateSpec</m> ?<m>script</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>See <i>ttk_widget(n)</i>

</dd>
</dle>
</dl>
</section>
<section>
<title>COMPATIBILITY OPTIONS</title>
<optionlist>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>May be set to <b>normal</b> or <b>disabled</b>
to control the <b>disabled</b> state bit.
This is a ``write-only'' option: setting it changes the
widget state, but the <b>state</b> widget command does
not affect the state option.

</desc>
</optiondef>
</optionlist>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>button(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>button</keyword>
<keyword>default</keyword>
<keyword>command</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_checkbutton" version="8.5" title="ttk_checkbutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_checkbutton.n,v 1.3 2006/12/13 23:04:32 hobbs Exp $
 -->
<?TROFF.TH title="ttk_checkbutton" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_checkbutton</name>
<desc>On/off widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::checkbutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::checkbutton</b> widget is used to show or change a setting.
It has two states, selected and deselected.  
The state of the checkbuton may be linked to a Tcl variable.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-compound</li>
<li>-cursor</li>
<li>-image</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-width</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>A Tcl script to execute whenever the widget is invoked.
</desc>
</optiondef>
<optiondef>
<name>-offvalue</name>
<dbname>offValue</dbname>
<dbclass>OffValue</dbclass>
<desc>The value to store in the associated <i>-variable</i> 
when the widget is deselected.  Defaults to <b>0</b>.
</desc>
</optiondef>
<optiondef>
<name>-onvalue</name>
<dbname>onValue</dbname>
<dbclass>OnValue</dbclass>
<desc>The value to store in the associated <i>-variable</i> 
when the widget is selected.  Defaults to <b>1</b>.
</desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>The name of a global variable whose value is linked to the widget.
Defaults to the widget pathname if not specified.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>In addition to the standard 
<b>cget</b>, <b>configure</b>, <b>instate</b>, and <b>state</b> 
commands, checkbuttons support the following additional
widget commands:
</p>
<dl>
<dle>
<dt><m>pathname</m> invoke</dt>
<dd>Toggles between the selected and deselected states
and evaluates the associated <i>-command</i>.
If the widget is currently selected, sets the <i>-variable</i>
to the <i>-offvalue</i> and deselects the widget;
otherwise, sets the <i>-variable</i> to the <i>-onvalue</i>
Returns the result of the <i>-command</i>.

</dd>
</dle>
</dl>
</section>
<section>
<title>WIDGET STATES</title>
<p>The widget does not respond to user input if the <b>disabled</b> state is set.
The widget sets the <b>selected</b> state whenever 
the linked <b>-variable</b> is set to the widget's <b>-onvalue</b>,
and clears it otherwise.
The widget sets the <b>alternate</b> state whenever the 
linked <b>-variable</b> is unset.  
(The <b>alternate</b> state may be used to indicate a ``tri-state'' 
or ``indeterminate'' selection.)

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_radiobutton(n)</ref>
<ref>checkbutton(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>button</keyword>
<keyword>toggle</keyword>
<keyword>check</keyword>
<keyword>option</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_combobox" version="8.5" title="ttk_combobox">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_combobox.n,v 1.4 2006/12/17 21:09:46 jenglish Exp $
 -->
<?TROFF.TH title="ttk_combobox" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_combobox</name>
<desc>text field with popdown selection list</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::combobox</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::combobox</b> combines a text field with a pop-down list of values;
the user may select the value of the text field from among the 
values in the list.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-exportselection</name>
<dbname>exportSelection</dbname>
<dbclass>ExportSelection</dbclass>
<desc>Boolean value.
If set, the widget selection is linked to the X selection.
</desc>
</optiondef>
<optiondef>
<name>-justify</name>
<dbname>justify</dbname>
<dbclass>Justify</dbclass>
<desc>Specifies how the text is aligned within the widget.
One of <b>left</b>, <b>center</b>, or <b>right</b>.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the height of the pop-down listbox, in rows.
</desc>
</optiondef>
<optiondef>
<name>-postcommand</name>
<dbname>postCommand</dbname>
<dbclass>PostCommand</dbclass>
<desc>A Tcl script to evaluate immediately before displaying the listbox.
The <b>-postcommand</b> script may specify the <b>-values</b> to display.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>One of <b>normal</b>, <b>readonly</b>, or <b>disabled</b>.
In the <b>readonly</b> state,
the value may not be edited directly, and 
the user can only select one of the <b>-values</b> from the
dropdown list.
In the <b>normal</b> state, 
the text field is directly editable.
In the <b>disabled</b> state, no interaction is possible.
</desc>
</optiondef>
<optiondef>
<name>-textvariable</name>
<dbname>textVariable</dbname>
<dbclass>TextVariable</dbclass>
<desc>Specifies the name of a variable whose value is linked 
to the widget value.
Whenever the variable changes value the widget value is updated,
and vice versa.
</desc>
</optiondef>
<optiondef>
<name>-values</name>
<dbname>values</dbname>
<dbclass>Values</dbclass>
<desc>Specifies the list of values to display in the drop-down listbox.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies an integer value indicating the desired width of the entry window,
in average-size characters of the widget's font.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the specified <i>option</i>.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Modify or query widget options.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>current</b> ?<m>newIndex</m>?</dt>
<dd>If <i>newIndex</i> is supplied, sets the combobox value 
to the element at position <i>newIndex</i> in the list of <b>-values</b>.
Otherwise, returns the index of the current value in the list of <b>-values</b>
or <b>-1</b> if the current value does not appear in the list.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the current value of the combobox.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns the name of the element at position <i>x</i>, <i>y</i>,
or the empty string if the coordinates are outside the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>stateSpec</m> ?<m>script</m>?</dt>
<dd>Test the widget state.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>set</b> <m>value</m></dt>
<dd>Sets the value of the combobox to <i>value</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>Modify or query the widget state.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
</dl>
<p>The combobox widget also supports the following <i>ttk::entry</i>
widget commands (see <i>ttk_entry(n)</i> for details):
</p>
<?TABSTOPS 5.5c 11c?>
<sl cols="3">
<li>bbox</li>
<li>delete</li>
<li>icursor</li>
<li>index</li>
<li>insert</li>
<li>selection</li>
<li>xview</li>
</sl>


</section>
<section>
<title>VIRTUAL EVENTS</title>
<p>The combobox widget generates a <b>&lt;&lt;ComboboxSelected&gt;&gt;</b> virtual event
when the user selects an element from the list of values.
This event is generated after the listbox is unposted.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_entry(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_dialog" version="8.5" title="ttk_dialog">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_dialog.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_dialog" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_dialog</name>
<desc>create a dialog box</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::dialog</b> <m>pathname</m> ?<m>options...</m>?
<b>ttk::dialog::define</b> <m>dialogType</m> ?<m>options...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A dialog box is a transient top-level window 
containing an icon, a short message, an optional, longer, detail message,
and a row of command buttons.
When the user presses any of the buttons,
a callback function is invoked
and then the dialog is destroyed.
</p>
<p>Additional widgets may be added in the dialog <i>client frame</i>.

</p>
</section>
<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-title</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies a string to use as the window manager title.
</desc>
</optiondef>
<optiondef>
<name>-message</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies the message to display in this dialog.
</desc>
</optiondef>
<optiondef>
<name>-detail</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies a longer auxilliary message.
</desc>
</optiondef>
<optiondef>
<name>-command</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies a command prefix to be invoked when the user presses
one of the command buttons.  
The symbolic name of the button is passed as an additional argument
to the command.
The dialog is dismissed after invoking the command.
</desc>
</optiondef>
<optiondef>
<name>-parent</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies a toplevel window for which the dialog is transient.
If omitted, the default is the nearest ancestor toplevel.
If set to the empty string, the dialog will not be a transient window.
</desc>
</optiondef>
<optiondef>
<name>-type</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies a built-in or user-defined dialog type.
See <ref refid="predefined-dialog-types">PREDEFINED DIALOG TYPES</ref>, below.
</desc>
</optiondef>
<optiondef>
<name>-icon</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies one of the stock dialog icons,
<b cat="AMBIGUOUS ambiguous cmd">info</b>, <b>question</b>, <b>warning</b>, <b cat="AMBIGUOUS ambiguous cmd">error</b>,
<b>auth</b>, or <b>busy</b>.
If set to the empty string (the defalt), no icon is displayed.
</desc>
</optiondef>
<optiondef>
<name>-buttons</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>A list of symbolic button names.
</desc>
</optiondef>
<optiondef>
<name>-labels</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>A dictionary mapping symbolic button names to textual labels.
May be omitted if all the buttons are predefined.
</desc>
</optiondef>
<optiondef>
<name>-default</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>The symbolic name of the default button.
</desc>
</optiondef>
<optiondef>
<name>-cancel</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>The symbolic name of the "cancel" button.
The cancel button is invoked if the user presses the Escape key
and when the dialog is closed from the window manager.
If <b>-cancel</b> is not specified, 
the dialog ignores window manager close commands (WM_DELETE_WINDOW).

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMANDS</title>
<dl>
<dle>
<dt><b>ttk::dialog::clientframe</b> <m>dlg</m></dt>
<dd>Returns the widget path of the client frame.
Other widgets may be added to the client frame.
The client frame appears between the detail message and the command buttons.

</dd>
</dle>
</dl>
</section>
<section id="predefined-dialog-types">
<title>PREDEFINED DIALOG TYPES</title>
<p>The <b>-type</b> option, if present, specifies default values 
for other options.  <b>ttk::dialog::define</b> <i>type options...</i>
specifies a new stock dialog <i>type</i>.  
The following stock dialog types are predefined:
</p>
<example>
ttk::dialog::define ok \
    -icon info -buttons {ok} -default ok
ttk::dialog::define okcancel \
    -icon info -buttons {ok cancel} -default ok -cancel cancel
ttk::dialog::define yesno \
    -icon question -buttons {yes no}
ttk::dialog::define yesnocancel \
    -icon question -buttons {yes no cancel} -cancel cancel
ttk::dialog::define retrycancel \
    -icon question -buttons {retry cancel} -cancel cancel
</example>


</section>
<section>
<title>STOCK BUTTONS</title>
<p>The following ``stock'' symbolic button names have predefined labels:
<b>yes</b>, <b>no</b>, <b>ok</b>, <b>cancel</b>, and <b>retry</b>.
</p>
<p>It is not necessary to list these in the <b>-labels</b> dictionary.
</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
proc saveFileComplete {button} {
    switch -- $button {
    	yes { # save file ... }
	no  { exit }
	cancel { # no-op }
    }
}

ttk::dialog .saveFileDialog \
    -title "Save file?" \
    -icon question \
    -message "Save file before closing?" \
    -detail "If you do not save the file, your work will be lost" \
    -buttons [list yes no cancel] \ 
    -labels [list yes "Save file" no "Don't save"] \
    -command saveFileComplete \
    ;
</example>


</section>
<seealso>
<ref>tk_messageBox(n)</ref>
<ref>wm(n)</ref>
<ref>toplevel(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_entry" version="8.5" title="ttk_entry">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 1998-2000 Scriptics Corporation.
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     SOURCE: entry.n, r1.12
     RCS: @(#) $Id: ttk_entry.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_entry" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_entry</name>
<desc>Editable text field widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::entry</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>An <b>ttk::entry</b> widget displays a one-line text string and
allows that string to be edited by the user.
The value of the string may be linked to a Tcl variable 
with the <b>-textvariable</b> option.
Entry widgets support horizontal scrolling with the 
standard <b>-xscrollcommand</b> option and <b>xview</b> widget command.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
<li>-xscrollcommand</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-exportselection</name>
<dbname>exportSelection</dbname>
<dbclass>ExportSelection</dbclass>
<desc>A boolean value specifying whether or not 
a selection in the widget should be linked to the X selection.
If the selection is exported, then selecting in the widget deselects
the current X selection, selecting outside the widget deselects any
widget selection, and the widget will respond to selection retrieval
requests when it has a selection.
</desc>
</optiondef>
<optiondef>
<name>-invalidcommand</name>
<dbname>invalidCommand</dbname>
<dbclass>InvalidCommand</dbclass>
<desc>A script template to evaluate whenever the <b>validateCommand</b> returns 0.
See <ref refid="validation">VALIDATION</ref> below for more information.
</desc>
</optiondef>
<optiondef>
<name>-justify</name>
<dbname>justify</dbname>
<dbclass>Justify</dbclass>
<desc>Specifies how the text is aligned within the entry widget.
One of <b>left</b>, <b>center</b>, or <b>right</b>.
</desc>
</optiondef>
<optiondef>
<name>-show</name>
<dbname>show</dbname>
<dbclass>Show</dbclass>
<desc>If this option is specified, then the true contents of the entry
are not displayed in the window.
Instead, each character in the entry's value will be displayed as
the first character in the value of this option, such as ``*''.
This is useful, for example, if the entry is to be used to enter
a password.
If characters in the entry are selected and copied elsewhere, the
information copied will be what is displayed, not the true contents
of the entry.
</desc>
</optiondef>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Compatibility option; see <i>ttk_widget(n)</i> for details.
Specifies one of three states for the entry,
<b>normal</b>, <b>disabled</b>, or <b>readonly</b>.
See <ref refid="widget-states">WIDGET STATES</ref>, below.
</desc>
</optiondef>
<optiondef>
<name>-textvariable</name>
<dbname>textVariable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies the name of a variable whose value is linked 
to the entry widget's contents.
Whenever the variable changes value, the widget's contents are updated,
and vice versa.
</desc>
</optiondef>
<optiondef>
<name>-validate</name>
<dbname>validate</dbname>
<dbclass>Validate</dbclass>
<desc>Specifies the mode in which validation should operate:
<b>none</b>, <cmd>focus</cmd>, <b>focusin</b>, <b>focusout</b>, <b>key</b>, or <b>all</b>.
Default is <b>none</b>, meaning that validation is disabled.
See <ref refid="validation">VALIDATION</ref> below.
</desc>
</optiondef>
<optiondef>
<name>-validatecommand</name>
<dbname>validateCommand</dbname>
<dbclass>ValidateCommand</dbclass>
<desc>A script template to evaluate whenever validation is triggered.
If set to the empty string (the default), validation is disabled.
The script must return a boolean value.
See <ref refid="validation">VALIDATION</ref> below.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>Specifies an integer value indicating the desired width of the entry window,
in average-size characters of the widget's font.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>NOTES</title>
<p>A portion of the entry may be selected as described below.
If an entry is exporting its selection (see the <b>exportSelection</b>
option), then it will observe the standard X11 protocols for handling the
selection;  entry selections are available as type <b>STRING</b>.
Entries also observe the standard Tk rules for dealing with the
input focus.  When an entry has the input focus it displays an
<i>insert cursor</i> to indicate where new characters will be
inserted.
</p>
<p>Entries are capable of displaying strings that are too long to
fit entirely within the widget's window.  In this case, only a
portion of the string will be displayed;  commands described below
may be used to change the view in the window.  Entries use
the standard <b>xScrollCommand</b> mechanism for interacting with
scrollbars (see the description of the <b>xScrollCommand</b> option
for details).

</p>
</section>
<section>
<title>INDICES</title>
<p>Many of the <b cat="AMBIGUOUS widget cmd">entry</b> widget commands take one or more indices as
arguments.  An index specifies a particular character in the entry's
string, in any of the following ways:
</p>
<dl>
<dle>
<dt><m>number</m></dt>
<dd>Specifies the character as a numerical index, where 0 corresponds
to the first character in the string.
</dd>
</dle>
<dle>
<dt><b>@</b><m>number</m></dt>
<dd>In this form, <i>number</i> is treated as an x-coordinate in the
entry's window;  the character spanning that x-coordinate is used.
For example, ``<b>@0</b>'' indicates the left-most character in the
window.
</dd>
</dle>
<dle>
<dt><b>end</b></dt>
<dd>Indicates the character just after the last one in the entry's string.
This is equivalent to specifying a numerical index equal to the length
of the entry's string.
</dd>
</dle>
<dle>
<dt><b>insert</b></dt>
<dd>Indicates the character adjacent to and immediately following the
insert cursor.
</dd>
</dle>
<dle>
<dt><b>sel.first</b></dt>
<dd>Indicates the first character in the selection.  It is an error to
use this form if the selection isn't in the entry window.
</dd>
</dle>
<dle>
<dt><b>sel.last</b></dt>
<dd>Indicates the character just after the last one in the selection.
It is an error to use this form if the selection isn't in the
entry window.
</dd>
</dle>
</dl>
<p>Abbreviations may be used for any of the forms above, e.g. ``<b>e</b>''
or ``<b>sel.f</b>''.  In general, out-of-range indices are automatically
rounded to the nearest legal value.

</p>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>The following commands are possible for entry widgets:
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>bbox</b> <m>index</m></dt>
<dd>Returns a list of four numbers describing the bounding box of the
character given by <i>index</i>.
The first two elements of the list give the x and y coordinates of
the upper-left corner of the screen area covered by the character
(in pixels relative to the widget) and the last two elements give
the width and height of the character, in pixels.
The bounding box may refer to a region outside the visible area
of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the specified <i>option</i>.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Modify or query widget options.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>delete</b> <m>first</m> ?<m>last</m>?</dt>
<dd>Delete one or more elements of the entry.
<i>First</i> is the index of the first character to delete, and
<i>last</i> is the index of the character just after the last
one to delete.
If <i>last</i> isn't specified it defaults to <i>first</i>+1,
i.e. a single character is deleted.
This command returns the empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the entry's string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>icursor</b> <m>index</m></dt>
<dd>Arrange for the insert cursor to be displayed just before the character
given by <i>index</i>.  Returns the empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns the name of the element at position <i>x</i>, <i>y</i>,
or the empty string if the coordinates are outside the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>index</b> <m>index</m></dt>
<dd>Returns the numerical index corresponding to <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>insert</b> <m>index string</m></dt>
<dd>Insert <i>string</i> just before the character
indicated by <i>index</i>.  Returns the empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>statespec</m> ?<m>script</m>?</dt>
<dd>Test the widget state.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection</b> <m>option arg</m></dt>
<dd>This command is used to adjust the selection within an entry.  It
has several forms, depending on <i>option</i>:
<dl>
<dle>
<dt><m>pathName</m> <b>selection clear</b></dt>
<dd>Clear the selection if it is currently in this widget.
If the selection isn't in this widget then the command has no effect.
Returns the empty string.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection present</b></dt>
<dd>Returns 1 if there is are characters selected in the entry,
0 if nothing is selected.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>selection range</b> <m>start</m> <m>end</m></dt>
<dd>Sets the selection to include the characters starting with
the one indexed by <i>start</i> and ending with the one just
before <i>end</i>.
If <i>end</i> refers to the same character as <i>start</i> or an
earlier one, then the entry's selection is cleared.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>Modify or query the widget state.
See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>validate</b></dt>
<dd>Force revalidation, independent of the conditions specified 
by the <b>-validate</b> option.
Returns 0 if validation fails, 1 if it succeeds.
Sets or clears the <b>invalid</b> state accordingly.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>args</m></dt>
<dd>This command is used to query and change the horizontal position of the
text in the widget's window.  It can take any of the following
forms:
<dl>
<dle>
<dt><m>pathName</m> <b>xview</b></dt>
<dd>Returns a list containing two elements.
Each element is a real fraction between 0 and 1; together they describe
the horizontal span that is visible in the window.
For example, if the first element is .2 and the second element is .6,
20% of the entry's text is off-screen to the left, the middle 40% is visible
in the window, and 40% of the text is off-screen to the right.
These are the same values passed to scrollbars via the <b>-xscrollcommand</b>
option.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>index</m></dt>
<dd>Adjusts the view in the window so that the character given by <i>index</i>
is displayed at the left edge of the window.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview moveto</b> <m>fraction</m></dt>
<dd>Adjusts the view in the window so that the character <i>fraction</i> of the
way through the text appears at the left edge of the window.
<i>Fraction</i> must be a fraction between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview scroll</b> <m>number what</m></dt>
<dd>This command shifts the view in the window left or right according to
<i>number</i> and <i>what</i>.
<i>Number</i> must be an integer.
<i>What</i> must be either <b>units</b> or <b>pages</b>.
If <i>what</i> is <b>units</b>, the view adjusts left or right by
<i>number</i> average-width characters on the display;  if it is
<b>pages</b> then the view adjusts by <i>number</i> screenfuls.
If <i>number</i> is negative then characters farther to the left
become visible;  if it is positive then characters farther to the right
become visible.
</dd>
</dle>
</dl>
</dd>
</dle>
</dl>
</section>
<section id="validation">
<title>VALIDATION</title>
<p>The <b>-validate</b>, <b>-validatecommand</b>, and <b>-invalidcommand</b>
options are used to enable entry widget validation.
</p>
<subsection>
<title>VALIDATION MODES</title>
<p>There are two main validation modes: <i>prevalidation</i>,
in which the <b>-validatecommand</b> is evaluated prior to each edit
and the return value is used to determine whether to accept 
or reject the change;
and <i>revalidation</i>, in which the <b>-validatecommand</b> is 
evaluated to determine whether the current value is valid.
</p>
<p>The <b>-validate</b> option determines when validation occurs;
it may be set to any of the following values:
</p>
<dl>
<dle>
<dt><b>none</b></dt>
<dd>Default.  This means validation will only occur when 
specifically requested by the <b>validate</b> widget command.
</dd>
</dle>
<dle>
<dt><b>key</b></dt>
<dd>The entry will be prevalidated prior to each edit
(specifically, whenever the <b>insert</b> or <b>delete</b> 
widget commands are called).
If prevalidation fails, the edit is rejected.
</dd>
</dle>
<dle>
<dt><b>focus</b></dt>
<dd>The entry is revalidated when the entry receives or loses focus.
</dd>
</dle>
<dle>
<dt><b>focusin</b></dt>
<dd>The entry is revalidated when the entry receives focus.
</dd>
</dle>
<dle>
<dt><b>focusout</b></dt>
<dd>The entry is revalidated when the entry loses focus.
</dd>
</dle>
<dle>
<dt><b>all</b></dt>
<dd>Validation is performed for all above conditions.
</dd>
</dle>
</dl>
<p>The <b>-invalidcommand</b> is evaluated whenever
the <b>-validatecommand</b> returns a false value.
</p>
<p>The <b>-validatecommand</b> and <b>-invalidcommand</b>
may modify the entry widget's value
via the widget <b>insert</b> or <b>delete</b> commands,
or by setting the linked <b>-textvariable</b>.
If either does so during prevalidation,
then the edit is rejected 
regardless of the value returned by the <b>-validatecommand</b>.
</p>
<p>If <b>-validatecommand</b> is empty (the default), 
validation always succeeds.
</p>
</subsection>
<subsection>
<title>VALIDATION SCRIPT SUBSTITUTIONS</title>
<p>It is possible to perform percent substitutions on the 
<b>-validatecommand</b> and <b>invalidCommand</b>,
just as in a <cmd>bind</cmd> script.
The following substitutions are recognized:
</p>
<dl>
<dle>
<dt><b>%d</b></dt>
<dd>Type of action: 1 for <b>insert</b> prevalidation, 
0 for <b>delete</b> prevalidation,
or -1 for revalidation.
</dd>
</dle>
<dle>
<dt><b>%i</b></dt>
<dd>Index of character string to be inserted/deleted, if any, otherwise -1.
</dd>
</dle>
<dle>
<dt><b>%P</b></dt>
<dd>In prevalidation, the new value of the entry if the edit is accepted.
In revalidation, the current value of the entry.
</dd>
</dle>
<dle>
<dt><b>%s</b></dt>
<dd>The current value of entry prior to editing.
</dd>
</dle>
<dle>
<dt><b>%S</b></dt>
<dd>The text string being inserted/deleted, if any, {} otherwise.
</dd>
</dle>
<dle>
<dt><b>%v</b></dt>
<dd>The current value of the <b>-validate</b> option.
</dd>
</dle>
<dle>
<dt><b>%V</b></dt>
<dd>The validation condition that triggered the callback
(<b>key</b>, <b>focusin</b>, <b>focusout</b>, or <b>forced</b>).
</dd>
</dle>
<dle>
<dt><b>%W</b></dt>
<dd>The name of the entry widget.
</dd>
</dle>
</dl>
</subsection>
<subsection>
<title>DIFFERENCES FROM TK ENTRY WIDGET VALIDATION</title>
<ul>
<li>The standard Tk entry widget automatically disables validation
(by setting <b>-validate</b> to <b>none</b>)
if the <b>-validatecommand</b> or <b>-invalidcommand</b> modifies 
the entry's value.
The Tk themed entry widget only disables validation if one
of the validation scripts raises an error, or if <b>-validatecommand</b>
does not return a valid boolean value.
(Thus, it is not necessary to reenable validation after 
modifying the entry value in a validation script).
</li>
<li>The standard entry widget invokes validation whenever the linked
<b>-textvariable</b> is modified; the Tk themed entry widget does not.

</li>
</ul>
</subsection>
</section>
<section>
<title>DEFAULT BINDINGS</title>
<p>The entry widget's default bindings enable the following behavior.  
In the descriptions below, ``word'' refers to a contiguous group
of letters, digits, or ``_'' characters, or any single character
other than these.
</p>
<ul>
<li>Clicking mouse button 1 positions the insert cursor
just before the character underneath the mouse cursor, sets the
input focus to this widget, and clears any selection in the widget.
Dragging with mouse button 1 down strokes out a selection between
the insert cursor and the character under the mouse.
</li>
<li>Double-clicking with mouse button 1 selects the word under the mouse
and positions the insert cursor at the end of the word.
Dragging after a double click strokes out a selection consisting
of whole words.
</li>
<li>Triple-clicking with mouse button 1 selects all of the text in the
entry and positions the insert cursor at the end of the line.
</li>
<li>The ends of the selection can be adjusted by dragging with mouse
button 1 while the Shift key is down.
If the button is double-clicked before dragging then the selection
will be adjusted in units of whole words.
</li>
<li>Clicking mouse button 1 with the Control key down will position the
insert cursor in the entry without affecting the selection.
</li>
<li>If any normal printing characters are typed in an entry, they are
inserted at the point of the insert cursor.
</li>
<li>The view in the entry can be adjusted by dragging with mouse button 2.
If mouse button 2 is clicked without moving the mouse, the selection
is copied into the entry at the position of the mouse cursor.
</li>
<li>If the mouse is dragged out of the entry on the left or right sides
while button 1 is pressed, the entry will automatically scroll to
make more text visible (if there is more text off-screen on the side
where the mouse left the window).
</li>
<li>The Left and Right keys move the insert cursor one character to the
left or right;  they also clear any selection in the entry.
If Left or Right is typed with the Shift key down, then the insertion
cursor moves and the selection is extended to include the new character.
Control-Left and Control-Right move the insert cursor by words, and
Control-Shift-Left and Control-Shift-Right move the insert cursor
by words and also extend the selection.
Control-b and Control-f behave the same as Left and Right, respectively.
</li>
<li>The Home key and Control-a move the insert cursor to the
beginning of the entry and clear any selection in the entry.
Shift-Home moves the insert cursor to the beginning of the entry
and extends the selection to that point.
</li>
<li>The End key and Control-e move the insert cursor to the
end of the entry and clear any selection in the entry.
Shift-End moves the cursor to the end and extends the selection
to that point.
</li>
<li>Control-/ selects all the text in the entry.
</li>
<li>Control-\ clears any selection in the entry.
</li>
<li>The standard Tk &lt;&lt;Cut&gt;&gt;, &lt;&lt;Copy&gt;&gt;, &lt;&lt;Paste&gt;&gt;, and &lt;&lt;Clear&gt;&gt;
virtual events operate on the selection in the expected manner.
</li>
<li>The Delete key deletes the selection, if there is one in the entry.
If there is no selection, it deletes the character to the right of
the insert cursor.
</li>
<li>The BackSpace key and Control-h delete the selection, if there is one
in the entry.
If there is no selection, it deletes the character to the left of
the insert cursor.
</li>
<li>Control-d deletes the character to the right of the insert cursor.
</li>
<li>Control-k deletes all the characters to the right of the insertion
cursor.

</li>
</ul>
</section>
<section id="widget-states">
<title>WIDGET STATES</title>
<p>In the <b>disabled</b> state, 
the entry cannot be edited and the text cannot be selected.
In the <b>readonly</b> state,
no insert cursor is displayed and 
the entry cannot be edited 
(specifically: the <b>insert</b> and <b>delete</b> commands have no effect).
The <b>disabled</b> state is the same as <b>readonly</b>, 
and in addition text cannot be selected.
</p>
<p>Note that changes to the linked <b>-textvariable</b> will 
still be reflected in the entry, even if it is disabled or readonly.
</p>
<p>Typically, the text is "grayed-out" in the <b>disabled</b> state,
and a different background is used in the <b>readonly</b> state. 
</p>
<p>The entry widget sets the <b>invalid</b> state if revalidation fails,
and clears it whenever validation succeeds.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>entry(n)</ref>
</seealso>
<keywords>
<keyword>entry</keyword>
<keyword>widget</keyword>
<keyword>text field</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_frame" version="8.5" title="ttk_frame">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_frame.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_frame" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_frame</name>
<desc>Simple container widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::frame</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::frame</b> widget is a container, used to group other widgets
together.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-borderwidth</name>
<dbname>borderWidth</dbname>
<dbclass>BorderWidth</dbclass>
<desc>The desired width of the widget border.  Defaults to 0. 
</desc>
</optiondef>
<optiondef>
<name>-relief</name>
<dbname>relief</dbname>
<dbclass>Relief</dbclass>
<desc>One of the standard Tk border styles: 
<b>flat</b>, <b>groove</b>, <b>raised</b>, <b>ridge</b>,
<b>solid</b>, or <b>sunken</b>.
Defaults to <b>flat</b>.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Additional padding to include inside the border.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>If specified, the widget's requested width in pixels.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>If specified, the widget's requested height in pixels.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>Supports the standard widget commands
<b>configure</b>, <b>cget</b>, <b>instate</b>, and <b>state</b>;
see <i>ttk_widget(n)</i>.

</p>
</section>
<section>
<title>NOTES</title>
<p>Note that if the <cmd>pack</cmd>, <cmd>grid</cmd>, or other geometry managers
are used to manage the children of the <b cat="AMBIGUOUS widget cmd">frame</b>,
by the GM's requested size will normally take precedence
over the <b cat="AMBIGUOUS widget cmd">frame</b> widget's <b>-width</b> and <b>-height</b> options.
[<b>pack propagate</b>] and [<b>grid propagate</b>] can be used
to change this.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_labelframe(n)</ref>
<ref>frame(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>frame</keyword>
<keyword>container</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ttk_Geometry" version="8.5" title="Geometry">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     RCS: @(#) $Id: ttk_Geometry.3,v 1.2 2006/11/15 13:29:17 dkf Exp $
 -->
<?TROFF.TH title="Geometry" section="3" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>Ttk_MakeBox</name>
<name>Ttk_PadBox</name>
<name>Ttk_ExpandBox</name>
<name>Ttk_PackBox</name>
<name>Ttk_StickBox</name>
<name>Ttk_PlaceBox</name>
<name>Ttk_BoxContains</name>
<name>Ttk_MakePadding</name>
<name>Ttk_UniformPadding</name>
<name>Ttk_AddPadding</name>
<name>Ttk_RelievePadding</name>
<name>Ttk_GetPaddingFromObj</name>
<name>Ttk_GetBorderFromObj</name>
<name>Ttk_GetStickyFromObj</name>
<desc>Tk themed geometry utilities</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tkTheme.h&gt;</b>

Ttk_Box
<b>Ttk_MakeBox</b>(int <m>x</m>, int <m>y</m>, int <m>width</m>, int <m>height</m>);

Ttk_Box
<b>Ttk_PadBox</b>(Ttk_Box <m>parcel</m>, Ttk_Padding <m>padding</m>);

Ttk_Box
<b>Ttk_ExpandBox</b>(Ttk_Box <m>parcel</m>, Ttk_Padding <m>padding</m>);

Ttk_Box
<b>Ttk_PackBox</b>(Ttk_Box *<m>cavity</m>, int <m>width</m>, int <m>height</m>, Ttk_Side <m>side</m>);

Ttk_Box
<b>Ttk_StickBox</b>(Ttk_Box <m>parcel</m>, int <m>width</m>, int <m>height</m>, unsigned <m>sticky</m>);

Ttk_Box
<b>Ttk_PlaceBox</b>(Ttk_Box *<m>cavity</m>, int <m>width</m>, int <m>height</m>, Ttk_Side <m>side</m>, unsigned <m>sticky</m>);

Ttk_Box
<b>Ttk_AnchorBox</b>(Ttk_Box <m>parcel</m>, int <m>width</m>, int <m>height</m>, Tk_Anchor <m>anchor</m>);

Ttk_Padding
<b>Ttk_MakePadding</b>(short <m>left</m>, short <m>top</m>, short <m>right</m>, short <m>bottom</m>);

Ttk_Padding
<b>Ttk_UniformPadding</b>(short <m>border</m>);

Ttk_Padding
<b>Ttk_AddPadding</b>(Ttk_Padding <m>padding1</m>, Ttk_Padding <m>padding2</m>;

Ttk_Padding 
<b>Ttk_RelievePadding</b>(Ttk_Padding <m>padding</m>, int <m>relief</m>);

int
<b>Ttk_BoxContains</b>(Ttk_Box <m>box</m>, int <m>x</m>, int <m>y</m>);

int
<b>Ttk_GetPaddingFromObj</b>(Tcl_Interp *<m>interp</m>, Tk_Window <m>tkwin</m>, Tcl_Obj *<m>objPtr</m>, Ttk_Padding *<m>padding_rtn</m>);

int
<b>Ttk_GetBorderFromObj</b>(Tcl_Interp *<m>interp</m>, Tcl_Obj *<m>objPtr</m>, Ttk_Padding *<m>padding_rtn</m>);

int
<b>Ttk_GetStickyFromObj</b>(Tcl_Interp *<m>interp</m>, Tcl_Obj *<m>objPtr</m>, int *<m>sticky_rtn</m>);

</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Anchor</argtype>
<name>anchor</name>
<argmode>in</argmode>
<desc>One of the symbolic constants <b>TK_ANCHOR_N</b>, <b>TK_ANCHOR_NE</b>,
etc.  See <i>Tk_GetAnchorFromObj(3)</i>.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Box *</argtype>
<name>cavity</name>
<argmode>in/out</argmode>
<desc>A rectangular region from which a parcel is allocated.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name>border</name>
<argmode>in</argmode>
<desc>Extra padding (in pixels) to add uniformly to each side of a region.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name>bottom</name>
<argmode>in</argmode>
<desc>Extra padding (in pixels) to add to the bottom of a region.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Box</argtype>
<name>box</name>
<argmode>in</argmode>
<desc/>
</argdef>
<argdef>
<argtype>Ttk_Box *</argtype>
<name>box_rtn</name>
<argmode>out</argmode>
<desc>Specifies a rectangular region.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>height</name>
<argmode>in</argmode>
<desc>The height in pixels of a region.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Interp *</argtype>
<name>interp</name>
<argmode>in</argmode>
<desc>Used to store error messages.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>left</name>
<argmode>in</argmode>
<desc>Extra padding (in pixels) to add to the left side of a region.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *</argtype>
<name>objPtr</name>
<argmode>in</argmode>
<desc>String value contains a symbolic name 
to be converted to an enumerated value or bitmask.
Internal rep may be be modified to cache corresponding value.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Padding</argtype>
<name>padding</name>
<argmode>in</argmode>
<desc/>
</argdef>
<argdef>
<argtype>Ttk_Padding *</argtype>
<name>padding_rtn</name>
<argmode>out</argmode>
<desc>Extra padding to add on the inside of a region.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Box</argtype>
<name>parcel</name>
<argmode>in</argmode>
<desc>A rectangular region, allocated from a cavity.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>relief</name>
<argmode>in</argmode>
<desc>One of the standard Tk relief options 
(TK_RELIEF_RAISED, TK_RELIEF_SUNKEN, etc.).  
See <fun>Tk_GetReliefFromObj</fun>.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name>right</name>
<argmode>in</argmode>
<desc>Extra padding (in pixles) to add to the right side of a region.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Side</argtype>
<name>side</name>
<argmode>in</argmode>
<desc>One of <b>TTK_SIDE_LEFT</b>, <b>TTK_SIDE_TOP</b>, 
<b>TTK_SIDE_RIGHT</b>, or <b>TTK_SIDE_BOTTOM</b>.
</desc>
</argdef>
<argdef>
<argtype>unsigned</argtype>
<name>sticky</name>
<argmode>in</argmode>
<desc>A bitmask containing one or more of the bits
<b>TTK_STICK_W</b> (west, or left), 
<b>TTK_STICK_E</b> (east, or right, 
<b>TTK_STICK_N</b> (north, or top), and
<b>TTK_STICK_S</b> (south, or bottom).
<b>TTK_FILL_X</b> is defined as a synonym for (TTK_STICK_W|TTK_STICK_E),
<b>TTK_FILL_Y</b> is a synonym for (TTK_STICK_N|TTK_STICK_S),
and  <b>TTK_FILL_BOTH</b> and <b>TTK_STICK_ALL</b>
are synonyms for (TTK_FILL_X|TTK_FILL_Y).
See also: <i>grid(n)</i>.
</desc>
</argdef>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Window whose screen geometry determines 
the conversion between absolute units and pixels.
</desc>
</argdef>
<argdef>
<argtype>short</argtype>
<name>top</name>
<argmode>in</argmode>
<desc>Extra padding at the top of a region.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>width</name>
<argmode>in</argmode>
<desc>The width in pixels of a region.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>x</name>
<argmode>in</argmode>
<desc>X coordinate of upper-left corner of region.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>y</name>
<argmode>in</argmode>
<desc>Y coordinate of upper-left corner of region.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>BOXES</title>
<p>The <b>Ttk_Box</b> structure represents a rectangular region of a window: 
</p>
<syntax cat="type" name="Ttk_Box" scope="global">
typedef struct 	{
    int x;
    int y;
    int width;
    int height;
} Ttk_Box;
</syntax>
<p>All coordinates are relative to the window.
</p>
<p><b>Ttk_MakeBox</b> is a convenience routine that contsructs
a <b>Ttk_Box</b> structure representing a region <i>width</i> pixels
wide, <i>height</i> pixels tall, at the specified <i>x, y</i> coordinates.
</p>
<p><b>Ttk_PadBox</b> returns a new box located inside the specified <i>parcel</i>,
shrunken according to the left, top, right, and bottom margins 
specified by <i>padding</i>.
</p>
<p><b>Ttk_ExpandBox</b> is the inverse of <b>Ttk_PadBox</b>:
it returns a new box surrounding the specified <i>parcel</i>,
expanded  according to the left, top, right, and bottom margins 
specified by <i>padding</i>.
</p>
<p><b>Ttk_PackBox</b> allocates a parcel <i>width</i> by <i>height</i>
pixels wide on the specified <i>side</i> of the <i>cavity</i>,
and shrinks the <i>cavity</i> accordingly.
</p>
<p><b>Ttk_StickBox</b> places a box with the requested <i>width</i>
and <i>height</i> inside the <i>parcel</i> according to the 
<i>sticky</i> bits.
</p>
<p><b>Ttk_PlaceBox</b> combines <b>Ttk_PackBox</b> and <b>Ttk_StickBox</b>:
it allocates a parcel on the specified <i>side</i> of the <i>cavity</i>,
places a box of the requested size inside the parcel according to <i>sticky</i>,
and shrinks the <i>cavity</i>.
</p>
<p><b>Ttk_AnchorBox</b> places a box with the requested <i>width</i>
and <i>height</i> inside the <i>parcel</i> according to the
specified <i>anchor</i> option.
</p>
<p><b>Ttk_BoxContains</b> tests if the specified <i>x, y</i> coordinate
lies within the rectangular region <i>box</i>.
</p>
</section>
<section>
<title>PADDDING</title>
<p>The <b>Ttk_Padding</b> structure is used to represent 
borders, internal padding, and external margins:
</p>
<syntax cat="type" name="Ttk_Padding" scope="global">
typedef struct {
    short left;
    short top;
    short right;
    short bottom;
} Ttk_Padding;
</syntax>
<p><b>Ttk_MakePadding</b> is a convenience routine that contsructs
a <b>Ttk_Padding</b> structure with the specified left, top, right, and bottom
components.  
</p>
<p><b>Ttk_UniformPadding</b> constructs a <b>Ttk_Padding</b> structure
with all components equal to the specified <i>border</i>.
</p>
<p><b>Ttk_AddPadding</b> adds two <b>Ttk_Padding</b>s together
and returns a combined padding containing the sum of the
individual padding components.
</p>
<p><b>Ttk_RelievePadding</b> 
adds an extra 2 pixels of padding to <i>padding</i>
according to the specified <i>relief</i>.
If <i>relief</i> is <b>TK_RELIEF_SUNKEN</b>, 
adds two pixels at the top and left
so the inner region is shifted down and to the left.
If it is <b>TK_RELIEF_RAISED</b>, adds two pixels
at the bottom and right so 
the inner region is shifted up and to the right.
Otherwise, adds 1 pixel on all sides.
This is typically used in element geometry procedures to simulate 
a "pressed-in" look for pushbuttons.

</p>
</section>
<section>
<title>CONVERSION ROUTINES</title>
<p><b>Ttk_GetPaddingFromObj</b> converts the string in <i>objPtr</i>
to a <b>Ttk_Padding</b> structure.
The string representation is a list of 
up to four length specifications 
<i>"left top right bottom"</i>.  
If fewer than four elements are specified, 
<i>bottom</i> defaults to <i>top</i>,
<i>right</i> defaults to <i>left</i>, and 
<i>top</i> defaults to <i>left</i>.
See <b>Tk_GetPixelsFromObj(3)</b> for the syntax of length specifications.
</p>
<p><b>Ttk_GetBorderFromObj</b> is the same as <b>Ttk_GetPaddingFromObj</b>
except that the lengths are specified as integers 
(i.e., resolution-dependant values like <i>3m</i> are not allowed).
</p>
<p><b>Ttk_GetStickyFromObj</b> converts the string in <i>objPtr</i>
to a <i>sticky</i> bitmask.  The string contains zero or more
of the characters <b>n</b>, <b>s</b>, <b>e</b>, or <b>w</b>.

</p>
</section>
<seealso>
<ref>Tk_GetReliefFromObj(3)</ref>
<ref>Tk_GetPixelsFromObj(3)</ref>
<ref>Tk_GetAnchorFromObj(3)</ref>
</seealso>
<keywords>
<keyword>geometry</keyword>
<keyword>padding</keyword>
<keyword>margins</keyword>
<keyword>box</keyword>
<keyword>region</keyword>
<keyword>sticky</keyword>
<keyword>relief</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_image" version="8.5" title="ttk_image">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_image.n,v 1.5 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_image" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_image</name>
<desc>Define an element based on an image</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::style element create</b> <m>name</m> <b cat="AMBIGUOUS canvasitemtype cmd">image</b> <m>imageSpec</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <i>image</i> element factory creates a new element
in the current theme whose visual appearance is determined
by Tk images. 
<i>imageSpec</i> is a list of one or more elements.
The first element is the default image name.
The rest of the list is a sequence of <i>statespec / value</i>
pairs specifying other images to use when the element is
in a particular state or combination of states.

</p>
</section>
<section>
<title>OPTIONS</title>
<p>Valid <i>options</i> are:
</p>
<dl>
<dle>
<dt><b>-border</b> <m>padding</m></dt>
<dd><i>padding</i> is a list of up to four integers, specifying
the left, top, right, and bottom borders, respectively.
See <ref refid="image-stretching">IMAGE STRETCHING</ref>, below.
</dd>
</dle>
<dle>
<dt><b>-height</b> <m>height</m></dt>
<dd>Specifies a minimum height for the element.
If less than zero, the base image's height is used as a default.
</dd>
</dle>
<dle>
<dt/>
</dle>
<dle>
<dt><b>-padding</b> <m>padding</m></dt>
<dd>Specifies the element's interior padding.  Defaults to 
<i>-border</i> if not specified.
</dd>
</dle>
<dle>
<dt><b>-sticky</b> <m>spec</m></dt>
<dd>Specifies how the image is placed within the final parcel.
<i>spec</i> contains zero or more characters "n", "s", "w", or "e".
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>width</m></dt>
<dd>Specifies a minimum width for the element.
If less than zero, the base image's width is used as a default.

</dd>
</dle>
</dl>
</section>
<section id="image-stretching">
<title>IMAGE STRETCHING</title>
<p>If the element's allocated parcel is larger than the image, 
the image will be placed in the parcel based on the <b>-sticky</b> option.
If the image needs to stretch horizontally (i.e., <b>-sticky ew</b>)
or vertically (<b>-sticky ns</b>),
subregions of the image are replicated to fill the parcel
based on the <b>-border</b> option.
The <b>-border</b> divides the image into 9 regions: 
four fixed corners, top and left edges (which may be tiled horizontally),
left and right edges (which may be tiled vertically),
and the central area (which may be tiled in both directions).

</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
set img1 [image create photo -file button.png]
set img2 [image create photo -file button-pressed.png]
set img3 [image create photo -file button-active.png]
style element create Button.button image \
    [list $img1  pressed $img2  active $img3] \
   -border {2 4} -sticky we
</example>


</section>
<seealso>
<ref>image(n)</ref>
<ref>photo(n)</ref>
</seealso>
<keywords>
<keyword>pixmap theme</keyword>
<keyword>image</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_intro" version="8.5" title="ttk_intro">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_intro.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_intro" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_intro</name>
<desc>Introduction to the Tk theme engine</desc>
</namesection>


<section>
<title>OVERVIEW</title>
<p>The Tk themed widget set is based on a revised and enhanced version
of TIP #48 (http://tip.tcl.tk/48) specified style engine.
The main concepts are described below.
The basic idea is to separate, to the extent possible,
the code implementing a widget's behavior from
the code implementing its appearance.
Widget class bindings are primarily responsible for
maintaining the widget state and invoking callbacks;
all aspects of the widgets appearance is

</p>
</section>
<section>
<title>THEMES</title>
<p>A <i>theme</i> is a collection of elements and styles 
that determine the look and feel of the widget set.
Themes can be used to:
</p>
<ul>
<li>Isolate platform differences (X11 vs. classic Windows vs. XP vs. Aqua ...)
</li>
<li>Adapt to display limitations (low-color, grayscale, monochrome, tiny screens)
</li>
<li>Accessibility (high contrast, large type)
</li>
<li>Application suite "branding"
</li>
<li>Blend in with the rest of the desktop (Gnome, KDE, Java)
</li>
<li>And, of course: eye candy.

</li>
</ul>
</section>
<section>
<title>ELEMENTS</title>
<p>An <i>element</i> displays an individual part of a widget.
For example, a vertical scrollbar widget contains <b>uparrow</b>,
<b>downarrow</b>, <b>trough</b> and <b>slider</b> elements.
</p>
<p>Element names use a recursive dotted notation.
For example, <b>uparrow</b> identifies a generic arrow element,
and <b>Scrollbar.arrow</b> and <b>Combobox.uparrow</b> identify 
widget-specific elements.
When looking for an element, the style engine looks for
the specific name first, and if an element of that name is
not found it looks for generic elements by stripping off
successive leading components of the element name.
</p>
<p>Like widgets, elements have <i>options</i> which
specify what to display and how to display it.
For example, the <b cat="AMBIGUOUS widget canvasitemtype cmd">text</b> element 
(which displays a text string) has
<b>-text</b>, <b>-font</b>, <b>-foreground</b>, <b>-background</b>, 
<b>-underline</b>, and <b>-width</b> options.
The value of an element resource is taken from:
</p>
<ul>
<li>A dynamic setting specified by <b>style map</b> and the current state;
</li>
<li>An option of the same name and type in the widget containing the element;
</li>
<li>The default setting specified by <b>style default</b>; or
</li>
<li>The element's built-in default value for the resource.
</li>
</ul>
</section>
<section>
<title>LAYOUTS</title>
<p>A <i>layout</i> specifies which elements make up a widget
and how they are arranged.
The layout engine uses a simplified version of the <cmd>pack</cmd>
algorithm: starting with an initial cavity equal to the size
of the widget, elements are allocated a parcel within the cavity along
the side specified by the <b>-side</b> option,
and placed within the parcel according to the <b>-sticky</b>
option.
For example, the layout for a horizontal scrollbar 
</p>
<example>
style layout Horizontal.TScrollbar {
    Scrollbar.trough -children {
	Scrollbar.leftarrow -side left -sticky w
	Scrollbar.rightarrow -side right -sticky e
	Scrollbar.thumb -side left -expand true -sticky ew
    }
}
</example>
<p>By default, the layout for a widget is the same as its class name.
Some widgets may override this (for example, the <b cat="AMBIGUOUS widget cmd">scrollbar</b>
widget chooses different layouts based on the <b>-orient</b> option).

</p>
</section>
<section>
<title>STATES</title>
<p>In standard Tk, many widgets have a <b>-state</b> option
which (in most cases) is either <b>normal</b> or <b>disabled</b>.
Some widgets support additional states, such
as the <b cat="AMBIGUOUS widget cmd">entry</b> widget which has a <b>readonly</b> state
and the various flavors of buttons which have <b>active</b> state.
</p>
<p>The themed Tk widgets generalizes this idea:
every widget has a bitmap of independent state flags.
Widget state flags include <b>active</b>, <b>disabled</b>,
<b>pressed</b>, <cmd>focus</cmd>, etc., 
(see <i>ttk_widget(n)</i> for the full list of state flags).
</p>
<p>Instead of a <b>-state</b> option, every widget now has 
a <b>state</b> widget command which is used to set or query
the state.
A <i>state specification</i> is a list of symbolic state names
indicating which bits are set, each optionally prefixed with an 
exclamation point indicating that the bit is cleared instead.
</p>
<p>For example, the class bindings for the <b>tbutton</b>
widget are:
</p>
<example>
bind TButton &lt;Enter&gt;		{ %W state active }
bind TButton &lt;Leave&gt;		{ %W state !active }
bind TButton &lt;ButtonPress-1&gt;	{ %W state pressed }
bind TButton &lt;Button1-Leave&gt;	{ %W state !pressed }
bind TButton &lt;Button1-Enter&gt;	{ %W state pressed }
bind TButton &lt;ButtonRelease-1&gt;	\
    { %W instate {pressed} { %W state !pressed ; %W invoke } }
</example>
<p>This specifies that the widget becomes <b>active</b> when
the pointer enters the widget, and inactive when it leaves.
Similarly it becomes <b>pressed</b> when the mouse button is pressed,
and <b>!pressed</b> on the ButtonRelease event.
In addition, the button unpresses if 
pointer is dragged outside the widget while Button-1 is held down,
and represses if it's dragged back in.
Finally, when the mouse button is released, the widget's
<b>-command</b> is invoked, but only if the button is currently
in the <b>pressed</b> state.
(The actual bindings are a little more complicated than the above,
but not by much).
</p>
<p><i>Note to self: rewrite that paragraph.  It's horrible.</i>

</p>
</section>
<section>
<title>STYLES</title>
<p>Each widget is associated with a <i>style</i>, 
which specifies values for element resources.
Style names use a recursive dotted notation like layouts and elements;
by default, widgets use the class name to look up a style in the current theme.
For example:
</p>
<example>
style default TButton \
	-background #d9d9d9 \
	-foreground black \
	-relief raised \
	;
</example>
<p>Many elements are displayed differently depending on the widget state.  
For example, buttons have a different background when they are active,
a different foreground when disabled, and a different relief when pressed.
The <b>style map</b> command specifies dynamic resources
for a particular style:
</p>
<example>
style map TButton \
	-background [list disabled #d9d9d9  active #ececec] \
	-foreground [list disabled #a3a3a3] \
	-relief [list {pressed !disabled} sunken] \
	;
</example>


</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_style(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_label" version="8.5" title="ttk_label">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_label.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_label" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_label</name>
<desc>Display a text string and/or image</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::label</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::label</b> widget displays a textual label and/or image.
The label may be linked to a Tcl variable 
to automatically change the displayed text.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-compound</li>
<li>-cursor</li>
<li>-image</li>
<li>-style</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-width</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-anchor</name>
<dbname>anchor</dbname>
<dbclass>Anchor</dbclass>
<desc>Specifies how the information in the widget is positioned
relative to the inner margins.  Legal values are
<b>n</b>, <b>ne</b>, <b>e</b>, <b>se</b>,
<b>s</b>, <b>sw</b>, <b>w</b>, <b>nw</b>, and <b>center</b>.
See also <b>-justify</b>.
</desc>
</optiondef>
<optiondef>
<name>-background</name>
<dbname>frameColor</dbname>
<dbclass>FrameColor</dbclass>
<desc>The widget's background color.  
If unspecified, the theme default is used.
</desc>
</optiondef>
<optiondef>
<name>-font</name>
<dbname>font</dbname>
<dbclass>Font</dbclass>
<desc>Font to use for label text.
</desc>
</optiondef>
<optiondef>
<name>-foreground</name>
<dbname>textColor</dbname>
<dbclass>TextColor</dbclass>
<desc>The widget's foreground color.
If unspecified, the theme default is used.
</desc>
</optiondef>
<optiondef>
<name>-justify</name>
<dbname>justify</dbname>
<dbclass>Justify</dbclass>
<desc>If there are multiple lines of text, specifies how
the lines are laid out relative to one another.
One of <b>left</b>, <b>center</b>, or <b>right</b>.
See also <b>-anchor</b>.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Specifies the amount of extra space to allocate for the widget.
The padding is a list of up to four length specifications 
<i>left top right bottom</i>.
If fewer than four elements are specified, 
<i>bottom</i> defaults to <i>top</i>,
<i>right</i> defaults to <i>left</i>, and 
<i>top</i> defaults to <i>left</i>.
</desc>
</optiondef>
<optiondef>
<name>-relief</name>
<dbname>relief</dbname>
<dbclass>Relief</dbclass>
<desc>Specifies the 3-D effect desired for the widget border.
Valid values are
<b>flat</b>, <b>groove</b>, <b>raised</b>, <b>ridge</b>, <b>solid</b>, 
and <b>sunken</b>.
</desc>
</optiondef>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>Specifies a text string to be displayed inside the widget
(unless overridden by <b>-textvariable</b>).
</desc>
</optiondef>
<optiondef>
<name>-wraplength</name>
<dbname>wrapLength</dbname>
<dbclass>WrapLength</dbclass>
<desc>Specifies the maximum line length (in pixels).
If this option is less than or equal to zero,
then automatic wrapping is not performed; otherwise
the text is split into lines such that no line is longer
than the specified value.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>stateSpec</m> ?<m>script</m>?</dt>
<dd/>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>See <i>ttk_widget(n)</i>

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>label(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_labelframe" version="8.5" title="ttk_labelframe">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_labelframe.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_labelframe" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_labelframe</name>
<desc>Container widget with optional label</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::labelframe</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::labelframe</b> widget is a container used to group other widgets
together.  It has an optional label, which may be a plain text string or
another widget.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-labelanchor</name>
<dbname>labelAnchor</dbname>
<dbclass>LabelAnchor</dbclass>
<desc>Specifies where to place the label.  
Allowed values are (clockwise from the top upper left corner):
<b>nw</b>, <b>n</b>, <b>ne</b>, <b>en</b>, <b>e</b>, <b>es</b>,
<b>se</b>, <b>s</b>,<b>sw</b>, <b>ws</b>, <b>w</b> and <b>wn</b>.
The default value is theme-dependent.
</desc>
</optiondef>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>Specifies the text of the label.
</desc>
</optiondef>
<optiondef>
<name>-underline</name>
<dbname>underline</dbname>
<dbclass>Underline</dbclass>
<desc>If set, specifies the integer index (0-based) of a character to 
underline in the text string.
The underlined character is used for mnemonic activation.  
Mnemonic activation for a <b>ttk::labelframe</b> 
sets the keyboard focus to the first child of the <b>ttk::labelframe</b> widget.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Additional padding to include inside the border.
</desc>
</optiondef>
<optiondef>
<name>-labelwidget</name>
<dbname>labelWidget</dbname>
<dbclass>LabelWidget</dbclass>
<desc>The name of a widget to use for the label.
If set, overrides the <b>-text</b> option.
The <b>-labelwidget</b> must be a child of the <b cat="AMBIGUOUS widget cmd">labelframe</b> widget
or one of the <b cat="AMBIGUOUS widget cmd">labelframe</b>'s ancestors, and must belong to the
same top-level widget as the <b cat="AMBIGUOUS widget cmd">labelframe</b>.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>If specified, the widget's requested width in pixels.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>If specified, the widget's requested height in pixels.
(See <i>ttk_frame(n)</i> for further notes on <b>-width</b> and <b>-height</b>).

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>Supports the standard widget commands
<b>configure</b>, <b>cget</b>, <b>instate</b>, and <b>state</b>;
see <i>ttk_widget(n)</i>.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_frame(n)</ref>
<ref>labelframe(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>frame</keyword>
<keyword>container</keyword>
<keyword>label</keyword>
<keyword>groupbox</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_menubutton" version="8.5" title="ttk_menubutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_menubutton.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_menubutton" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_menubutton</name>
<desc>Widget that pops down a menu when pressed</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::menubutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::menubutton</b> widget displays a textual label and/or image,
and displays a menu when pressed.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-compound</li>
<li>-cursor</li>
<li>-image</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-width</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-direction</name>
<dbname>direction</dbname>
<dbclass>Direction</dbclass>
<desc>Specifies where the menu is to be popped up relative 
to the menubutton.  
One of: <i>above</i>, <i>below</i>, <i>left</i>, <i>right</i>,
or <i>flush</i>.  The default is <i>below</i>.  
<i>flush</i> pops the menu up directly over the menubutton.
</desc>
</optiondef>
<optiondef>
<name>-menu</name>
<dbname>menu</dbname>
<dbclass>Menu</dbclass>
<desc>Specifies the path name of the menu associated with the menubutton.
To be on the safe side, the menu ought to be a direct child of the
menubutton.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>Menubutton widgets support the standard 
<b>cget</b>, <b>configure</b>, <b>instate</b>, and <b>state</b> 
methods.  No other widget methods are used.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>menu(n)</ref>
<ref>menubutton(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>button</keyword>
<keyword>menu</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_notebook" version="8.5" title="ttk_notebook">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_notebook.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_notebook" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_notebook</name>
<desc>Multi-paned container widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::notebook</b> <m>pathName</m> ?<m>options</m>?

<m>pathName</m> <b>add</b> <m>pathName</m>.<m>subwindow</m> ?<m>options...</m>?
<m>pathName</m> <b>insert</b> <m>index</m> <m>pathName</m>.<m>subwindow</m> ?<m>options...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::notebook</b> widget manages a collection of subpanes 
and displays a single one at a time.
Each pane is associated with a tab, which the user
may select to change the currently-displayed pane.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>If present and greater than zero, 
specifies the desired height of the pane area
(not including internal padding or tabs).
Otherwise, the maximum height of all panes is used.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Specifies the amount of extra space to add around the outside
of the notebook.
The padding is a list of up to four length specifications 
<i>left top right bottom</i>.
If fewer than four elements are specified, 
<i>bottom</i> defaults to <i>top</i>,
<i>right</i> defaults to <i>left</i>, and 
<i>top</i> defaults to <i>left</i>.
</desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>If present and greater than zero, 
specifies the desired width of the pane area
(not including internal padding).
Otherwise, the maximum width of all panes is used.
</desc>
</optiondef>
</optionlist>
</section>
<section id="tab-options">
<title>TAB OPTIONS</title>
<p>The following options may be specified for individual notebook panes:
</p>
<optionlist>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>Either <b>normal</b>, <b>disabled</b> or <b>hidden</b>.  
If <b>disabled</b>, then the tab is not selectable. If <b>hidden</b>,
then the tab is not shown.
</desc>
</optiondef>
<optiondef>
<name>-sticky</name>
<dbname>sticky</dbname>
<dbclass>Sticky</dbclass>
<desc>Specifies how the child pane is positioned within the pane area.
Value is a string containing zero or more of the characters
<b>n, s, e,</b> or <b>w</b>.
Each letter refers to a side (north, south, east, or west) 
that the child window will "stick" to,
as per the <cmd>grid</cmd> geometry manager.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Specifies the amount of extra space to add between the notebook and this pane.
Syntax is the same as for the widget <b>-padding</b> option.
</desc>
</optiondef>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>Specifies a string to be displayed in the tab.
</desc>
</optiondef>
<optiondef>
<name>-image</name>
<dbname>image</dbname>
<dbclass>Image</dbclass>
<desc>Specifies an image to display in the tab,
which must have been created with the <b>image create</b> command.
</desc>
</optiondef>
<optiondef>
<name>-compound</name>
<dbname>compound</dbname>
<dbclass>Compound</dbclass>
<desc>Specifies how to display the image relative to the text,
in the case both <b>-text</b> and <b>-image</b> are present.
See <i>label(n)</i> for legal values.
</desc>
</optiondef>
<optiondef>
<name>-underline</name>
<dbname>underline</dbname>
<dbclass>Underline</dbclass>
<desc>Specifies the integer index (0-based) of a character to underline 
in the text string.
The underlined character is used for mnemonic activation
if <b>ttk::notebook::enableTraversal</b> is called.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathname</m> <b>add</b> <m>child</m> ?<m>options...</m>?</dt>
<dd>Adds a new tab to the notebook.
When the tab is selected, the <i>child</i> window
will be displayed.
<i>child</i> must be a direct child of the notebook window.
See <ref refid="tab-options">TAB OPTIONS</ref> for the list of available <i>options</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>configure</b> ?<m>options</m>?</dt>
<dd>See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>cget</b> <m>option</m></dt>
<dd>See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>forget</b> <m>tabid</m></dt>
<dd>Removes the tab specified by <i>tabid</i>,
unmaps and unmanages the associated child window.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>index</b> <m>tabid</m></dt>
<dd>Returns the numeric index of the tab specified by <i>tabid</i>,
or the total number of tabs if <i>tabid</i> is the string "<b>end</b>".
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>insert</b> <m>pos</m> <m>subwindow</m> <m>options...</m></dt>
<dd>Inserts a pane at the specified position.
<i>pos</i> is either the string <b>end</b>, an integer index, 
or the name of a managed subwindow.
If <i>subwindow</i> is already managed by the notebook, 
moves it to the specified position.
See <ref refid="tab-options">TAB OPTIONS</ref> for the list of available options.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>instate</b> <m>statespec</m> ?<m>script...</m>?</dt>
<dd>See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>select</b> ?<m>tabid</m>?</dt>
<dd>Selects the specified tab.  The associated child pane will be displayed,
and the previously-selected pane (if different) is unmapped.
If <i>tabid</i> is omitted, returns the widget name of the
currently selected pane.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>state</b> ?<m>statespec</m>?</dt>
<dd>See <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>tab</b> <m>tabid</m> ?<m>-options</m> ?<m>value ...</m></dt>
<dd>Query or modify the options of the specific tab.
If no <i>-option</i> is specified, returns a dictionary of the tab option values.
If one <i>-option</i> is specified, returns the value of that <i>option</i>.
Otherwise, sets the <i>-option</i>s to the corresponding <i>value</i>s.
See <ref refid="tab-options">TAB OPTIONS</ref> for the available options.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>tabs</b></dt>
<dd>Returns a list of all windows managed by the widget.

</dd>
</dle>
</dl>
</section>
<section>
<title>KEYBOARD TRAVERSAL</title>
<p>To enable keyboard traversal for a toplevel window
containing a notebook widget <i>$nb</i>, call:
</p>
<example>
ttk::notebook::enableTraversal $nb
</example>
<p>This will extend the bindings for the toplevel widget
containing the notebook as follows:
</p>
<ul>
<li><b>Control-Tab</b> selects the tab following the currently selected one.
</li>
<li><b>Shift-Control-Tab</b> selects the tab preceding the currently selected one.
</li>
<li><b>Alt-K</b>, where <b>K</b> is the mnemonic (underlined) character
of any tab, will select that tab.
</li>
</ul>
<p>Multiple notebooks in a single toplevel may be enabled for traversal,
including nested notebooks.  
However, notebook traversal only works properly if all panes
are direct children of the notebook.

</p>
</section>
<section>
<title>TAB IDENTIFIERS</title>
<p>The <i>tabid</i> argument to the above commands may take
any of the following forms:
</p>
<ul>
<li>An integer between zero and the number of tabs;
</li>
<li>The name of a child pane window;
</li>
<li>A positional specification of the form "@<i>x</i>,<i>y</i>",
which identifies the tab 
</li>
<li>The literal string "<b>current</b>",
which identifies the currently-selected tab; or:
</li>
<li>The literal string "<b>end</b>",
which returns the number of tabs 
(only valid for "<i>pathname</i> <b>index</b>").

</li>
</ul>
</section>
<section>
<title>VIRTUAL EVENTS</title>
<p>The notebook widget generates a <b>&lt;&lt;NotebookTabChanged&gt;&gt;</b>
virtual event after a new tab is selected.

</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
notebook .nb
.nb add [frame .nb.f1] -text "First tab"
.nb add [frame .nb.f2] -text "Second tab"
.nb select .nb.f2
ttk::notebook::enableTraversal .nb
</example>


</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>grid(n)</ref>
</seealso>
<keywords>
<keyword>pane</keyword>
<keyword>tab</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_panedwindow" version="8.5" title="ttk_panedwindow">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_panedwindow.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_panedwindow" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_panedwindow</name>
<desc>Multi-pane container window</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::panedwindow</b> <m>pathName</m> ?<m>options</m>?

<m>pathName</m> <b>add</b> <m>pathName.subwindow</m> ?<m>options...</m>?
<m>pathName</m> <b>insert</b> <m>index</m> <m>pathName.subwindow</m> ?<m>options...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::panedwindow</b> widget displays a number of subwindows, stacked
either vertically or horizontally.  The user may adjust the relative sizes
of the subwindows by dragging the sash between panes.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-orient</name>
<dbname>orient</dbname>
<dbclass>Orient</dbclass>
<desc>Specifies the orientation of the window.
If <b>vertical</b>, subpanes are stacked top-to-bottom;
if <b>horizontal</b>, subpanes are stacked left-to-right.

</desc>
</optiondef>
</optionlist>
</section>
<section id="pane-options">
<title>PANE OPTIONS</title>
<p>The following options may be specified for each pane:
</p>
<optionlist>
<optiondef>
<name>-weight</name>
<dbname>weight</dbname>
<dbclass>Weight</dbclass>
<desc>An integer specifying the relative stretchability of the pane.
When the paned window is resized, the extra space is added
or subracted to each pane proportionally to its <b>-weight</b>.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>Supports the standard <b>configure</b>, <b>cget</b>, <b>state</b>, 
and <b>instate</b> commands; see <i>ttk_widget(n)</i> for details.
Additional commands:
</p>
<dl>
<dle>
<dt><m>pathname</m> <b>add</b> <m>subwindow</m> <m>options...</m></dt>
<dd>Adds a new pane to the window.
<i>subwindow</i> must be a direct child of the paned window <i>pathname</i>.
See <ref refid="pane-options">PANE OPTIONS</ref> for the list of available options.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>forget</b> <m>pane</m></dt>
<dd>Removes the specified subpane from the widget.
<i>pane</i> is either an integer index or the name of a managed subwindow.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>insert</b> <m>pos</m> <m>subwindow</m> <m>options...</m></dt>
<dd>Inserts a pane at the specified position.
<i>pos</i> is either the string <b>end</b>, an integer index, 
or the name of a managed subwindow.
If <i>subwindow</i> is already managed by the paned window, 
moves it to the specified position.
See <ref refid="pane-options">PANE OPTIONS</ref> for the list of available options.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>pane</b> <m>pane -option</m> ?<m>value</m> ?<m>-option value...</m></dt>
<dd>Query or modify the options of the specified <i>pane</i>,
where <i>pane</i> is either an integer index or the name of a managed subwindow.
If no <i>-option</i> is specified, returns a dictionary of the pane 
option values.
If one <i>-option</i> is specified, returns the value of that <i>option</i>.
Otherwise, sets the <i>-option</i>s to the corresponding <i>value</i>s.

</dd>
</dle>
</dl>
</section>
<section>
<title>INTERNAL ROUTINES</title>
<p>The following routines are used internally by the <b>paned</b> widget
binding code.
</p>
<dl>
<dle>
<dt><m>pathname</m> <b>sashpos</b> <m>index</m> ?<m>newpos</m>?</dt>
<dd>If <i>newpos</i> is specified, sets the sash position 
(subject to constraints).
Returns the position of sash number <i>index</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns a list consisting of the sash index at point <i>x,y</i>
and the name of the sash subelement at that point.
Returns the empty list if <i>x,y</i> is not over a sash.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_notebook(n)</ref>
<ref>panedwindow(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_progressbar" version="8.5" title="ttk_progressbar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2005 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_progressbar.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_progressbar" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_progressbar</name>
<desc>Provide progress feedback</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::progressbar</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::progressbar</b> widget shows the status of a long-running
operation.  They can operate in two modes: <i>determinate</i> mode shows the
amount completed relative to the total amount of work to be done, and
<i>indeterminate</i> mode provides an animated display to let the user know
that something is happening.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-orient</name>
<dbname>orient</dbname>
<dbclass>Orient</dbclass>
<desc>One of <b>horizontal</b> or <b>vertical</b>.
Specifies the orientation of the progress bar.
</desc>
</optiondef>
<optiondef>
<name>-length</name>
<dbname>length</dbname>
<dbclass>Length</dbclass>
<desc>Specifies the length of the long axis of the progress bar
(width if horizontal, height if vertical).
</desc>
</optiondef>
<optiondef>
<name>-mode</name>
<dbname>mode</dbname>
<dbclass>Mode</dbclass>
<desc>One of <b>determinate</b> or <b>indeterminate</b>.
</desc>
</optiondef>
<optiondef>
<name>-maximum</name>
<dbname>maximum</dbname>
<dbclass>Maximum</dbclass>
<desc>A floating point number specifying the maximum <b>-value</b>.
Defaults to 100.
</desc>
</optiondef>
<optiondef>
<name>-value</name>
<dbname>value</dbname>
<dbclass>Value</dbclass>
<desc>The current value of the progress bar.
In <i>determinate</i> mode, this represents the amount of work completed.
In <i>indeterminate</i> mode, it is interpreted modulo <b>-maximum</b>;
that is, the progress bar completes one "cycle" when
the <b>-value</b> increases by <b>-maximum</b>.
</desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>The name of a Tcl variable which is linked to the <b>-value</b>.
If specified, the <b>-value</b> of the progress bar is 
automatically set to the value of the variable whenever 
the latter is modified.
</desc>
</optiondef>
<optiondef>
<name>-phase</name>
<dbname>phase</dbname>
<dbclass>Phase</dbclass>
<desc>Read-only option.
The widget periodically increments the value of this option 
whenever the <b>-value</b> is greater than 0 and,
in <i>determinate</i> mode, less than <b>-maximum</b>.
This option may be used by the current theme 
to provide additional animation effects.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the specified <i>option</i>; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Modify or query widget options; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>statespec</m> ?<m>script</m>?</dt>
<dd>Test the widget state; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>start</b> ?<m>interval</m>?</dt>
<dd>Begin autoincrement mode:
schedules a recurring timer event that calls <b>step</b> 
every <i>interval</i> milliseconds.
If omitted, <i>interval</i> defaults to 50 milliseconds (20 steps/second).
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>Modify or query the widget state; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>step</b> ?<m>amount</m>?</dt>
<dd>Increments the <b>-value</b> by <i>amount</i>.  
<i>amount</i> defaults to 1.0 if omitted.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>stop</b></dt>
<dd>Stop autoincrement mode:
cancels any recurring timer event initiated by <i>pathName</i> <b>start</b>.

</dd>
</dle>
</dl>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_radiobutton" version="8.5" title="ttk_radiobutton">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_radiobutton.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_radiobutton" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_radiobutton</name>
<desc>Mutually exclusive option widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::radiobutton</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>ttk::radiobutton</b> widgets are used in groups to show or change
a set of mutually-exclusive options.
Radiobuttons are linked to a Tcl variable,
and have an associated value; when a radiobutton is clicked,
it sets the variable to its associated value.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-compound</li>
<li>-cursor</li>
<li>-image</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
<li>-text</li>
<li>-textvariable</li>
<li>-underline</li>
<li>-width</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>A Tcl script to evaluate whenever the widget is invoked.
</desc>
</optiondef>
<optiondef>
<name>-value</name>
<dbname>Value</dbname>
<dbclass>Value</dbclass>
<desc>The value to store in the associated <i>-variable</i> 
when the widget is selected. 
</desc>
</optiondef>
<optiondef>
<name>-variable</name>
<dbname>variable</dbname>
<dbclass>Variable</dbclass>
<desc>The name of a global variable whose value is linked to the widget.
Default value is <b>::selectedButton</b>.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>In addition to the standard 
<b>cget</b>, <b>configure</b>, <b>instate</b>, and <b>state</b> 
commands, radiobuttons support the following additional
widget commands:
</p>
<dl>
<dle>
<dt><m>pathname</m> invoke</dt>
<dd>Sets the <i>-variable</i> to the <i>-value</i>, selects the widget,
and evaluates the associated <i>-command</i>.  
Returns the result of the <i>-command</i>, or the empty
string if no <i>-command</i> is specified.

</dd>
</dle>
</dl>
</section>
<section>
<title>WIDGET STATES</title>
<p>The widget does not respond to user input if the <b>disabled</b> state is set.
The widget sets the <b>selected</b> state whenever 
the linked <b>-variable</b> is set to the widget's <b>-value</b>,
and clears it otherwise.
The widget sets the <b>alternate</b> state whenever the 
linked <b>-variable</b> is unset.  
(The <b>alternate</b> state may be used to indicate a ``tri-state'' 
or ``indeterminate'' selection.)

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>ttk_checkbutton(n)</ref>
<ref>radiobutton(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>button</keyword>
<keyword>option</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_scrollbar" version="8.5" title="ttk_scrollbar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     SOURCE: tk/doc/scrollbar.n, r1.4
     RCS: @(#) $Id: ttk_scrollbar.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_scrollbar" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_scrollbar</name>
<desc>Control the viewport of a scrollable widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::scrollbar</b> <m>pathName</m> ?<m>options...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p><b>ttk::scrollbar</b> widgets are typically linked to an associated window
that displays a document of some sort, such as a file being edited or a
drawing.
A scrollbar displays a <i>thumb</i> in the middle portion of the scrollbar,
whose position and size provides information about the portion of the
document visible in the associated window.
The thumb may be dragged by the user to control the visible region.
Depending on the theme, two or more arrow buttons may also be present;
these are used to scroll the visible region in discrete units.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-command</name>
<dbname>command</dbname>
<dbclass>Command</dbclass>
<desc>A Tcl script prefix to evaluate 
to change the view in the widget associated with the scrollbar.
Additional arguments are appended to the value of this option,
as described in <ref refid="scrolling-commands">SCROLLING COMMANDS</ref> below,
whenever the user requests a view change by manipulating the scrollbar.
<br/>This option typically consists of a two-element list,
containing the name of a scrollable widget followed by
either <b>xview</b> (for horizontal scrollbars)
or <b>yview</b> (for vertical scrollbars).
</desc>
</optiondef>
<optiondef>
<name>-orient</name>
<dbname>orient</dbname>
<dbclass>Orient</dbclass>
<desc>One of <b>horizontal</b> or <b>vertical</b>.
Specifies the orientation of the scrollbar.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the specified <i>option</i>; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Modify or query widget options; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>get</b></dt>
<dd>Returns the scrollbar settings in the form of a list whose
elements are the arguments to the most recent <b cat="AMBIGUOUS ambiguous cmd">set</b> widget command.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>statespec</m> ?<m>script</m>?</dt>
<dd>Test the widget state; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>set</b> <m>first last</m></dt>
<dd>This command is normally invoked by the scrollbar's associated widget 
from an <b>-xscrollcommand</b> or <b>-yscrollcommand</b> callback.
Specifies the visible range to be displayed.
<i>first</i> and <i>last</i> are real fractions between 0 and 1.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>Modify or query the widget state; see <i>ttk_widget(n)</i>.

</dd>
</dle>
</dl>
</section>
<section>
<title>INTERNAL COMMANDS</title>
<p>The following widget commands are used internally
by the TScrollbar widget class bindings.
</p>
<dl>
<dle>
<dt><m>pathName</m> <b>delta</b> <m>deltaX deltaY</m></dt>
<dd>Returns a real number indicating the fractional change in
the scrollbar setting that corresponds to a given change
in thumb position.  For example, if the scrollbar is horizontal,
the result indicates how much the scrollbar setting must change
to move the thumb <i>deltaX</i> pixels to the right (<i>deltaY</i> is
ignored in this case).
If the scrollbar is vertical, the result indicates how much the
scrollbar setting must change to move the thumb <i>deltaY</i> pixels
down.  The arguments and the result may be zero or negative.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>fraction</b> <m>x y</m></dt>
<dd>Returns a real number between 0 and 1 indicating where the point
given by <i>x</i> and <i>y</i> lies in the trough area of the scrollbar,
where 0.0 corresponds to the top or left of the trough
and 1.0 corresponds to the bottom or right.
<i>X</i> and <i>y</i> are pixel coordinates relative to the scrollbar
widget.
If <i>x</i> and <i>y</i> refer to a point outside the trough, the closest
point in the trough is used.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>identify</b> <m>x y</m></dt>
<dd>Returns the name of the element under the point given 
by <i>x</i> and <i>y</i>, or an empty string if the point does
not lie in any element of the scrollbar.
<i>X</i> and <i>y</i> are pixel coordinates relative to the scrollbar widget.

</dd>
</dle>
</dl>
</section>
<section id="scrolling-commands">
<title>SCROLLING COMMANDS</title>
<p>When the user interacts with the scrollbar, for example by dragging
the thumb, the scrollbar notifies the associated widget that it
must change its view.
The scrollbar makes the notification by evaluating a Tcl command
generated from the scrollbar's <b>-command</b> option.
The command may take any of the following forms.
In each case, <i>prefix</i> is the contents of the
<b>-command</b> option, which usually has a form like <b>.t yview</b>
</p>
<dl>
<dle>
<dt><m>prefix</m> <b>moveto</b> <m>fraction</m></dt>
<dd><i>Fraction</i> is a real number between 0 and 1.
The widget should adjust its view so that the point given
by <i>fraction</i> appears at the beginning of the widget.
If <i>fraction</i> is 0 it refers to the beginning of the
document.  1.0 refers to the end of the document, 0.333
refers to a point one-third of the way through the document,
and so on.
</dd>
</dle>
<dle>
<dt><m>prefix</m> <b>scroll</b> <m>number</m> <b>units</b></dt>
<dd>The widget should adjust its view by <i>number</i> units.
The units are defined in whatever way makes sense for the widget,
such as characters or lines in a text widget.
<i>Number</i> is either 1, which means one unit should scroll off
the top or left of the window, or -1, which means that one unit
should scroll off the bottom or right of the window.
</dd>
</dle>
<dle>
<dt><m>prefix</m> <b>scroll</b> <m>number</m> <b>pages</b></dt>
<dd>The widget should adjust its view by <i>number</i> pages.
It is up to the widget to define the meaning of a page;  typically
it is slightly less than what fits in the window, so that there
is a slight overlap between the old and new views.
<i>Number</i> is either 1, which means the next page should
become visible, or -1, which means that the previous page should
become visible.

</dd>
</dle>
</dl>
</section>
<section>
<title>WIDGET STATES</title>
<p>The scrollbar automatically sets the <b>disabled</b> state bit.
when the entire range is visible (range is 0.0 to 1.0),
and clears it otherwise.
It also sets the <b>active</b> and <b>pressed</b> state flags
of individual elements, based on the position and state of the mouse pointer.

</p>
</section>
<section>
<title>EXAMPLE</title>
<example>
set f [frame .f]
ttk::scrollbar $f.hsb -orient horizontal -command [list $f.t xview]
ttk::scrollbar $f.vsb -orient vertical -command [list $f.t yview]
text $f.t -xscrollcommand [list $f.hsb set] -yscrollcommand [list $f.vsb set] 
grid $f.t -row 0 -column 0 -sticky nsew
grid $f.vsb -row 0 -column 1 -sticky nsew
grid $f.hsb -row 1 -column 0 -sticky nsew
grid columnconfigure $f 0 -weight 1
grid rowconfigure $f 0 -weight 1
</example>


</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>scrollbar(n)</ref>
</seealso>
<keywords>
<keyword>scrollbar</keyword>
<keyword>widget</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_separator" version="8.5" title="ttk_separator">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_separator.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_separator" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_separator</name>
<desc>Separator bar</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::separator</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::separator</b> widget displays a horizontal or vertical separator
bar.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-orient</name>
<dbname>orient</dbname>
<dbclass>Orient</dbclass>
<desc>One of <b>horizontal</b> or <b>vertical</b>.
Specifies the orientation of the separator.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<p>Separator widgets support the standard 
<b>cget</b>, <b>configure</b>, <b>instate</b>, and <b>state</b> 
methods.  No other widget methods are used.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>separator</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_sizegrip" version="8.5" title="ttk_sizegrip">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2006 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_sizegrip.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_sizegrip" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_sizegrip</name>
<desc>Bottom-right corner resize widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::sizegrip</b> <m>pathName</m> ?<m>options</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>A <b>ttk::sizegrip</b> widget (also known as a <i>grow box</i>)
allows the user to resize the containing toplevel window
by pressing and dragging the grip.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-state</li>
<li>-style</li>
<li>-takefocus</li>
</sl>
</section>


<section>
<title>WIDGET COMMAND</title>
<p>Sizegrip widgets support the standard 
<b>cget</b>, <b>configure</b>, <b>instate</b>, and <b>state</b> 
methods.  No other widget methods are used.

</p>
</section>
<section>
<title>PLATFORM-SPECIFIC NOTES</title>
<p>On Mac OSX, toplevel windows automatically include a built-in
size grip by default.
Adding an <b>ttk::sizegrip</b> there is harmless, since 
the built-in grip will just mask the widget. 
</p>
</section>
<section>
<title>EXAMPLES</title>
<example>
# Using pack:
pack [ttk::frame $top.statusbar] -side bottom -fill x
pack [ttk::sizegrip $top.statusbar.grip -side right -anchor se]

# Using grid:
grid [ttk::sizegrip $top.statusbar.grip] \
    -row $lastRow -column $lastColumn -sticky se
# ... optional: add vertical scrollbar in $lastColumn,
# ... optional: add horizontal scrollbar in $lastRow
</example>


</section>
<section>
<title>BUGS</title>
<p>If the containing toplevel's position was specified
relative to the right or bottom of the sceen 
(e.g., <b>[wm geometry ...</b> <i>w</i><b>x</b><i>h</i><b>-</b><i>x</i><b>-</b><i>y</i><b>]</b>
instead of <b>[wm geometry ...</b> <i>w</i><b>x</b><i>h</i><b>+</b><i>x</i><b>+</b><i>y</i><b>]</b>),
the sizegrip widget will not resize the window.
</p>
<p>ttk::sizegrip widgets only support "southeast" resizing.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
</seealso>
<keywords>
<keyword>widget</keyword>
<keyword>sizegrip</keyword>
<keyword>grow box</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="ttk_style" version="8.5" title="ttk_style">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
     
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_style.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_style" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_style</name>
<desc>Control overall look and feel of widgets</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::style</b> <m>option</m> ?<m>args</m>?
</syntax>
</synopsis>


<section>
<title>NOTES</title>
<p>This manpage has not been written yet.
Please see the Tcl'2004 conference presentation,
available at http://tktable.sourceforge.net/tile/tile-tcl2004.pdf

</p>
</section>
<section>
<title>DEFINITIONS</title>
<p>Each widget is assigned a <i>style</i>,
which specifies the set of elements making up the widget
and how they are arranged, along with dynamic and default
settings for element resources.
By default, the style name is the same as the widget's class;
this may be overridden by the <b>-style</b> option. 
</p>
<p>A <i>theme</i> is a collection of elements and styles 
which controls the overall look and feel of an application.
</p>
</section>
<section>
<title>DESCRIPTION</title>
<p>The <b>ttk::style</b> command takes the following arguments:
</p>
<dl>
<dle>
<dt><b>ttk::style configure</b> <m>style</m> ?<m>-option</m> ?<m>value option value...</m>? ?</dt>
<dd>Sets the default value of the specified option(s) in <i>style</i>.
</dd>
</dle>
<dle>
<dt><b>ttk::style map</b> <m>style</m> ?<m>-option</m> { <m>statespec value</m> } ... ?</dt>
<dd>Sets dynamic values of the specified option(s) in <i>style</i>.
Each <i>statespec / value</i> pair is examined in order;
the value corresponding to the first matching <i>statespec</i>
is used.
</dd>
</dle>
<dle>
<dt><b>ttk::style lookup</b> <m>style</m> <m>-option</m> ?<m>state</m> ?<m>default</m>??</dt>
<dd>Returns the value specified for <i>-option</i> in style <i>style</i>
in state <i>state</i>, using the standard lookup rules for element options.
<i>state</i> is a list of state names; if omitted, 
it defaults to all bits off (the ``normal'' state).
If the <i>default</i> argument is present, it is used as a fallback
value in case no specification for <i>-option</i> is found.
</dd>
</dle>
<dle>
<dt><b>ttk::style layout</b> <m>style</m> ?<m>layoutSpec</m>?</dt>
<dd>Define the widget layout for style <i>style</i>.  
See "<ref refid="layouts">LAYOUTS</ref>" below for the format of <i>layoutSpec</i>.
If <i>layoutSpec</i> is omitted, return the layout specification
for style <i>style</i>.
</dd>
</dle>
<dle>
<dt><b>ttk::style element create</b> <m>elementName</m> <m>type</m> ?<m>args...</m>?</dt>
<dd>Creates a new element in the current theme of type <i>type</i>.
The only built-in element type is <i>image</i> (see <i>image(n)</i>),
although themes may define other element types 
(see <b>Ttk_RegisterElementFactory</b>).
</dd>
</dle>
<dle>
<dt><b>ttk::style element names</b></dt>
<dd>Returns the list of elements defined in the current theme.
</dd>
</dle>
<dle>
<dt><b>ttk::style element options</b> <m>element</m></dt>
<dd>Returns the list of <i>element</i>'s options.
</dd>
</dle>
<dle>
<dt><b>ttk::style theme create</b> <m>themeName</m> ?<b>-parent</b> <m>basedon</m>? ?<b>-settings</b> <m>script...</m> ?</dt>
<dd>Creates a new theme.  It is an error if <i>themeName</i> already exists.
If <i>-parent</i> is specified, the new theme will inherit
styles, elements, and layouts from the parent theme <i>basedon</i><b>.
If</b> <i>-settings</i> is present, <i>script</i> is evaluated in the
context of the new theme as per <b>ttk::style theme settings</b>.
</dd>
</dle>
<dle>
<dt><b>ttk::style theme settings</b> <m>themeName</m> <m>script</m></dt>
<dd>Temporarily sets the current theme to <i>themeName</i>, 
evaluate <i>script</i>, then restore the previous theme.
Typically <i>script</i> simply defines styles and elements,
though arbitrary Tcl code may appear.
</dd>
</dle>
<dle>
<dt><b>ttk::style theme names</b></dt>
<dd>Returns a list of the available themes.
</dd>
</dle>
<dle>
<dt><b>ttk::style theme use</b> <m>themeName</m></dt>
<dd>Sets the current theme to <i>themeName</i>, and refreshes all widgets.

</dd>
</dle>
</dl>
</section>
<section id="layouts">
<title>LAYOUTS</title>
<p>A <i>layout</i> specifies a list of elements, each followed
by one or more options specifying how to arrange the element.
The layout mechanism uses a simplified version of the <cmd>pack</cmd>
geometry manager: given an initial cavity,
each element is allocated a parcel.
Valid options are:
</p>
<dl>
<dle>
<dt><b>-side</b> <m>side</m></dt>
<dd>Specifies which side of the cavity to place the element;
one of <b>left</b>, <b>right</b>, <b>top</b>, or <b>bottom</b>.
If omitted, the element occupies the entire cavity.
</dd>
</dle>
<dle>
<dt><b>-sticky</b> <m>[nswe]</m></dt>
<dd>Specifies where the element is placed inside its allocated parcel.
</dd>
</dle>
<dle>
<dt><b>-children</b> <m>{ sublayout... }</m></dt>
<dd>Specifies a list of elements to place inside the element.
</dd>
</dle>
</dl>
<p>For example:
</p>
<example>
ttk::style layout Horizontal.TScrollbar {
    Scrollbar.trough -children {
        Scrollbar.leftarrow -side left
        Scrollbar.rightarrow -side right
        Horizontal.Scrollbar.thumb -side left -sticky ew
    }
}
</example>


</section>
<seealso>
<ref>ttk_intro(n)</ref>
<ref>ttk_widget(n)</ref>
<ref>photo(n)</ref>
</seealso>
<keywords>
<keyword>style</keyword>
<keyword>theme</keyword>
<keyword>appearance</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="ttk_Theme" version="8.5" title="Ttk_CreateTheme">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_Theme.3,v 1.1 2006/10/31 01:42:25 hobbs Exp $
 -->
<?TROFF.TH title="Ttk_CreateTheme" section="3" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>Ttk_CreateTheme</name>
<name>Ttk_GetTheme</name>
<name>Ttk_GetDefaultTheme</name>
<name>Ttk_GetCurrentTheme</name>
<desc>create and use Tk themes.</desc>
</namesection>
<synopsis>
<syntax>
Ttk_Theme Ttk_CreateTheme(<m>interp</m>, <m>name</m>, <m>parentTheme</m>);
Ttk_Theme Ttk_GetTheme(<m>interp</m>, <m>name</m>);
Ttk_Theme Ttk_GetDefaultTheme(<m>interp</m>);
Ttk_Theme Ttk_GetCurrentTheme(<m>interp</m>);
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp *</argtype>
<name>interp</name>
<argmode>in</argmode>
<desc>The Tcl interpreter in which to register/query available themes.
</desc>
</argdef>
<argdef>
<argtype>Ttk_Theme</argtype>
<name>parentTheme</name>
<argmode>in</argmode>
<desc>Fallback or parent theme from which the new theme will
inherit elements and layouts.
</desc>
</argdef>
<argdef>
<argtype>const char *</argtype>
<name>name</name>
<argmode>in</argmode>
<desc>The name of the theme.
</desc>
</argdef>
</arglist>
</section>
<section>
<title>DESCRIPTION</title>


</section>
<seealso>
<ref>Ttk_RegisterLayout</ref>
<ref>Ttk_BuildLayout</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_treeview" version="8.5" title="ttk_treeview">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_treeview.n,v 1.4 2006/12/18 19:33:13 jenglish Exp $
 -->
<?TROFF.TH title="ttk_treeview" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_treeview</name>
<desc>hierarchical multicolumn data display widget</desc>
</namesection>
<synopsis>
<syntax>
<b>ttk::treeview</b> <m>pathname</m> ?<m>options</m>?

</syntax>
</synopsis>
<section>
<title>DESCRIPTION</title>
<p>The <b>ttk::treeview</b> widget displays a hierarchical collection of items.
Each item has a textual label, an optional image, 
and an optional list of data values.
The data values are displayed in successive columns after
the tree label.
</p>
<p>The order in which data values are displayed may be controlled
by setting the <b>-displaycolumns</b> widget option.  
The tree widget can also display column headings.
Columns may be accessed by number or by symbolic names 
listed in the <b>-columns</b> widget option;
see <ref refid="column-identifiers">COLUMN IDENTIFIERS</ref>.
</p>
<p>Each item is identified by a unique name.
The widget will generate item IDs if they are not supplied by the caller.
There is a distinguished root item, named <b>{}</b>.
The root item itself is not displayed;
its children appear at the top level of the hierarchy.
</p>
<p>Each item also has a list of <i>tags</i>,
which can be used to associate event bindings with individual items
and control the appearance of the item.
</p>
<p>Treeview widgets support horizontal and vertical scrolling with the
standard <b>-[xy]scrollcommand</b> options 
and <b>[xyview</b> widget commands.
</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<sl cat="stdopt" cols="4">
<li>-class</li>
<li>-cursor</li>
<li>-style</li>
<li>-takefocus</li>
<li>-xscrollcommand</li>
<li>-yscrollcommand</li>
</sl>
</section>


<section>
<title>WIDGET-SPECIFIC OPTIONS</title>
<optionlist>
<optiondef>
<name>-columns</name>
<dbname>columns</dbname>
<dbclass>Columns</dbclass>
<desc>A list of column identifiers, 
specifying the number of columns and their names.
</desc>
</optiondef>
<optiondef>
<name>-displaycolumns</name>
<dbname>displayColumns</dbname>
<dbclass>DisplayColumns</dbclass>
<desc>A list of column identifiers 
(either symbolic names or integer indices)
specifying which data columns are displayed 
and the order in which they appear, 
or the string <b>#all</b>.
<br/>If set to <b>#all</b> (the default), all columns are shown in the order given.
</desc>
</optiondef>
<optiondef>
<name>-height</name>
<dbname>height</dbname>
<dbclass>Height</dbclass>
<desc>Specifies the number of rows which should be visible.
Note:
the requested width is determined from the sum of the column widths.
</desc>
</optiondef>
<optiondef>
<name>-padding</name>
<dbname>padding</dbname>
<dbclass>Padding</dbclass>
<desc>Specifies the internal padding for the widget.
The padding is a list of up to four length specifications;
see <b>Ttk_GetPaddingFromObj()</b> for details.
</desc>
</optiondef>
<optiondef>
<name>-selectmode</name>
<dbname>selectMode</dbname>
<dbclass>SelectMode</dbclass>
<desc>Controls how the built-in class bindings manage the selection.
One of <b>extended</b>, <b>browse</b>, or <b>none</b>.
<br/>If set to <b>extended</b> (the default), multiple items may be selected.
If <b>browse</b>, only a single item will be selected at a time.
If <b>none</b>, the selection will not be changed.
<br/>Note that application code and tag bindings can set the selection 
however they wish, regardless of the value of <b>-selectmode</b>.
</desc>
</optiondef>
<optiondef>
<name>-show</name>
<dbname>show</dbname>
<dbclass>Show</dbclass>
<desc>A list containing zero or more of the following values, specifying
which elements of the tree to display.
<?TROFF.RS?><dl>
<dle>
<dt><b>tree</b></dt>
<dd>Display tree labels in column #0.  
</dd>
</dle>
<dle>
<dt><b>headings</b></dt>
<dd>Display the heading row.
</dd>
</dle>
</dl><p>The default is <b>tree headings</b>, i.e., show all elements.
</p><p><b>NOTE:</b> Column #0 always refers to the tree column,
even if <b>-show tree</b> is not specified.
</p><?TROFF.RE?>
</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>WIDGET COMMAND</title>
<dl>
<dle>
<dt><m>pathname</m> <b>bbox</b> <m>item</m> ?<m>column</m>?</dt>
<dd>Returns the bounding box (relative to the treeview widget's window)
of the specified <i>item</i>
in the form <i>x y width height</i>.
If <i>column</i> is specified, returns the bounding box of that cell.
If the <i>item</i> is not visible 
(i.e., if it is a descendant of a closed item or is scrolled offscreen),
returns the empty list.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the specified <i>option</i>; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>children</b> <m>item</m> ?<m>newchildren</m>?</dt>
<dd>If <i>newchildren</i> is not specified,
returns the list of children belonging to <i>item</i>.
<p>If <i>newchildren</i> is specified, replaces <i>item</i>'s child list
with <i>newchildren</i>.  
Items in the old child list not present in the new child list
are detached from the tree.
None of the items in <i>newchildren</i> may be an ancestor
of <i>item</i>.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>column</b> <m>column</m> ?<m>-option</m> ?<m>value -option value...</m>?</dt>
<dd>Query or modify the options for the specified <i>column</i>.
If no <i>-option</i> is specified,
returns a dictionary of option/value pairs.
If a single <i>-option</i> is specified, 
returns the value of that option.
Otherwise, the options are updated with the specified values.
The following options may be set on each column:
<dl>
<dle>
<dt><b>-id</b> <m>name</m></dt>
<dd>The column name.  This is a read-only option.
For example, [<i>$pathname</i> <b>column #</b><i>n</i> <b>-id</b>] 
returns the data column associated with data column #<i>n</i>. 
</dd>
</dle>
<dle>
<dt><b>-anchor</b></dt>
<dd>Specifies how the text in this column should be aligned
with respect to the cell. One of
<b>n</b>, <b>ne</b>, <b>e</b>, <b>se</b>,
<b>s</b>, <b>sw</b>, <b>w</b>, <b>nw</b>, or <b>center</b>.
</dd>
</dle>
<dle>
<dt><b>-minwidth</b></dt>
<dd>The minimum width of the column in pixels.
The treeview widget will not make the column any smaller than
<b>-minwidth</b> when the widget is resized or the user drags a 
column separator.
</dd>
</dle>
<dle>
<dt><b>-stretch</b></dt>
<dd>Specifies whether or not the column's width should be adjusted
when the widget is resized.
</dd>
</dle>
<dle>
<dt><b>-width</b> <m>w</m></dt>
<dd>The width of the column in pixels.  Default is something reasonable,
probably 200 or so.
</dd>
</dle>
</dl><p>Use <i>pathname column #0</i> to configure the tree column.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Modify or query widget options; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>delete</b> <m>itemList</m></dt>
<dd>Deletes each of the items in <i>itemList</i> and all of their descendants.
The root item may not be deleted.
See also: <b>detach</b>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>detach</b> <m>itemList</m></dt>
<dd>Unlinks all of the specified items in <i>itemList</i> from the tree.
The items and all of their descendants are still present
and may be reinserted at another point in the tree
but will not be displayed.
The root item may not be detached.
See also: <b>delete</b>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>exists</b> <m>item</m></dt>
<dd>Returns 1 if the specified <i>item</i> is present in the tree,
0 otherwise.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>focus</b> ?<m>item</m>?</dt>
<dd>If <i>item</i> is specified, sets the focus item to <i>item</i>.
Otherwise, returns the current focus item, or <b>{}</b> if there is none.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>heading</b> <m>column</m> ?<m>-option</m> ?<m>value -option value...</m>?</dt>
<dd>Query or modify the heading options for the specified <i>column</i>.
Valid options are:
<dl>
<dle>
<dt><b>-text</b> <m>text</m></dt>
<dd>The text to display in the column heading.
</dd>
</dle>
<dle>
<dt><b>-image</b> <m>imageName</m></dt>
<dd>Specifies an image to display to the right of the column heading.
</dd>
</dle>
<dle>
<dt><b>-anchor</b> <m>anchor</m></dt>
<dd>Specifies how the heading text should be aligned.
One of the standard Tk anchor values.
</dd>
</dle>
<dle>
<dt><b>-command</b> <m>script</m></dt>
<dd>A script to evaluate when the heading label is pressed.
</dd>
</dle>
</dl><p>Use <i>pathname heading #0</i> to configure the tree column heading.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>identify</b> <m>component x y</m></dt>
<dd>Returns a description of the specified <i>component</i>
under the point given by <i>x</i> and <i>y</i>,
or the empty string if no such <i>component</i> is present at that position.
The following subcommands are supported:
<dl>
<dle>
<dt><m>pathname</m> <b>identify row</b> <m>x y</m></dt>
<dd>Returns the item ID of the item at position <i>y</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>identify column</b> <m>x y</m></dt>
<dd>Returns the data column identifier of the cell at position <i>x</i>.
The tree column has ID <b>#0</b>.
</dd>
</dle>
</dl><p>See <ref refid="column-identifiers">COLUMN IDENTIFIERS</ref> for a discussion of display columns
and data columns.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>index</b> <m>item</m></dt>
<dd>Returns the integer index of <i>item</i> within its parent's list of children.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>insert</b> <m>parent</m> <m>index</m> ?<b>-id</b> <m>id</m>? <m>options...</m></dt>
<dd>Creates a new item.  
<i>parent</i> is the item ID of the parent item,
or the empty string <b>{}</b>
to create a new top-level item.
<i>index</i> is an integer, or the value <b>end</b>, specifying where in the
list of <i>parent</i>'s children to insert the new item.
If <i>index</i> is less than or equal to zero, 
the new node is inserted at the beginning;
if <i>index</i> is greater than or equal to the current number of children,
it is inserted at the end.
If <b>-id</b> is specified, it is used as the item identifier;
<i>id</i> must not already exist in the tree.
Otherwise, a new unique identifier is generated.
<p><i>pathname</i> <b>insert</b> returns the item identifier of the
newly created item.
See <ref refid="item-options">ITEM OPTIONS</ref> for the list of available options.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>instate</b> <m>statespec</m> ?<m>script</m>?</dt>
<dd>Test the widget state; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>item</b> <m>item</m> ?<m>-option</m> ?<m>value -option value...</m>?</dt>
<dd>Query or modify the options for the specified <i>item</i>.
If no <i>-option</i> is specified, 
returns a dictionary of option/value pairs.
If a single <i>-option</i> is specified, 
returns the value of that option.
Otherwise, the item's options are updated with the specified values.
See <ref refid="item-options">ITEM OPTIONS</ref> for the list of available options.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>move</b> <m>item parent index</m></dt>
<dd>Moves <i>item</i> to position <i>index</i> in <i>parent</i>'s list of children.
It is illegal to move an item under one of its descendants.
<p>If <i>index</i> is less than or equal to zero, <i>item</i> is moved
to the beginning; if greater than or equal to the number of children,
it's moved to the end.
</p></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>next</b> <m>item</m></dt>
<dd>Returns the identifier of <i>item</i>'s next sibling,
or <b>{}</b> if <i>item</i> is the last child of its parent.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>parent</b> <m>item</m></dt>
<dd>Returns the ID of the parent of <i>item</i>,
or <b>{}</b> if <i>item</i> is at the top level of the hierarchy.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>prev</b> <m>item</m></dt>
<dd>Returns the identifier of <i>item</i>'s previous sibling,
or <b>{}</b> if <i>item</i> is the first child of its parent.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>see</b> <m>item</m></dt>
<dd>Ensure that <i>item</i> is visible:
sets all of <i>item</i>'s ancestors to <b>-open true</b>,
and scrolls the widget if necessary so that <i>item</i> is 
within the visible portion of the tree.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>selection</b> ?<m>selop</m> <m>itemList</m>?</dt>
<dd>If <i>selop</i> is not specified, returns the list of selected items.
Otherwise, <i>selop</i> is one of the following:
<dl>
<dle>
<dt><m>pathname</m> <b>selection set</b> <m>itemList</m></dt>
<dd><i>itemList</i> becomes the new selection.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>selection add</b> <m>itemList</m></dt>
<dd>Add <i>itemList</i> to the selection
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>selection remove</b> <m>itemList</m></dt>
<dd>Remove <i>itemList</i> from the selection
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>selection toggle</b> <m>itemList</m></dt>
<dd>Toggle the selection state of each item in <i>itemList</i>.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathname</m> <b>set</b> <m>item</m> ?<m>column</m> ?<m>value</m>??</dt>
<dd>With one argument, returns a dictionary of column/value pairs
for the specified <i>item</i>.  
With two arguments, returns the current value of the specified <i>column</i>.
With three arguments, sets the value of column <i>column</i>
in item <i>item</i> to the specified <i>value</i>.
See also <ref refid="column-identifiers">COLUMN IDENTIFIERS</ref>.
</dd>
</dle>
<dle>
<dt><m>pathname</m> <b>state</b> ?<m>stateSpec</m>?</dt>
<dd>Modify or query the widget state; see <i>ttk_widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag</b> <m>args...</m></dt>
<dd><dl>
<dle>
<dt><m>pathName</m> <b>tag bind</b> <m>tagName</m> ?<m>sequence</m> ?<m>script</m>??</dt>
<dd>Add a Tk binding script for the event sequence <i>sequence</i> 
to the tag <i>tagName</i>.  When an X event is delivered to an item,
binding scripts for each of the item's <b>-tags</b> are evaluated
in order as per <i>bindtags(n)</i>.
<p><b>&lt;KeyPress&gt;</b>, <b>&lt;KeyRelease&gt;</b>, and virtual events
are sent to the focus item.
<b>&lt;ButtonPress&gt;</b>, <b>&lt;ButtonRelease&gt;</b>, and <b>&lt;Motion&gt;</b> events
are sent to the item under the mouse pointer.  
No other event types are supported.
</p><p>The binding <i>script</i> undergoes <b>%</b>-substitutions before 
evaluation; see <b>bind(n)</b> for details.
</p></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>tag configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the options for the specified <i>tagName</i>.
If one or more <i>option/value</i> pairs are specified,
sets the value of those options for the specified tag.
If a single <i>option</i> is specified, 
returns the value of that option 
(or the empty string if the option has not been specified for <i>tagName</i>).
With no additional arguments, 
returns a dictionary of the option settings for <i>tagName</i>.
See <ref refid="tag-options">TAG OPTIONS</ref> for the list of available options.
</dd>
</dle>
</dl></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>xview</b> <m>args</m></dt>
<dd>Standard command for horizontal scrolling; see <i>widget(n)</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>yview</b> <m>args</m></dt>
<dd>Standard command for vertical scrolling; see <i>ttk_widget(n)</i>.

</dd>
</dle>
</dl>
</section>
<section id="item-options">
<title>ITEM OPTIONS</title>
<p>The following item options may be specified for items
in the <b>insert</b> and <b>item</b> widget commands.
</p>
<optionlist>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>The textual label to display for the item.
</desc>
</optiondef>
<optiondef>
<name>-image</name>
<dbname>image</dbname>
<dbclass>Image</dbclass>
<desc>A Tk image, displayed to the left of the label.
</desc>
</optiondef>
<optiondef>
<name>-values</name>
<dbname>values</dbname>
<dbclass>Values</dbclass>
<desc>The list of values associated with the item.
<br/>Each item should have the same number of values as
the <b>-columns</b> widget option.
If there are fewer values than columns,
the remaining values are assumed empty.
If there are more values than columns,
the extra values are ignored.
</desc>
</optiondef>
<optiondef>
<name>-open</name>
<dbname>open</dbname>
<dbclass>Open</dbclass>
<desc>A boolean value indicating whether the items's children
should be displayed (<b>-open true</b>) or hidden (<b>-open false</b>).
</desc>
</optiondef>
<optiondef>
<name>-tags</name>
<dbname>tags</dbname>
<dbclass>Tags</dbclass>
<desc>A list of tags associated with this item.  
</desc>
</optiondef>
</optionlist>
</section>
<section id="tag-options">
<title>TAG OPTIONS</title>
<p>The following options may be specified on tags:
</p>
<dl>
<dle>
<dt>-foreground</dt>
<dd>Specifies the text foreground color.
</dd>
</dle>
<dle>
<dt>-background</dt>
<dd>Specifies the cell or item background color.
</dd>
</dle>
<dle>
<dt>-font</dt>
<dd>Specifies the font to use when drawing text.
</dd>
</dle>
<dle>
<dt>-image</dt>
<dd>Specifies the item image, in case the item's <b>-image</b> option is empty.
</dd>
</dle>
</dl>
<p><i>(@@@ TODO: sort out order of precedence for options)</i>

</p>
</section>
<section id="column-identifiers">
<title>COLUMN IDENTIFIERS</title>
<p>Column identifiers take any of the following forms:
</p>
<ul>
<li>A symbolic name from the list of <b>-columns</b>.
</li>
<li>An integer <i>n</i>, specifying the <i>n</i>th data column.
</li>
<li>A string of the form <b>#</b><i>n</i>, where <i>n</i> is an integer,
specifying the <i>n</i>th display column.
</li>
</ul>
<p><b>NOTE:</b> 
Item <b>-values</b> may be displayed in a different order than 
the order in which they are stored.
</p>
<p><b>NOTE:</b> Column #0 always refers to the tree column,
even if <b>-show tree</b> is not specified.
</p>
<p>A <i>data column number</i> is an index into an item's <b>-values</b> list;
a <i>display column number</i> is the column number in the tree
where the values are displayed.  
Tree labels are displayed in column #0.
If <b>-displaycolumns</b> is not set,
then data column <i>n</i> is displayed in display column <b>#</b><i>n+1</i>.
Again, <b>column #0 always refers to the tree column</b>.
</p>
</section>
<section>
<title>VIRTUAL EVENTS</title>
<p>The treeview widget generates the following virtual events.
</p>
<dl>
<dle>
<dt>&lt;&lt;TreeviewSelect&gt;&gt;</dt>
<dd>Generated whenever the selection changes.
</dd>
</dle>
<dle>
<dt>&lt;&lt;TreeviewOpen&gt;&gt;</dt>
<dd>Generated just before setting the focus item to <b>-open true</b>.
</dd>
</dle>
<dle>
<dt>&lt;&lt;TreeviewClose&gt;&gt;</dt>
<dd>Generated just after setting the focus item to <b>-open false</b>.
</dd>
</dle>
</dl>
<p>The <cmd>focus</cmd> and <cmd>selection</cmd> widget commands can be used
to determine the affected item or items.
In Tk 8.5, the affected item is also passed as the <b>-detail</b> field
of the virtual event.

</p>
</section>
<seealso>
<ref>ttk_widget(n)</ref>
<ref>listbox(n)</ref>
<ref>image(n)</ref>
<ref>bind(n)</ref>
</seealso>
</manpage>
<manpage cat="cmd" id="ttk_widget" version="8.5" title="ttk_widget">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2004 Joe English
     
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: ttk_widget.n,v 1.3 2006/12/13 23:04:33 hobbs Exp $
 -->
<?TROFF.TH title="ttk_widget" section="n" date="8.5" source="Tk" manual="Tk Themed Widget" ?>
<namesection>
<name>ttk_widget</name>
<desc>Standard options and commands supported by Tk themed widgets</desc>
</namesection>


<section>
<title>DESCRIPTION</title>
<p>This manual describes common widget options and commands.

</p>
</section>
<section>
<title>STANDARD OPTIONS</title>
<p>The following options are supported by all Tk themed widgets:
</p>
<optionlist>
<optiondef>
<name>-class</name>
<dbname>undefined</dbname>
<dbclass>undefined</dbclass>
<desc>Specifies the window class.
The class is used when querying the option database 
for the window's other options, to determine the default
bindtags for the window, and to select the widget's default
layout and style.
This is a read-only option: 
it may only be specified when the window is created,
and may not be changed with the <b>configure</b> widget command.
</desc>
</optiondef>
<optiondef>
<name>-cursor</name>
<dbname>cursor</dbname>
<dbclass>Cursor</dbclass>
<desc>Specifies the mouse cursor to be used for the widget.
See <fun>Tk_GetCursor</fun> and <i>cursors(n)</i> in the Tk reference manual
for the legal values.
If set to the empty string (the default),
the cursor is inherited from the parent widget.
</desc>
</optiondef>
<optiondef>
<name>-takefocus</name>
<dbname>takeFocus</dbname>
<dbclass>TakeFocus</dbclass>
<desc>Determines whether the window accepts the focus during keyboard traversal.  
Either <b>0</b>, <b>1</b>, a command prefix (to which the widget path
is appended, and which should return <b>0</b> or <b>1</b>), 
or the empty string.
See <i>options(n)</i> in the Tk reference manual for the full description.
</desc>
</optiondef>
<optiondef>
<name>-style</name>
<dbname>style</dbname>
<dbclass>Style</dbclass>
<desc>May be used to specify a custom widget style.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>SCROLLABLE WIDGET OPTIONS</title>
<p>The following options are supported by widgets that
are controllable by a scrollbar.  
See <i>scrollbar(n)</i> for more information
</p>
<optionlist>
<optiondef>
<name>-xscrollcommand</name>
<dbname>xScrollCommand</dbname>
<dbclass>ScrollCommand</dbclass>
<desc>A command prefix, used to communicate with horizontal scrollbars.
<br/>When the view in the widget's window changes, the widget will
generate a Tcl command by concatenating the scroll command and
two numbers.
Each of the numbers is a fraction between 0 and 1 indicating
a position in the document; 0 indicates the beginning,
and 1 indicates the end.
The first fraction indicates the first information in the widget
that is visible in the window, and the second fraction indicates
the information just after the last portion that is visible.
<br/>Typically the <b>xScrollCommand</b> option consists of the path name 
of a <b cat="AMBIGUOUS widget cmd">scrollbar</b> widget followed by ``set'', e.g. ``.x.scrollbar set''.
This will cause the scrollbar to be updated whenever the view in the 
window changes.
<br/>If this option is set to the empty string (the default),
then no command is be executed.
</desc>
</optiondef>
<optiondef>
<name>-yscrollcommand</name>
<dbname>yScrollCommand</dbname>
<dbclass>ScrollCommand</dbclass>
<desc>A command prefix, used to communicate with vertical scrollbars.
See the description of <b>-xscrollcommand</b> above for details.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>LABEL OPTIONS</title>
<p>The following options are supported by labels, buttons,
and other button-like widgets:
</p>
<optionlist>
<optiondef>
<name>-text</name>
<dbname>text</dbname>
<dbclass>Text</dbclass>
<desc>Specifies a text string to be displayed inside the widget
(unless overridden by <b>-textvariable</b>).
</desc>
</optiondef>
<optiondef>
<name>-textvariable</name>
<dbname>textVariable</dbname>
<dbclass>Variable</dbclass>
<desc>Specifies the name of variable whose value will be used
in place of the <b>-text</b> resource.
</desc>
</optiondef>
<optiondef>
<name>-underline</name>
<dbname>underline</dbname>
<dbclass>Underline</dbclass>
<desc>If set, specifies the integer index (0-based) of a character to underline 
in the text string.
The underlined character is used for mnemonic activation.
</desc>
</optiondef>
<optiondef>
<name>-image</name>
<dbname>image</dbname>
<dbclass>Image</dbclass>
<desc>Specifies an image to display.
This is a list of 1 or more elements.
The first element is the default image name.
The rest of the list is a sequence of <i>statespec / value</i> pairs
as per <b>style map</b>, specifying different images to use when
the widget is in a particular state or combination of states.
All images in the list should have the same size.
</desc>
</optiondef>
<optiondef>
<name>-compound</name>
<dbname>compound</dbname>
<dbclass>Compound</dbclass>
<desc>Specifies how to display the image relative to the text,
in the case both <b>-text</b> and <b>-image</b> are present.
Valid values are: 
<dl>
<dle>
<dt>text</dt>
<dd>Display text only.
</dd>
</dle>
<dle>
<dt>image</dt>
<dd>Display image only.
</dd>
</dle>
<dle>
<dt>center</dt>
<dd>Display text centered on top of image.
</dd>
</dle>
<dle>
<dt>top</dt>
<dd/>
</dle>
<dle>
<dt>bottom</dt>
<dd/>
</dle>
<dle>
<dt>left</dt>
<dd/>
</dle>
<dle>
<dt>right</dt>
<dd>Display image above, below, left of, or right of the text, respectively.
</dd>
</dle>
<dle>
<dt>none</dt>
<dd>The default; display the image if present, otherwise the text.
</dd>
</dle>
</dl></desc>
</optiondef>
<optiondef>
<name>-width</name>
<dbname>width</dbname>
<dbclass>Width</dbclass>
<desc>If greater than zero, specifies how much space, in character widths, 
to allocate for the text label.  
If less than zero, specifies a minimum width.
If zero or unspecified, the natural width of the text label is used.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>COMPATIBILITY OPTIONS</title>
<optionlist>
<optiondef>
<name>-state</name>
<dbname>state</dbname>
<dbclass>State</dbclass>
<desc>May be set to <b>normal</b> or <b>disabled</b>
to control the <b>disabled</b> state bit.
This is a ``write-only'' option: setting it changes the
widget state, but the <b>state</b> widget command does
not affect the state option.

</desc>
</optiondef>
</optionlist>
</section>
<section>
<title>COMMANDS</title>
<dl>
<dle>
<dt><m>pathName</m> <b>cget</b> <m>option</m></dt>
<dd>Returns the current value of the configuration option given
by <i>option</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>configure</b> ?<m>option</m>? ?<m>value option value ...</m>?</dt>
<dd>Query or modify the configuration options of the widget.
If one or more <i>option-value</i> pairs are specified,
then the command modifies the given widget option(s) 
to have the given value(s); 
in this case the command returns an empty string.
If <i>option</i> is specified with no <i>value</i>, 
then the command returns a list describing the named option:
the elements of the list are the 
option name, database name, database class, default value, 
and current value.
If no <i>option</i> is specified, returns a list describing all of
the available options for <i>pathName</i>.
</dd>
</dle>
<dle>
<dt><m>pathName</m> <b>instate</b> <m>statespec</m> ?<m>script</m>?</dt>
<dd>Test the widget's state.
If <i>script</i> is not specified, returns 1 if 
the widget state matches <i>statespec</i> and 0 otherwise.
If <i>script</i> is specified, equivalent to
<example>
if {[<i>pathName</i> instate <i>stateSpec</i>]} <i>script</i>
</example></dd>
</dle>
<dle>
<dt><m>pathName</m> <b>state</b> ?<m>stateSpec</m></dt>
<dd>Modify or inquire widget state.
If <i>stateSpec</i> is present, sets the widget state: 
for each flag in <i>stateSpec</i>, sets the corresponding flag
or clears it if prefixed by an exclamation point.
Returns a new state spec indicating which flags were changed:
<example>
set changes [<i>pathName</i> state <i>spec</i>]
<i>pathName</i> state $changes
</example>will restore <i>pathName</i> to the original state.
If <i>stateSpec</i> is not specified, 
returns a list of the currently-enabled state flags.
</dd>
</dle>
</dl>
</section>
<section>
<title>WIDGET STATES</title>
<p>The widget state is a bitmap of independent state flags.
Widget state flags include:
</p>
<dl>
<dle>
<dt><b>active</b></dt>
<dd>The mouse cursor is over the widget 
and pressing a mouse button will cause some action to occur.
(aka "prelight" (Gnome), "hot" (Windows), "hover").
</dd>
</dle>
<dle>
<dt><b>disabled</b></dt>
<dd>Widget is disabled under program control 
(aka "unavailable", "inactive") 
</dd>
</dle>
<dle>
<dt><b>focus</b></dt>
<dd>Widget has keyboard focus 
</dd>
</dle>
<dle>
<dt><b>pressed</b></dt>
<dd>Widget is being pressed (aka "armed" in Motif). 
</dd>
</dle>
<dle>
<dt><b>selected</b></dt>
<dd>"On", "true", or "current" for things like checkbuttons and radiobuttons. 
</dd>
</dle>
<dle>
<dt><b>background</b></dt>
<dd>Windows and the Mac have a notion of an "active" or foreground window.
The <b>background</b> state is set for widgets in a background window,
and cleared for those in the foreground window.
</dd>
</dle>
<dle>
<dt><b>readonly</b></dt>
<dd>Widget should not allow user modification.
</dd>
</dle>
<dle>
<dt><b>alternate</b></dt>
<dd>A widget-specific alternate display format.
For example, used for checkbuttons and radiobuttons 
in the "tristate" or "mixed" state,
and for buttons with <b>-default active</b>.
</dd>
</dle>
<dle>
<dt><b>invalid</b></dt>
<dd>The widget's value is invalid.
(Potential uses: scale widget value out of bounds, 
entry widget value failed validation.)
</dd>
</dle>
</dl>
<p>A <i>state specification</i> or <i>stateSpec</i> is a list
of state names, optionally prefixed with an exclamation point (!)
indicating that the bit is off.

</p>
</section>
<section>
<title>EXAMPLES</title>
<example>
set b [ttk::button .b]

# Disable the widget:
$b state disabled			

# Invoke the widget only if it is currently pressed and enabled:
$b instate {pressed !disabled} { .b invoke }	

# Reenable widget:
$b state !disabled			
</example>


</section>
<seealso>
<ref>ttk_intro(n)</ref>
<ref>style(n)</ref>
</seealso>
<keywords>
<keyword>state</keyword>
<keyword>configure</keyword>
<keyword>option</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="UniCharIsAlpha" title="Tcl_UniCharIsAlpha" version="8.1">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: UniCharIsAlpha.3,v 1.3 2004/10/07 14:44:35 dkf Exp $
 -->
<?TROFF.TH title="Tcl_UniCharIsAlpha" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_UniCharIsAlnum</name>
<name>Tcl_UniCharIsAlpha</name>
<name>Tcl_UniCharIsControl</name>
<name>Tcl_UniCharIsDigit</name>
<name>Tcl_UniCharIsGraph</name>
<name>Tcl_UniCharIsLower</name>
<name>Tcl_UniCharIsPrint</name>
<name>Tcl_UniCharIsPunct</name>
<name>Tcl_UniCharIsSpace</name>
<name>Tcl_UniCharIsUpper</name>
<name>Tcl_UniCharIsWordChar</name>
<desc>routines for classification of Tcl_UniChar characters</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

int
<fun>Tcl_UniCharIsAlnum</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsAlpha</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsControl</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsDigit</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsGraph</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsLower</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsPrint</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsPunct</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsSpace</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsUpper</fun>(<m>ch</m>)

int
<fun>Tcl_UniCharIsWordChar</fun>(<m>ch</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>int</argtype>
<name>ch</name>
<argmode>in</argmode>
<desc>The Tcl_UniChar to be examined.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>All of the routines described examine Tcl_UniChars and return a
boolean value. A non-zero return value means that the character does
belong to the character class associated with the called routine. The
rest of this document just describes the character classes associated
with the various routines.
</p>
<p>Note: A Tcl_UniChar is a Unicode character represented as an unsigned,
fixed-size quantity.

</p>
</section>
<section>
<title>CHARACTER CLASSES</title>
<p><fun>Tcl_UniCharIsAlnum</fun> tests if the character is an alphanumeric Unicode character.
</p>
<p><fun>Tcl_UniCharIsAlpha</fun> tests if the character is an alphabetic Unicode character.
</p>
<p><fun>Tcl_UniCharIsControl</fun> tests if the character is a Unicode control character.
</p>
<p><fun>Tcl_UniCharIsDigit</fun> tests if the character is a numeric Unicode character.
</p>
<p><fun>Tcl_UniCharIsGraph</fun> tests if the character is any Unicode print character except space.
</p>
<p><fun>Tcl_UniCharIsLower</fun> tests if the character is a lowercase Unicode character.
</p>
<p><fun>Tcl_UniCharIsPrint</fun> tests if the character is a Unicode print character.
</p>
<p><fun>Tcl_UniCharIsPunct</fun> tests if the character is a Unicode punctuation character.
</p>
<p><fun>Tcl_UniCharIsSpace</fun> tests if the character is a whitespace Unicode character.
</p>
<p><fun>Tcl_UniCharIsUpper</fun> tests if the character is an uppercase Unicode character.
</p>
<p><fun>Tcl_UniCharIsWordChar</fun> tests if the character is alphanumeric or
a connector punctuation mark.

</p>
</section>
<keywords>
<keyword>unicode</keyword>
<keyword>classification</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="unknown" title="unknown">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: unknown.n,v 1.4 2001/06/27 21:00:45 hobbs Exp $
 -->
<?TROFF.TH title="unknown" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>unknown</name>
<desc>Handle attempts to use non-existent commands</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">unknown</b> <m>cmdName</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is invoked by the Tcl interpreter whenever a script
tries to invoke a command that doesn't exist.  The default implementation
of <b cat="AMBIGUOUS ambiguous cmd">unknown</b> is a library procedure defined when Tcl initializes an
interpreter.  You can override the default <b cat="AMBIGUOUS ambiguous cmd">unknown</b> to change its
functionality.  Note that there is no default implementation of
<b cat="AMBIGUOUS ambiguous cmd">unknown</b> in a safe interpreter.
</p>
<p>If the Tcl interpreter encounters a command name for which there
is not a defined command, then Tcl checks for the existence of
a command named <b cat="AMBIGUOUS ambiguous cmd">unknown</b>.
If there is no such command, then the interpreter returns an
error.
If the <b cat="AMBIGUOUS ambiguous cmd">unknown</b> command exists, then it is invoked with
arguments consisting of the fully-substituted name and arguments
for the original non-existent command.
The <b cat="AMBIGUOUS ambiguous cmd">unknown</b> command typically does things like searching
through library directories for a command procedure with the name
<i>cmdName</i>, or expanding abbreviated command names to full-length,
or automatically executing unknown commands as sub-processes.
In some cases (such as expanding abbreviations) <b cat="AMBIGUOUS ambiguous cmd">unknown</b> will
change the original command slightly and then (re-)execute it.
The result of the <b cat="AMBIGUOUS ambiguous cmd">unknown</b> command is used as the result for
the original non-existent command.
</p>
<p>The default implementation of <b cat="AMBIGUOUS ambiguous cmd">unknown</b> behaves as follows.
It first calls the <cmd>auto_load</cmd> library procedure to load the command.
If this succeeds, then it executes the original command with its
original arguments.
If the auto-load fails then <b cat="AMBIGUOUS ambiguous cmd">unknown</b> calls <cmd>auto_execok</cmd>
to see if there is an executable file by the name <i>cmd</i>.
If so, it invokes the Tcl <cmd>exec</cmd> command
with <i>cmd</i> and all the <i>args</i> as arguments.
If <i>cmd</i> can't be auto-executed, <b cat="AMBIGUOUS ambiguous cmd">unknown</b> checks to
see if the command was invoked at top-level and outside of any
script.  If so, then <b cat="AMBIGUOUS ambiguous cmd">unknown</b> takes two additional steps.
First, it sees if <i>cmd</i> has one of the following three forms:
<b>!!</b>, <b>!</b><i>event</i>, or <b>^</b><i>old</i><b>^</b><i>new</i>?<b>^</b>?.
If so, then <b cat="AMBIGUOUS ambiguous cmd">unknown</b> carries out history substitution
in the same way that <b>csh</b> would for these constructs.
Finally, <b cat="AMBIGUOUS ambiguous cmd">unknown</b> checks to see if <i>cmd</i> is
a unique abbreviation for an existing Tcl command.
If so, it expands the command name and executes the command with
the original arguments.
If none of the above efforts has been able to execute
the command, <b cat="AMBIGUOUS ambiguous cmd">unknown</b> generates an error return.
If the global variable <b>auto_noload</b> is defined, then the auto-load
step is skipped.
If the global variable <b>auto_noexec</b> is defined then the
auto-exec step is skipped.
Under normal circumstances the return value from <b cat="AMBIGUOUS ambiguous cmd">unknown</b>
is the return value from the command that was eventually
executed.

</p>
</section>
<seealso>
<ref>info(n)</ref>
<ref>proc(n)</ref>
<ref>interp(n)</ref>
<ref>library(n)</ref>
</seealso>
<keywords>
<keyword>error</keyword>
<keyword>non-existent command</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="unload" version="8.5" title="unload">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 2003 George Petasis, petasis@iit.demokritos.gr.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: unload.n,v 1.9 2007/02/18 18:42:55 dkf Exp $
 -->
<?TROFF.TH title="unload" section="n" date="8.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>unload</name>
<desc>Unload machine code</desc>
</namesection>
<synopsis>
<syntax>
<b>unload</b> ?<m>switches</m>? <m>fileName</m>

<b>unload</b> ?<m>switches</m>? <m>fileName packageName</m>

<b>unload</b> ?<m>switches</m>? <m>fileName packageName interp</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command tries to unload shared libraries previously loaded
with <b cat="AMBIGUOUS ambiguous cmd">load</b> from the application's address space.  <i>fileName</i>
is the name of the file containing the library file to be unload;  it
must be the same as the filename provided to <b cat="AMBIGUOUS ambiguous cmd">load</b> for
loading the library.
The <i>packageName</i> argument is the name of the package (as
determined by or passed to <b cat="AMBIGUOUS ambiguous cmd">load</b>), and is used to
compute the name of the unload procedure; if not supplied, it is
computed from <i>fileName</i> in the same manner as <b cat="AMBIGUOUS ambiguous cmd">load</b>.
The <i>interp</i> argument is the path name of the interpreter from
which to unload the package (see the <cmd>interp</cmd> manual entry for
details); if <i>interp</i> is omitted, it defaults to the
interpreter in which the <b>unload</b> command was invoked.
</p>
<p>If the initial arguments to <b>unload</b> start with <b>-</b> then
they are treated as switches.  The following switches are
currently supported:
</p>
<dl>
<dle>
<dt><b>-nocomplain</b></dt>
<dd>Suppresses all error messages. If this switch is given, <b>unload</b> will
never report an error.
</dd>
</dle>
<dle>
<dt><b>-keeplibrary</b></dt>
<dd>This switch will prevent <b>unload</b> from issuing the operating system call
that will unload the library from the process. 
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Marks the end of switches.  The argument following this one will
be treated as a <i>fileName</i> even if it starts with a <b>-</b>.
</dd>
</dle>
</dl>
<p>When a file containing a shared library is loaded through the
<b cat="AMBIGUOUS ambiguous cmd">load</b> command, Tcl associates two reference counts to the library
file. The first counter shows how many times the library has been
loaded into normal (trusted) interpreters while the second describes how many
times the library has been loaded into safe interpreters. As a file containing
a shared library can be loaded only once by Tcl (with the first <b cat="AMBIGUOUS ambiguous cmd">load</b>
call on the file), these counters track how many interpreters use the library.
Each subsequent call to <b cat="AMBIGUOUS ambiguous cmd">load</b> after the first simply increments the
proper reference count.
</p>
<p><b>unload</b> works in the opposite direction. As a first step, <b>unload</b>
will check whether the library is unloadable: an unloadable library exports
a special unload procedure. The name of the unload procedure is determined by
<i>packageName</i> and whether or not the target interpreter
is a safe one.  For normal interpreters the name of the initialization
procedure will have the form <i>pkg</i><b>_Unload</b>, where <i>pkg</i>
is the same as <i>packageName</i> except that the first letter is
converted to upper case and all other letters
are converted to lower case.  For example, if <i>packageName</i> is
<b>foo</b> or <b>FOo</b>, the initialization procedure's name will
be <b>Foo_Unload</b>.
If the target interpreter is a safe interpreter, then the name
of the initialization procedure will be <i>pkg</i><b>_SafeUnload</b>
instead of <i>pkg</i><b>_Unload</b>.
</p>
<p>If <b>unload</b> determines that a library is not unloadable (or unload
functionality has been disabled during compilation), an error will be returned.
If the library is unloadable, then <b>unload</b> will call the unload
procedure. If the unload procedure returns <b>TCL_OK</b>, <b>unload</b> will proceed
and decrease the proper reference count (depending on the target interpreter
type). When both reference counts have reached 0, the library will be
detached from the process.
</p>
<p>The unload procedure must match the following prototype:
</p>
<syntax cat="type" name="Tcl_PackageUnloadProc" scope="global">
typedef int Tcl_PackageUnloadProc(Tcl_Interp *<i>interp</i>, int <i>flags</i>);
</syntax>
<p>The <i>interp</i> argument identifies the interpreter from which the
library is to be unloaded.  The unload procedure must return
<b>TCL_OK</b> or <b>TCL_ERROR</b> to indicate whether or not it completed
successfully;  in the event of an error it should set the interpreter's result
to point to an error message.  In this case, the result of the
<b>unload</b> command will be the result returned by the unload procedure.
</p>
<p>The <i>flags</i> argument can be either <b>TCL_UNLOAD_DETACH_FROM_INTERPRETER</b>
or <b>TCL_UNLOAD_DETACH_FROM_PROCESS</b>. In case the library will remain
attached to the process after the unload procedure returns (i.e. because
the library is used by other interpreters),
<b>TCL_UNLOAD_DETACH_FROM_INTERPRETER</b> will be defined. However, if the
library is used only by the target interpreter and the library will be
detached from the application as soon as the unload procedure returns,
the <i>flags</i> argument will be set to <b>TCL_UNLOAD_DETACH_FROM_PROCESS</b>. 
</p>
<p>The <b>unload</b> command cannot unload libraries that are statically
linked with the application.
If <i>fileName</i> is an empty string, then <i>packageName</i> must
be specified.
</p>
<p>If <i>packageName</i> is omitted or specified as an empty string,
Tcl tries to guess the name of the package.
This may be done differently on different platforms.
The default guess, which is used on most UNIX platforms, is to
take the last element of <i>fileName</i>, strip off the first
three characters if they are <b>lib</b>, and use any following
alphabetic and underline characters as the module name.
For example, the command <b>unload libxyz4.2.so</b> uses the module
name <b>xyz</b> and the command <b>unload bin/last.so {}</b> uses the
module name <b>last</b>.
</p>
</section>
<section>
<title>PORTABILITY ISSUES</title>
<dl>
<dle>
<dt><b>Unix</b>     </dt>
<dd>Not all unix operating systems support library unloading. Under such
an operating system <b>unload</b> returns an error (unless -nocomplain has
been specified).
</dd>
</dle>
</dl>
</section>
<section>
<title>BUGS</title>
<p>If the same file is <b cat="AMBIGUOUS ambiguous cmd">load</b>ed by different <i>fileName</i>s, it will
be loaded into the process's address space multiple times.  The
behavior of this varies from system to system (some systems may
detect the redundant loads, others may not). In case a library has been
silently detached by the operating system (and as a result Tcl thinks the
library is still loaded), it may be dangerous to use
<b>unload</b> on such a library (as the library will be completely detached
from the application while some interpreters will continue to use it).
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>If an unloadable module in the file <b>foobar.dll</b> had been loaded
using the <b cat="AMBIGUOUS ambiguous cmd">load</b> command like this (on Windows):
</p>
<example>
load c:/some/dir/foobar.dll
</example>
<p>then it would be unloaded like this:
</p>
<example>
<b>unload</b> c:/some/dir/foobar.dll
</example>
<p>This allows a C code module to be installed temporarily into a
long-running Tcl program and then removed again (either because it is
no longer needed or because it is being updated with a new version)
without having to shut down the overall Tcl process.

</p>
</section>
<seealso>
<ref>info sharedlibextension</ref>
<ref>load(n)</ref>
<ref>safe(n)</ref>
</seealso>
<keywords>
<keyword>binary code</keyword>
<keyword>unloading</keyword>
<keyword>safe interpreter</keyword>
<keyword>shared library</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="unset" version="8.4" title="unset">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
     Copyright (c) 2000 Ajuba Solutions.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: unset.n,v 1.10 2005/05/10 18:34:03 kennykb Exp $
 -->
<?TROFF.TH title="unset" section="n" date="8.4" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>unset</name>
<desc>Delete variables</desc>
</namesection>
<synopsis>
<syntax>
<cmd>unset</cmd> ?<m>-nocomplain</m>? ?<m>--</m>? ?<m>name name name ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command removes one or more variables.
Each <i>name</i> is a variable name, specified in any of the
ways acceptable to the <b cat="AMBIGUOUS ambiguous cmd">set</b> command.
If a <i>name</i> refers to an element of an array then that
element is removed without affecting the rest of the array.
If a <i>name</i> consists of an array name with no parenthesized
index, then the entire array is deleted.
The <cmd>unset</cmd> command returns an empty string as result.
If <i>-nocomplain</i> is specified as the first argument, any possible
errors are suppressed.  The option may not be abbreviated, in order to
disambiguate it from possible variable names.  The option <i>--</i>
indicates the end of the options, and should be used if you wish to
remove a variable with the same name as any of the options.
If an error occurs, any variables after the named one causing the error not
deleted.  An error can occur when the named variable doesn't exist, or the
name refers to an array element but the variable is a scalar, or the name
refers to a variable in a non-existent namespace.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Create an array containing a mapping from some numbers to their
squares and remove the array elements for non-prime numbers:
</p>
<example>
array set squares {
    1 1    6 36
    2 4    7 49
    3 9    8 64
    4 16   9 81
    5 25  10 100
}

puts "The squares are:"
parray squares

<cmd>unset</cmd> squares(1) squares(4) squares(6)
<cmd>unset</cmd> squares(8) squares(9) squares(10)

puts "The prime squares are:"
parray squares
</example>


</section>
<seealso>
<ref>set(n)</ref>
<ref>trace(n)</ref>
<ref>upvar(n)</ref>
</seealso>
<keywords>
<keyword>remove</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="update" title="update" version="7.5">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1992 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: update.n,v 1.6 2004/11/20 00:17:32 dgp Exp $
 -->
<?TROFF.TH title="update" section="n" date="7.5" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>update</name>
<desc>Process pending events and idle callbacks</desc>
</namesection>
<synopsis>
<syntax>
<cmd>update</cmd> ?<b>idletasks</b>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is used to bring the application ``up to date''
by entering the event loop repeatedly until all pending events
(including idle callbacks) have been processed.
</p>
<p>If the <b>idletasks</b> keyword is specified as an argument to the
command, then no new events or errors are processed;  only idle
callbacks are invoked.
This causes operations that are normally deferred, such as display
updates and window layout calculations, to be performed immediately.
</p>
<p>The <b>update idletasks</b> command is useful in scripts where
changes have been made to the application's state and you want those
changes to appear on the display immediately, rather than waiting
for the script to complete.  Most display updates are performed as
idle callbacks, so <b>update idletasks</b> will cause them to run.
However, there are some kinds of updates that only happen in
response to events, such as those triggered by window size changes;
these updates will not occur in <b>update idletasks</b>.
</p>
<p>The <cmd>update</cmd> command with no options is useful in scripts where
you are performing a long-running computation but you still want
the application to respond to events such as user interactions;  if
you occasionally call <cmd>update</cmd> then user input will be processed
during the next call to <cmd>update</cmd>.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>Run computations for about a second and then finish:
</p>
<example>
set x 1000
set done 0
after 1000 set done 1
while {!$done} {
    # A very silly example!
    set x [expr {log($x) ** 2.8}]

    # Test to see if our time-limit has been hit.  This would
    # also give a chance for serving network sockets and, if
    # the Tk package is loaded, updating a user interface.
    <cmd>update</cmd>
}
</example>


</section>
<seealso>
<ref>after(n)</ref>
<ref>interp(n)</ref>
</seealso>
<keywords>
<keyword>event</keyword>
<keyword>flush</keyword>
<keyword>handler</keyword>
<keyword>idle</keyword>
<keyword>update</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="uplevel" title="uplevel">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: uplevel.n,v 1.6 2006/02/01 19:26:01 dgp Exp $
 -->
<?TROFF.TH title="uplevel" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>uplevel</name>
<desc>Execute a script in a different stack frame</desc>
</namesection>
<synopsis>
<syntax>
<cmd>uplevel</cmd> ?<m>level</m>? <m>arg</m> ?<m>arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>All of the <i>arg</i> arguments are concatenated as if they had
been passed to <cmd>concat</cmd>; the result is then evaluated in the
variable context indicated by <i>level</i>.  <b>Uplevel</b> returns
the result of that evaluation.
</p>
<p>If <i>level</i> is an integer then
it gives a distance (up the procedure calling stack) to move before
executing the command.  If <i>level</i> consists of <b>#</b> followed by
a number then the number gives an absolute level number.  If <i>level</i>
is omitted then it defaults to <b>1</b>.  <i>Level</i> cannot be
defaulted if the first <i>command</i> argument starts with a digit or <b>#</b>.
</p>
<p>For example, suppose that procedure <b>a</b> was invoked
from top-level, and that it called <b>b</b>, and that <b>b</b> called <b>c</b>.
Suppose that <b>c</b> invokes the <cmd>uplevel</cmd> command.  If <i>level</i>
is <b>1</b> or <b>#2</b>  or omitted, then the command will be executed
in the variable context of <b>b</b>.  If <i>level</i> is <b>2</b> or <b>#1</b>
then the command will be executed in the variable context of <b>a</b>.
If <i>level</i> is <b>3</b> or <b>#0</b> then the command will be executed
at top-level (only global variables will be visible).
</p>
<p>The <cmd>uplevel</cmd> command causes the invoking procedure to disappear
from the procedure calling stack while the command is being executed.
In the above example, suppose <b>c</b> invokes the command
</p>
<example>
<cmd>uplevel</cmd> 1 {set x 43; d}
</example>
<p>where <b>d</b> is another Tcl procedure.  The <b cat="AMBIGUOUS ambiguous cmd">set</b> command will
modify the variable <b>x</b> in <b>b</b>'s context, and <b>d</b> will execute
at level 3, as if called from <b>b</b>.  If it in turn executes
the command
</p>
<example>
<cmd>uplevel</cmd> {set x 42}
</example>
<p>then the <b cat="AMBIGUOUS ambiguous cmd">set</b> command will modify the same variable <b>x</b> in <b>b</b>'s
context:  the procedure <b>c</b> does not appear to be on the call stack
when <b>d</b> is executing.  The command ``<b>info level</b>'' may
be used to obtain the level of the current procedure.
</p>
<p><b>Uplevel</b> makes it possible to implement new control
constructs as Tcl procedures (for example, <cmd>uplevel</cmd> could
be used to implement the <cmd>while</cmd> construct as a Tcl procedure).
</p>
<p>The <b>namespace eval</b> and <b>apply</b> commands offer other ways
(besides procedure calls) that the Tcl naming context can change.
They add a call frame to the stack to represent the namespace context.
This means each <b>namespace eval</b> command
counts as another call level for <cmd>uplevel</cmd> and <cmd>upvar</cmd> commands.
For example, <b>info level 1</b> will return a list
describing a command that is either
the outermost procedure call or the outermost <b>namespace eval</b> command.
Also, <b>uplevel #0</b> evaluates a script
at top-level in the outermost namespace (the global namespace).
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>As stated above, the <cmd>uplevel</cmd> command is useful for creating new
control constructs.  This example shows how (without error handling)
it can be used to create a <b>do</b> command that is the counterpart of
<cmd>while</cmd> except for always performing the test after running the
loop body:
</p>
<example>
proc do {body while condition} {
    if {$while ne "while"} {
        error "required word missing"
    }
    set conditionCmd [list expr $condition]
    while {1} {
        <cmd>uplevel</cmd> 1 $body
        if {![<cmd>uplevel</cmd> 1 $conditionCmd]} {
            break
        }
    }
}
</example>


</section>
<seealso>
<ref>apply(n)</ref>
<ref>namespace(n)</ref>
<ref>upvar(n)</ref>
</seealso>
<keywords>
<keyword>context</keyword>
<keyword>level</keyword>
<keyword>namespace</keyword>
<keyword>stack frame</keyword>
<keyword>variables</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="upvar" title="upvar">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: upvar.n,v 1.12 2005/05/10 18:34:03 kennykb Exp $
 -->
<?TROFF.TH title="upvar" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>upvar</name>
<desc>Create link to variable in a different stack frame</desc>
</namesection>
<synopsis>
<syntax>
<cmd>upvar</cmd> ?<m>level</m>? <m>otherVar myVar</m> ?<m>otherVar myVar</m> ...?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command arranges for one or more local variables in the current
procedure to refer to variables in an enclosing procedure call or
to global variables.
<i>Level</i> may have any of the forms permitted for the <cmd>uplevel</cmd>
command, and may be omitted if the first letter of the first <i>otherVar</i>
isn't <b>#</b> or a digit (it defaults to <b>1</b>).
For each <i>otherVar</i> argument, <cmd>upvar</cmd> makes the variable
by that name in the procedure frame given by <i>level</i> (or at
global level, if <i>level</i> is <b>#0</b>) accessible
in the current procedure by the name given in the corresponding
<i>myVar</i> argument.
The variable named by <i>otherVar</i> need not exist at the time of the
call;  it will be created the first time <i>myVar</i> is referenced, just like
an ordinary variable.  There must not exist a variable by the
name <i>myVar</i> at the time <cmd>upvar</cmd> is invoked.
<i>MyVar</i> is always treated as the name of a variable, not an
array element.  An error is returned if the name looks like an array element,
such as <b>a(b)</b>.
<i>OtherVar</i> may refer to a scalar variable, an array,
or an array element.
<b>Upvar</b> returns an empty string.
</p>
<p>The <cmd>upvar</cmd> command simplifies the implementation of call-by-name
procedure calling and also makes it easier to build new control constructs
as Tcl procedures.
For example, consider the following procedure:
</p>
<example>
proc <i>add2</i> name {
   <cmd>upvar</cmd> $name x
   set x [expr {$x + 2}]
}
</example>
<p>If <i>add2</i> is invoked with an argument giving the name of a variable,
it adds two to the value of that variable.
Although <i>add2</i> could have been implemented using <cmd>uplevel</cmd>
instead of <cmd>upvar</cmd>, <cmd>upvar</cmd> makes it simpler for <b>add2</b>
to access the variable in the caller's procedure frame.
</p>
<p><b>namespace eval</b> is another way (besides procedure calls)
that the Tcl naming context can change.
It adds a call frame to the stack to represent the namespace context.
This means each <b>namespace eval</b> command
counts as another call level for <cmd>uplevel</cmd> and <cmd>upvar</cmd> commands.
For example, <b>info level 1</b> will return a list
describing a command that is either
the outermost procedure call or the outermost <b>namespace eval</b> command.
Also, <b>uplevel #0</b> evaluates a script
at top-level in the outermost namespace (the global namespace).
</p>
<p>If an upvar variable is unset (e.g. <b>x</b> in <b>add2</b> above), the
<cmd>unset</cmd> operation affects the variable it is linked to, not the
upvar variable.  There is no way to unset an upvar variable except
by exiting the procedure in which it is defined.  However, it is
possible to retarget an upvar variable by executing another <cmd>upvar</cmd>
command.
</p>
</section>
<section>
<title>TRACES AND UPVAR</title>
<p>Upvar interacts with traces in a straightforward but possibly
unexpected manner.  If a variable trace is defined on <i>otherVar</i>, that
trace will be triggered by actions involving <i>myVar</i>.  However,
the trace procedure will be passed the name of <i>myVar</i>, rather
than the name of <i>otherVar</i>.  Thus, the output of the following code
will be "<i>localVar</i>" rather than "<i>originalVar</i>":
</p>
<example>
proc <i>traceproc</i> { name index op } {
   puts $name
}
proc <i>setByUpvar</i> { name value } {
   <cmd>upvar</cmd> $name localVar
   set localVar $value
}
set originalVar 1
trace variable originalVar w <i>traceproc</i>
<i>setByUpvar</i> originalVar 2
</example>
<p>If <i>otherVar</i> refers to an element of an array, then variable
traces set for the entire array will not be invoked when <i>myVar</i>
is accessed (but traces on the particular element will still be
invoked).  In particular, if the array is <b cat="variable">env</b>, then changes
made to <i>myVar</i> will not be passed to subprocesses correctly.
</p>
</section>
<section>
<title>EXAMPLE</title>
<p>A <b>decr</b> command that works like <cmd>incr</cmd> except it subtracts
the value from the variable instead of adding it:
</p>
<example>
proc decr {varName {decrement 1}} {
    <cmd>upvar</cmd> 1 $varName var
    incr var [expr {-$decrement}]
}
</example>


</section>
<seealso>
<ref>global(n)</ref>
<ref>namespace(n)</ref>
<ref>uplevel(n)</ref>
<ref>variable(n)</ref>
</seealso>
<keywords>
<keyword>context</keyword>
<keyword>frame</keyword>
<keyword>global</keyword>
<keyword>level</keyword>
<keyword>namespace</keyword>
<keyword>procedure</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="Utf" version="8.1" title="Utf">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: Utf.3,v 1.23 2005/05/10 18:33:58 kennykb Exp $
 -->
<?TROFF.TH title="Utf" section="3" date="8.1" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_UniChar</name>
<name>Tcl_UniCharCaseMatch</name>
<name>Tcl_UniCharNcasecmp</name>
<name>Tcl_UniCharToUtf</name>
<name>Tcl_UtfToUniChar</name>
<name>Tcl_UniCharToUtfDString</name>
<name>Tcl_UtfToUniCharDString</name>
<name>Tcl_UniCharLen</name>
<name>Tcl_UniCharNcmp</name>
<name>Tcl_UtfCharComplete</name>
<name>Tcl_NumUtfChars</name>
<name>Tcl_UtfFindFirst</name>
<name>Tcl_UtfFindLast</name>
<name>Tcl_UtfNext</name>
<name>Tcl_UtfPrev</name>
<name>Tcl_UniCharAtIndex</name>
<name>Tcl_UtfAtIndex</name>
<name>Tcl_UtfBackslash</name>
<desc>routines for manipulating UTF-8 strings</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

typedef ... Tcl_UniChar;

int
<fun>Tcl_UniCharToUtf</fun>(<m>ch</m>, <m>buf</m>)

int
<fun>Tcl_UtfToUniChar</fun>(<m>src</m>, <m>chPtr</m>)

char *
<fun>Tcl_UniCharToUtfDString</fun>(<m>uniStr</m>, <m>uniLength</m>, <m>dsPtr</m>)

Tcl_UniChar *
<fun>Tcl_UtfToUniCharDString</fun>(<m>src</m>, <m>length</m>, <m>dsPtr</m>)

int
<fun>Tcl_UniCharLen</fun>(<m>uniStr</m>)

int
<fun>Tcl_UniCharNcmp</fun>(<m>ucs</m>, <m>uct</m>, <m>numChars</m>)

int
<fun>Tcl_UniCharNcasecmp</fun>(<m>ucs</m>, <m>uct</m>, <m>numChars</m>)

int
<fun>Tcl_UniCharCaseMatch</fun>(<m>uniStr</m>, <m>uniPattern</m>, <m>nocase</m>)

int
<fun>Tcl_UtfNcmp</fun>(<m>cs</m>, <m>ct</m>, <m>numChars</m>)

int
<fun>Tcl_UtfNcasecmp</fun>(<m>cs</m>, <m>ct</m>, <m>numChars</m>)

int
<fun>Tcl_UtfCharComplete</fun>(<m>src</m>, <m>length</m>)

int 
<fun>Tcl_NumUtfChars</fun>(<m>src</m>, <m>length</m>)

const char *
<fun>Tcl_UtfFindFirst</fun>(<m>src</m>, <m>ch</m>)

const char *
<fun>Tcl_UtfFindLast</fun>(<m>src</m>, <m>ch</m>)

const char *
<fun>Tcl_UtfNext</fun>(<m>src</m>)

const char *
<fun>Tcl_UtfPrev</fun>(<m>src</m>, <m>start</m>)

Tcl_UniChar
<fun>Tcl_UniCharAtIndex</fun>(<m>src</m>, <m>index</m>)

const char *
<fun>Tcl_UtfAtIndex</fun>(<m>src</m>, <m>index</m>)

int
<fun>Tcl_UtfBackslash</fun>(<m>src</m>, <m>readPtr</m>, <m>dst</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>char</argtype>
<name name="buf">*buf</name>
<argmode>out</argmode>
<desc>Buffer in which the UTF-8 representation of the Tcl_UniChar is stored.  At most
<b>TCL_UTF_MAX</b> bytes are stored in the buffer.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>ch</name>
<argmode>in</argmode>
<desc>The Tcl_UniChar to be converted or examined.
</desc>
</argdef>
<argdef>
<argtype>Tcl_UniChar</argtype>
<name name="chPtr">*chPtr</name>
<argmode>out</argmode>
<desc>Filled with the Tcl_UniChar represented by the head of the UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="src">*src</name>
<argmode>in</argmode>
<desc>Pointer to a UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="cs">*cs</name>
<argmode>in</argmode>
<desc>Pointer to a UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="ct">*ct</name>
<argmode>in</argmode>
<desc>Pointer to a UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>const Tcl_UniChar</argtype>
<name name="uniStr">*uniStr</name>
<argmode>in</argmode>
<desc>A null-terminated Unicode string.
</desc>
</argdef>
<argdef>
<argtype>const Tcl_UniChar</argtype>
<name name="ucs">*ucs</name>
<argmode>in</argmode>
<desc>A null-terminated Unicode string.
</desc>
</argdef>
<argdef>
<argtype>const Tcl_UniChar</argtype>
<name name="uct">*uct</name>
<argmode>in</argmode>
<desc>A null-terminated Unicode string.
</desc>
</argdef>
<argdef>
<argtype>const Tcl_UniChar</argtype>
<name name="uniPattern">*uniPattern</name>
<argmode>in</argmode>
<desc>A null-terminated Unicode string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>length</name>
<argmode>in</argmode>
<desc>The length of the UTF-8 string in bytes (not UTF-8 characters).  If
negative, all bytes up to the first null byte are used.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>uniLength</name>
<argmode>in</argmode>
<desc>The length of the Unicode string in characters.  Must be greater than or
equal to 0.
</desc>
</argdef>
<argdef>
<argtype>Tcl_DString</argtype>
<name name="dsPtr">*dsPtr</name>
<argmode>in/out</argmode>
<desc>A pointer to a previously initialized <type>Tcl_DString</type>.
</desc>
</argdef>
<argdef>
<argtype>unsigned long</argtype>
<name>numChars</name>
<argmode>in</argmode>
<desc>The number of characters to compare.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="start">*start</name>
<argmode>in</argmode>
<desc>Pointer to the beginning of a UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>index</name>
<argmode>in</argmode>
<desc>The index of a character (not byte) in the UTF-8 string.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name name="readPtr">*readPtr</name>
<argmode>out</argmode>
<desc>If non-NULL, filled with the number of bytes in the backslash sequence, 
including the backslash character.
</desc>
</argdef>
<argdef>
<argtype>char</argtype>
<name name="dst">*dst</name>
<argmode>out</argmode>
<desc>Buffer in which the bytes represented by the backslash sequence are stored.
At most <b>TCL_UTF_MAX</b> bytes are stored in the buffer.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>nocase</name>
<argmode>in</argmode>
<desc>Specifies whether the match should be done case-sensitive (0) or
case-insensitive (1).
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p>These routines convert between UTF-8 strings and Tcl_UniChars.  A
Tcl_UniChar is a Unicode character represented as an unsigned, fixed-size
quantity.  A UTF-8 character is a Unicode character represented as
a varying-length sequence of up to <b>TCL_UTF_MAX</b> bytes.  A multibyte UTF-8
sequence consists of a lead byte followed by some number of trail bytes.
</p>
<p><b>TCL_UTF_MAX</b> is the maximum number of bytes that it takes to
represent one Unicode character in the UTF-8 representation.
</p>
<p><fun>Tcl_UniCharToUtf</fun> stores the Tcl_UniChar <i>ch</i> as a UTF-8 string
in starting at <i>buf</i>.  The return value is the number of bytes stored
in <i>buf</i>.
</p>
<p><fun>Tcl_UtfToUniChar</fun> reads one UTF-8 character starting at <i>src</i>
and stores it as a Tcl_UniChar in <i>*chPtr</i>.  The return value is the
number of bytes read from <i>src</i>.  The caller must ensure that the
source buffer is long enough such that this routine does not run off the
end and dereference non-existent or random memory; if the source buffer
is known to be null-terminated, this will not happen.  If the input is
not in proper UTF-8 format, <fun>Tcl_UtfToUniChar</fun> will store the first
byte of <i>src</i> in <i>*chPtr</i> as a Tcl_UniChar between 0x0000 and
0x00ff and return 1.  
</p>
<p><fun>Tcl_UniCharToUtfDString</fun> converts the given Unicode string
to UTF-8, storing the result in a previously initialized <type>Tcl_DString</type>.
You must specify <i>uniLength</i>, the length of the given Unicode string.
The return value is a pointer to the UTF-8 representation of the
Unicode string.  Storage for the return value is appended to the
end of the <type>Tcl_DString</type>.
</p>
<p><fun>Tcl_UtfToUniCharDString</fun> converts the given UTF-8 string to Unicode,
storing the result in the previously initialized <type>Tcl_DString</type>.
In the argument <i>length</i>, you may either specify the length of
the given UTF-8 string in bytes or "-1", in which
case <fun>Tcl_UtfToUniCharDString</fun> uses <b>strlen</b> to
calculate the length.  The return value is a pointer to the Unicode
representation of the UTF-8 string.  Storage for the return value
is appended to the end of the <type>Tcl_DString</type>.  The Unicode string
is terminated with a Unicode null character.
</p>
<p><fun>Tcl_UniCharLen</fun> corresponds to <b>strlen</b> for Unicode
characters.  It accepts a null-terminated Unicode string and returns
the number of Unicode characters (not bytes) in that string.
</p>
<p><fun>Tcl_UniCharNcmp</fun> and <fun>Tcl_UniCharNcasecmp</fun> correspond to
<b>strncmp</b> and <b>strncasecmp</b>, respectively, for Unicode characters.
They accept two null-terminated Unicode strings and the number of characters
to compare.  Both strings are assumed to be at least <i>numChars</i> characters
long. <fun>Tcl_UniCharNcmp</fun>  compares the two strings character-by-character
according to the Unicode character ordering.  It returns an integer greater
than, equal to, or less than 0 if the first string is greater than, equal
to, or less than the second string respectively.  <fun>Tcl_UniCharNcasecmp</fun>
is the Unicode case insensitive version.
</p>
<p><fun>Tcl_UniCharCaseMatch</fun> is the Unicode equivalent to
<fun>Tcl_StringCaseMatch</fun>.  It accepts a null-terminated Unicode string,
a Unicode pattern, and a boolean value specifying whether the match should
be case sensitive and returns whether the string matches the pattern.
</p>
<p><fun>Tcl_UtfNcmp</fun> corresponds to <b>strncmp</b> for UTF-8 strings. It
accepts two null-terminated UTF-8 strings and the number of characters
to compare.  (Both strings are assumed to be at least <i>numChars</i>
characters long.)  <fun>Tcl_UtfNcmp</fun> compares the two strings
character-by-character according to the Unicode character ordering.
It returns an integer greater than, equal to, or less than 0 if the
first string is greater than, equal to, or less than the second string
respectively.
</p>
<p><fun>Tcl_UtfNcasecmp</fun> corresponds to <b>strncasecmp</b> for UTF-8
strings.  It is similar to <fun>Tcl_UtfNcmp</fun> except comparisons ignore
differences in case when comparing upper, lower or title case
characters.
</p>
<p><fun>Tcl_UtfCharComplete</fun> returns 1 if the source UTF-8 string <i>src</i>
of <i>length</i> bytes is long enough to be decoded by
<fun>Tcl_UtfToUniChar</fun>, or 0 otherwise.  This function does not guarantee
that the UTF-8 string is properly formed.  This routine is used by
procedures that are operating on a byte at a time and need to know if a
full Tcl_UniChar has been seen.
</p>
<p><fun>Tcl_NumUtfChars</fun> corresponds to <b>strlen</b> for UTF-8 strings.  It
returns the number of Tcl_UniChars that are represented by the UTF-8 string
<i>src</i>.  The length of the source string is <i>length</i> bytes.  If the
length is negative, all bytes up to the first null byte are used.
</p>
<p><fun>Tcl_UtfFindFirst</fun> corresponds to <b>strchr</b> for UTF-8 strings.  It
returns a pointer to the first occurrence of the Tcl_UniChar <i>ch</i>
in the null-terminated UTF-8 string <i>src</i>.  The null terminator is
considered part of the UTF-8 string.  
</p>
<p><fun>Tcl_UtfFindLast</fun> corresponds to <b>strrchr</b> for UTF-8 strings.  It
returns a pointer to the last occurrence of the Tcl_UniChar <i>ch</i>
in the null-terminated UTF-8 string <i>src</i>.  The null terminator is
considered part of the UTF-8 string.  
</p>
<p>Given <i>src</i>, a pointer to some location in a UTF-8 string,
<fun>Tcl_UtfNext</fun> returns a pointer to the next UTF-8 character in the
string.  The caller must not ask for the next character after the last
character in the string if the string is not terminated by a null
character.
</p>
<p>Given <i>src</i>, a pointer to some location in a UTF-8 string (or to a
null byte immediately following such a string), <fun>Tcl_UtfPrev</fun>
returns a pointer to the closest preceding byte that starts a UTF-8
character.
This function will not back up to a position before <i>start</i>,
the start of the UTF-8 string.  If <i>src</i> was already at <i>start</i>, the
return value will be <i>start</i>.
</p>
<p><fun>Tcl_UniCharAtIndex</fun> corresponds to a C string array dereference or the
Pascal Ord() function.  It returns the Tcl_UniChar represented at the
specified character (not byte) <i>index</i> in the UTF-8 string
<i>src</i>.  The source string must contain at least <i>index</i>
characters.  Behavior is undefined if a negative <i>index</i> is given.
</p>
<p><fun>Tcl_UtfAtIndex</fun> returns a pointer to the specified character (not
byte) <i>index</i> in the UTF-8 string <i>src</i>.  The source string must
contain at least <i>index</i> characters.  This is equivalent to calling 
<fun>Tcl_UtfNext</fun> <i>index</i> times.  If a negative <i>index</i> is given,
the return pointer points to the first character in the source string.
</p>
<p><fun>Tcl_UtfBackslash</fun> is a utility procedure used by several of the Tcl
commands.  It parses a backslash sequence and stores the properly formed
UTF-8 character represented by the backslash sequence in the output
buffer <i>dst</i>.  At most <b>TCL_UTF_MAX</b> bytes are stored in the buffer.
<fun>Tcl_UtfBackslash</fun> modifies <i>*readPtr</i> to contain the number
of bytes in the backslash sequence, including the backslash character.
The return value is the number of bytes stored in the output buffer.
</p>
<p>See the <b>Tcl</b> manual entry for information on the valid backslash
sequences.  All of the sequences described in the Tcl manual entry are
supported by <fun>Tcl_UtfBackslash</fun>.

</p>
</section>
<keywords>
<keyword>utf</keyword>
<keyword>unicode</keyword>
<keyword>backslash</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="variable" version="8.0" title="variable">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993-1997 Bell Labs Innovations for Lucent Technologies
     Copyright (c) 1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: variable.n,v 1.8 2005/05/10 18:34:04 kennykb Exp $
 -->
<?TROFF.TH title="variable" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>variable</name>
<desc>create and initialize a namespace variable</desc>
</namesection>
<synopsis>
<syntax>
<b cat="AMBIGUOUS ambiguous cmd">variable</b> ?<m>name value...</m>? <m>name</m> ?<m>value</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command is normally used within a
<b>namespace eval</b> command to create one or more variables
within a namespace.
Each variable <i>name</i> is initialized with <i>value</i>.
The <i>value</i> for the last variable is optional.
</p>
<p>If a variable <i>name</i> does not exist, it is created.
In this case, if <i>value</i> is specified,
it is assigned to the newly created variable.
If no <i>value</i> is specified, the new variable is left undefined.
If the variable already exists,
it is set to <i>value</i> if <i>value</i> is specified
or left unchanged if no <i>value</i> is given.
Normally, <i>name</i> is unqualified
(does not include the names of any containing namespaces),
and the variable is created in the current namespace.
If <i>name</i> includes any namespace qualifiers,
the variable is created in the specified namespace.  If the variable
is not defined, it will be visible to the <b>namespace which</b>
command, but not to the <b>info exists</b> command.
</p>
<p>If the <b cat="AMBIGUOUS ambiguous cmd">variable</b> command is executed inside a Tcl procedure,
it creates local variables
linked to the corresponding namespace variables (and therefore these
variables are listed by <b>info vars</b>.)
In this way the <b cat="AMBIGUOUS ambiguous cmd">variable</b> command resembles the <b cat="AMBIGUOUS ambiguous cmd">global</b> command,
although the <b cat="AMBIGUOUS ambiguous cmd">global</b> command
only links to variables in the global namespace.
If any <i>value</i>s are given,
they are used to modify the values of the associated namespace variables.
If a namespace variable does not exist,
it is created and optionally initialized.
</p>
<p>A <i>name</i> argument cannot reference an element within an array.
Instead, <i>name</i> should reference the entire array,
and the initialization <i>value</i> should be left off.
After the variable has been declared,
elements within the array can be set using ordinary
<b cat="AMBIGUOUS ambiguous cmd">set</b> or <cmd>array</cmd> commands.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Create a variable in a namespace:
</p>
<example>
namespace eval foo {
    <b cat="AMBIGUOUS ambiguous cmd">variable</b> bar 12345
}
</example>
<p>Create an array in a namespace:
</p>
<example>
namespace eval someNS {
    <b cat="AMBIGUOUS ambiguous cmd">variable</b> someAry
    array set someAry {
        someName  someValue
        otherName otherValue
    }
}
</example>
<p>Access variables in namespaces from a procedure:
</p>
<example>
namespace eval foo {
    proc spong {} {
        # Variable in this namespace
        <b cat="AMBIGUOUS ambiguous cmd">variable</b> bar
        puts "bar is $bar"

        # Variable in another namespace
        <b cat="AMBIGUOUS ambiguous cmd">variable</b> ::someNS::someAry
        parray someAry
    }
}
</example>


</section>
<seealso>
<ref>global(n)</ref>
<ref>namespace(n)</ref>
<ref>upvar(n)</ref>
</seealso>
<keywords>
<keyword>global</keyword>
<keyword>namespace</keyword>
<keyword>procedure</keyword>
<keyword>variable</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="vwait" title="vwait" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1995-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: vwait.n,v 1.6 2004/10/27 14:43:54 dkf Exp $
 -->
<?TROFF.TH title="vwait" section="n" date="8.0" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>vwait</name>
<desc>Process events until a variable is written</desc>
</namesection>
<synopsis>
<syntax>
<cmd>vwait</cmd> <m>varName</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>This command enters the Tcl event loop to process events, blocking
the application if no events are ready.  It continues processing
events until some event handler sets the value of variable
<i>varName</i>.  Once <i>varName</i> has been set, the <cmd>vwait</cmd>
command will return as soon as the event handler that modified
<i>varName</i> completes.  <i>varName</i> must globally scoped
(either with a call to <b cat="AMBIGUOUS ambiguous cmd">global</b> for the <i>varName</i>, or with
the full namespace path specification).
</p>
<p>In some cases the <cmd>vwait</cmd> command may not return immediately
after <i>varName</i> is set.  This can happen if the event handler
that sets <i>varName</i> does not complete immediately.  For example,
if an event handler sets <i>varName</i> and then itself calls
<cmd>vwait</cmd> to wait for a different variable, then it may not return
for a long time.  During this time the top-level <cmd>vwait</cmd> is
blocked waiting for the event handler to complete, so it cannot
return either.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>Run the event-loop continually until some event calls <cmd>exit</cmd>.
(You can use any variable not mentioned elsewhere, but the name
<i>forever</i> reminds you at a glance of the intent.)
</p>
<example>
<cmd>vwait</cmd> forever
</example>
<p>Wait five seconds for a connection to a server socket, otherwise
close the socket and continue running the script:
</p>
<example>
# Initialise the state
after 5000 set state timeout
set server [socket -server accept 12345]
proc accept {args} {
   global state connectionInfo
   set state accepted
   set connectionInfo $args
}

# Wait for something to happen
<cmd>vwait</cmd> state

# Clean up events that could have happened
close $server
after cancel set state timeout

# Do something based on how the vwait finished...
switch $state {
   timeout {
      puts "no connection on port 12345"
   }
   accepted {
      puts "connection: $connectionInfo"
      puts [lindex $connectionInfo 0] "Hello there!"
   }
}
</example>


</section>
<seealso>
<ref>global(n)</ref>
<ref>update(n)</ref>
</seealso>
<keywords>
<keyword>event</keyword>
<keyword>variable</keyword>
<keyword>wait</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="while" title="while">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: while.n,v 1.5 2004/10/27 14:43:54 dkf Exp $
 -->
<?TROFF.TH title="while" section="n" date="" source="Tcl" manual="Tcl Built-In Commands" ?>
<namesection>
<name>while</name>
<desc>Execute script repeatedly as long as a condition is met</desc>
</namesection>
<synopsis>
<syntax>
<cmd>while</cmd> <m>test body</m>
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>while</cmd> command evaluates <i>test</i> as an expression
(in the same way that <cmd>expr</cmd> evaluates its argument).
The value of the expression must a proper boolean
value; if it is a true value
then <i>body</i> is executed by passing it to the Tcl interpreter.
Once <i>body</i> has been executed then <i>test</i> is evaluated
again, and the process repeats until eventually <i>test</i>
evaluates to a false boolean value.  <b>Continue</b>
commands may be executed inside <i>body</i> to terminate the current
iteration of the loop, and <cmd>break</cmd>
commands may be executed inside <i>body</i> to cause immediate
termination of the <cmd>while</cmd> command.  The <cmd>while</cmd> command
always returns an empty string.
</p>
<p>Note: <i>test</i> should almost always be enclosed in braces.  If not,
variable substitutions will be made before the <cmd>while</cmd>
command starts executing, which means that variable changes
made by the loop body will not be considered in the expression.
This is likely to result in an infinite loop.  If <i>test</i> is
enclosed in braces, variable substitutions are delayed until the
expression is evaluated (before
each loop iteration), so changes in the variables will be visible.
For an example, try the following script with and without the braces
around <b>$x&lt;10</b>:
</p>
<example>
set x 0
<cmd>while</cmd> {$x&lt;10} {
    puts "x is $x"
    incr x
}
</example>
</section>
<section>
<title>EXAMPLE</title>
<p>Read lines from a channel until we get to the end of the stream, and
print them out with a line-number prepended:
</p>
<example>
set lineCount 0
<cmd>while</cmd> {[gets $chan line] &gt;= 0} {
    puts "[incr lineCount]: $line"
}
</example>


</section>
<seealso>
<ref>break(n)</ref>
<ref>continue(n)</ref>
<ref>for(n)</ref>
<ref>foreach(n)</ref>
</seealso>
<keywords>
<keyword>boolean value</keyword>
<keyword>loop</keyword>
<keyword>test</keyword>
<keyword>while</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="WindowId" version="8.4" title="Tk_WindowId">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1993 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: WindowId.3,v 1.11 2007/01/05 00:00:49 nijtmans Exp $
 -->
<?TROFF.TH title="Tk_WindowId" section="3" date="8.4" source="Tk" manual="Tk Library Procedures" ?>
<namesection>
<name>Tk_WindowId</name>
<name>Tk_Parent</name>
<name>Tk_Display</name>
<name>Tk_DisplayName</name>
<name>Tk_ScreenNumber</name>
<name>Tk_Screen</name>
<name>Tk_X</name>
<name>Tk_Y</name>
<name>Tk_Width</name>
<name>Tk_Height</name>
<name>Tk_Changes</name>
<name>Tk_Attributes</name>
<name>Tk_IsContainer</name>
<name>Tk_IsEmbedded</name>
<name>Tk_IsMapped</name>
<name>Tk_IsTopLevel</name>
<name>Tk_ReqWidth</name>
<name>Tk_ReqHeight</name>
<name>Tk_MinReqWidth</name>
<name>Tk_MinReqHeight</name>
<name>Tk_InternalBorderLeft</name>
<name>Tk_InternalBorderRight</name>
<name>Tk_InternalBorderTop</name>
<name>Tk_InternalBorderBottom</name>
<name>Tk_Visual</name>
<name>Tk_Depth</name>
<name>Tk_Colormap</name>
<name>Tk_Interp</name>
<desc>retrieve information from Tk's local data structure</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tk.h&gt;</b>

Window
<fun>Tk_WindowId</fun>(<m>tkwin</m>)

Tk_Window
<fun>Tk_Parent</fun>(<m>tkwin</m>)

Display *
<fun>Tk_Display</fun>(<m>tkwin</m>)

const char *
<fun>Tk_DisplayName</fun>(<m>tkwin</m>)

int
<fun>Tk_ScreenNumber</fun>(<m>tkwin</m>)

Screen *
<fun>Tk_Screen</fun>(<m>tkwin</m>)

int
<fun>Tk_X</fun>(<m>tkwin</m>)

int
<fun>Tk_Y</fun>(<m>tkwin</m>)

int
<fun>Tk_Width</fun>(<m>tkwin</m>)

int
<fun>Tk_Height</fun>(<m>tkwin</m>)

XWindowChanges *
<fun>Tk_Changes</fun>(<m>tkwin</m>)

XSetWindowAttributes *
<fun>Tk_Attributes</fun>(<m>tkwin</m>)

int
<fun>Tk_IsContainer</fun>(<m>tkwin</m>)

int
<fun>Tk_IsEmbedded</fun>(<m>tkwin</m>)

int
<fun>Tk_IsMapped</fun>(<m>tkwin</m>)

int
<fun>Tk_IsTopLevel</fun>(<m>tkwin</m>)

int
<fun>Tk_ReqWidth</fun>(<m>tkwin</m>)

int
<fun>Tk_ReqHeight</fun>(<m>tkwin</m>)

int
<fun>Tk_MinReqWidth</fun>(<m>tkwin</m>)

int
<fun>Tk_MinReqHeight</fun>(<m>tkwin</m>)

int
<fun>Tk_InternalBorderLeft</fun>(<m>tkwin</m>)

int
<fun>Tk_InternalBorderRight</fun>(<m>tkwin</m>)

int
<fun>Tk_InternalBorderTop</fun>(<m>tkwin</m>)

int
<fun>Tk_InternalBorderBottom</fun>(<m>tkwin</m>)

Visual *
<fun>Tk_Visual</fun>(<m>tkwin</m>)

int
<fun>Tk_Depth</fun>(<m>tkwin</m>)

Colormap
<fun>Tk_Colormap</fun>(<m>tkwin</m>)

Tcl_Interp *
<b>Tk_Interp</b>(<m>tkwin</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tk_Window</argtype>
<name>tkwin</name>
<argmode>in</argmode>
<desc>Token for window.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tk_WindowId</fun> and the other names listed above are
all macros that return fields from Tk's local data structure
for <i>tkwin</i>.  None of these macros requires any
interaction with the server;  it is safe to assume that
all are fast.
</p>
<p><fun>Tk_WindowId</fun> returns the X identifier for <i>tkwin</i>,
or <b>NULL</b> if no X window has been created for <i>tkwin</i>
yet.
</p>
<p><fun>Tk_Parent</fun> returns Tk's token for the logical parent of
<i>tkwin</i>.  The parent is the token that was specified when
<i>tkwin</i> was created, or NULL for main windows.
</p>
<p><b>Tk_Interp</b> returns the Tcl interpreter associated with a
<i>tkwin</i> or NULL if there is an error.
</p>
<p><fun>Tk_Display</fun> returns a pointer to the Xlib display structure
corresponding to <i>tkwin</i>.  <fun>Tk_DisplayName</fun> returns an
ASCII string identifying <i>tkwin</i>'s display.  <fun>Tk_ScreenNumber</fun>
returns the index of <i>tkwin</i>'s screen among all the screens
of <i>tkwin</i>'s display.  <fun>Tk_Screen</fun> returns a pointer to
the Xlib structure corresponding to <i>tkwin</i>'s screen.
</p>
<p><fun>Tk_X</fun>, <fun>Tk_Y</fun>, <fun>Tk_Width</fun>, and <fun>Tk_Height</fun>
return information about <i>tkwin's</i> location within its
parent and its size.  The location information refers to the
upper-left pixel in the window, or its border if there is one.
The width and height information refers to the interior size
of the window, not including any border.  <fun>Tk_Changes</fun>
returns a pointer to a structure containing all of the above
information plus a few other fields.  <fun>Tk_Attributes</fun>
returns a pointer to an XSetWindowAttributes structure describing
all of the attributes of the <i>tkwin</i>'s window, such as background
pixmap, event mask, and so on (Tk keeps track of all this information
as it is changed by the application).  Note: it is essential that
applications use Tk procedures like <fun>Tk_ResizeWindow</fun> instead
of X procedures like <b>XResizeWindow</b>, so that Tk can keep its
data structures up-to-date.
</p>
<p><fun>Tk_IsContainer</fun> returns a non-zero value if <i>tkwin</i>
is a container, and that some other application may be embedding
itself inside <i>tkwin</i>.
</p>
<p><fun>Tk_IsEmbedded</fun> returns a non-zero value if <i>tkwin</i>
is not a free-standing window, but rather is embedded in some
other application.
</p>
<p><fun>Tk_IsMapped</fun> returns a non-zero value if <i>tkwin</i>
is mapped and zero if <i>tkwin</i> isn't mapped.
</p>
<p><fun>Tk_IsTopLevel</fun> returns a non-zero value if <i>tkwin</i>
is a top-level window (its X parent is the root window of the
screen) and zero if <i>tkwin</i> isn't a top-level window.
</p>
<p><fun>Tk_ReqWidth</fun> and <fun>Tk_ReqHeight</fun> return information about
the window's requested size.  These values correspond to the last
call to <fun>Tk_GeometryRequest</fun> for <i>tkwin</i>.
</p>
<p><fun>Tk_MinReqWidth</fun> and <fun>Tk_MinReqHeight</fun> return information about
the window's minimum requested size.  These values correspond to the last
call to <fun>Tk_SetMinimumRequestSize</fun> for <i>tkwin</i>.
</p>
<p><fun>Tk_InternalBorderLeft</fun>, <fun>Tk_InternalBorderRight</fun>,
<fun>Tk_InternalBorderTop</fun> and <fun>Tk_InternalBorderBottom</fun> 
return the width of one side of the internal border
that has been requested for <i>tkwin</i>, or 0 if no internal border was
requested.  The return value is simply the last value passed to
<fun>Tk_SetInternalBorder</fun> or <fun>Tk_SetInternalBorderEx</fun> for <i>tkwin</i>.
</p>
<p><fun>Tk_Visual</fun>, <fun>Tk_Depth</fun>, and <fun>Tk_Colormap</fun> return
information about the visual characteristics of a window.
<fun>Tk_Visual</fun> returns the visual type for
the window, <fun>Tk_Depth</fun> returns the number of bits per pixel,
and <fun>Tk_Colormap</fun> returns the current
colormap for the window.  The visual characteristics are
normally set from the defaults for the window's screen, but
they may be overridden by calling <fun>Tk_SetWindowVisual</fun>.

</p>
</section>
<keywords>
<keyword>attributes</keyword>
<keyword>colormap</keyword>
<keyword>depth</keyword>
<keyword>display</keyword>
<keyword>height</keyword>
<keyword>geometry manager</keyword>
<keyword>identifier</keyword>
<keyword>mapped</keyword>
<keyword>requested size</keyword>
<keyword>screen</keyword>
<keyword>top-level</keyword>
<keyword>visual</keyword>
<keyword>width</keyword>
<keyword>window</keyword>
<keyword>x</keyword>
<keyword>y</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="winfo" version="4.3" title="winfo">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1990-1994 The Regents of the University of California.
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: winfo.n,v 1.8 2005/04/06 21:11:54 dkf Exp $
 -->
<?TROFF.TH title="winfo" section="n" date="4.3" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>winfo</name>
<desc>Return window-related information</desc>
</namesection>
<synopsis>
<syntax>
<cmd>winfo</cmd> <m>option</m> ?<m>arg arg ...</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>winfo</cmd> command is used to retrieve information about windows
managed by Tk.  It can take any of a number of different forms,
depending on the <i>option</i> argument.  The legal forms are:
</p>
<commandlist>
<commanddef>
<command><b>winfo atom</b> ?<b>-displayof</b> <m>window</m>? <m>name</m></command>
<desc>Returns a decimal string giving the integer identifier for the
atom whose name is <i>name</i>.  If no atom exists with the name
<i>name</i> then a new one is created.
If the <b>-displayof</b> option is given then the atom is looked
up on the display of <i>window</i>;  otherwise it is looked up on
the display of the application's main window.
</desc>
</commanddef>
<commanddef>
<command><b>winfo atomname</b> ?<b>-displayof</b> <m>window</m>? <m>id</m></command>
<desc>Returns the textual name for the atom whose integer identifier is
<i>id</i>.
If the <b>-displayof</b> option is given then the identifier is looked
up on the display of <i>window</i>;  otherwise it is looked up on
the display of the application's main window.
This command is the inverse of the <b>winfo atom</b> command.
It generates an error if no such atom exists.
</desc>
</commanddef>
<commanddef>
<command><b>winfo cells</b> <m>window</m></command>
<desc>Returns a decimal string giving the number of cells in the
color map for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo children</b> <m>window</m></command>
<desc>Returns a list containing the path names of all the children
of <i>window</i>. Top-level windows are returned as children
of their logical parents. The list is in stacking order, with
the lowest window first, except for Top-level windows which
are not returned in stacking order. Use the <b>wm stackorder</b>
command to query the stacking order of Top-level windows.
</desc>
</commanddef>
<commanddef>
<command><b>winfo class</b> <m>window</m></command>
<desc>Returns the class name for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo colormapfull</b> <m>window</m></command>
<desc>Returns 1 if the colormap for <i>window</i> is known to be full, 0
otherwise.  The colormap for a window is ``known'' to be full if the last
attempt to allocate a new color on that window failed and this
application hasn't freed any colors in the colormap since the
failed allocation.
</desc>
</commanddef>
<commanddef>
<command><b>winfo containing</b> ?<b>-displayof</b> <m>window</m>? <m>rootX rootY</m></command>
<desc>Returns the path name for the window containing the point given
by <i>rootX</i> and <i>rootY</i>.
<i>RootX</i> and <i>rootY</i> are specified in screen units (i.e.
any form acceptable to <fun>Tk_GetPixels</fun>) in the coordinate
system of the root window (if a virtual-root window manager is in
use then the coordinate system of the virtual root window is used).
If the <b>-displayof</b> option is given then the coordinates refer
to the screen containing <i>window</i>;  otherwise they refer to the
screen of the application's main window.
If no window in this application contains the point then an empty
string is returned.
In selecting the containing window, children are given higher priority
than parents and among siblings the highest one in the stacking order is
chosen.
</desc>
</commanddef>
<commanddef>
<command><b>winfo depth</b> <m>window</m></command>
<desc>Returns a decimal string giving the depth of <i>window</i> (number
of bits per pixel).
</desc>
</commanddef>
<commanddef>
<command><b>winfo exists</b> <m>window</m></command>
<desc>Returns 1 if there exists a window named <i>window</i>, 0 if no such
window exists.
</desc>
</commanddef>
<commanddef>
<command><b>winfo fpixels</b> <m>window</m> <m>number</m></command>
<desc>Returns a floating-point value giving the number of pixels
in <i>window</i> corresponding to the distance given by <i>number</i>.
<i>Number</i> may be specified in any of the forms acceptable
to <fun>Tk_GetScreenMM</fun>, such as ``2.0c'' or ``1i''.
The return value may be fractional;  for an integer value, use
<b>winfo pixels</b>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo geometry</b> <m>window</m></command>
<desc>Returns the geometry for <i>window</i>, in the form
<i>width</i><b>x</b><i>height</i><b>+</b><i>x</i><b>+</b><i>y</i>.  All dimensions are
in pixels.
</desc>
</commanddef>
<commanddef>
<command><b>winfo height</b> <m>window</m></command>
<desc>Returns a decimal string giving <i>window</i>'s height in pixels.
When a window is first created its height will be 1 pixel;  the
height will eventually be changed by a geometry manager to fulfill
the window's needs.
If you need the true height immediately after creating a widget,
invoke <cmd>update</cmd> to force the geometry manager to arrange it,
or use <b>winfo reqheight</b> to get the window's requested height
instead of its actual height.
</desc>
</commanddef>
<commanddef>
<command><b>winfo id</b> <m>window</m></command>
<desc>Returns a hexadecimal string giving a low-level platform-specific
identifier for <i>window</i>.  On Unix platforms, this is the X
window identifier.  Under Windows, this is the Windows
HWND.  On the Macintosh the value has no meaning outside Tk.
</desc>
</commanddef>
<commanddef>
<command><b>winfo interps</b> ?<b>-displayof</b> <m>window</m>?</command>
<desc>Returns a list whose members are the names of all Tcl interpreters
(e.g. all Tk-based applications) currently registered for a particular display.
If the <b>-displayof</b> option is given then the return value refers
to the display of <i>window</i>;  otherwise it refers to
the display of the application's main window.
</desc>
</commanddef>
<commanddef>
<command><b>winfo ismapped</b> <m>window</m></command>
<desc>Returns <b>1</b> if <i>window</i> is currently mapped, <b>0</b> otherwise.
</desc>
</commanddef>
<commanddef>
<command><b>winfo manager</b> <m>window</m></command>
<desc>Returns the name of the geometry manager currently
responsible for <i>window</i>, or an empty string if <i>window</i>
isn't managed by any geometry manager.
The name is usually the name of the Tcl command for the geometry
manager, such as <cmd>pack</cmd> or <cmd>place</cmd>.
If the geometry manager is a widget, such as canvases or text, the
name is the widget's class command, such as <b cat="AMBIGUOUS widget cmd">canvas</b>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo name</b> <m>window</m></command>
<desc>Returns <i>window</i>'s name (i.e. its name within its parent, as opposed
to its full path name).
The command <b>winfo name .</b> will return the name of the application.
</desc>
</commanddef>
<commanddef>
<command><b>winfo parent</b> <m>window</m></command>
<desc>Returns the path name of <i>window</i>'s parent, or an empty string
if <i>window</i> is the main window of the application.
</desc>
</commanddef>
<commanddef>
<command><b>winfo pathname</b> ?<b>-displayof</b> <m>window</m>? <m>id</m></command>
<desc>Returns the path name of the window whose X identifier is <i>id</i>.
<i>Id</i> must be a decimal, hexadecimal, or octal integer and must
correspond to a window in the invoking application.
If the <b>-displayof</b> option is given then the identifier is looked
up on the display of <i>window</i>;  otherwise it is looked up on
the display of the application's main window.
</desc>
</commanddef>
<commanddef>
<command><b>winfo pixels</b> <m>window</m> <m>number</m></command>
<desc>Returns the number of pixels in <i>window</i> corresponding
to the distance given by <i>number</i>.
<i>Number</i> may be specified in any of the forms acceptable
to <fun>Tk_GetPixels</fun>, such as ``2.0c'' or ``1i''.
The result is rounded to the nearest integer value;  for a
fractional result, use <b>winfo fpixels</b>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo pointerx</b> <m>window</m></command>
<desc>If the mouse pointer is on the same screen as <i>window</i>, returns the
pointer's x coordinate, measured in pixels in the screen's root window.
If a virtual root window is in use on the screen, the position is
measured in the virtual root.
If the mouse pointer isn't on the same screen as <i>window</i> then
-1 is returned.
</desc>
</commanddef>
<commanddef>
<command><b>winfo pointerxy</b> <m>window</m></command>
<desc>If the mouse pointer is on the same screen as <i>window</i>, returns a list
with two elements, which are the pointer's x and y coordinates measured
in pixels in the screen's root window.
If a virtual root window is in use on the screen, the position
is computed in the virtual root.
If the mouse pointer isn't on the same screen as <i>window</i> then
both of the returned coordinates are -1.
</desc>
</commanddef>
<commanddef>
<command><b>winfo pointery</b> <m>window</m></command>
<desc>If the mouse pointer is on the same screen as <i>window</i>, returns the
pointer's y coordinate, measured in pixels in the screen's root window.
If a virtual root window is in use on the screen, the position
is computed in the virtual root.
If the mouse pointer isn't on the same screen as <i>window</i> then
-1 is returned.
</desc>
</commanddef>
<commanddef>
<command><b>winfo reqheight</b> <m>window</m></command>
<desc>Returns a decimal string giving <i>window</i>'s requested height,
in pixels.  This is the value used by <i>window</i>'s geometry
manager to compute its geometry.
</desc>
</commanddef>
<commanddef>
<command><b>winfo reqwidth</b> <m>window</m></command>
<desc>Returns a decimal string giving <i>window</i>'s requested width,
in pixels.  This is the value used by <i>window</i>'s geometry
manager to compute its geometry.
</desc>
</commanddef>
<commanddef>
<command><b>winfo rgb</b> <m>window color</m></command>
<desc>Returns a list containing three decimal values in the range 0 to
65535, which are the
red, green, and blue intensities that correspond to <i>color</i> in
the window given by <i>window</i>.  <i>Color</i>
may be specified in any of the forms acceptable for a color
option.
</desc>
</commanddef>
<commanddef>
<command><b>winfo rootx</b> <m>window</m></command>
<desc>Returns a decimal string giving the x-coordinate, in the root
window of the screen, of the
upper-left corner of <i>window</i>'s border (or <i>window</i> if it
has no border).
</desc>
</commanddef>
<commanddef>
<command><b>winfo rooty</b> <m>window</m></command>
<desc>Returns a decimal string giving the y-coordinate, in the root
window of the screen, of the
upper-left corner of <i>window</i>'s border (or <i>window</i> if it
has no border).
</desc>
</commanddef>
<commanddef>
<command><b>winfo screen</b> <m>window</m></command>
<desc>Returns the name of the screen associated with <i>window</i>, in
the form <i>displayName</i>.<i>screenIndex</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screencells</b> <m>window</m></command>
<desc>Returns a decimal string giving the number of cells in the default
color map for <i>window</i>'s screen.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screendepth</b> <m>window</m></command>
<desc>Returns a decimal string giving the depth of the root window
of <i>window</i>'s screen (number of bits per pixel).
</desc>
</commanddef>
<commanddef>
<command><b>winfo screenheight</b> <m>window</m></command>
<desc>Returns a decimal string giving the height of <i>window</i>'s screen,
in pixels.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screenmmheight</b> <m>window</m></command>
<desc>Returns a decimal string giving the height of <i>window</i>'s screen,
in millimeters.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screenmmwidth</b> <m>window</m></command>
<desc>Returns a decimal string giving the width of <i>window</i>'s screen,
in millimeters.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screenvisual</b> <m>window</m></command>
<desc>Returns one of the following strings to indicate the default visual
class for <i>window</i>'s screen: <b>directcolor</b>, <b>grayscale</b>,
<b>pseudocolor</b>, <b>staticcolor</b>, <b>staticgray</b>, or
<b>truecolor</b>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo screenwidth</b> <m>window</m></command>
<desc>Returns a decimal string giving the width of <i>window</i>'s screen,
in pixels.
</desc>
</commanddef>
<commanddef>
<command><b>winfo server</b> <m>window</m></command>
<desc>Returns a string containing information about the server for
<i>window</i>'s display.  The exact format of this string may vary
from platform to platform.  For X servers the string
has the form ``<b>X</b><i>major</i><b>R</b><i>minor vendor vendorVersion</i>''
where <i>major</i> and <i>minor</i> are the version and revision
numbers provided by the server (e.g., <b>X11R5</b>), <i>vendor</i>
is the name of the vendor for the server, and <i>vendorRelease</i>
is an integer release number provided by the server.
</desc>
</commanddef>
<commanddef>
<command><b>winfo toplevel</b> <m>window</m></command>
<desc>Returns the path name of the top-of-hierarchy window containing <i>window</i>.
In standard Tk this will always be a <b cat="AMBIGUOUS widget cmd">toplevel</b> widget, but extensions may
create other kinds of top-of-hierarchy widgets.
</desc>
</commanddef>
<commanddef>
<command><b>winfo viewable</b> <m>window</m></command>
<desc>Returns 1 if <i>window</i> and all of its ancestors up through the
nearest toplevel window are mapped.  Returns 0 if any of these
windows are not mapped.
</desc>
</commanddef>
<commanddef>
<command><b>winfo visual</b> <m>window</m></command>
<desc>Returns one of the following strings to indicate the visual
class for <i>window</i>: <b>directcolor</b>, <b>grayscale</b>,
<b>pseudocolor</b>, <b>staticcolor</b>, <b>staticgray</b>, or
<b>truecolor</b>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo visualid</b> <m>window</m></command>
<desc>Returns the X identifier for the visual for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo visualsavailable</b> <m>window</m> ?<b>includeids</b>?</command>
<desc>Returns a list whose elements describe the visuals available for
<i>window</i>'s screen.
Each element consists of a visual class followed by an integer depth.
The class has the same form as returned by <b>winfo visual</b>.
The depth gives the number of bits per pixel in the visual.
In addition, if the <b>includeids</b> argument is provided, then the
depth is followed by the X identifier for the visual.
</desc>
</commanddef>
<commanddef>
<command><b>winfo vrootheight</b> <m>window</m></command>
<desc>Returns the height of the virtual root window associated with <i>window</i>
if there is one;  otherwise returns the height of <i>window</i>'s screen.
</desc>
</commanddef>
<commanddef>
<command><b>winfo vrootwidth</b> <m>window</m></command>
<desc>Returns the width of the virtual root window associated with <i>window</i>
if there is one;  otherwise returns the width of <i>window</i>'s screen.
</desc>
</commanddef>
<commanddef>
<command><b>winfo vrootx</b> <m>window</m></command>
<desc>Returns the x-offset of the virtual root window associated with <i>window</i>,
relative to the root window of its screen.
This is normally either zero or negative.
Returns 0 if there is no virtual root window for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo vrooty</b> <m>window</m></command>
<desc>Returns the y-offset of the virtual root window associated with <i>window</i>,
relative to the root window of its screen.
This is normally either zero or negative.
Returns 0 if there is no virtual root window for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>winfo width</b> <m>window</m></command>
<desc>Returns a decimal string giving <i>window</i>'s width in pixels.
When a window is first created its width will be 1 pixel;  the
width will eventually be changed by a geometry manager to fulfill
the window's needs.
If you need the true width immediately after creating a widget,
invoke <cmd>update</cmd> to force the geometry manager to arrange it,
or use <b>winfo reqwidth</b> to get the window's requested width
instead of its actual width.
</desc>
</commanddef>
<commanddef>
<command><b>winfo x</b> <m>window</m></command>
<desc>Returns a decimal string giving the x-coordinate, in <i>window</i>'s
parent, of the
upper-left corner of <i>window</i>'s border (or <i>window</i> if it
has no border).
</desc>
</commanddef>
<commanddef>
<command><b>winfo y</b> <m>window</m></command>
<desc>Returns a decimal string giving the y-coordinate, in <i>window</i>'s
parent, of the
upper-left corner of <i>window</i>'s border (or <i>window</i> if it
has no border).
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>EXAMPLE</title>
<p>Print where the mouse pointer is and what window it is currently over:
</p>
<example>
lassign [<b>winfo pointerxy</b> .] x y
puts -nonewline "Mouse pointer at ($x,$y) which is "
set win [<b>winfo containing</b> $x $y]
if {$win eq ""} {
    puts "over no window"
} else {
    puts "over $win"
}
</example>


</section>
<keywords>
<keyword>application name</keyword>
<keyword>atom</keyword>
<keyword>children</keyword>
<keyword>class</keyword>
<keyword>geometry</keyword>
<keyword>height</keyword>
<keyword>identifier</keyword>
<keyword>information</keyword>
<keyword>interpreters</keyword>
<keyword>mapped</keyword>
<keyword>parent</keyword>
<keyword>path name</keyword>
<keyword>screen</keyword>
<keyword>virtual root</keyword>
<keyword>width</keyword>
<keyword>window</keyword>
</keywords>
</manpage>
<manpage cat="syscmd" id="wish" title="wish" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1991-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: wish.1,v 1.5 2004/09/09 12:17:11 dkf Exp $
 -->
<?TROFF.TH title="wish" section="1" date="8.0" source="Tk" manual="Tk Applications" ?>
<namesection>
<name>wish</name>
<desc>Simple windowing shell</desc>
</namesection>
<synopsis>
<syntax>
<b>wish</b> ?-encoding <m>name</m>? ?<m>fileName arg arg ...</m>?
</syntax>
</synopsis>
<section id="options">
<title>OPTIONS</title>
<dl>
<dle>
<dt><b>-encoding</b> <m>name</m></dt>
<dd><new version="8.5">Specifies the encoding of the text stored in <i>fileName</i>.
This option is only recognized prior to the <i>fileName</i> argument.
</new></dd>
</dle>
<dle>
<dt><b>-colormap</b> <m>new</m></dt>
<dd>Specifies that the window should have a new private colormap instead of
using the default colormap for the screen.
</dd>
</dle>
<dle>
<dt><b>-display</b> <m>display</m></dt>
<dd>Display (and screen) on which to display window.
</dd>
</dle>
<dle>
<dt><b>-geometry</b> <m>geometry</m></dt>
<dd>Initial geometry to use for window.  If this option is specified, its
value is stored in the <b>geometry</b> global variable of the application's
Tcl interpreter.
</dd>
</dle>
<dle>
<dt><b>-name</b> <m>name</m></dt>
<dd>Use <i>name</i> as the title to be displayed in the window, and
as the name of the interpreter for <cmd>send</cmd> commands.
</dd>
</dle>
<dle>
<dt><b>-sync</b></dt>
<dd>Execute all X server commands synchronously, so that errors
are reported immediately.  This will result in much slower
execution, but it is useful for debugging.
</dd>
</dle>
<dle>
<dt><b>-use</b> <m>id</m></dt>
<dd>Specifies that the main window for the application is to be embedded in
the window whose identifier is <i>id</i>, instead of being created as an
independent toplevel window.  <i>Id</i> must be specified in the same
way as the value for the <b>-use</b> option for toplevel widgets (i.e.
it has a form like that returned by the <b>winfo id</b> command).
<p>Note that on some platforms this will only work correctly if <i>id</i>
refers to a Tk <b cat="AMBIGUOUS widget cmd">frame</b> or <b cat="AMBIGUOUS widget cmd">toplevel</b> that has its
<b>-container</b> option enabled.
</p></dd>
</dle>
<dle>
<dt><b>-visual</b> <m>visual</m></dt>
<dd>Specifies the visual to use for the window.
<i>Visual</i> may have any of the forms supported by the <fun>Tk_GetVisual</fun>
procedure.
</dd>
</dle>
<dle>
<dt><b>--</b></dt>
<dd>Pass all remaining arguments through to the script's <b cat="variable">argv</b>
variable without interpreting them.
This provides a mechanism for passing arguments such as <b>-name</b>
to a script instead of having <b>wish</b> interpret them.
</dd>
</dle>
</dl>
</section>


<section>
<title>DESCRIPTION</title>
<p><b>Wish</b> is a simple program consisting of the Tcl command
language, the Tk toolkit, and a main program that reads commands
from standard input or from a file.
It creates a main window and then processes Tcl commands.
If <b>wish</b> is invoked with arguments, then the first few
arguments, ?<b>-encoding</b> <i>name</i>? ?<i>fileName</i>? specify the
name of a script file, and, optionally, the
encoding of the text data stored in that script file.  A value
for <i>fileName</i> is recognized if the appropriate argument
does not start with ``-''.
</p>
<p>If there are no arguments, or the arguments do not specify a <i>fileName</i>,
then wish reads Tcl commands interactively from standard input.
It will continue processing commands until all windows have been
deleted or until end-of-file is reached on standard input.
If there exists a file <b>.wishrc</b> in the home directory of
the user, <b>wish</b> evaluates the file as a Tcl script
just before reading the first command from standard input.
</p>
<p>If arguments to <b>wish</b> do specify a <i>fileName</i>, then 
<i>fileName</i> is treated as the name of a script file.
<b>Wish</b> will evaluate the script in <i>fileName</i> (which
presumably creates a user interface), then it will respond to events
until all windows have been deleted.
Commands will not be read from standard input.
There is no automatic evaluation of <b>.wishrc</b> when the name
of a script file is presented on the <b>wish</b> command line,
but the script file can always <b cat="AMBIGUOUS ambiguous cmd">source</b> it if desired.

</p>
</section>
<section>
<title>OPTIONS</title>
<p><b>Wish</b> automatically processes all of the command-line options
described in the <ref refid="options">OPTIONS</ref> summary above.
Any other command-line arguments besides these are passed through
to the application using the <b cat="variable">argc</b> and <b cat="variable">argv</b> variables
described later.

</p>
</section>
<section>
<title>APPLICATION NAME AND CLASS</title>
<p>The name of the application, which is used for purposes such as
<cmd>send</cmd> commands, is taken from the <b>-name</b> option,
if it is specified;  otherwise it is taken from <i>fileName</i>,
if it is specified, or from the command name by which
<b>wish</b> was invoked.  In the last two cases, if the name contains a ``/''
character, then only the characters after the last slash are used
as the application name.
</p>
<p>The class of the application, which is used for purposes such as
specifying options with a <b>RESOURCE_MANAGER</b> property or .Xdefaults
file, is the same as its name except that the first letter is
capitalized.

</p>
</section>
<section>
<title>VARIABLES</title>
<p><b>Wish</b> sets the following Tcl variables:
</p>
<dl>
<dle>
<dt><b>argc</b></dt>
<dd>Contains a count of the number of <i>arg</i> arguments (0 if none),
not including the options described above.
</dd>
</dle>
<dle>
<dt><b>argv</b></dt>
<dd>Contains a Tcl list whose elements are the <i>arg</i> arguments
that follow a <b>--</b> option or don't match any of the
options described in OPTIONS above, in order, or an empty string
if there are no such arguments.
</dd>
</dle>
<dle>
<dt><b>argv0</b></dt>
<dd>Contains <i>fileName</i> if it was specified.
Otherwise, contains the name by which <b>wish</b> was invoked.
</dd>
</dle>
<dle>
<dt><b>geometry</b></dt>
<dd>If the <b>-geometry</b> option is specified, <b>wish</b> copies its
value into this variable.  If the variable still exists after
<i>fileName</i> has been evaluated, <b>wish</b> uses the value of
the variable in a <b>wm geometry</b> command to set the main
window's geometry.
</dd>
</dle>
<dle>
<dt><b>tcl_interactive</b></dt>
<dd>Contains 1 if <b>wish</b> is reading commands interactively (<i>fileName</i>
was not specified and standard input is a terminal-like
device), 0 otherwise.

</dd>
</dle>
</dl>
</section>
<section>
<title>SCRIPT FILES</title>
<p>If you create a Tcl script in a file whose first line is
</p>
<example>
<b>#!/usr/local/bin/wish</b>
</example>
<p>then you can invoke the script file directly from your shell if
you mark it as executable.
This assumes that <b>wish</b> has been installed in the default
location in /usr/local/bin;  if it's installed somewhere else
then you'll have to modify the above line to match.
Many UNIX systems do not allow the <b>#!</b> line to exceed about
30 characters in length, so be sure that the <b>wish</b> executable
can be accessed with a short file name.
</p>
<p>An even better approach is to start your script files with the
following three lines:
</p>
<example>
<b>#!/bin/sh
# the next line restarts using wish \
exec wish "$0" "$@"</b>
</example>
<p>This approach has three advantages over the approach in the previous
paragraph.  First, the location of the <b>wish</b> binary doesn't have
to be hard-wired into the script:  it can be anywhere in your shell
search path.  Second, it gets around the 30-character file name limit
in the previous approach.
Third, this approach will work even if <b>wish</b> is
itself a shell script (this is done on some systems in order to
handle multiple architectures or operating systems:  the <b>wish</b>
script selects one of several binaries to run).  The three lines
cause both <b>sh</b> and <b>wish</b> to process the script, but the
<cmd>exec</cmd> is only executed by <b>sh</b>.
<b>sh</b> processes the script first;  it treats the second
line as a comment and executes the third line.
The <cmd>exec</cmd> statement cause the shell to stop processing and
instead to start up <b>wish</b> to reprocess the entire script.
When <b>wish</b> starts up, it treats all three lines as comments,
since the backslash at the end of the second line causes the third
line to be treated as part of the comment on the second line.
</p>
<p>The end of a script file may be marked either by the physical end of
the medium, or by the character, '\032' ('\u001a', control-Z).
If this character is present in the file, the <b>wish</b> application
will read text up to but not including the character.  An application
that requires this character in the file may encode it as
``\032'', ``\x1a'', or ``\u001a''; or may generate it by use of commands 
such as <b cat="AMBIGUOUS ambiguous cmd">format</b> or <b cat="AMBIGUOUS ambiguous cmd">binary</b>.
</p>
</section>
<section>
<title>PROMPTS</title>
<p>When <b>wish</b> is invoked interactively it normally prompts for each
command with ``<b>%</b> ''.  You can change the prompt by setting the
variables <b>tcl_prompt1</b> and <b>tcl_prompt2</b>.  If variable
<b>tcl_prompt1</b> exists then it must consist of a Tcl script
to output a prompt;  instead of outputting a prompt <b>wish</b>
will evaluate the script in <b>tcl_prompt1</b>.
The variable <b>tcl_prompt2</b> is used in a similar way when
a newline is typed but the current command isn't yet complete;
if <b>tcl_prompt2</b> isn't set then no prompt is output for
incomplete commands.

</p>
</section>
<keywords>
<keyword>shell</keyword>
<keyword>toolkit</keyword>
</keywords>
</manpage>
<manpage cat="cmd" id="wm" version="8.5" title="wm">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1991-1994 The Regents of the University of California.
     Copyright (c) 1994-1996 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: wm.n,v 1.28 2006/12/01 19:48:00 hobbs Exp $
 -->
<?TROFF.TH title="wm" section="n" date="8.5" source="Tk" manual="Tk Built-In Commands" ?>
<namesection>
<name>wm</name>
<desc>Communicate with window manager</desc>
</namesection>
<synopsis>
<syntax>
<cmd>wm</cmd> <m>option window</m> ?<m>args</m>?
</syntax>
</synopsis>


<section>
<title>DESCRIPTION</title>
<p>The <cmd>wm</cmd> command is used to interact with window managers in
order to control such things as the title for a window, its geometry,
or the increments in terms of which it may be resized.  The <cmd>wm</cmd>
command can take any of a number of different forms, depending on
the <i>option</i> argument.  All of the forms expect at least one
additional argument, <i>window</i>, which must be the path name of a
top-level window.
</p>
<p>The legal forms for the <cmd>wm</cmd> command are:
</p>
<commandlist>
<commanddef>
<command><b>wm aspect</b> <m>window</m> ?<m>minNumer minDenom maxNumer maxDenom</m>?</command>
<desc>If <i>minNumer</i>, <i>minDenom</i>, <i>maxNumer</i>, and <i>maxDenom</i>
are all specified, then they will be passed to the window manager
and the window manager should use them to enforce a range of
acceptable aspect ratios for <i>window</i>.  The aspect ratio of
<i>window</i> (width/length) will be constrained to lie
between <i>minNumer</i>/<i>minDenom</i> and <i>maxNumer</i>/<i>maxDenom</i>.
If <i>minNumer</i> etc. are all specified as empty strings, then
any existing aspect ratio restrictions are removed.
If <i>minNumer</i> etc. are specified, then the command returns an
empty string.  Otherwise, it returns
a Tcl list containing four elements, which are the current values
of <i>minNumer</i>, <i>minDenom</i>, <i>maxNumer</i>, and <i>maxDenom</i>
(if no aspect restrictions are in effect, then an empty string is
returned).
</desc>
</commanddef>
<commanddef>
<command><b>wm attributes</b> <m>window</m></command>
<desc/>
</commanddef>
<commanddef>
<command><b>wm attributes</b> <m>window</m> ?<b>option</b>?</command>
<desc/>
</commanddef>
<commanddef>
<command><b>wm attributes</b> <m>window</m> ?<b>option value option value...</b>?</command>
<desc>This subcommand returns or sets platform specific attributes associated
with a window. The first form returns a list of the platform specific
flags and their values. The second form returns the value for the
specific option. The third form sets one or more of the values. The
values are as follows:
</desc>
</commanddef>
</commandlist>
<p>On Windows, the following attributes may be set.
</p>
<dl>
<dle>
<dt><b>-disabled</b></dt>
<dd>Specifies whether the window is in a disabled state.
</dd>
</dle>
<dle>
<dt><b>-toolwindow</b></dt>
<dd>Specifies a toolwindow style window (as defined in the MSDN).
</dd>
</dle>
<dle>
<dt><b>-topmost</b></dt>
<dd>Specifies whether this is a topmost window (displays above all other windows).
</dd>
</dle>
<?NEW 8.5?>
<dle>
<dt><b>-alpha</b></dt>
<dd>Specifies the alpha transparency level of the toplevel.
It accepts a value from <b>0.0</b> (fully transparent) to <b>1.0</b>
(opaque).  Values outside that range will be constrained.  This is
supported on Windows 2000/XP+.  Where not supported, the <b>-alpha</b>
value remains at <b>1.0</b>.
</dd>
</dle>
<dle>
<dt><b>-transparentcolor</b></dt>
<dd>Specifies the transparent color index of the toplevel.  It takes any color
value accepted by <fun>Tk_GetColor</fun>.  If the empty string is specified
(default), no transparent color is used.  This is supported on Windows
2000/XP+.  Where not supported, the <b>-transparentcolor</b> value remains
at <b>{}</b>.
</dd>
</dle>
<dle>
<dt><b>-fullscreen</b></dt>
<dd>Places the window in a mode that takes up the entire screen, has no
borders, and covers the Start menu and taskbar.
</dd>
</dle>
</dl>
<?ENDNEW CONFUSED 8.5?>
<p>On Mac OS X, the following attributes may be set.
</p>
<dl>
<dle>
<dt><b>-modified</b></dt>
<dd>Specifies the modification state of the window (determines whether the
window close widget contains the modification indicator and whether the
proxy icon is draggable).
</dd>
</dle>
<dle>
<dt><b>-titlepath</b></dt>
<dd>Specifies the path of the file referenced as the window proxy icon (which
can be dragged and dropped in lieu of the file's finder icon).
</dd>
</dle>
<dle>
<dt><b>-alpha</b></dt>
<dd>Specifies the alpha transparency level of the window.
It accepts a value from <b>0.0</b> (fully transparent) to <b>1.0</b> (opaque),
values outside that range will be constrained.
</dd>
</dle>
</dl>
<p>On X11, the following attributes may be set.
These are not supported by all window managers,
and will have no effect under older WMs.
</p>
<dl>
<dle>
<dt><b>-topmost</b></dt>
<dd>Requests that this window should be kept above
all other windows that do not also have the <b>-topmost</b>
attribute set.
</dd>
</dle>
<dle>
<dt><b>-zoomed</b></dt>
<dd>Requests that the window should be maximized.
This is the same as <b>[wm state zoomed]</b> on Windows and Mac OS X.
</dd>
</dle>
<dle>
<dt><b>-fullscreen</b></dt>
<dd>Requests that the window should fill the entire screen 
and have no window decorations.
</dd>
</dle>
</dl>
<p>On X11, changes to window attributes are performed asynchronously.
Querying the value of an attribute returns the current state,
which will not be the same as the value most recently set
if the window manager has not yet processed the request
or if it does not support the attribute.
</p>
<commandlist>
<commanddef>
<command><b>wm client</b> <m>window</m> ?<m>name</m>?</command>
<desc>If <i>name</i> is specified, this command stores <i>name</i> (which
should be the name of
the host on which the application is executing) in <i>window</i>'s
<b>WM_CLIENT_MACHINE</b> property for use by the window manager or
session manager.
The command returns an empty string in this case.
If <i>name</i> isn't specified, the command returns the last name
set in a <b>wm client</b> command for <i>window</i>.
If <i>name</i> is specified as an empty string, the command deletes the
<b>WM_CLIENT_MACHINE</b> property from <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>wm colormapwindows</b> <m>window</m> ?<m>windowList</m>?</command>
<desc>This command is used to manipulate the <b>WM_COLORMAP_WINDOWS</b>
property, which provides information to the window managers about
windows that have private colormaps.
If <i>windowList</i> isn't specified, the command returns a list
whose elements are the names of the windows in the <b>WM_COLORMAP_WINDOWS</b>
property.
If <i>windowList</i> is specified, it consists of a list of window
path names;  the command overwrites the <b>WM_COLORMAP_WINDOWS</b>
property with the given windows and returns an empty string.
The <b>WM_COLORMAP_WINDOWS</b> property should normally contain a
list of the internal windows within <i>window</i> whose colormaps differ
from their parents.
The order of the windows in the property indicates a priority order:
the window manager will attempt to install as many colormaps as possible
from the head of this list when <i>window</i> gets the colormap focus.
If <i>window</i> is not included among the windows in <i>windowList</i>,
Tk implicitly adds it at the end of the <b>WM_COLORMAP_WINDOWS</b>
property, so that its colormap is lowest in priority.
If <b>wm colormapwindows</b> is not invoked, Tk will automatically set
the property for each top-level window to all the internal windows
whose colormaps differ from their parents, followed by the top-level
itself;  the order of the internal windows is undefined.
See the ICCCM documentation for more information on the
<b>WM_COLORMAP_WINDOWS</b> property.
</desc>
</commanddef>
<commanddef>
<command><b>wm command</b> <m>window</m> ?<m>value</m>?</command>
<desc>If <i>value</i> is specified, this command stores <i>value</i> in <i>window</i>'s
<b>WM_COMMAND</b> property for use by the window manager or
session manager and returns an empty string.
<i>Value</i> must have proper list structure;  the elements should
contain the words of the command used to invoke the application.
If <i>value</i> isn't specified then the command returns the last value
set in a <b>wm command</b> command for <i>window</i>.
If <i>value</i> is specified as an empty string, the command
deletes the <b>WM_COMMAND</b> property from <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>wm deiconify</b> <m>window</m></command>
<desc>Arrange for <i>window</i> to be displayed in normal (non-iconified) form.
This is done by mapping the window.  If the window has never been
mapped then this command will not map the window, but it will ensure
that when the window is first mapped it will be displayed
in de-iconified form.  On Windows, a deiconified window will also be
raised and be given the focus (made the active window).
Returns an empty string.
</desc>
</commanddef>
<commanddef>
<command><b>wm focusmodel</b> <m>window</m> ?<b>active</b>|<b>passive</b>?</command>
<desc>If <b>active</b> or <b>passive</b> is supplied as an optional argument
to the command, then it specifies the focus model for <i>window</i>.
In this case the command returns an empty string.  If no additional
argument is supplied, then the command returns the current focus
model for <i>window</i>.
An <b>active</b> focus model means that <i>window</i> will claim the
input focus for itself or its descendants, even at times when
the focus is currently in some other application.  <b>Passive</b> means that
<i>window</i> will never claim the focus for itself:  the window manager
should give the focus to <i>window</i> at appropriate times.  However,
once the focus has been given to <i>window</i> or one of its descendants,
the application may re-assign the focus among <i>window</i>'s descendants.
The focus model defaults to <b>passive</b>, and Tk's <cmd>focus</cmd> command
assumes a passive model of focusing.
</desc>
</commanddef>
<commanddef>
<command><b>wm frame</b> <m>window</m></command>
<desc>If <i>window</i> has been reparented by the window manager into a
decorative frame, the command returns the platform specific window
identifier for the outermost frame that contains <i>window</i> (the
window whose parent is the root or virtual root).  If <i>window</i>
hasn't been reparented by the window manager then the command returns
the platform specific window identifier for <i>window</i>.
</desc>
</commanddef>
<commanddef>
<command><b>wm geometry</b> <m>window</m> ?<m>newGeometry</m>?</command>
<desc>If <i>newGeometry</i> is specified, then the geometry of <i>window</i>
is changed and an empty string is returned.  Otherwise the current
geometry for <i>window</i> is returned (this is the most recent
geometry specified either by manual resizing or
in a <b>wm geometry</b> command).  <i>NewGeometry</i> has
the form <b>=</b><i>width</i><b>x</b><i>height</i><b>&#177;</b><i>x</i><b>&#177;</b><i>y</i>, where
any of <b>=</b>, <i>width</i><b>x</b><i>height</i>, or <b>&#177;</b><i>x</i><b>&#177;</b><i>y</i>
may be omitted.  <i>Width</i> and <i>height</i> are positive integers
specifying the desired dimensions of <i>window</i>.  If <i>window</i>
is gridded (see <ref refid="gridded-geometry-management">GRIDDED GEOMETRY MANAGEMENT</ref> below) then the dimensions
are specified in grid units;  otherwise they are specified in pixel
units.  <i>X</i> and <i>y</i> specify the desired location of
<i>window</i> on the screen, in pixels.
If <i>x</i> is preceded by <b>+</b>, it specifies
the number of pixels between the left edge of the screen and the left
edge of <i>window</i>'s border;  if preceded by <b>-</b> then
<i>x</i> specifies the number of pixels
between the right edge of the screen and the right edge of <i>window</i>'s
border.  If <i>y</i> is preceded by <b>+</b> then it specifies the
number of pixels between the top of the screen and the top
of <i>window</i>'s border;  if <i>y</i> is preceded by <b>-</b> then
it specifies the number of pixels between the bottom of <i>window</i>'s
border and the bottom of the screen.
If <i>newGeometry</i> is specified as an empty string then any
existing user-specified geometry for <i>window</i> is cancelled, and
the window will revert to the size requested internally by its
widgets.
</desc>
</commanddef>
<commanddef>
<command><b>wm grid</b> <m>window</m> ?<m>baseWidth baseHeight widthInc heightInc</m>?</command>
<desc>This command indicates that <i>window</i> is to be managed as a
gridded window.
It also specifies the relationship between grid units and pixel units.
<i>BaseWidth</i> and <i>baseHeight</i> specify the number of grid
units corresponding to the pixel dimensions requested internally
by <i>window</i> using <fun>Tk_GeometryRequest</fun>.  <i>WidthInc</i>
and <i>heightInc</i> specify the number of pixels in each horizontal
and vertical grid unit.
These four values determine a range of acceptable sizes for
<i>window</i>, corresponding to grid-based widths and heights
that are non-negative integers.
Tk will pass this information to the window manager;  during
manual resizing, the window manager will restrict the window's size
to one of these acceptable sizes.
Furthermore, during manual resizing the window manager will display
the window's current size in terms of grid units rather than pixels.
If <i>baseWidth</i> etc. are all specified as empty strings, then
<i>window</i> will no longer be managed as a gridded window.  If
<i>baseWidth</i> etc. are specified then the return value is an
empty string.
Otherwise the return value is a Tcl list containing
four elements corresponding to the current <i>baseWidth</i>,
<i>baseHeight</i>, <i>widthInc</i>, and <i>heightInc</i>;  if
<i>window</i> is not currently gridded, then an empty string
is returned.
Note: this command should not be needed very often, since the
<fun>Tk_SetGrid</fun> library procedure and the <b>setGrid</b> option
provide easier access to the same functionality.
</desc>
</commanddef>
<commanddef>
<command><b>wm group</b> <m>window</m> ?<m>pathName</m>?</command>
<desc>If <i>pathName</i> is specified, it gives the path name for the leader of
a group of related windows.  The window manager may use this information,
for example, to unmap all of the windows in a group when the group's
leader is iconified.  <i>PathName</i> may be specified as an empty string to
remove <i>window</i> from any group association.  If <i>pathName</i> is
specified then the command returns an empty string;  otherwise it
returns the path name of <i>window</i>'s current group leader, or an empty
string if <i>window</i> isn't part of any group.
</desc>
</commanddef>
<commanddef>
<command><b>wm iconbitmap</b> <m>window</m> ?<m>bitmap</m>?</command>
<desc>If <i>bitmap</i> is specified, then it names a bitmap in the standard
forms accepted by Tk (see the <fun>Tk_GetBitmap</fun> manual entry for details).
This bitmap is passed to the window manager to be displayed in
<i>window</i>'s icon, and the command returns an empty string.  If
an empty string is specified for <i>bitmap</i>, then any current icon
bitmap is cancelled for <i>window</i>.
If <i>bitmap</i> is specified then the command returns an empty string.
Otherwise it returns the name of
the current icon bitmap associated with <i>window</i>, or an empty
string if <i>window</i> has no icon bitmap.  On the Windows operating
system, an additional flag is supported: 
<b>wm iconbitmap</b> <i>window</i> ?<b>-default</b>? ?<i>image</i>?.  
If the <b>-default</b>
flag is given, the icon is applied to all toplevel windows (existing
and future) to which no other specific icon has yet been applied.
In addition to bitmap image types, a full path specification to
any file which contains a valid
Windows icon is also accepted (usually .ico or .icr files), or any
file for which the shell has assigned an icon.  Tcl will
first test if the file contains an icon, then if it has an assigned
icon, and finally, if that fails, test for
a bitmap.
</desc>
</commanddef>
<commanddef>
<command><b>wm iconify</b> <m>window</m></command>
<desc>Arrange for <i>window</i> to be iconified.  It <i>window</i> hasn't
yet been mapped for the first time, this command will arrange for
it to appear in the iconified state when it is eventually mapped.
</desc>
</commanddef>
<commanddef>
<command><b>wm iconmask</b> <m>window</m> ?<m>bitmap</m>?</command>
<desc>If <i>bitmap</i> is specified, then it names a bitmap in the standard
forms accepted by Tk (see the <fun>Tk_GetBitmap</fun> manual entry for details).
This bitmap is passed to the window manager to be used as a mask
in conjunction with the <b>iconbitmap</b> option:  where the mask
has zeroes no icon will be displayed;  where it has ones, the bits
from the icon bitmap will be displayed.  If
an empty string is specified for <i>bitmap</i> then any current icon
mask is cancelled for <i>window</i> (this is equivalent to specifying
a bitmap of all ones).  If <i>bitmap</i> is specified
then the command returns an empty string.  Otherwise it
returns the name of the current icon mask associated with
<i>window</i>, or an empty string if no mask is in effect.
</desc>
</commanddef>
<commanddef>
<command><b>wm iconname</b> <m>window</m> ?<m>newName</m>?</command>
<desc>If <i>newName</i> is specified, then it is passed to the window
manager;  the window manager should display <i>newName</i> inside
the icon associated with <i>window</i>.  In this case an empty
string is returned as result.  If <i>newName</i> isn't specified
then the command returns the current icon name for <i>window</i>,
or an empty string if no icon name has been specified (in this
case the window manager will normally display the window's title,
as specified with the <b>wm title</b> command).
</desc>
</commanddef>
<commanddef version="8.5">
<command><b>wm iconphoto</b> <m>window</m> ?<b>-default</b>? <m>image1</m> ?<m>image2 ...</m>?</command>
<desc><p>Sets the titlebar icon for <i>window</i> based on the named photo images.
If <b>-default</b> is specified, this is applied to all future created
toplevels as well.  The data in the images is taken as a snapshot at the
time of invocation.  If the images are later changed, this is not
reflected to the titlebar icons.  Multiple images are accepted to allow
different images sizes (e.g., 16x16 and 32x32) to be provided. The window
manager may scale provided icons to an appropriate size.
</p><p>On Windows, the images are packed into a Windows icon structure.
This will override an ico specified to <b>wm iconbitmap</b>, and
vice versa.
</p><p>On X, the images are arranged into the _NET_WM_ICON X property, which
most modern window managers support.  A <b>wm iconbitmap</b> may exist
simultaneously.  It is recommended to use not more than 2 icons, placing
the larger icon first.
</p><p>On Macintosh, this currently does nothing.
</p></desc>
</commanddef>
<commanddef>
<command><b>wm iconposition</b> <m>window</m> ?<m>x y</m>?</command>
<desc>If <i>x</i> and <i>y</i> are specified, they are passed to the window
manager as a hint about where to position the icon for <i>window</i>.
In this case an empty string is returned.  If <i>x</i> and <i>y</i> are
specified as empty strings then any existing icon position hint is cancelled.
If neither <i>x</i> nor <i>y</i> is specified, then the command returns
a Tcl list containing two values, which are the current icon position
hints (if no hints are in effect then an empty string is returned).
</desc>
</commanddef>
<commanddef>
<command><b>wm iconwindow</b> <m>window</m> ?<m>pathName</m>?</command>
<desc>If <i>pathName</i> is specified, it is the path name for a window to
use as icon for <i>window</i>: when <i>window</i> is iconified then
<i>pathName</i> will be mapped to serve as icon, and when <i>window</i>
is de-iconified then <i>pathName</i> will be unmapped again.  If
<i>pathName</i> is specified as an empty string then any existing
icon window association for <i>window</i> will be cancelled.  If
the <i>pathName</i> argument is specified then an empty string is
returned.  Otherwise the command returns the path name of the
current icon window for <i>window</i>, or an empty string if there
is no icon window currently specified for <i>window</i>.
Button press events are disabled for <i>window</i> as long as it is
an icon window;  this is needed in order to allow window managers
to ``own'' those events.
Note: not all window managers support the notion of an icon window.
</desc>
</commanddef>
<commanddef>
<command><b>wm maxsize</b> <m>window</m> ?<m>width height</m>?</command>
<desc>If <i>width</i> and <i>height</i> are specified, they give
the maximum permissible dimensions for <i>window</i>.
For gridded windows the dimensions are specified in
grid units;  otherwise they are specified in pixel units.
The window manager will restrict the window's dimensions to be
less than or equal to <i>width</i> and <i>height</i>.
If <i>width</i> and <i>height</i> are
specified, then the command returns an empty string.  Otherwise
it returns a Tcl list with two elements, which are the
maximum width and height currently in effect.
The maximum size defaults to the size of the screen.
See the sections on geometry management below for more information.
</desc>
</commanddef>
<commanddef>
<command><b>wm minsize</b> <m>window</m> ?<m>width height</m>?</command>
<desc>If <i>width</i> and <i>height</i> are specified, they give the
minimum permissible dimensions for <i>window</i>.
For gridded windows the dimensions are specified in
grid units;  otherwise they are specified in pixel units.
The window manager will restrict the window's dimensions to be
greater than or equal to <i>width</i> and <i>height</i>.
If <i>width</i> and <i>height</i> are
specified, then the command returns an empty string.  Otherwise
it returns a Tcl list with two elements, which are the
minimum width and height currently in effect.
The minimum size defaults to one pixel in each dimension.
See the sections on geometry management below for more information.
</desc>
</commanddef>
<commanddef>
<command><b>wm overrideredirect</b> <m>window</m> ?<m>boolean</m>?</command>
<desc>If <i>boolean</i> is specified, it must have a proper boolean form and
the override-redirect flag for <i>window</i> is set to that value.
If <i>boolean</i> is not specified then <b>1</b> or <b>0</b> is
returned to indicate whether or not the override-redirect flag
is currently set for <i>window</i>.
Setting the override-redirect flag for a window causes
it to be ignored by the window manager;  among other things, this means
that the window will not be reparented from the root window into a
decorative frame and the user will not be able to manipulate the
window using the normal window manager mechanisms.
</desc>
</commanddef>
<commanddef>
<command><b>wm positionfrom</b> <m>window</m> ?<m>who</m>?</command>
<desc>If <i>who</i> is specified, it must be either <b>program</b> or
<b>user</b>, or an abbreviation of one of these two.  It indicates
whether <i>window</i>'s current position was requested by the
program or by the user.  Many window managers ignore program-requested
initial positions and ask the user to manually position the window;  if
<b>user</b> is specified then the window manager should position the
window at the given place without asking the user for assistance.
If <i>who</i> is specified as an empty string, then the current position
source is cancelled.
If <i>who</i> is specified, then the command returns an empty string.
Otherwise it returns <b>user</b> or <b>program</b> to indicate the
source of the window's current position, or an empty string if
no source has been specified yet.  Most window managers interpret
``no source'' as equivalent to <b>program</b>.
Tk will automatically set the position source to <b>user</b>
when a <b>wm geometry</b> command is invoked, unless the source has
been set explicitly to <b>program</b>.
</desc>
</commanddef>
<commanddef>
<command><b>wm protocol</b> <m>window</m> ?<m>name</m>? ?<m>command</m>?</command>
<desc>This command is used to manage window manager protocols such as
<b>WM_DELETE_WINDOW</b>.
<i>Name</i> is the name of an atom corresponding to a window manager
protocol, such as <b>WM_DELETE_WINDOW</b> or <b>WM_SAVE_YOURSELF</b>
or <b>WM_TAKE_FOCUS</b>.
If both <i>name</i> and <i>command</i> are specified, then <i>command</i>
is associated with the protocol specified by <i>name</i>.
<i>Name</i> will be added to <i>window</i>'s <b>WM_PROTOCOLS</b>
property to tell the window manager that the application has a
protocol handler for <i>name</i>, and <i>command</i> will
be invoked in the future whenever the window manager sends a
message to the client for that protocol.
In this case the command returns an empty string.
If <i>name</i> is specified but <i>command</i> isn't, then the current
command for <i>name</i> is returned, or an empty string if there
is no handler defined for <i>name</i>.
If <i>command</i> is specified as an empty string then the current
handler for <i>name</i> is deleted and it is removed from the
<b>WM_PROTOCOLS</b> property on <i>window</i>;  an empty string is
returned.
Lastly, if neither <i>name</i> nor <i>command</i> is specified, the
command returns a list of all the protocols for which handlers
are currently defined for <i>window</i>.
<p>Tk always defines a protocol handler for <b>WM_DELETE_WINDOW</b>, even if
you haven't asked for one with <b>wm protocol</b>.
If a <b>WM_DELETE_WINDOW</b> message arrives when you haven't defined
a handler, then Tk handles the message by destroying the window for
which it was received.
</p></desc>
</commanddef>
<commanddef>
<command><b>wm resizable</b> <m>window</m> ?<m>width height</m>?</command>
<desc>This command controls whether or not the user may interactively
resize a top-level window.  If <i>width</i> and <i>height</i> are
specified, they are boolean values that determine whether the
width and height of <i>window</i> may be modified by the user.
In this case the command returns an empty string.
If <i>width</i> and <i>height</i> are omitted then the command
returns a list with two 0/1 elements that indicate whether the
width and height of <i>window</i> are currently resizable.
By default, windows are resizable in both dimensions.
If resizing is disabled, then the window's size will be the size
from the most recent interactive resize or <b>wm geometry</b>
command.  If there has been no such operation then
the window's natural size will be used.
</desc>
</commanddef>
<commanddef>
<command><b>wm sizefrom</b> <m>window</m> ?<m>who</m>?</command>
<desc>If <i>who</i> is specified, it must be either <b>program</b> or
<b>user</b>, or an abbreviation of one of these two.  It indicates
whether <i>window</i>'s current size was requested by the
program or by the user.  Some window managers ignore program-requested
sizes and ask the user to manually size the window;  if
<b>user</b> is specified then the window manager should give the
window its specified size without asking the user for assistance.
If <i>who</i> is specified as an empty string, then the current size
source is cancelled.
If <i>who</i> is specified, then the command returns an empty string.
Otherwise it returns <b>user</b> or <b cat="canvasitemtype">window</b> to indicate the
source of the window's current size, or an empty string if
no source has been specified yet.  Most window managers interpret
``no source'' as equivalent to <b>program</b>.
</desc>
</commanddef>
<commanddef>
<command><b>wm stackorder</b> <m>window</m> ?<m>isabove|isbelow window</m>?</command>
<desc>The stackorder command returns a list of toplevel windows
in stacking order, from lowest to highest. When a single toplevel
window is passed, the returned list recursively includes all of the
window's children that are toplevels. Only those toplevels
that are currently mapped to the screen are returned.
The stackorder command can also be used to determine if one
toplevel is positioned above or below a second toplevel.
When two window arguments separated by either <i>isabove</i> or
<i>isbelow</i> are passed, a boolean result indicates whether
or not the first window is currently above or below the second
window in the stacking order.
</desc>
</commanddef>
<commanddef>
<command><b>wm state</b> <m>window</m> ?newstate?</command>
<desc>If <i>newstate</i> is specified, the window will be set to the new state,
otherwise it returns the current state of <i>window</i>: either
<b>normal</b>, <b>iconic</b>, <b>withdrawn</b>, <b>icon</b>, or (Windows and Mac
OS X only) <b>zoomed</b>.
The difference between <b>iconic</b> and <b>icon</b> is that
<b>iconic</b> refers to a window that has been iconified (e.g., with the
<b>wm iconify</b> command) while <b>icon</b> refers to a window whose only
purpose is to serve as the icon for some other window (via the <b>wm
iconwindow</b> command).  The <b>icon</b> state cannot be set.
</desc>
</commanddef>
<commanddef>
<command><b>wm title</b> <m>window</m> ?<m>string</m>?</command>
<desc>If <i>string</i> is specified, then it will be passed to the window
manager for use as the title for <i>window</i> (the window manager
should display this string in <i>window</i>'s title bar).  In this
case the command returns an empty string.  If <i>string</i> isn't
specified then the command returns the current title for the
<i>window</i>.  The title for a window defaults to its name.
</desc>
</commanddef>
<commanddef>
<command><b>wm transient</b> <m>window</m> ?<m>master</m>?</command>
<desc>If <i>master</i> is specified, then the window manager is informed
that <i>window</i> is a transient window (e.g. pull-down menu) working
on behalf of <i>master</i> (where <i>master</i> is the
path name for a top-level window).  If <i>master</i>
is specified as an empty string then <i>window</i> is marked as not
being a transient window any more.  Otherwise the command
returns the path name of <i>window</i>'s current master, or an
empty string if <i>window</i> isn't currently a transient window.
A transient window will mirror state changes in the master and
inherit the state of the master when initially mapped. It is an
error to attempt to make a window a transient of itself.
</desc>
</commanddef>
<commanddef>
<command><b>wm withdraw</b> <m>window</m></command>
<desc>Arranges for <i>window</i> to be withdrawn from the screen.  This
causes the window to be unmapped and forgotten about by the window
manager.  If the window
has never been mapped, then this command
causes the window to be mapped in the withdrawn state.  Not all
window managers appear to know how to handle windows that are
mapped in the withdrawn state.
Note: it sometimes seems to be necessary to withdraw a
window and then re-map it (e.g. with <b>wm deiconify</b>) to get some
window managers to pay attention to changes in window attributes
such as group.
</desc>
</commanddef>
</commandlist>
</section>
<section>
<title>GEOMETRY MANAGEMENT</title>
<p>By default a top-level window appears on the screen in its
<i>natural size</i>, which is the one determined internally by its
widgets and geometry managers.
If the natural size of a top-level window changes, then the window's size
changes to match.
A top-level window can be given a size other than its natural size in two ways.
First, the user can resize the window manually using the facilities
of the window manager, such as resize handles.
Second, the application can request a particular size for a
top-level window using the <b>wm geometry</b> command.
These two cases are handled identically by Tk;  in either case,
the requested size overrides the natural size.
You can return the window to its natural by invoking <b>wm geometry</b>
with an empty <i>geometry</i> string.
</p>
<p>Normally a top-level window can have any size from one pixel in each
dimension up to the size of its screen.
However, you can use the <b>wm minsize</b> and <b>wm maxsize</b> commands
to limit the range of allowable sizes.
The range set by <b>wm minsize</b> and <b>wm maxsize</b> applies to
all forms of resizing, including the window's natural size as
well as manual resizes and the <b>wm geometry</b> command.
You can also use the command <b>wm resizable</b> to completely
disable interactive resizing in one or both dimensions.
</p>
</section>
<section id="gridded-geometry-management">
<title>GRIDDED GEOMETRY MANAGEMENT</title>
<p>Gridded geometry management occurs when one of the widgets of an
application supports a range of useful sizes.
This occurs, for example, in a text editor where the scrollbars,
menus, and other adornments are fixed in size but the edit widget
can support any number of lines of text or characters per line.
In this case, it is usually desirable to let the user specify the
number of lines or characters-per-line, either with the
<b>wm geometry</b> command or by interactively resizing the window.
In the case of text, and in other interesting cases also, only
discrete sizes of the window make sense, such as integral numbers
of lines and characters-per-line;  arbitrary pixel sizes are not useful.
</p>
<p>Gridded geometry management provides support for this kind of
application.
Tk (and the window manager) assume that there is a grid of some
sort within the application and that the application should be
resized in terms of <i>grid units</i> rather than pixels.
Gridded geometry management is typically invoked by turning on
the <b>setGrid</b> option for a widget;  it can also be invoked
with the <b>wm grid</b> command or by calling <fun>Tk_SetGrid</fun>.
In each of these approaches the particular widget (or sometimes
code in the application as a whole) specifies the relationship between 
integral grid sizes for the window and pixel sizes.
To return to non-gridded geometry management, invoke
<b>wm grid</b> with empty argument strings.
</p>
<p>When gridded geometry management is enabled then all the dimensions specified
in <b>wm minsize</b>, <b>wm maxsize</b>, and <b>wm geometry</b> commands
are treated as grid units rather than pixel units.
Interactive resizing is also carried out in even numbers of grid units
rather than pixels.
</p>
</section>
<section>
<title>BUGS</title>
<p>Most existing window managers appear to have bugs that affect the
operation of the <cmd>wm</cmd> command.  For example, some changes won't
take effect if the window is already active:  the window will have
to be withdrawn and de-iconified in order to make the change happen.
</p>
</section>
<section>
<title>EXAMPLES</title>
<p>A fixed-size window that says that it is fixed-size too:
</p>
<example>
toplevel .fixed
<b>wm title</b>     .fixed "Fixed-size Window"
<b>wm resizable</b> .fixed 0 0
</example>
<p>A simple dialog-like window, centred on the screen:
</p>
<example>
# Create and arrange the dialog contents.
toplevel .msg
label  .msg.l  -text "This is a very simple dialog demo."
button .msg.ok -text OK -default active -command {destroy .msg}
pack .msg.ok -side bottom -fill x
pack .msg.l  -expand 1    -fill both

# Now set the widget up as a centred dialog.

# But first, we need the geometry managers to finish setting
# up the interior of the dialog, for which we need to run the
# event loop with the widget hidden completely...
<b>wm withdraw</b> .msg
update
set x [expr {([winfo screenwidth .]-[winfo width .msg])/2}]
set y [expr {([winfo screenheight .]-[winfo height .msg])/2}]
<b>wm geometry</b>  .msg +$x+$y
<b>wm transient</b> .msg .
<b>wm title</b>     .msg "Dialog demo"
<b>wm deiconify</b> .msg
</example>
</section>
<seealso>
<ref>toplevel(n)</ref>
<ref>winfo(n)</ref>
</seealso>
<keywords>
<keyword>aspect ratio</keyword>
<keyword>deiconify</keyword>
<keyword>focus model</keyword>
<keyword>geometry</keyword>
<keyword>grid</keyword>
<keyword>group</keyword>
<keyword>icon</keyword>
<keyword>iconify</keyword>
<keyword>increments</keyword>
<keyword>position</keyword>
<keyword>size</keyword>
<keyword>title</keyword>
<keyword>top-level window</keyword>
<keyword>units</keyword>
<keyword>window manager</keyword>
</keywords>
</manpage>
<manpage cat="fun" id="WrongNumArgs" title="Tcl_WrongNumArgs" version="8.0">
<!-- This file was automatically generated.  DO NOT EDIT (yet)! -->
<!-- 
     Copyright (c) 1994-1997 Sun Microsystems, Inc.
    
     See the file "license.terms" for information on usage and redistribution
     of this file, and for a DISCLAIMER OF ALL WARRANTIES.
     
     RCS: @(#) $Id: WrongNumArgs.3,v 1.8 2004/10/07 15:15:48 dkf Exp $
 -->
<?TROFF.TH title="Tcl_WrongNumArgs" section="3" date="8.0" source="Tcl" manual="Tcl Library Procedures" ?>
<namesection>
<name>Tcl_WrongNumArgs</name>
<desc>generate standard error message for wrong number of arguments</desc>
</namesection>
<synopsis>
<syntax>
<b>#include &lt;tcl.h&gt;</b>

<fun>Tcl_WrongNumArgs</fun>(<m>interp</m>, <m>objc</m>, <m>objv</m>, <m>message</m>)
</syntax>
</synopsis>
<section>
<title>ARGUMENTS</title>
<arglist>
<argdef>
<argtype>Tcl_Interp</argtype>
<name>interp</name>
<argmode>in</argmode>
<desc>Interpreter in which error will be reported: error message gets stored
in its result object.
</desc>
</argdef>
<argdef>
<argtype>int</argtype>
<name>objc</name>
<argmode>in</argmode>
<desc>Number of leading arguments from <i>objv</i> to include in error
message.
</desc>
</argdef>
<argdef>
<argtype>Tcl_Obj *const</argtype>
<name name="objv">objv[]</name>
<argmode>in</argmode>
<desc>Arguments to command that had the wrong number of arguments.
</desc>
</argdef>
<argdef>
<argtype>const char</argtype>
<name name="message">*message</name>
<argmode>in</argmode>
<desc>Additional error information to print after leading arguments
from <i>objv</i>.  This typically gives the acceptable syntax
of the command.  This argument may be NULL.
</desc>
</argdef>
</arglist>
</section>


<section>
<title>DESCRIPTION</title>
<p><fun>Tcl_WrongNumArgs</fun> is a utility procedure that is invoked by
command procedures when they discover that they have received the
wrong number of arguments.  <fun>Tcl_WrongNumArgs</fun> generates a
standard error message and stores it in the result object of
<i>interp</i>.  The message includes the <i>objc</i> initial
elements of <i>objv</i> plus <i>message</i>.  For example, if
<i>objv</i> consists of the values <b>foo</b> and <b>bar</b>,
<i>objc</i> is 1, and <i>message</i> is ``<b>fileName count</b>''
then <i>interp</i>'s result object will be set to the following
string:
</p>
<example>
wrong # args: should be "foo fileName count"
</example>
<p>If <i>objc</i> is 2, the result will be set to the following string:
</p>
<example>
wrong # args: should be "foo bar fileName count"
</example>
<p><i>Objc</i> is usually 1, but may be 2 or more for commands like
<b cat="AMBIGUOUS ambiguous cmd">string</b> and the Tk widget commands, which use the first argument
as a subcommand.  
</p>
<p>Some of the objects in the <i>objv</i> array may be abbreviations for
a subcommand.  The command
<fun>Tcl_GetIndexFromObj</fun> will convert the abbreviated string object
into an <i>indexObject</i>.  If an error occurs in the parsing of the
subcommand we would like to use the full subcommand name rather than
the abbreviation.  If the <fun>Tcl_WrongNumArgs</fun> command finds any
<i>indexObjects</i> in the <i>objv</i> array it will use the full subcommand
name in the error message instead of the abbreviated name that was
originally passed in.  Using the above example, let us assume that
<i>bar</i> is actually an abbreviation for <i>barfly</i> and the object
is now an indexObject because it was passed to
<fun>Tcl_GetIndexFromObj</fun>.  In this case the error message would be:
</p>
<example>
wrong # args: should be "foo barfly fileName count"
</example>


</section>
<seealso>
<ref>Tcl_GetIndexFromObj</ref>
</seealso>
<keywords>
<keyword>command</keyword>
<keyword>error message</keyword>
<keyword>wrong number of arguments</keyword>
</keywords>
</manpage>
</manpages>